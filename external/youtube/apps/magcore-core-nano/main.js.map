{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/js/modules/kernel/core.manager.js","webpack:///./src/js/modules/kernel/plugin.loader.js","webpack:///./node_modules/cjs-emitter/index.js","webpack:///./src/js/modules/system/task.manager.js","webpack:///./src/js/modules/kernel/core.js","webpack:///./node_modules/cjs-async/parallel.js","webpack:///./src/js/modules/system/system.js","webpack:///./src/js/modules/tools/config.js","webpack:///./src/js/components/splash.js","webpack:///./src/js/modules/system/api.js","webpack:///./src/js/modules/system/intent.manager.js","webpack:///./src/js/modules/system/platform.event.js","webpack:///./src/js/modules/platforms/mag/environment.js","webpack:///./src/js/modules/system/storage.js","webpack:///./src/js/modules/platforms/mag/storage.js","webpack:///./src/js/modules/system/event.forwarder.js","webpack:///./node_modules/spa-keyboard-event-parser/index.js","webpack:///./src/js/modules/platforms/mag/utils.js","webpack:///./src/js/modules/system/init.js","webpack:///./src/js/main.js","webpack:///./node_modules/cjs-parse-query/index.js","webpack:///./src/js/modules/system/environment.js","webpack:///./src/js/modules/tools/iframe.factory.js","webpack:///./src/js/modules/platforms/mag/api.js","webpack:///./node_modules/stb-referrer/index.js","webpack:///./node_modules/cjs-query/index.js","webpack:///./src/js/modules/system/intent.js","webpack:////home/harry/appGit/magcore-my-fork/config.js","webpack:///./src/js/modules/platforms/mag/event.js","webpack:///./src/js/components/widget.js","webpack:///./src/js/components/component.js","webpack:///./src/js/modules/system/shims.js","webpack:///./src/js/modules/platforms/mag/shims.js","webpack:///./node_modules/stb-shim-classlist/index.js","webpack:///./src/js/css.js","webpack:///./node_modules/cjs-async/index.js","webpack:///./node_modules/cjs-async/serial.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","Core","coreList","windowList","windowToCoreMap","core","getInstance","appWindow","index","this","indexOf","addListener","applicationState","visible","focused","push","configurable","writable","window","top","destroy","plugins","keys","keysSize","iterator","length","undefined","parallel","Storage","loaded","pluginLoader","basePath","load","getPluginStorage","storage","resolveDependency","dependency","callback","onReady","xhr","instance","loading","dependents","path","packageName","XMLHttpRequest","url","version","main","open","onload","dependedant","id","Function","responseText","executeFunction","shift","send","config","loaders","dependencies","forEach","packageMap","done","loadDependency","innerDependency","dependencyReady","error","results","Emitter","events","once","self","onceWrapper","removeListener","apply","arguments","addListeners","callbacks","filter","fn","emit","event","Array","slice","constructor","screenHeightPx","screenHeight","screenWidth","maxAppsCounter","iframeFactory","eventForwarder","splash","system","$sandboxFrame","coreManager","intentManager","lockedState","currentTaskIndex","coreCall","action","activeFocusedOsd","taskInstance","taskManager","apps","pid","params","focusedApp","type","close","runHistory","splice","active","hide","show","$iframe","contentWindow","focus","item","home","onready","hideAll","osdStack","style","zIndex","task","osdIndex","frames","document","activeElement","body","topApp","launcher","isVisible","height","blurOsd","exit","source","SOURCES","SYSTEM","dispatchEventToActiveApp","customEvent","target","appTarget","createEvent","initEvent","bubbles","cancelable","contentDocument","elementFromPoint","clientX","clientY","dispatchEvent","redirectTo","location","href","fullfillCoreObject","getItem","set","setItem","data","stack","daemons","launchers","homeConfig","applicationToShow","onDoneCallback","meta","LAUNCHER","osdTask","pop","forceLauncher","stackIndex","size","lastRoute","intent","receiver","JSON","parse","stringify","replaceActionsConfig","removeChild","reset","runApp","runFromLauncher","referrer","metrics","taskIndex","legacy","encodeURIComponent","options","stalkerHost","stalkerLoaderPath","locked","accessControl","omitLock","ignoreAccessControl","setTimeout","request","showSplash","app","checkApp","$container","width","left","addEventListener","eventName","keyCode","preventDefault","resolveDependencies","ready","onerror","indexes","visibile","init","head","appendChild","createElement","textContent","parent","opener","getCoreInstance","lockApp","appConfig","cfg","appIndex","setHomeApp","homeAppConfig","killAll","ignoredWindow","forceFlush","setLauncher","targetWindow","screen","sources","notificationStack","$widget","notify","timeout","buttons","click","isArray","unshift","innerText","title","display","textAlign","background","color","lineHeight","position","theme","environment","exception","applicationConfig","plugin","onAppInit","apiVersion","parseInt","gSTB","Version","split","extendCorePrototype","parentNode","tasks","isError","counter","result","Error","deviceModelName","currentPlatform","model","useVersions","MAJOR_VERSION","MINOR_VERSION","PATCH_VERSION","normalizeAppConfig","globalOptions","protocol","icon","appsPackagesPath","versions","map","urlParts","uris","pluginsPath","join","entry","fixUris","Boolean","icons","colors","splashFont","splashBackground","validVersion","required","Number","isNativePlatform","customModel","models","platforms","exclude","GetDeviceImageVersionCurrent","GetDeviceModelExt","GetDeviceModel","systemSettings","settings","args","allDone","languages","configPath","status","ontimeout","remoteConfig","localConfig","themes","appId","$anchor","overriddenAppList","overriddenAppMap","ignoreVersions","overriddenAppConfig","themePath","replace","themeVars","prepareConfig","err","$nodes","getElementsByClassName","classList","remove","backgroundImage","logoActive","backgroundColor","splashAppName","splashAppVersion","className","removeAttribute","api","platformApi","Intent","systemConfig","intentMap","hooks","intentRouter","route","callerCoreInstance","selfCall","runConfig","handlerList","context","state","STATE_NOT_RESOLVED","STATE_RESOLVED","creator","hookCallback","STATE_PAUSED","continueCallback","runnerConfig","STATE_ERROR_RECEIVED","STATE_CONTEXT_RECEIVED","closeApplication","INTENT","findIntentHandlers","silent","restoreApplication","mime","actions","resolveActionsConfig","actionsSize","oldConfig","newConfig","addHook","addIntentHook","platformEvent","GetEnv","varList","language","availableLanguages","list","RDir","specificLanguages","estoninan","code","latvian","decodeURIComponent","escape","hdmi_event_delay","SetEnv","defaultLedLevel","standbyLedLevel","audioPrimaryLanguage","audioSecondaryLanguage","subtitlesPrimaryLanguage","subtitlesSecondaryLanguage","auto_framerate","onFocusDebounceTimeout","originJson","filename","LoadUserData","uid","store","originJSON","prefix","serialazedData","json","SaveUserData","platformKeydownEventHandler","eventData","appCore","keydown","eventCode","ctrlKey","altKey","shiftKey","debug","Debug","reboot","ExecAction","reload","currentWinId","stbWebWindow","windowId","stbWindowMgr","Stop","stbPlayerManager","closeWindow","stbStorage","clear","windowLoad","runNativeApp","applicationId","stbAppManager","isInstalled","start","async","loadCss","ignoreDone","showStartApplication","$link","innerHeight","daemon","rel","innerHTML","overflow","firstChild","tabIndex","cssText","dvbManager","epgManager","pvrManager","stbDownloadManager","stbUpdate","stbUPnP","timeShift","widget","queryParameters","search","substring","packages","MODE_PORTAL","MODE_STALKER","MODE","getCoreInstanse","updatePackages","authorizerInstance","authorizer","buildDate","backendHost","stalkerApiPath","stalkerAuthPath","pingTimeout","sap","dependencyManager","vars","onInit","daemonLoaded","stop","unload","visibilityState","packagePath","host","pathname","hash","query","part","defaultParams","innerWidth","hideIframe","showIframe","testRequest","src","alert","stbEvent","inputLanguage","lang","SetInputLang","GetHashVersion1","GetUID","serialNumber","GetDeviceSerialNumber","vendor","GetDeviceVendor","versionHardware","GetDeviceVersionHardware","activeBank","GetDeviceActiveBank","imageDescription","GetDeviceImageDesc","imageVersion","GetDeviceImageVersion","imageVersionCurrent","mac","GetDeviceMacAddress","memory","queryParams","STATE_CREATED","STATE_CLOSED","pause","savedstate","resume","author","email","license","order","resolutions","onEvent","info","onBroadcastMessage","message","broadcast","onMessage","onMediaAvailable","onNetworkStateChange","onWebBrowserProgress","progress","onWindowActivated","SetNativeStringMode","Component","widgetClassIndex","Widget","focusable","$node","activeComponent","$body","children","propagate","add","defaultEvents","stopPropagation","child","blur","documentElement","DOMTokenList","el","_element","_classCache","classes","token","contains","toString","toggle","Element","link","serial","handler"],"mappings":"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AtM,KAAAE,UAAA,CAAqDqM,QAAA,CACrD,aACA,aACA,gBACA,aACA,gBACA,uBACA,oBACA,iBACA,gBACA,kBACA,kBACA,eACA,kBACA,WACA,cACA,aACA,mBACA,mBACA,iBACA,WACA,iBACA,cACA,aACA,cACA,aACA,cACA,kBACA,YACA,iBACA,gBACA,eACA,aACA,mBACA,cACA,mBACA,iBACA,aACA,cACA,UACA,SACA,QACA,UACA,UACA,WACA,YACA,eACA,gBACA,uBACA,yBACA,2BACA,6BACA,gBACA,SACA,UACA,UACA,kBACA,YACA,oBACA,MACA,YACA,cACA,YACA,YACA,WACA,WACA,gBACA,eACA,cACA,gBACA,cACA,mBACA,eACA,WACA,cACA,QACA,gBACA,cACA,aACA,aACA,mBACA,oBACA,gBACA,qBACA,wBACA,uBACA,yBACA,mBACA,wBACA,mBACA,gBACA,gBACA,gBACA,gBACA,YACA,WACA,UACA,QACA,iCAIA,IAEA5H,GADAA,EAAA3E,KAAAC,MAAA0E,IACAe,OACC,MAAAxM,GACDyL,EAAA,GAGAA,EAAA6H,SAAA7H,EAAA6H,UAAA,KAEA7H,EAAA8H,mBAAA,GAEA,WAgBA,IAfA,IAYAD,EAAAjZ,EAZAgC,EAAA,EACAmX,EAAAxH,KAAAyH,KAAA,oCAAAvH,MAAA,MACAwH,EAAA,CACAC,UAAA,CACAC,KAAA,KACAvZ,KAAA,yBAEAwZ,QAAA,CACAD,KAAA,KACAvZ,KAAA,uBAMAgC,EAAAmX,EAAAlW,QACA,KAAAkW,EAAAnX,KAEAiX,EAAAE,EAAAnX,GAAA6P,MAAA,KAIA7R,EAAAyZ,mBAAAC,OAAAT,EAAA,MACAA,IAAA,MAGAI,EAAAC,UAAAC,OACAF,EAAAC,WAAA,GAGAL,IAAAI,EAAAG,QAAAD,OACAF,EAAAG,SAAA,GAGApI,EAAA8H,mBAAA3W,KAAA,CACAgX,KAAAN,EACAjZ,YAGAgC,EAGAqX,EAAAG,SACApI,EAAA8H,mBAAA3W,KAAA8W,EAAAG,SAGAH,EAAAC,WACAlI,EAAA8H,mBAAA3W,KAAA8W,EAAAC,WAhDA,GAqDA,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","file":"main.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 19);\n","'use strict';\n\nvar Core = require('./core');\n\n/* eslint no-invalid-this: 0 */\nmodule.exports = {\n    // save created core for each app\n    coreList: [],\n    windowList: [],\n\n    windowToCoreMap: {},\n    core: {},\n\n    getInstance: function ( appWindow ) {\n        var self = this,\n            index = self.windowList.indexOf(appWindow),\n            core;\n\n        if ( index === -1 ) {\n            core = new Core();\n            core.addListener('hide', function () {\n                if ( DEVELOP ) {\n                    debug('application')(appWindow.location.href + ' state visible = false');\n                }\n                this.applicationState.visible = false;\n            });\n            core.addListener('show', function () {\n                if ( DEVELOP ) {\n                    debug('application')(appWindow.location.href + ' state visible = true');\n                }\n                this.applicationState.visible = true;\n            });\n            core.addListener('focus', function () {\n                if ( DEVELOP ) {\n                    debug('application')(appWindow.location.href + ' state focused = true');\n                }\n                this.applicationState.focused = true;\n            });\n            core.addListener('blur', function () {\n                if ( DEVELOP ) {\n                    debug('application')(appWindow.location.href + ' state focused = false');\n                }\n                this.applicationState.focused = false;\n            });\n\n            Object.defineProperty(core, 'index', {\n                value: self.coreList.push(core) - 1,\n                configurable: false,\n                enumerable: false,\n                writable: false\n            });\n\n            self.windowToCoreMap[this.windowList.push(appWindow) - 1] = core.index;\n        } else {\n            core = self.coreList[this.windowToCoreMap[index]];\n        }\n\n        window.top.coreList = this.coreList;\n        window.top.windowList = this.windowList;\n        window.top.windowToCoreMap = this.windowToCoreMap;\n\n        return core;\n    },\n\n    destroy: function ( appWindow ) {\n        var index = this.windowList.indexOf(appWindow),\n            iterator = 0,\n            plugins, keys, keysSize;\n\n        if ( DEVELOP ) {\n            if ( appWindow && appWindow.location && appWindow.location.href ) {\n                debug('core')(appWindow.location.href + ' destroying');\n            }\n        }\n\n        if ( index !== -1 ) {\n            plugins = this.coreList[this.windowToCoreMap[index]].plugins;\n            keys = Object.keys(plugins);\n            keysSize = keys.length;\n\n            while ( iterator < keysSize ) {\n                if ( typeof plugins[keys[iterator]].destroy === 'function' ) {\n                    plugins[keys[iterator]].destroy();\n                }\n                ++iterator;\n            }\n\n            this.coreList[this.windowToCoreMap[index]] = undefined;\n            this.windowToCoreMap[this.windowToCoreMap[index]] = undefined;\n            this.windowList[index] = undefined;\n\n            return true;\n        }\n\n        return false;\n    }\n};\n","'use strict';\n\n/* eslint: 0 */\nvar parallel = require('cjs-async/parallel'),\n    Storage = require('../system/storage'),\n    loaded = {\n        // example of future structure\n        // plugin package name: {\n        //     version: instance\n        // }\n    },\n    pluginLoader = {\n        basePath: '',\n        load: null,\n\n        getPluginStorage: function ( name ) {\n            if ( DEVELOP ) {\n                debug('plugin')('resolve storage with name: ' + name);\n            }\n\n            return loaded[name].storage;\n        }\n    };\n\n\nfunction resolveDependency ( dependency, callback, onReady ) {\n    var xhr;\n\n\n    if ( loaded[dependency.name] && loaded[dependency.name].instance ) {\n        if ( DEVELOP ) {\n            debug('plugin')('resolve already loaded plugin ' + dependency.name);\n        }\n\n        if ( onReady ) {\n            onReady(null, loaded[dependency.name]);\n        }\n\n        callback(null, loaded[dependency.name]);\n    } else if ( loaded[dependency.name] && loaded[dependency.name].loading ) {\n\n        if ( loaded[dependency.name].dependents === null ) {\n            loaded[dependency.name].dependents = [];\n        }\n\n        if ( DEVELOP ) {\n            debug('plugin')('wait for plugin ' + dependency.name);\n        }\n\n        loaded[dependency.name].dependents.push(function () {\n            if ( DEVELOP ) {\n                debug('plugin')('dependents called for ' + dependency.name);\n            }\n\n            if ( onReady ) {\n                onReady(null, loaded[dependency.name]);\n            }\n\n            callback(null, loaded[dependency.name]);\n        });\n    } else {\n        loaded[dependency.name] = {\n            loading: true,\n            instance: null,\n            dependents: null,\n            name: dependency.name,\n            path: dependency.path,\n            storage: new Storage(dependency.name),\n            packageName: dependency.packageName\n        };\n\n        xhr = new XMLHttpRequest();\n\n        if ( !dependency.url ) {\n            dependency.url = pluginLoader.basePath + '/' + dependency.packageName + '/' + dependency.version + '/' + (dependency.main || 'index.js');\n        }\n\n        if ( DEVELOP ) {\n            debug('plugin')('load js file from ' + dependency.url);\n        }\n\n        xhr.open('GET', dependency.url, true);\n        if ( DEVELOP ) { debug('plugin')('load plugin ' + dependency.url); }\n\n        xhr.onload = function (  ) {\n            var module = {\n                    exports: {},\n                    id: ''\n                },\n                /* eslint no-new-func: 0 */\n                executeFunction = new Function('module', 'exports', 'require', this.responseText + '//# sourceURL=file.js'),\n                dependents, dependedant;\n\n            /* eslint no-empty-function: 0 */\n            if ( DEVELOP ) {\n                debug('plugin')('time to load ' + dependency.name + ' ' + (Date.now() - xhr.time));\n                module.time = Date.now();\n\n                try {\n                    executeFunction(module, module.exports, function () {});\n                } catch ( error ) {\n                    debug('plugin')('exception in ' + dependency.name +  ': ' + error);\n                }\n\n                debug('plugin')('time to eval ' + dependency.name + ' ' + (Date.now() - module.time));\n            } else {\n                executeFunction(module, module.exports, function () {});\n            }\n\n            if ( DEVELOP ) {\n                debug('plugin')('RESOLVED ' + dependency.name);\n            }\n\n            if ( DEVELOP ) {\n                debug('plugin')('EXPORTED ' + dependency.name);\n            }\n            window.core.plugins[dependency.name] = loaded[dependency.name].instance = module.exports;\n            loaded[dependency.name].loading = false;\n\n            if ( onReady ) {\n                onReady(null, loaded[dependency.name]);\n            }\n\n            if ( loaded[dependency.name].dependents !== null && loaded[dependency.name].dependents.length > 0 ) {\n                dependents = loaded[dependency.name].dependents;\n                /* eslint no-cond-assign: 0 */\n                while ( dependedant = dependents.shift() ) {\n                    dependedant();\n                }\n            }\n\n            callback(null, loaded[dependency.name]);\n        };\n\n        if ( DEVELOP ) {\n            xhr.time = Date.now();\n        }\n\n        xhr.send();\n    }\n}\n\nfunction loadDependency ( dependency, callback, onReady ) {\n    var dependencies = null,\n        loaders;\n\n    dependency = window.core.packageMap[dependency];\n    if ( dependency.dependencies ) {\n        dependencies = Object.keys(dependency.dependencies);\n    }\n\n    if ( dependencies !== null && dependencies.length > 0 ) {\n        if ( DEVELOP ) {\n            debug('plugin')('load dependencies for ' + dependency.name);\n        }\n\n        loaders = [];\n        dependencies.forEach(function ( innerDependency ) {\n            if ( window.core.packageMap[innerDependency] ) {\n                loaders.push(function (done) {\n                    loadDependency(innerDependency, done, onReady);\n                });\n            }\n        });\n\n        parallel(loaders, function () {\n            if ( DEVELOP ) {\n                debug('plugin')('try to resolve ' + dependency.name);\n            }\n            resolveDependency(dependency, callback, onReady);\n        });\n    } else {\n        resolveDependency(dependency, callback, onReady);\n    }\n}\n\npluginLoader.load = function ( config ) {\n    var loaders = [];\n\n    if ( config.dependencies ) {\n        config.dependencies = Object.keys(config.dependencies);\n        config.dependencies.forEach(function ( dependency ) {\n            if ( window.core.packageMap[dependency] ) {\n                loaders.push(function ( done ) {\n                    loadDependency(dependency, done, config.dependencyReady);\n                });\n            }\n        });\n\n        parallel(loaders, function ( error, results ) {\n            if ( config.done ) {\n                config.done(error, results);\n            }\n        });\n    } else if ( config.done ) {\n        config.done();\n    }\n};\n\n\nif ( DEVELOP ) {\n    window.core.addListener('keydown:117c', function () {\n        Object.keys(loaded).forEach(function ( dependency ) {\n            debug('plugin')('already loaded: ' + loaded[dependency].packageName);\n        });\n        debug('plugin')('RELOAD ALL NOT IMPLEMENTED YET!!!!!');\n    });\n\n    pluginLoader.loaded = loaded;\n}\n\n\nmodule.exports = pluginLoader;\n","/**\n * @license The MIT License (MIT)\n * @author Stanislav Kalashnik <darkpark.main@gmail.com>\n */\n\n/* eslint no-path-concat: 0 */\n\n'use strict';\n\n\n/**\n * Base Events Emitter implementation.\n *\n * @see http://nodejs.org/api/events.html\n * @constructor\n *\n * @example\n * var emitter = new Emitter();\n */\nfunction Emitter () {\n    console.assert(typeof this === 'object', 'must be constructed via new');\n\n    // if ( DEVELOP ) {\n    //     if ( typeof this !== 'object' ) { throw new Error(__filename + ': must be constructed via new'); }\n    // }\n\n    /**\n     * Inner hash table for event names and linked callbacks.\n     * Manual editing should be avoided.\n     *\n     * @member {Object.<string, function[]>}\n     *\n     * @example\n     * {\n     *     click: [\n     *         function click1 () { ... },\n     *         function click2 () { ... }\n     *     ],\n     *     keydown: [\n     *         function () { ... }\n     *     ]\n     * }\n     **/\n    this.events = {};\n}\n\n\nEmitter.prototype = {\n    /**\n     * Bind an event to the given callback function.\n     * The same callback function can be added multiple times for the same event name.\n     *\n     * @param {string} name event identifier\n     * @param {function} callback function to call on this event\n     *\n     * @example\n     * emitter.addListener('click', function ( data ) { ... });\n     * // one more click handler\n     * emitter.addListener('click', function ( data ) { ... });\n     */\n    addListener: function ( name, callback ) {\n        console.assert(arguments.length === 2, 'wrong arguments number');\n        console.assert(typeof name === 'string', 'wrong name type');\n        console.assert(name.length > 0, 'empty name');\n        console.assert(typeof callback === 'function', 'callback should be a function');\n\n        // if ( DEVELOP ) {\n        //     if ( arguments.length !== 2 ) { throw new Error(__filename + ': wrong arguments number'); }\n        //     if ( typeof name !== 'string' || name.length === 0 ) { throw new Error(__filename + ': wrong or empty name'); }\n        //     if ( typeof callback !== 'function' ) { throw new Error(__filename + ': wrong callback type'); }\n        // }\n\n        // initialization may be required\n        this.events[name] = this.events[name] || [];\n        // append this new event to the list\n        this.events[name].push(callback);\n    },\n\n\n    /**\n     * Add a one time listener for the event.\n     * This listener is invoked only the next time the event is fired, after which it is removed.\n     *\n     * @param {string} name event identifier\n     * @param {function} callback function to call on this event\n     *\n     * @example\n     * emitter.once('click', function ( data ) { ... });\n     */\n    once: function ( name, callback ) {\n        // current execution context\n        var self = this;\n\n        if ( DEVELOP ) {\n            if ( arguments.length !== 2 ) {\n                throw new Error(__filename + ': wrong arguments number');\n            }\n            if ( typeof name !== 'string' || name.length === 0 ) {\n                throw new Error(__filename + ': wrong or empty name');\n            }\n            if ( typeof callback !== 'function' ) {\n                throw new Error(__filename + ': wrong callback type');\n            }\n        }\n\n        // initialization may be required\n        this.events[name] = this.events[name] || [];\n        // append this new event to the list\n        this.events[name].push(function onceWrapper () {\n            self.removeListener(name, onceWrapper);\n            callback.apply(self, arguments);\n        });\n    },\n\n\n    /**\n     * Apply multiple listeners at once.\n     *\n     * @param {Object} callbacks event names with callbacks\n     *\n     * @example\n     * emitter.addListeners({\n     *     click: function ( data ) {},\n     *     close: function ( data ) {}\n     * });\n     */\n    addListeners: function ( callbacks ) {\n        var name;\n\n        if ( DEVELOP ) {\n            if ( arguments.length !== 1 ) {\n                throw new Error(__filename + ': wrong arguments number');\n            }\n            if ( typeof callbacks !== 'object' ) {\n                throw new Error(__filename + ': wrong callbacks type');\n            }\n            if ( Object.keys(callbacks).length === 0 ) {\n                throw new Error(__filename + ': no callbacks given');\n            }\n        }\n\n        for ( name in callbacks ) {\n            if ( callbacks.hasOwnProperty(name) ) {\n                this.addListener(name, callbacks[name]);\n            }\n        }\n    },\n\n\n    /**\n     * Remove all instances of the given callback.\n     *\n     * @param {string} name event identifier\n     * @param {function} callback function to remove\n     *\n     * @example\n     * emitter.removeListener('click', func1);\n     */\n    removeListener: function ( name, callback ) {\n        if ( DEVELOP ) {\n            if ( arguments.length !== 2 ) {\n                throw new Error(__filename + ': wrong arguments number');\n            }\n            if ( typeof name !== 'string' || name.length === 0 ) {\n                throw new Error(__filename + ': wrong or empty name');\n            }\n            if ( typeof callback !== 'function' ) {\n                throw new Error(__filename + ': wrong callback type');\n            }\n            if ( this.events[name] && !Array.isArray(this.events[name]) ) {\n                throw new Error(__filename + ': corrupted inner data');\n            }\n        }\n\n        // the event exists and should have some callbacks\n        if ( this.events[name] ) {\n            // rework the callback list to exclude the given one\n            this.events[name] = this.events[name].filter(function callbacksFilter ( fn ) { return fn !== callback; });\n            // event has no more callbacks so clean it\n            if ( this.events[name].length === 0 ) {\n                // as if there were no listeners at all\n                this.events[name] = undefined;\n            }\n        }\n    },\n\n\n    /**\n     * Remove all callbacks for the given event name.\n     * Without event name clears all events.\n     *\n     * @param {string} [name] event identifier\n     *\n     * @example\n     * emitter.removeAllListeners('click');\n     * emitter.removeAllListeners();\n     *\n     * @deprecated\n     */\n    /*removeAllListeners: function ( name ) {\n        if ( DEVELOP ) {\n            if ( arguments.length !== 0 && (typeof name !== 'string' || name.length === 0) ) {\n                throw new Error(__filename + ': wrong or empty name');\n            }\n        }\n\n        // check input\n        if ( arguments.length === 0 ) {\n            // no arguments so remove everything\n            this.events = {};\n        } else if ( name ) {\n            if ( DEVELOP ) {\n                if ( this.events[name] ) { throw new Error(__filename + ': event is not removed'); }\n            }\n\n            // only name is given so remove all callbacks for the given event\n            // but object structure modification should be avoided\n            this.events[name] = undefined;\n        }\n    },*/\n\n\n    /**\n     * Execute each of the listeners in the given order with the supplied arguments.\n     *\n     * @param {string} name event identifier\n     *\n     * @example\n     * emitter.emit('init');\n     * emitter.emit('click', {src: panel1, dst: panel2});\n     * emitter.emit('load', error, data);\n     *\n     * // it's a good idea to emit event only when there are some listeners\n     * if ( this.events['click'] ) {\n     *     this.emit('click', {event: event});\n     * }\n     */\n    emit: function ( name ) {\n        var event = this.events[name],\n            index;\n\n        if ( DEVELOP ) {\n            if ( arguments.length < 1 ) {\n                throw new Error(__filename + ': wrong arguments number');\n            }\n            if ( typeof name !== 'string' || name.length === 0 ) {\n                throw new Error(__filename + ': wrong or empty name');\n            }\n        }\n\n        // the event exists and should have some callbacks\n        if ( event ) {\n            if ( DEVELOP ) {\n                if ( !Array.isArray(event) ) {\n                    throw new Error(__filename + ': wrong event type');\n                }\n            }\n\n            for ( index = 0; index < event.length; index++ ) {\n                if ( DEVELOP ) {\n                    if ( typeof event[index] !== 'function' ) {\n                        throw new Error(__filename + ': wrong event callback type');\n                    }\n                }\n\n                // invoke the callback with parameters\n                event[index].apply(this, Array.prototype.slice.call(arguments, 1));\n            }\n        }\n    }\n};\n\n\n// correct constructor name\nEmitter.prototype.constructor = Emitter;\n\n\n// public\nmodule.exports = Emitter;\n","'use strict';\n\n//platformApi  = require('./api'),\n\nvar maxAppsCounter = -1,\n    iframeFactory = require('../tools/iframe.factory'),\n    eventForwarder = require('./event.forwarder'),\n    config = require('../tools/config'),\n\n    splash = require('../../components/splash'),\n\n    system = require('./system'),\n\n    Core = require('../kernel/core'),\n\n    $sandboxFrame = null,\n    coreManager = null,\n    intentManager = null,\n    lockedState = null,\n    currentTaskIndex = 0,\n\n    checkApp = function ( params, runFromLauncher, meta ) {\n        var size = config.data.apps.length,\n            index = 0;\n\n        if ( DEVELOP ) {\n            debug('iframe')('checkApp: ' + params.config.url);\n        }\n\n        while ( index < size ) {\n            if ( config.data.apps[index].packageName === params.config.packageName ) {\n                if ( config.data.apps[index].locked && window.core.accessControl && !params.omitLock ) {\n                    if ( params.ignoreAccessControl ) {\n                        params.ignoreAccessControl = false;\n                        taskManager.runHistory.forEach(function ( item ) {\n                            if ( item.packageName === params.config.packageName ) {\n                                params.ignoreAccessControl = true;\n                            }\n                        });\n\n                        if ( params.ignoreAccessControl ) {\n                            return true;\n                        }\n                    }\n                    /* eslint no-loop-func: 0 */\n                    lockedState = true;\n                    setTimeout(function () {\n                        window.core.accessControl.request(function ( error ) {\n                            if ( DEVELOP ) {\n                                debug('iframe')('access control request error: ' + error);\n                            }\n                            if ( !error ) {\n                                config.data.apps[index].locked = false;\n                                taskManager.runApp(params, runFromLauncher);\n                                config.data.apps[index].locked = true;\n                            }\n                            lockedState = false;\n                        });\n                    }, 0);\n\n                    return true;\n                }\n\n                params.config = config.data.apps[index];\n                if ( typeof config.data.apps[index].pid !== 'undefined' ) {\n                    if ( taskManager.apps[params.config.pid] ) {\n                        meta.showSplash = false;\n                    } else {\n                        params.config.pid = undefined;\n                    }\n                }\n\n                if ( maxAppsCounter > 0 && taskManager.runHistory.length >= maxAppsCounter ) {\n                    taskManager.close(taskManager.apps[taskManager.runHistory[taskManager.runHistory.length - 1].pid]);\n                }\n\n                if ( DEVELOP ) {\n                    debug('iframe')(params.config.name + ' - ' + params.config.pid);\n                }\n                break;\n            }\n            ++index;\n        }\n\n        if ( runFromLauncher && system.events['run:app'] ) {\n            taskManager.launcher.$iframe.hide();\n            taskManager.launcher.core.emit('hide');\n            taskManager.launcher.core.emit('blur');\n            taskManager.applicationToShow = params;\n            system.emit('run:app', {\n                done: function () {\n                    if ( taskManager.applicationToShow ) {\n                        params.omitLock = true;\n                        taskManager.runApp(params);\n                    }\n                    if ( DEVELOP ) {\n                        debug('taskmanager')('run app');\n                    }\n                },\n                app: config.data.apps[index]\n            });\n\n            return true;\n        }\n\n        if ( meta.showSplash ) {\n            if ( taskManager.launcher ) {\n                taskManager.launcher.$iframe.hide();\n                taskManager.launcher.core.emit('hide');\n                taskManager.launcher.core.emit('blur');\n            }\n            splash.show(config.data.apps[index]);\n            if ( taskManager.topApp ) {\n                taskManager.topApp.$iframe.hide();\n                taskManager.topApp.core.emit('hide', {\n                    source: window.core.SOURCES.SYSTEM\n                });\n            }\n        } else {\n            taskManager.runHistory = taskManager.runHistory.filter(function ( item ) {\n                return item.packageName !== params.config.packageName;\n            });\n\n            taskManager.runHistory.push(params.config);\n            taskManager.show(taskManager.apps[params.config.pid]);\n\n            if ( params.onload ) {\n                params.onload(taskManager.apps[params.config.pid]);\n            }\n            if ( params.onready ) {\n                params.onready(taskManager.apps[params.config.pid]);\n            }\n\n            return true;\n        }\n\n        return false;\n    },\n\n    blurOsd = function ( taskInstance ) {\n        var task;\n\n        if ( taskManager.osdStack.length > 0 && !taskManager.launcher.$iframe.isVisible ) {\n            task = taskManager.osdStack[taskManager.osdStack.length - 1];\n\n            if ( task !== taskInstance && task.$iframe.style.height === screenHeightPx ) {\n                // restore focus if the previous OSD was in fullscreen mode\n                task.$iframe.contentWindow.focus();\n                taskManager.focusedApp = task;\n                taskInstance.core.applicationState.focused = true;\n                taskManager.focusedApp.core.emit('focus');\n                DEVELOP && debug('iframe')('set focused: ' + taskManager.focusedApp.$iframe.src);\n\n                return;\n            }\n\n            // taskManager.osdStack.pop();\n        }\n\n        if ( taskManager.topApp ) {\n            taskManager.osdStack = [];\n            taskManager.topApp.$iframe.contentWindow.focus();\n            taskManager.focusedApp = taskManager.topApp;\n            taskManager.topApp.core.emit('focus');\n            DEVELOP && debug('iframe')('set focused: ' + taskManager.topApp.$iframe.src);\n        } else if ( taskManager.launcher ) {\n            taskManager.osdStack = [];\n            taskManager.launcher.$iframe.contentWindow.focus();\n            taskManager.focusedApp = taskManager.launcher;\n            taskManager.launcher.core.emit('focus');\n            DEVELOP && debug('iframe')('set focused: ' + taskManager.launcher.$iframe.src);\n        }\n    },\n\n    coreCall = {\n        app: function ( action ) {\n            var taskInstance = taskManager.apps[this.pid],\n                params = taskInstance.params,\n                activeFocusedOsd, index;\n\n            DEVELOP && debug('iframe')('app core.call ' + action);\n\n            if ( taskManager.focusedApp ) {\n                activeFocusedOsd = taskManager.focusedApp.config.type === 'osd' ? taskManager.focusedApp : null;\n            }\n\n            switch ( action ) {\n                case 'exit':\n                    // remove app from history and close it\n                    taskManager.close(taskInstance);\n                    index = taskManager.runHistory.indexOf(taskInstance.config);\n                    if ( index !== -1 ) {\n                        taskManager.runHistory.splice(index, 1);\n                    }\n                    break;\n\n                case 'stop':\n                    // only close\n                    taskManager.close(taskInstance);\n                    break;\n\n                case 'app:ready':\n                    if ( params.visible && splash.active ) {\n                        splash.hide();\n\n                        taskManager.show(taskInstance);\n\n                        if ( activeFocusedOsd ) {\n                            activeFocusedOsd.$iframe.contentWindow.focus();\n                        }\n                    }\n\n                    taskInstance.core.emit('app:ready');\n\n                    taskManager.runHistory = taskManager.runHistory.filter(function ( item ) {\n                        if ( item.url === params.config.url ) {\n                            return false;\n                        }\n\n                        return true;\n                    });\n\n                    DEVELOP && debug('system')('add app ' + params.config.packageName + ' to run history');\n\n                    if ( taskManager.home ) {\n                        if ( params.config.home ) {\n                            taskManager.runHistory.push(taskManager.home.config);\n                        } else {\n                            taskManager.runHistory.push(params.config);\n                        }\n                    } else {\n                        taskManager.runHistory.push(params.config);\n                    }\n\n                    if ( params.onready ) {\n                        params.onready();\n                    }\n                    break;\n\n                case 'hide':\n                    taskManager.hideAll();\n                    break;\n            }\n        },\n        osd: function ( action ) {\n            var taskInstance = taskManager.apps[this.pid],\n                params = taskInstance.params,\n                index;\n\n            switch ( action ) {\n                case 'hide':\n                    DEVELOP && debug('iframe')('osd call hide ' + params.config.url);\n                    DEVELOP && debug('iframe')('osd stack length before check ' + taskManager.osdStack.length);\n\n                    index = taskManager.osdStack.indexOf(taskInstance);\n\n                    if ( index !== -1 ) {\n                        taskManager.osdStack.splice(index, 1);\n                    }\n\n                    DEVELOP && debug('iframe')('osd stack length after check ' + taskManager.osdStack.length);\n\n                    taskInstance.$iframe.style.zIndex = '';\n\n                    taskManager.osdStack.forEach(function ( task, osdIndex ) {\n                        task.$iframe.style.zIndex = osdIndex + frames.length + 1;\n\n                        DEVELOP && debug('iframe')(task.$iframe.style.zIndex);\n                    });\n\n                    taskInstance.core.applicationState.visible = false;\n                    taskInstance.$iframe.hide();\n\n                    if ( document.activeElement === document.body && taskManager.focusedApp !== taskManager.topApp ) {\n                        if ( taskManager.topApp ) {\n                            taskManager.focusedApp = taskManager.topApp;\n\n                            DEVELOP && debug('iframe')('set focused app as ' + taskManager.focusedApp.$iframe.src);\n\n                            taskManager.focusedApp.$iframe.contentWindow.focus();\n                        }\n                    }\n                    break;\n\n                case 'app:ready':\n                    DEVELOP && debug('iframe')('osd call app:ready ' + params.config.url);\n\n                    if ( params.onready ) {\n                        params.onready();\n                    }\n                    break;\n\n                case 'show':\n                    DEVELOP && debug('iframe')('osd call show ' + params.config.url);\n\n                    if ( splash.active ) {\n                        // splash.hide();\n                        window.splash.style.zIndex = window.frames.length;\n                        // console.log(window.splash.style.zIndex)\n                    }\n\n                    index = taskManager.osdStack.indexOf(taskInstance);\n\n                    if ( index === -1 ) {\n                        taskManager.osdStack.push(taskInstance);\n                    } else {\n                        taskManager.osdStack.splice(index, 1);\n                        taskManager.osdStack.push(taskInstance);\n                    }\n                    taskManager.osdStack.forEach(function ( task, osdIndex ) {\n                        task.$iframe.style.zIndex = osdIndex + window.frames.length + 1;\n\n                        DEVELOP && debug('iframe')(task.$iframe.style.zIndex);\n                    });\n\n                    taskInstance.core.applicationState.visible = true;\n                    taskInstance.$iframe.show();\n\n                    if ( params.config.type === 'auth' ) {\n                        if ( !taskManager.launcher ) {\n                            taskManager.launcher = taskInstance;\n                            if ( DEVELOP ) {\n                                debug('iframe')('set auth as launcher');\n                            }\n                        }\n                    }\n                    break;\n\n                case 'focus':\n                    DEVELOP && debug('iframe')('osd call focus ' + params.config.url);\n\n                    if ( taskManager.topApp ) {\n                        taskManager.topApp.core.emit('blur');\n                    } else if ( taskManager.launcher ) {\n                        taskManager.launcher.core.emit('blur');\n                    }\n\n                    taskInstance.core.applicationState.focused = true;\n                    taskInstance.$iframe.contentWindow.focus();\n                    taskManager.focusedApp = taskInstance;\n                    DEVELOP && debug('iframe')('set focused app as ' + taskManager.focusedApp.$iframe.src);\n                    break;\n\n                case 'blur':\n                    DEVELOP && debug('iframe')('osd call blur ' + params.config.url);\n                    DEVELOP && debug('iframe')('osd stack length ' + taskManager.osdStack.length);\n                    blurOsd(taskInstance);\n                    break;\n            }\n        },\n        system: function ( action ) {\n            var taskInstance, params;\n\n            if ( this.pid === -1 ) {\n                // launcher\n                taskInstance = taskManager.launcher;\n            } else {\n                taskInstance = taskManager.apps[this.pid];\n            }\n\n            params = taskInstance.params;\n\n            switch ( action ) {\n                case 'exit':\n                    taskManager.close(taskInstance);\n                    // taskManager.stack.forEach(function ( task ) {\n                    //     task.core.emit('close');\n                    // });\n                    if ( params.config.type === 'launcher' ) {\n                        require('./api').exit();\n                    }\n                    break;\n\n                case 'hide':\n                    taskManager.hide(taskInstance, {source: Core.prototype.SOURCES.SYSTEM});\n                    break;\n\n                case 'show':\n                    taskManager.show(taskInstance, {source: Core.prototype.SOURCES.SYSTEM});\n                    break;\n\n                case 'app:ready':\n                    // this.appReady = true;\n                    this.emit('app:ready');\n                    if ( DEVELOP ) {\n                        taskInstance.$iframe.contentWindow.onunload = function () {\n                            coreManager.destroy(taskInstance.$iframe.contentWindow);\n                        };\n                    }\n\n                    if ( params.onready ) {\n                        params.onready();\n                    }\n\n                    break;\n            }\n        }\n    },\n\n    dispatchEventToActiveApp = function ( event ) {\n        var appTarget = taskManager.topApp || taskManager.launcher,\n            index = 0,\n            customEvent, keys, keysSize, target;\n\n        customEvent = document.createEvent('Event');\n\n        customEvent.initEvent(event.name, !!event.bubbles, !!event.cancelable);\n        keys = Object.keys(event);\n        keys = keys.filter(function ( name ) {\n            return (name !== 'bubbles' && name !== 'cancelable');\n        });\n        keysSize = keys.length;\n        while ( index < keysSize ) {\n            customEvent[keys[index]] = event[keys[index]];\n            ++index;\n        }\n        if ( event.name === 'click' ) {\n            if ( DEVELOP ) {\n                debug('iframe')(event.clientY + '.' + event.clientX);\n            }\n            target = appTarget.$iframe.contentDocument.elementFromPoint(event.clientX, event.clientY);\n            if ( !target ) {\n                return;\n            }\n        } else {\n            target = appTarget.$iframe.contentWindow;\n        }\n        target.dispatchEvent(customEvent);\n    },\n\n    redirectTo = function ( url ) {\n        location.href = url;\n    },\n\n    fullfillCoreObject = function ( core, params ) {\n        // first load\n        core.storage = new core.constructor.prototype.Storage(params.config.packageName || params.config.name);\n\n        Object.defineProperty(core, 'state', {\n            get: function () {\n                return core.storage.getItem('state');\n            },\n            set: function ( value ) {\n                core.storage.setItem('state', value);\n            }\n        });\n\n        switch ( params.config.type ) {\n            case 'app':\n                core.call = coreCall.app;\n                break;\n\n            case 'osd':\n            case 'auth':\n                core.system = true;\n                core.config = config.data;\n                core.redirectTo = redirectTo;\n\n                core.call = coreCall.osd;\n                core.dispatchEventToActiveApp = dispatchEventToActiveApp;\n                break;\n\n            default:\n                core.system = true;\n                core.config = config.data;\n                core.redirectTo = redirectTo;\n                core.call = coreCall.system;\n                break;\n\n        }\n    },\n\n    taskManager = {\n        topApp: null,\n        stack: [],\n        daemons: [],\n        runHistory: [],\n        apps: {},\n        launcher: null,\n        launchers: [],\n        home: null,\n        homeConfig: null,\n        focusedApp: null,\n        applicationToShow: false,\n        onDoneCallback: null,\n        osdStack: [],\n        show: function ( task, meta ) {\n            var type = task.config.type,\n                index;\n\n            meta = meta || {source: Core.prototype.SOURCES.LAUNCHER};\n\n            // window.top.console.log('this.topApp === task ' + this.topApp === task);\n            if ( this.topApp === task ) {\n                return;\n            }\n\n            DEVELOP && debug('iframe')('show ' + task.config.type + ':' + task.config.name);\n            DEVELOP && debug('iframe')('meta ' + meta.source);\n\n            switch ( type ) {\n                case 'osd':\n                    if ( splash.active ) {\n                        splash.hide();\n                    }\n\n                    index = taskManager.osdStack.indexOf(task);\n                    if ( index === -1 ) {\n                        taskManager.osdStack.push(task);\n                    } else {\n                        taskManager.osdStack.splice(index, 1);\n                        taskManager.osdStack.push(task);\n                    }\n\n                    taskManager.osdStack.forEach(function ( osdTask, osdIndex ) {\n                        osdTask.$iframe.style.zIndex = osdIndex + window.frames.length + 1;\n                        DEVELOP && debug('iframe')(osdTask.$iframe.style.zIndex);\n                    });\n\n                    task.$iframe.show();\n                    break;\n\n                case 'app':\n                    if ( this.launcher ) {\n                        this.launcher.$iframe.hide();\n                        this.launcher.core.emit('hide');\n                        this.launcher.core.emit('blur');\n                    }\n                    $sandboxFrame.style.zIndex = window.frames.length;\n\n                    /* eslint no-fallthrough: 0 */\n\n                case 'system':\n                    if ( type === 'system' ) {\n                        $sandboxFrame.style.zIndex = 0;\n                        task.$iframe.style.zIndex = window.frames.length;\n                    }\n\n                    index = this.stack.indexOf(task);\n                    if ( index !== -1 ) {\n                        this.stack.splice(index, 1);\n                    }\n\n                    this.stack.push(task);\n\n                    DEVELOP && debug('app', this.topApp);\n\n                    if ( this.topApp ) {\n                        // window.top.console.log('this.topApp !== task ' + this.topApp === task);\n                        if ( this.topApp !== task ) {\n                            if ( typeof this.topApp.core.emit === 'function' ) {\n                                // app can remove this method for own 'core'\n                                // make own core as non-editable\n                                this.topApp.core.emit('hide', meta);\n                            }\n\n                            if ( this.topApp ) {\n                                this.topApp.$iframe.hide();\n                            }\n                        }\n                    }\n\n                    this.topApp = task;\n\n                    DEVELOP && debug('iframe')('focus ' + task.config.type + ':' + task.config.name);\n\n                    task.$iframe.contentWindow.focus();\n                    taskManager.focusedApp = task;\n                    // window.top.console.log('set focused app as ' + task.$iframe.src);\n                    // window.core.pid = task.core.pid;\n                    if ( splash.active ) {\n                        splash.hide();\n                    }\n                    task.$iframe.show();\n                    // window.top.console.log('task.$iframe.style ' + task.$iframe.style.toString());\n\n\n                    if ( task.core && typeof task.core.emit === 'function' ) {\n                        // app can remove this method for own 'core'\n                        // maybe need to make own core as non-editable\n                        if ( DEVELOP ) {\n                            debug('core')('emit show ' + JSON.stringify(meta.config));\n                            debug('core')('emit show ' + JSON.stringify(meta.source));\n                        }\n                        task.core.emit('show', meta);\n                        task.core.emit('focus', meta);\n                    }\n                    break;\n\n                case 'launcher':\n                    if ( type === 'launcher' ) {\n                        taskManager.topApp = null;\n                        window.core.pid = task.core.pid;\n                    }\n\n                    taskManager.osdStack.forEach(function ( osdTask ) {\n                        if ( osdTask.config.type === 'auth' ) {\n                            osdTask.$iframe.style.zIndex = 0;\n                        }\n                    });\n\n                default:\n                    task.$iframe.contentWindow.focus();\n                    task.core.emit('focus', meta);\n                    task.core.emit('show', meta);\n                    taskManager.focusedApp = task;\n                    // window.core.pid = task.core.pid;\n                    task.$iframe.show();\n\n                    break;\n            }\n        },\n        hide: function ( task, meta ) {\n            var type = task.config.type;\n\n            meta = meta || {source: Core.prototype.SOURCES.LAUNCHER};\n\n            task.$iframe.hide();\n\n            if ( task.core && typeof task.core.emit === 'function' ) {\n                // app can remove this method for own 'core'\n                // maybe need to make own core as non-editable\n                task.core.emit('hide', meta);\n            }\n            if ( DEVELOP ) {\n                debug('iframe')('hide ' + task.config.type + ':' + task.config.name);\n                debug('iframe')('meta ' + meta.source);\n            }\n\n            switch ( type ) {\n                case 'app':\n                case 'system':\n                    if ( this.topApp === task ) {\n                        this.topApp = null;\n                    }\n                    this.stack.pop();\n                    if ( this.stack.length > 0 ) {\n                        this.show(this.stack.pop(), meta);\n                    } else {\n                        this.show(this.launcher, meta);\n                    }\n                    break;\n            }\n        },\n        close: function ( task, forceLauncher ) {\n            var size = config.data.apps.length,\n                index = 0,\n                keys, stackIndex;\n\n            if ( typeof task === 'undefined' ) {\n                if ( !forceLauncher ) {\n                    this.show(this.launcher);\n                }\n            } else if ( task.config.type === 'app' ) {\n                // not a system module\n                if ( task === this.topApp ) {\n                    this.topApp = null;\n                    this.stack.pop();\n                } else {\n                    stackIndex = this.stack.indexOf(task);\n                    this.stack.splice(stackIndex, 1);\n                }\n\n                // if ( task === this.home ) {\n                // task.$iframe.hide();\n                // while ( this.stack.length ) {\n                //     task = this.stack.pop();\n                //     task.$iframe.hide();\n                //     task.core.emit('hide', {\n                //         source: Core.prototype.SOURCES.LAUNCHER\n                //     });\n                // }\n                // this.topApp = null;\n                // $sandboxFrame.style.zIndex = 0;\n                // task.core.emit('hide', {\n                //     source: Core.prototype.SOURCES.LAUNCHER\n                // });\n                // this.show(this.launcher);\n\n                // return;\n                // }\n\n                task.core.emit('exit');\n                if ( intentManager.lastRoute && intentManager.lastRoute.core === task.core ) {\n                    // hide opened app\n                    taskManager.hide(taskManager.apps[intentManager.lastRoute.intent.receiver]);\n                }\n\n                // clear pid\n                while ( index < size ) {\n                    if ( config.data.apps[index].packageName === task.config.packageName ) {\n                        config.data.apps[index] = JSON.parse(JSON.stringify(config.data.apps[index]));\n                        config.data.apps[index].pid = undefined;\n                        intentManager.replaceActionsConfig(task.config, config.data.apps[index]);\n                        break;\n                    }\n                    ++index;\n                }\n\n                coreManager.destroy(task.window);\n\n                $sandboxFrame.contentDocument.body.removeChild(task.$iframe);\n\n                keys = Object.keys(taskManager.apps);\n                size = keys.length;\n                index = 0;\n\n                while ( index < size ) {\n                    if ( taskManager.apps[keys[index]] === task ) {\n                        taskManager.apps[keys[index]] = null;\n                        if ( DEVELOP ) {\n                            debug('iframe')('remove  ' + index);\n                        }\n                        break;\n                    }\n                    ++index;\n                }\n\n                if ( DEVELOP ) {\n                    debug('iframe')('close: ' + task.config.url);\n                }\n                task.config.pid = undefined;\n                task = null;\n\n                if ( !forceLauncher ) {\n                    this.reset(task);\n                }\n            } else {\n                // system app close\n                this.reset(task);\n            }\n        },\n\n        reset: function ( task ) {\n            // system app close\n            while ( this.stack.length ) {\n                task = this.stack.pop();\n                task.$iframe.hide();\n                task.core.emit('hide', {source: Core.prototype.SOURCES.LAUNCHER});\n            }\n            this.topApp = null;\n            $sandboxFrame.style.zIndex = 0;\n            this.show(this.launcher);\n        },\n\n        /**\n         * Run application in irame.\n         *\n         * @param {Object} params application parameters\n         * @param {boolean} runFromLauncher indicates that called from launcher\n         */\n        /* eslint max-lines-per-function: ['error', {max: 160, skipBlankLines: true, skipComments: true}] */\n        runApp: function ( params, runFromLauncher ) {\n            var metrics      = {},\n                taskIndex    = -1,\n                taskInstance = null,\n                meta = {\n                    showSplash: true\n                },\n                referrer;\n\n            if ( TARGET === 'android-stb' || TARGET === 'android-app' ) {\n                if ( params.config.native ) {\n                    return require('../platforms/mag/utils').runNativeApp(params.config);\n                }\n            }\n\n            if ( params.config.legacy ) {\n                // for legacy apps\n                if ( MODE === 'MINISTRA' ) {\n                    referrer = 'referrer=' + encodeURIComponent(config.data.options.stalkerHost + config.data.options.stalkerLoaderPath);\n\n                    if ( params.config.url.indexOf('?') === -1 ) {\n                        DEVELOP && debug('iframe')('RUN LEGACY APP ' + params.config.url + '?' + referrer);\n                        location.href = params.config.url + '?' + referrer;\n                    } else {\n                        location.href = params.config.url + '&' + referrer;\n                        DEVELOP && debug('iframe')('RUN LEGACY APP ' + params.config.url + '&' + referrer);\n                    }\n                } else {\n                    referrer = 'referrer=' + encodeURIComponent(location.href);\n\n                    if ( params.config.url.indexOf('?') === -1 ) {\n                        DEVELOP && debug('iframe')('RUN LEGACY APP ' + params.config.url + '?' + referrer);\n                        location.href = params.config.url + '?' + referrer;\n                    } else {\n                        DEVELOP && debug('iframe')('RUN LEGACY APP ' + params.config.url + '&' + referrer);\n                        location.href = params.config.url + '&' + referrer;\n                    }\n                }\n\n                return null;\n            }\n\n            if ( params.config.type === 'app' ) {\n                if ( checkApp(params, runFromLauncher, meta ) ) {\n                    return null;\n                }\n            } else if ( params.config.metrics && params.config.metrics[screenHeight] ) {\n                metrics = params.config.metrics[screenHeight];\n                // metrics.height = params.config.metrics[screenHeight].height;\n                // metrics.top = params.config.metrics[screenHeight].top;\n                // metrics.left = params.config.metrics[screenHeight].left;\n            }\n\n            function prepareApp () {\n                var core;\n\n                DEVELOP && debug('iframe')('PREPARE APP ' + params.config.name);\n\n                if ( taskInstance && taskInstance.window ) {\n                    core = require('../kernel/core.manager').getInstance(taskInstance.window);\n                    taskInstance.core = core;\n\n                    if ( !taskInstance.window.pid ) {\n                        taskInstance.window.pid = taskIndex;\n                    }\n\n                    if ( typeof core.call === 'undefined' ) {\n                        // first load\n                        fullfillCoreObject(core, params);\n                    }\n\n                    core.pid = taskIndex;\n\n                    core.resolveDependencies(params.config, function () {\n                        core.ready = true;\n                        if ( params.config.home ) {\n                            core.applicationState.home = true;\n                        }\n\n                        core.emit('load');\n\n                        if ( params.onload ) {\n                            params.onload(taskInstance);\n                        }\n                    });\n                }\n            }\n\n            DEVELOP && debug('iframe')('runApp: ' + params.config.url);\n\n            taskInstance = {\n                $iframe: iframeFactory({\n                    url: params.config.url,\n                    type: params.config.type,\n                    visible: false,\n                    $container: params.config.type === 'app' ? $sandboxFrame.contentDocument.body : window.document.body,\n                    width: metrics.width,\n                    height: metrics.height,\n                    top: metrics.top,\n                    left: metrics.left,\n                    onload: function () {\n                        if ( DEVELOP ) {\n                            debug('iframe')('iframe ' + params.config.name + ' load');\n                        }\n\n                        this.contentWindow.addEventListener('keydown', function ( event ) {\n                            var eventName;\n\n                            if ( event.keyCode === 0 ) {\n                                return;\n                            }\n\n                            if ( event.keyCode === 9 ) {\n                                event.preventDefault();\n                            }\n\n                            eventName = 'keydown:' + require('spa-keyboard-event-parser')(event);\n\n                            if ( DEVELOP ) {\n                                debug('iframe')(params.config.name + ' event ' + eventName);\n                            }\n                            eventForwarder(eventName, event);\n                        });\n\n                        taskInstance.window = this.contentWindow;\n                        prepareApp();\n                    },\n                    onerror: function ( error ) {\n                        if ( DEVELOP ) {\n                            debug('iframe')('iframe ' + params.config.name + ' not load, error: ' + error);\n                        }\n                        taskManager.close(taskInstance);\n                        setTimeout(function () {\n                            if ( params.visible && splash.active ) {\n                                splash.hide();\n                            }\n                        }, 5000);\n                        if ( params.onerror ) {\n                            params.onerror(error);\n                        }\n                    }\n                }),\n                window: null,\n                core: null,\n                config: params.config,\n                params: params\n            };\n\n            if ( taskManager.home && params.config.home ) {\n                taskManager.home = taskInstance;\n            }\n\n            taskInstance.core = require('../kernel/core.manager').getInstance(taskInstance.$iframe.contentWindow);\n            // taskInstance.$iframe.contentWindow.onunload = function () {\n            //     if ( coreManager === null ) {\n            //         coreManager = require('../kernel/core.manager');\n            //     }\n\n            //     console.log('on unload ' + this.location.href);\n            //     coreManager.destroy(taskInstance.$iframe.contentWindow);\n            // };\n\n            // if ( params.config.type === 'app' ) {\n            //     taskManager.runHistory = taskManager.runHistory.filter(function ( item ) {\n            //         if ( item.url === params.config.url ) {\n            //             return false;\n            //         }\n\n            //         return true;\n            //     });\n            //     // console.log('PUSH TO RUN GHISTORY');\n            //     if ( taskManager.home ) {\n            //         console.log(params.config === taskManager.home.config);\n            //         console.log(params.config.url);\n            //         console.log(taskManager.home.config.url);\n            //     }\n            //     if ( taskManager.home ) {\n            //         if ( params.config.home ) {\n            //             taskManager.runHistory.push(taskManager.home.config);\n            //         } else {\n            //             taskManager.runHistory.push(params.config);\n            //         }\n            //     } else {\n            //         taskManager.runHistory.push(params.config);\n            //     }\n            // }\n            if ( params.config.type !== 'launcher' ) {\n                if ( DEVELOP ) {\n                    debug('iframe')('currentTaskIndex ' + currentTaskIndex);\n                }\n                taskIndex = currentTaskIndex;\n                ++currentTaskIndex;\n                if ( DEVELOP ) {\n                    debug('iframe')('new taskIndex ' + taskIndex);\n                }\n                taskManager.apps[taskIndex] = taskInstance;\n                if ( DEVELOP ) {\n                    debug('iframe')('currentTaskIndex ' + currentTaskIndex);\n                }\n            }\n\n            params.config.pid = taskIndex;\n\n            return taskInstance;\n        },\n        hideAll: function () {\n            var apps = [],\n                index, indexes, type, isVisible;\n\n\n            taskManager.onDoneCallback = null;\n            taskManager.applicationToShow = null;\n\n            indexes = Object.keys(taskManager.apps);\n            index = indexes.length - 1;\n\n            if ( splash.active ) {\n                splash.hide();\n            }\n\n            while ( index > -1 ) {\n                if ( taskManager.apps[indexes[index]] ) {\n                    // not closed\n                    type = taskManager.apps[indexes[index]].config.type;\n                    isVisible = taskManager.apps[indexes[index]].$iframe.isVisible;\n                    if ( taskManager.apps[indexes[index]].core ) {\n                        if ( type === 'osd' || type === 'auth' ) {\n                            if ( isVisible ) {\n                                taskManager.apps[indexes[index]].core.emit('hide', {source: Core.prototype.SOURCES.LAUNCHER});\n                            }\n                        } else if ( type === 'app' ) {\n                            apps.push(taskManager.apps[indexes[index]]);\n                            if ( isVisible ) {\n                                taskManager.apps[indexes[index]].core.emit('hide', {source: Core.prototype.SOURCES.LAUNCHER});\n                            }\n                        } else if ( isVisible ) {\n                            if ( DEVELOP ) {\n                                debug('iframe')('hide ' + taskManager.apps[indexes[index]].config.name);\n                            }\n                            taskManager.apps[indexes[index]].$iframe.hide();\n                            taskManager.apps[indexes[index]].core.emit('hide', {source: Core.prototype.SOURCES.LAUNCHER});\n                        }\n                    }\n                }\n                --index;\n            }\n\n            index = 0;\n            while ( index < apps.length ) {\n                isVisible = apps[index].$iframe.isVisible;\n                if ( isVisible ) {\n                    if ( DEVELOP ) {\n                        debug('iframe')('hide ' + taskManager.apps[indexes[index]].config.name);\n                    }\n                    apps[index].$iframe.hide();\n                    apps[index].core.emit('hide', {source: Core.prototype.SOURCES.LAUNCHER});\n                }\n                ++index;\n            }\n\n            $sandboxFrame.style.zIndex = 0;\n\n            taskManager.topApp = null;\n            if ( lockedState ) {\n                if ( taskManager.launcher.$iframe.isVisible ) {\n                    return;\n                }\n                taskManager.show(taskManager.launcher);\n                taskManager.launcher.core.emit('focus');\n            } else if ( taskManager.home ) {\n                if ( taskManager.home.config.locked ) {\n                    if ( !taskManager.launcher.core.applicationState.visibile ) {\n                        taskManager.show(taskManager.launcher);\n                        taskManager.launcher.core.emit('focus');\n                    }\n\n                    return;\n                }\n                // console.log(taskManager.launcher.$iframe.isVisible);\n                // console.log(taskManager.runHistory.indexOf(this.home.config));\n                if ( taskManager.launcher.$iframe.isVisible ) {\n                    if ( taskManager.runHistory.indexOf(this.home.config) === -1 ) {\n                        taskManager.show(taskManager.launcher);\n                        taskManager.launcher.core.emit('focus');\n                    } else {\n                        if ( this.launcher ) {\n                            this.launcher.$iframe.hide();\n                        }\n                        // taskManager.runHistory.push(this.home.config);\n                        taskManager.show(taskManager.home);\n                    }\n                } else {\n                    taskManager.show(taskManager.launcher);\n                    taskManager.launcher.core.emit('focus');\n                }\n            } else if ( taskManager.launcher ) {\n                if ( !taskManager.launcher.core.applicationState.focused ) {\n                    taskManager.launcher.core.emit('focus');\n                }\n\n                taskManager.show(taskManager.launcher);\n            }\n        },\n        init: function () {\n            coreManager = require('../kernel/core.manager');\n            intentManager = require('./intent.manager');\n            // return function ( done ) {\n            //if ( !QUIET_BOOT ) {\n            //    window.logger.push('Loading sandbox');\n            //}\n            maxAppsCounter = config.data.options.maxAppsCounter || maxAppsCounter;\n\n            if ( DEVELOP ) {\n                debug('iframe')('INIT TASK MANAGER');\n                debug('MAX APPS COUNTER')(maxAppsCounter);\n            }\n            // create sandbox iframe for apps\n            $sandboxFrame = iframeFactory({\n                $container: document.body,\n                visible: true,\n                onload: function () {\n                    var $link = this.contentDocument.head.appendChild(this.contentDocument.createElement('style'));/* ,\n                        keys = Object.keys(platformApi),\n                        keysSize = keys.length,\n                        index = 0; */\n\n                    /* eslint no-use-before-define: 0 */\n                    $link.textContent = 'html, body{ background: transparent !important; overflow: hidden; margin: 0; padding:0; width: ' +\n                        screenWidth + 'px; height: ' + screenHeight + 'px; } ' +\n                        'iframe { position: absolute; top: 0; left: 0; border: none; outline: none; overflow: hidden;margin: 0; padding: 0; width: ' +\n                        screenWidth + 'px; height: ' + screenHeight + 'px; }';\n\n                    this.contentWindow.parent = null;\n                    this.contentWindow.opener = null;\n                    //                        this.contentWindow.frames = null;\n                    //                        this.contentWindow.top    = null;\n                    this.contentWindow.getCoreInstance = function ( contentWindow ) {\n                        return require('../kernel/core.manager').getInstance(contentWindow);\n                    };\n                    // remove this after legacy apps come to new sdk\n\n                    // remove this hack when 'core' implement all api\n                    // while ( index < keysSize ) {\n                    //     this.contentWindow[keys[index]] = platformApi[keys[index]];\n                    //     ++index;\n                    // }\n\n                    // done(false, {config: {}, instance: null, $iframe: $sandboxFrame});\n                }\n            });\n            // };\n        },\n        lockApp: function ( appConfig, callback ) {\n            var cfg      = window.core.storage.getItem('config') || {},\n                apps     = cfg.apps || [],\n                size     = config.data.apps.length,\n                index    = 0,\n                appIndex = 0;\n\n            if ( window.core.accessControl ) {\n                window.core.accessControl.request(function ( error ) {\n                    if ( !error ) {\n                        while ( index < size ) {\n                            if ( config.data.apps[index].packageName === appConfig.packageName ) {\n                                appIndex = index;\n                                index = 0;\n                                size = apps.length;\n                                config.data.apps[appIndex].locked = !config.data.apps[appIndex].locked;\n\n                                while ( index < size ) {\n                                    if ( config.data.apps[appIndex].packageName === apps[index].packageName ||\n                                        config.data.apps[appIndex].name === apps[index].name ) {\n                                        apps[index] = config.data.apps[appIndex];\n                                        break;\n                                    }\n                                    ++index;\n                                }\n\n                                if ( index === size ) {\n                                    apps.push(config.data.apps[appIndex]);\n                                }\n\n                                break;\n                            }\n                            ++index;\n                        }\n\n                        cfg.apps = apps;\n\n                        window.core.storage.setItem('config', cfg);\n                    }\n                    callback(error);\n                });\n            } else {\n                callback(true);\n            }\n        },\n        setHomeApp: function ( homeAppConfig ) {\n            if ( DEVELOP ) {\n                debug('iframe')('set home app ' + homeAppConfig.name);\n            }\n\n            if ( this.home === null ) {\n                // splash.init();\n                homeAppConfig.home = true;\n                // console.log(JSON.stringify(config));\n                // console.log('HOME INSTALLED 1132');\n                // if ( this.launcher && this.launcher.$iframe ) {\n                //     this.launcher.$iframe.hide();\n                //     this.launcher.core.emit('hide');\n                //     this.launcher.core.emit('blur');\n                // }\n                taskManager.homeConfig = homeAppConfig;\n                // taskManager.home  = this.runApp({\n                //     config: config,\n                //     visible: false,\n                //     onload: function () {\n                //         taskManager.launcher.$iframe.hide();\n                //     }\n                // });\n                // console.log(taskManager.home.$iframe.src);\n            }\n        },\n        killAll: function ( ignoredWindow ) {\n            var ids = Object.keys(taskManager.apps);\n\n            ids.forEach(function ( id ) {\n                var task = taskManager.apps[id];\n\n                if ( task === null ) {\n                    return;\n                }\n\n                if ( task.window === ignoredWindow ) {\n                    taskManager.launcher = task;\n                } else {\n                    task.core.emit('exit');\n\n                    coreManager.destroy(task.window);\n                    if ( task.config.type === 'app' ) {\n                        $sandboxFrame.contentDocument.body.removeChild(task.$iframe);\n                    } else {\n                        document.body.removeChild(task.$iframe);\n                    }\n                }\n            });\n\n            this.topApp = this.focusedApp = taskManager.launcher;\n            // console.log('set focused app as ' + taskManager.launcher.$iframe.src);\n            this.home = null;\n            taskManager.apps = {};\n            this.runHistory.splice(0);\n            taskManager.osdStack.splice(0);\n            this.stack.splice(0);\n\n            if ( PLATFORM === 'MAG' || NANOCORE ) {\n                require('../platforms/mag/storage').forceFlush();\n            }\n        },\n        setLauncher: function ( targetWindow ) {\n            taskManager.home = null;\n            Object.keys(taskManager.apps).forEach(function ( id ) {\n                if ( taskManager.apps[id] && taskManager.apps[id].window === targetWindow ) {\n                    taskManager.launcher = taskManager.apps[id];\n                }\n            });\n        }\n    },\n\n    screenHeightPx, screenHeight, screenWidth;\n\n\nif ( DEVELOP ) {\n    window.ta = taskManager;\n}\n\nscreenHeight = screen.height;\nswitch ( screenHeight ) {\n    case 480:\n    case 576:\n    case 720:\n    case 1080:\n        break;\n\n    default:\n        screenWidth = 1280;\n        screenHeight = 720;\n        break;\n}\n\nscreenHeightPx = screenHeight + 'px';\n\nmodule.exports = taskManager;\n","'use strict';\n\nvar Emitter  = require('cjs-emitter'),\n    parallel  = require('cjs-async/parallel'),\n\n    sources = {},\n    notificationStack = [],\n\n    $widget = document.body.appendChild(document.createElement('div')),\n\n    notify = function ( config ) {\n        config.timeout = config.timeout || 5000;\n\n        if ( config.buttons && config.buttons[0] && config.buttons[0].click ) {\n            config.buttons[0].click();\n            if ( Array.isArray(notificationStack) && notificationStack.length > 0 ) {\n                notify(notificationStack.unshift());\n            }\n        } else {\n            $widget.innerText = config.title;\n            $widget.style.display = '';\n            setTimeout(function () {\n                $widget.style.display = 'none';\n                if ( Array.isArray(notificationStack) && notificationStack.length > 0 ) {\n                    notify(notificationStack.unshift());\n                }\n            }, config.timeout);\n        }\n    };\n\n\n$widget.style.display = 'none';\n$widget.style.textAlign = 'center';\n$widget.style.background = '#000';\n$widget.style.color = '#fff';\n$widget.style.lineHeight = '72px';\n$widget.style.height = 'auto';\n$widget.style.position = 'absolute';\n$widget.style.left = '0';\n$widget.style.top = '0';\n$widget.style.width = '100%';\n$widget.style.zIndex = '9999';\n\n\nfunction Core ( config ) {\n    Emitter.call(this, config);\n\n    this.plugins = {};\n\n    this.applicationState = {\n        focused: false,\n        visible: false,\n        home: false\n    };\n}\n\n// inheritance\nCore.prototype = Object.create(Emitter.prototype);\nCore.prototype.constructor = Core;\n\n\nCore.prototype.theme = {\n    path: null\n};\n\nCore.prototype.environment = require('../system/environment');\n\nCore.prototype.ready = false;\n\nif ( !DEVELOP ) {\n    Core.prototype.emit = function () {\n        try {\n            Emitter.prototype.emit.apply(this, arguments);\n        } catch ( exception ) {\n            if ( DEVELOP ) {\n                debug('core')('ATTENTION! Exception in emit! ' + exception);\n            }\n        }\n    };\n}\n\nCore.prototype.resolveDependencies = function ( applicationConfig, callback ) {\n    var self = this,\n        loaders = [];\n\n    // if ( DEVELOP ) {\n    //     if ( debug.enabled('plugin') ) {\n    //         dependencyManager.load({\n    //             dependencies: applicationConfig.dependencies,\n    //             done: function ( error, plugins ) {\n    //                 if ( DEVELOP ) {\n    //                     debug('plugin')('dependencies load error: ' + error);\n    //                 }\n\n    //                 if ( plugins && plugins.length > 0 ) {\n    //                     plugins.forEach(function ( plugin ) {\n    //                         if ( DEVELOP ) {\n    //                             debug('plugin')('prepare for load ' + plugin.packageName);\n    //                         }\n\n    //                         loaders.push(function ( done ) {\n    //                             if ( DEVELOP ) {\n    //                                 debug('plugin')('onAppInit prepare for ' + plugin.packageName);\n    //                             }\n    //                             plugin.instance.onAppInit({\n    //                                 app: applicationConfig,\n    //                                 options: plugin.options,\n    //                                 storage: dependencyManager.getPluginStorage(plugin.name)\n    //                             }, function ( error, instance ) {\n    //                                 if ( DEVELOP ) {\n    //                                     debug('plugin')(error);\n    //                                     debug('plugin')('onAppInit done for ' + plugin.packageName);\n    //                                 }\n    //                                 self.plugins[plugin.name] = instance;\n    //                                 done(error, instance);\n    //                             });\n    //                         });\n    //                     });\n    //                 }\n\n    //                 if ( DEVELOP ) {\n    //                     debug('plugin')('DEPENDENCIES LOAD START for ' + applicationConfig.name);\n    //                 }\n    //                 parallel(loaders, function ( error, plugins ) {\n    //                     if ( DEVELOP ) {\n    //                         debug('plugin')('DEPENDENCIES LOAD END for ' + applicationConfig.name);\n    //                     }\n\n    //                     callback(error, plugins);\n    //                 });\n    //             }\n    //         });\n    //     }\n\n    //     return;\n    // }\n\n    if ( !self.ready ) {\n        require('./plugin.loader').load({\n            dependencies: applicationConfig.dependencies,\n            done: function ( error, plugins ) {\n                if ( DEVELOP ) {\n                    debug('plugin')('dependencies load error: ' + error);\n                }\n\n                if ( plugins && plugins.length > 0 ) {\n                    plugins.forEach(function ( plugin ) {\n                        if ( DEVELOP ) {\n                            debug('plugin')('prepare for load ' + plugin.packageName);\n                        }\n\n                        loaders.push(function ( done ) {\n                            plugin.instance.onAppInit({\n                                app: applicationConfig,\n                                options: plugin.options,\n                                storage: require('./plugin.loader').getPluginStorage(plugin.name),\n                                path: plugin.path\n                            }, function ( error, instance ) {\n                                self.plugins[plugin.name] = instance;\n                                done(error, instance);\n                            });\n                        });\n                    });\n                }\n\n                if ( DEVELOP ) {\n                    debug('plugin')('DEPENDENCIES LOADED');\n                }\n\n                parallel(loaders, callback);\n            }\n        });\n    }\n};\n\n\nCore.prototype.notify = function ( config ) {\n    // if base osd not loaded yet, call 'notify' can crush the application\n    if ( notificationStack.length === 0 ) {\n        notify(config);\n    } else {\n        notificationStack.push(config);\n    }\n};\n\nObject.defineProperty(sources, 'INTENT', {\n    enumerable: true,\n    configurable: false,\n    writable: false,\n    value: 1\n});\n\nObject.defineProperty(sources, 'LAUNCHER', {\n    enumerable: true,\n    configurable: false,\n    writable: false,\n    value: 2\n});\n\nObject.defineProperty(sources, 'SYSTEM', {\n    enumerable: true,\n    configurable: false,\n    writable: false,\n    value: 3\n});\n\nObject.defineProperty(Core.prototype, 'SOURCES', {\n    enumerable: true,\n    configurable: false,\n    writable: false,\n    value: sources\n});\n\n\nObject.defineProperty(sources, 'intent', {\n    enumerable: true,\n    configurable: false,\n    writable: false,\n    value: 1\n});\n\nObject.defineProperty(sources, 'launcher', {\n    enumerable: true,\n    configurable: false,\n    writable: false,\n    value: 2\n});\n\nObject.defineProperty(sources, 'system', {\n    enumerable: true,\n    configurable: false,\n    writable: false,\n    value: 3\n});\n\nObject.defineProperty(Core.prototype, 'sources', {\n    enumerable: true,\n    configurable: false,\n    writable: false,\n    value: sources\n});\n\n\nif ( PLATFORM === 'MAG' || NANOCORE ) {\n    /* eslint new-cap: 0 */\n    Core.prototype.apiVersion = parseInt(window.gSTB.Version().split(';')[0].split(':')[1], 10);\n}\n\n\nwindow.extendCorePrototype = function ( property, value ) {\n    if ( DEVELOP ) {\n        debug('kernel')('extendCorePrototype with ' + property);\n\n        if ( property === 'backend' ) {\n            value.requests = [];\n            (function () {\n                var originalRequest = value.request,\n                    apiDebug = debug('backend-api-request');\n\n                value.request = function ( url, options ) {\n                    var eth0      = window.gSTB.GetLanLinkStatus(),\n                        wifi      = window.gSTB.GetWifiLinkStatus(),\n                        userAgent = 'Model: ' + window.gSTB.GetDeviceModelExt() + '; Link: ',\n                        method    = options.method || 'GET',\n                        request   = JSON.parse(JSON.stringify(options));\n\n\n                    /* eslint no-nested-ternary: 0 */\n                    request.method = method;\n                    request.url = value.host + core.config.options.stalkerApiPath + url;\n\n                    if ( request.headers ) {\n                        request.headers['Authorization'] = 'Bearer ' + value.session.accessToken;\n                        request.headers['Content-Type'] = 'application/json';\n                        request.headers['Accept-Language'] = core.environment.language;\n                        request.headers['X-User-Agent'] = userAgent + (eth0 && wifi ? 'Ethernet,WiFi' : wifi ? 'WiFi' : eth0 ? 'Ethernet' : '');\n                    } else {\n                        request.headers = {\n                            Authorization: 'Bearer ' + value.session.accessToken,\n                            'Content-Type': 'application/json',\n                            'Accept-Language': core.environment.language,\n                            'X-User-Agent': userAgent + (eth0 && wifi ? 'Ethernet,WiFi' : wifi ? 'WiFi' : eth0 ? 'Ethernet' : '')\n                        };\n                    }\n\n                    //apiDebug('request: ' + method + ' ' + request.url);\n\n                    //apiDebug('async: ' + request.async);\n\n                    // remove properties with \"undefined\" values, so print incomplete information\n                    //apiDebug('headers: ' + JSON.stringify(request.headers));\n\n                    apiDebug(\n                        'curl -X ' +\n                        method + ' \"' + request.url + '\" -H ' +\n                        Object.keys(request.headers).map(function ( key ) { return '\"' + key + ': ' + request.headers[key] + '\"'; }).join(' -H ') +\n                        (options.body ? (' -d \\'' + options.body + '\\'') : '')\n                    );\n\n                    if ( options.type ) {\n                        apiDebug('responseType: ' + options.type);\n                    }\n\n                    if ( options.timeout ) {\n                        apiDebug('timeout: ' + options.timeout);\n                    }\n\n                    value.requests.push(request);\n\n                    return originalRequest(url, options);\n                };\n            })();\n        }\n    }\n\n    if ( property === 'notify' ) {\n        notify = notificationStack = null;\n        $widget.parentNode.removeChild($widget);\n    }\n\n    Core.prototype[property] = value;\n};\n\n\nmodule.exports = Core;\n","/**\n * @module cjs-async/parallel\n * @license The MIT License (MIT)\n * @author Stanislav Kalashnik <darkpark.main@gmail.com>\n */\n\n'use strict';\n\n/**\n * Method to be called to set task as completed.\n *\n * @callback onTaskFinishCallback\n *\n * @param {boolean} error status of the task execution\n * @param {Array} result data to return from the task\n */\n\n/**\n * Task method to be executed.\n *\n * @callback taskHandler\n *\n * @param {module:cjs-async/parallel~onTaskFinishCallback} [callback] method to be called to set task as completed\n *\n * @example\n * function ( callback ) {\n *     callback(null, true);\n * }\n */\n\n/**\n * Method to be called on all given tasks completion.\n *\n * @callback onFinishCallback\n *\n * @param {boolean} error status of all tasks execution\n * @param {Array} result data received from all tasks\n */\n\n/**\n * Parallel tasks execution.\n *\n * @param {module:cjs-async/parallel~taskHandler[]} tasks set of tasks to execute\n * @param {module:cjs-async/parallel~onFinishCallback} [callback] optional callback to run once all the tasks have completed\n *\n * @example\n * parallel(taskList, function ( error, results ) {\n *     console.log(error, results);\n * });\n */\nmodule.exports = function ( tasks, callback ) {\n    var isError = false,\n        counter = 0,\n        results = [];\n\n    function handler ( task, index ) {\n        var done = function ( error, result ) {\n            // error happened in some other task\n            if ( isError ) {\n                // callback was already used\n                return;\n            }\n\n            if ( error ) {\n                // exit this task\n                // and prevent other to callback\n                isError = true;\n\n                callback(error);\n\n                return;\n            }\n\n            // fill results\n            results[index] = result;\n\n            counter++;\n\n            // all tasks are processed\n            if ( counter === tasks.length ) {\n                callback(null, results);\n            } else if ( counter > tasks.length ) {\n                throw Error('done callback invoked more than one time in function with ' + index + ' position in tasks array');\n            }\n        };\n\n        // actual call condition\n        if ( task.length === 0 ) {\n            done(null, task());\n        } else {\n            task(done);\n        }\n    }\n\n    // sanitize\n    tasks = Array.isArray(tasks) ? tasks : [];\n\n    // sanitize final handler\n    if ( typeof callback !== 'function' ) {\n        callback = function () { /* just in case */ };\n    }\n\n    // no tasks were given\n    if ( tasks.length === 0 ) {\n        // empty result\n        callback(null, results);\n    } else {\n        // run all tasks\n        tasks.forEach(handler);\n    }\n};\n","'use strict';\n\nvar Emitter = require('cjs-emitter'),\n    system = new Emitter();\n\n\nmodule.exports = system;\n","/**\n * Config loader\n *\n * @author Igor Zaporozhets <i.zaporozhets@infomir.com>\n */\n\n'use strict';\n\n/* eslint new-cap: 0 */\n\nvar parallel = require('cjs-async/parallel'),\n\n    currentPlatform = {\n        model: null,\n        version: null\n    },\n\n    useVersions = true,\n\n    MAJOR_VERSION = 0,\n    MINOR_VERSION = 1,\n    PATCH_VERSION = 2,\n\n    height, deviceModelName;\n\nif ( PLATFORM === 'MAG' || NANOCORE ) {\n    currentPlatform.version = window.gSTB.GetDeviceImageVersionCurrent().split('-')[0].split('.').map(Number);\n    currentPlatform.model = top.gSTB.GetDeviceModelExt ? top.gSTB.GetDeviceModelExt() : top.gSTB.GetDeviceModel();\n    deviceModelName = top.gSTB.GetDeviceModel();\n}\n\nif ( DEVELOP ) {\n    debug('mag')('model ' + currentPlatform.model);\n    debug('mag')('version ' + currentPlatform.version);\n}\n\n\nfunction fixUris ( appConfig, basePath, pluginsPath ) {\n    var urlParts = [];\n\n    if ( typeof appConfig.url !== 'string' || appConfig.type === 'plugin' ) {\n        if ( appConfig.type === 'plugin' ) {\n            if ( appConfig.url && appConfig.url.indexOf('.js') !== -1 ) {\n                urlParts.push(appConfig.url);\n                appConfig.path = appConfig.url + '/../';\n            } else {\n                urlParts.push(pluginsPath);\n                urlParts.push(appConfig.packageName);\n                if ( useVersions ) {\n                    urlParts.push(appConfig.version);\n                }\n                urlParts.push(appConfig.uris.app || '');\n                appConfig.path = urlParts.join('/');\n                urlParts.push(appConfig.uris.entry || 'index.js');\n            }\n        } else if ( appConfig.uris.entry && appConfig.uris.entry.indexOf('://') !== -1 ) {\n            urlParts.push(appConfig.uris.entry);\n        } else if ( appConfig.uris.app && appConfig.uris.app.indexOf('://') > -1 ) {\n            urlParts.push(appConfig.uris.app);\n            urlParts.push(appConfig.uris.entry);\n        } else {\n            urlParts.push(basePath);\n            urlParts.push(appConfig.packageName);\n            if ( useVersions ) {\n                urlParts.push(appConfig.version || '');\n            }\n            urlParts.push(appConfig.uris.app || 'app');\n            urlParts.push(appConfig.uris.entry || 'index.html');\n        }\n        appConfig.url = urlParts.join('/');\n        //.replace(/\\/\\//g, '/');\n    }\n\n    if ( DEVELOP ) {\n        debug('config')('app uri: ' + appConfig.url);\n    }\n}\n\n\n/* eslint max-statements: 0 */\nfunction normalizeAppConfig ( appConfig, globalOptions ) {\n    var basePath = globalOptions.appsPackagesPath,\n        dependencies = Object.keys(appConfig.dependencies || []),\n        versions = dependencies.map(function ( item ) {\n            return appConfig.dependencies[item];\n        }),\n        options = [],\n        urlParts = [],\n        protocol, icon;\n\n    if ( dependencies.length > 0 ) {\n        appConfig.dependencies = {};\n        dependencies.forEach(function ( dependency, index ) {\n            if ( dependency.indexOf('plugin') !== -1 ) {\n                appConfig.dependencies[dependency] = versions[index];\n            }\n        });\n    }\n\n    appConfig.uris = appConfig.uris || {};\n\n    if ( PLATFORM === 'MAG' && MODE === 'MINISTRA' ) {\n        if ( TARGET === 'android-stb' || TARGET === 'android-app' ) {\n            basePath = location.href\n                .replace(location.search, '')\n                .replace(location.hash, '') +\n                '/' + globalOptions.appsPackagesPath;\n\n        } else if ( globalOptions.appsPackagesPath.indexOf('://') === -1 ) {\n            basePath = globalOptions.stalkerHost + '/' + globalOptions.appsPackagesPath;\n        } else {\n            basePath = globalOptions.appsPackagesPath;\n        }\n    } else {\n        if ( globalOptions.appsPackagesPath.indexOf('://') === -1 ) {\n            // relative path\n            basePath = location.href.replace(location.search, '').replace(location.hash, '') +\n                '/' + globalOptions.appsPackagesPath;\n        }\n        if ( PLATFORM === 'BROWSER' ) {\n            basePath = globalOptions.appsPackagesPath;\n        }\n    }\n\n    fixUris(appConfig, basePath, globalOptions.pluginsPath);\n\n    if ( appConfig.options ) {\n        Object.keys(appConfig.options).forEach(function ( name ) {\n            options.push(name + '=' + appConfig.options[name]);\n        });\n        if ( options.length > 0 ) {\n            appConfig.url += '?';\n            appConfig.url += options.join('&');\n        }\n    }\n    urlParts = appConfig.url.split('/');\n    protocol = urlParts.shift() + '/';\n    while ( urlParts[0].length === 0 ) {\n        protocol += '/';\n        urlParts.shift();\n    }\n    appConfig.url = protocol + urlParts.filter(Boolean).join('/');\n\n    if ( appConfig.type !== 'plugin' ) {\n        appConfig.uris.icons = appConfig.uris.icons || {};\n\n        if ( appConfig.uris.icons[height] ) {\n            appConfig.uris.icons = appConfig.uris.icons[height];\n\n            for ( icon in appConfig.uris.icons ) {\n                if ( icon.indexOf('://') === -1 ) {\n                    urlParts.splice(0);\n                    if ( appConfig.uris.app.indexOf('://') > -1 ) {\n                        urlParts.push(appConfig.uris.app);\n                        urlParts.push(appConfig.uris.icons[icon]);\n                    } else {\n                        urlParts.push(basePath);\n                        urlParts.push(appConfig.packageName);\n                        if ( useVersions && appConfig.version ) {\n                            urlParts.push(appConfig.version);\n                        }\n                        if ( appConfig.uris.app ) {\n                            urlParts.push(appConfig.uris.app);\n                        }\n                        urlParts.push(appConfig.uris.icons[icon]);\n                    }\n                    appConfig.uris.icons[icon] = urlParts.join('/');\n                }\n            }\n\n            // if ( appConfig.uris.icons.logoNormal ) {\n            //     if ( appConfig.uris.icons.logoNormal.indexOf('://') === -1 ) {\n            //         urlParts.splice(0);\n            //         if ( appConfig.uris.app.indexOf('://') > -1 ) {\n            //             urlParts.push(appConfig.uris.app);\n            //             urlParts.push(appConfig.uris.icons.logoNormal);\n            //         } else {\n            //             urlParts.push(basePath);\n            //             urlParts.push(appConfig.packageName);\n            //             if ( appConfig.version ) {\n            //                 urlParts.push(appConfig.version);\n            //             }\n            //             if ( appConfig.uris.app ) {\n            //                 urlParts.push(appConfig.uris.app);\n            //             }\n            //             urlParts.push(appConfig.uris.icons.logoNormal);\n            //         }\n            //         appConfig.uris.icons.logoNormal = urlParts.join('/');\n            //     }\n            // }\n\n            // if ( appConfig.uris.icons.logoActive ) {\n            //     if ( appConfig.uris.icons.logoActive.indexOf('://') === -1 ) {\n            //         urlParts.splice(0);\n            //         if ( appConfig.uris.app.indexOf('://') > -1 ) {\n            //             urlParts.push(appConfig.uris.app);\n            //             urlParts.push(appConfig.uris.icons.logoActive);\n            //         } else {\n            //             urlParts.push(basePath);\n            //             urlParts.push(appConfig.packageName);\n            //             if ( appConfig.version ) {\n            //                 urlParts.push(appConfig.version);\n            //             }\n            //             if ( appConfig.uris.app ) {\n            //                 urlParts.push(appConfig.uris.app);\n            //             }\n            //             urlParts.push(appConfig.uris.icons.logoActive);\n            //         }\n            //         appConfig.uris.icons.logoActive = urlParts.join('/');\n            //     }\n            // }\n        }\n\n        appConfig.colors = appConfig.colors || {};\n        appConfig.colors.splashFont = appConfig.colors.splashFont || '#fff';\n        appConfig.colors.splashBackground = appConfig.colors.splashBackground || '#333';\n    }\n\n    appConfig.icons = appConfig.icons || {};\n\n    return appConfig;\n}\n\n\nfunction validVersion ( required ) {\n    if ( required !== '*') {\n        required = required.split('.');\n        console.log(currentPlatform.version, required);\n\n        if ( required[MAJOR_VERSION] !== '*' ) {\n            if ( Number(required[MAJOR_VERSION]) !== currentPlatform.version[MAJOR_VERSION] ) {\n                return false;\n            }\n        }\n\n        if ( required[MINOR_VERSION] !== '*' ) {\n            if ( Number(required[MINOR_VERSION]) === currentPlatform.version[MINOR_VERSION] ) {\n                if ( required[PATCH_VERSION] === '*' ) {\n                    return true;\n                }\n\n                return Number(required[PATCH_VERSION]) === currentPlatform.version[PATCH_VERSION];\n            }\n\n            return false;\n        }\n    }\n\n    return true;\n}\n\n/**\n *\n * @param {Object} config - package config\n * @param {string} customModel - specified device model\n *\n * @example\n *\n * isNativePlatform({\n *    platforms: {\n *      exclude: {\n *         MAG275: '*'\n *      },\n *      MAG254: '*',\n *      AndroidAPP: '*',\n *      AndroidSTB: {\n *        'MAG425A': '*'\n *      }\n *    }\n * });\n */\nfunction isNativePlatform ( config, customModel ) {\n    var models, index, size, model;\n\n    if ( config.platforms ) {\n        if ( customModel ) {\n            model = customModel;\n        } else {\n            model = currentPlatform.model;\n        }\n\n        models = Object.keys(config.platforms);\n        index = 0;\n        size = models.length;\n\n        console.log(typeof config.platforms['exclude'] !== 'undefined', 'und');\n        if ( typeof config.platforms['exclude'] !== 'undefined' ) {\n            console.log(model, typeof config.platforms['exclude'][model]);\n            if ( typeof config.platforms['exclude'][model] === 'undefined' ) {\n                return true;\n            }\n\n            console.log(model);\n            console.log(config.platforms['exclude'][model]);\n            if ( typeof config.platforms['exclude'][model] === 'object' ) {\n                return isNativePlatform(\n                    {\n                        platforms: {\n                            exclude: config.platforms['exclude'][model]\n                        }\n                    },\n                    deviceModelName\n                );\n            }\n\n            return !validVersion(config.platforms['exclude'][model]);\n        }\n\n        while ( index < size ) {\n            if ( models[index] === model ) {\n                if ( typeof config.platforms[models[index]] === 'object' ) {\n                    return isNativePlatform(\n                        {\n                            platforms: config.platforms[models[index]]\n                        },\n                        deviceModelName\n                    );\n                } else if ( validVersion(config.platforms[models[index]]) ) {\n                    return true;\n                }\n            }\n            ++index;\n        }\n\n        return false;\n    }\n\n    return true;\n}\n\n\nfunction prepareConfig ( remoteConfig, localConfig, callback ) {\n    var overriddenAppList = localConfig ? localConfig.apps : [],\n        overriddenAppMap = {},\n        index = 0,\n        apps = [],\n        themes, theme, size, appId, xhr, $anchor;\n\n    if ( !remoteConfig.apps ) {\n        remoteConfig.apps = [];\n    }\n\n    if ( remoteConfig.options.ignoreVersions ) {\n        useVersions = false;\n    }\n\n    if ( remoteConfig.options.pluginsPath.indexOf('../') !== -1 ) {\n        $anchor = document.createElement('a');\n        $anchor.href = remoteConfig.options.pluginsPath;\n        remoteConfig.options.pluginsPath = $anchor.href;\n    }\n\n    if ( PLATFORM === 'MAG' && MODE === 'MINISTRA' ) {\n        size = remoteConfig.apps.length;\n\n        while ( index < size ) {\n            if ( isNativePlatform(remoteConfig.apps[index]) ) {\n                if ( DEVELOP ) {\n                    debug('config')('add package ' + remoteConfig.apps[index].packageName);\n                }\n                apps.push(remoteConfig.apps[index]);\n            } else if ( DEVELOP ) {\n                debug('config')('remove package ' + remoteConfig.apps[index].packageName);\n            }\n\n            ++index;\n        }\n\n        remoteConfig.apps = apps;\n    }\n\n\n    overriddenAppList.forEach(function ( overriddenAppConfig ) {\n        overriddenAppMap[overriddenAppConfig.packageName || overriddenAppConfig.name] = overriddenAppConfig;\n    });\n    overriddenAppList.splice(0);\n\n    size = remoteConfig.apps.length;\n    index = 0;\n\n    // fix icon paths\n    while ( index < size ) {\n        remoteConfig.apps[index] = normalizeAppConfig(remoteConfig.apps[index], remoteConfig.options);\n        appId = remoteConfig.apps[index].packageName || remoteConfig.apps[index].name;\n\n        if ( overriddenAppMap[appId] ) {\n            remoteConfig.apps[index].locked = overriddenAppMap[appId].locked;\n        }\n\n        ++index;\n    }\n\n    index = 0;\n    if ( remoteConfig.options.themePath ) {\n        remoteConfig.theme = remoteConfig.options.stalkerHost + remoteConfig.options.themePath.replace('{screen_height}', height + '.css');\n        remoteConfig.themeVars = remoteConfig.themes = {};\n        callback(null, remoteConfig);\n    } else {\n        themes = Object.keys(remoteConfig.themes);\n        size = themes.length;\n\n        while ( index < size ) {\n            theme = remoteConfig.themes[themes[index]];\n\n            if ( theme.indexOf('://') === -1 ) {\n                if ( MODE === 'MINISTRA' ) {\n                    if ( PLATFORM === 'MAG' ) {\n                        if ( remoteConfig.options.appsPackagesPath.indexOf('://') === -1 ) {\n                            remoteConfig.themes[themes[index]] = '' + remoteConfig.options.stalkerHost + '/' +\n                                remoteConfig.options.appsPackagesPath + '/' + themes[index] + '/' + theme + '/';\n                        } else {\n                            remoteConfig.themes[themes[index]] = remoteConfig.options.appsPackagesPath + '/' + themes[index] + '/' + theme + '/';\n                        }\n                    } else {\n                        remoteConfig.themes[themes[index]] = location.href.replace(location.search, '').replace(location.hash, '') +\n                            '/' + remoteConfig.options.appsPackagesPath + '/' + themes[index] + '/' + theme + '/';\n                    }\n                } else if ( PLATFORM === 'MAG' || NANOCORE ) {\n                    if ( remoteConfig.options.appsPackagesPath.indexOf('://') === -1 ) {\n                        remoteConfig.themes[themes[index]] = location.href.replace(location.search, '').replace(location.hash, '') +\n                            '/' + remoteConfig.options.appsPackagesPath + '/' + themes[index] + '/' + theme + '/';\n                    } else {\n                        remoteConfig.themes[themes[index]] = remoteConfig.options.appsPackagesPath + '/' + themes[index] + '/' + theme + '/';\n                    }\n                }\n            }\n            ++index;\n        }\n        remoteConfig.theme = remoteConfig.themes[themes[0]];\n\n        xhr = new XMLHttpRequest();\n        xhr.onload = function () {\n            if ( this.status === 200 && this.responseText )  {\n                try {\n                    remoteConfig.themeVars = JSON.parse(this.responseText);\n                } catch ( exception ) {\n                    remoteConfig.themeVars = {};\n                }\n            }\n            callback(null, remoteConfig);\n        };\n        xhr.open('GET', remoteConfig.theme + 'src/vars.json');\n        xhr.send();\n\n        xhr.onerror = xhr.ontimeout = function () {\n            callback(null, remoteConfig);\n        };\n    }\n\n    if ( DEVELOP ) {\n        debug('kernel')(JSON.stringify(remoteConfig.theme));\n    }\n}\n\n\nheight = screen.height;\nswitch ( height ) {\n    case 480:\n    case 576:\n    case 720:\n    case 1080:\n        break;\n\n    default:\n        height = 720;\n        break;\n}\n\n/**\n * Clear and fill the manager with the given list of pages.\n *\n * @param {Object} config options\n * @param {string} config.link config address to load\n * @param {function} callback hook on ready\n */\nmodule.exports = {\n    systemSettings: {},\n    settings: {},\n    environment: {},\n    data: {},\n    url: null,\n    load: function ( args, allDone ) {\n        var languages = require('../../../../../../config').languages,\n            self = this,\n            localizedNames = null,\n            configPath, environmentLanguage;\n\n        if ( DEVELOP ) {\n            debug('config')('start load');\n        }\n\n        // default is local file\n        if ( args.config ) {\n            configPath = args.config;\n        } else if ( MODE === 'PORTAL' && PLATFORM === 'MAG' ) {\n            configPath = 'config/' + currentPlatform.model + '.json';\n        } else if ( MODE === 'MINISTRA' && (TARGET === 'android-stb' || TARGET === 'android-app') ) {\n            environmentLanguage = require('../system/environment').language;\n            if ( languages.indexOf(environmentLanguage) === -1 ) {\n                configPath = 'config.en.json';\n            } else {\n                configPath = 'config.' + environmentLanguage + '.json';\n            }\n        } else {\n            configPath = 'config.json';\n        }\n        this.url = configPath;\n\n        parallel([\n            function remoteConfigLoader ( done ) {\n                var xhr = new XMLHttpRequest();\n\n                xhr.onload = function () {\n                    var error = false;\n\n                    try {\n                        self.data = JSON.parse(xhr.responseText);\n                    } catch ( exception ) {\n                        error = 'config url ' + configPath + '<br>' +\n                            'config content: ' + xhr.responseText + '<br>response status ' +  xhr.status + '<br>' + exception;\n                    }\n\n                    done(error, self.data);\n                };\n\n                xhr.onerror = xhr.ontimeout = function () {\n                    done(this.status + ': ' + this.responseText);\n                };\n\n                if ( DEVELOP ) {\n                    debug('config')('url: ' + configPath);\n                }\n                xhr.open('GET', configPath, true);\n                xhr.send(null);\n            },\n            function localConfigLoader ( done ) {\n                var xhr, loadPath;\n\n                if ( PLATFORM === 'MAG' && MODE === 'PORTAL' ) {\n                    // loading localized data\n                    xhr = new XMLHttpRequest();\n\n                    if ( languages.indexOf(require('../system/environment').language) === -1 ) {\n                        loadPath = 'langs/en.json';\n                    } else {\n                        loadPath = 'langs/' + require('../system/environment').language + '.json';\n                    }\n                    xhr.onload = function () {\n                        var error = false;\n\n                        try {\n                            localizedNames = JSON.parse(xhr.responseText);\n                        } catch ( exception ) {\n                            error = 'config url ' + loadPath + '<br>' +\n                                'config content: ' + xhr.responseText + '<br>response status ' +  xhr.status + '<br>' + exception;\n                        }\n\n                        done(error, window.core.storage.getItem('config'));\n                    };\n\n                    xhr.onerror = xhr.ontimeout = function () {\n                        done(this.status + ': ' + this.responseText);\n                    };\n\n                    if ( DEVELOP ) {\n                        debug('config')('url: ');\n                    }\n                    xhr.open('GET', loadPath, true);\n                    xhr.send(null);\n                } else {\n                    done(false, window.core.storage.getItem('config'));\n                }\n            }\n        ], function ( error, results ) {\n            if ( error ) {\n                allDone(error);\n            } else {\n                /**\n                 * self.data =\n                 */\n                prepareConfig(results[0], results[1], function ( err, data ) {\n                    if ( localizedNames !== null ) {\n                        data.apps.forEach(function ( app ) {\n                            if ( localizedNames[app.packageName] ) {\n                                app.name = localizedNames[app.packageName].name;\n                                app.description = localizedNames[app.packageName].description;\n                            }\n                        });\n                    }\n                    self.data = data;\n                    allDone();\n                });\n            }\n        });\n    }\n};\n","'use strict';\n\n\nmodule.exports = {\n    init: function () {\n        var index = 0,\n            $nodes;\n\n        if ( MODE === 'MINISTRA' ) {\n            $nodes = document.getElementsByClassName('app-icon');\n\n            if ( $nodes[index] ) {\n                // stop animation without abrupt interruption\n                while ( index <= 3 ) {\n                    $nodes[index].classList.remove('animated');\n                    index++;\n                }\n            }\n        }\n\n        if ( !NANOCORE ) {\n            // window.splash.className = 'container';\n            window.splashAppVersion.innerText = '';\n            if ( window.loader && document.getElementById('loader') && document.getElementById('loader').parentElement ) {\n                // remove loader\n                document.body.removeChild(document.getElementById('loader'));\n            }\n        }\n    },\n    show: function ( config ) {\n        window.splash.style.backgroundImage = 'url(' + config.uris.icons.logoActive + ')';\n        window.splash.style.backgroundColor = config.colors.splashBackground;\n        window.splash.style.zIndex = '9999';\n        window.splashAppName.innerText = config.name;\n        window.splashAppName.style.color = config.colors.splashFont;\n        window.splashAppVersion.innerText = config.version;\n        // show splash\n        window.splash.classList.remove('invisible');\n        this.active = true;\n    },\n    hide: function () {\n        // hide splash\n        window.splash.className = 'container invisible';\n        window.splash.removeAttribute('style');\n        this.active = false;\n    },\n    active: false\n};\n","/**\n * Abstract platform api module.\n *\n * @author Igor Zaporozhets <deadbyelpy@gmail.com>\n * @license GNU GENERAL PUBLIC LICENSE Version 3\n */\n\n\n'use strict';\n\n\nvar api = null;\n\n\nif ( PLATFORM === 'MAG' || NANOCORE ) {\n    api = require('../platforms/mag/api');\n}\n\nif ( PLATFORM === 'SMARTTV' ) {\n    api = require('../platforms/smarttv/api');\n}\n\nif ( PLATFORM === 'TIZEN' ) {\n    api = require('../platforms/tizen/api');\n\n    window.extendCorePrototype('device', {\n        model: 'Tizen',\n        serialNumber: '',\n        vendor: 'Samsung',\n        versionHardware: '',\n        activeBank: '',\n        imageDescription: '',\n        imageVersion: '',\n        imageVersionCurrent: '',\n        mac: '',\n        memory: ''\n    });\n}\n\nif ( PLATFORM === 'BROWSER' ) {\n    api = require('../platforms/browser/api');\n}\n\nif ( PLATFORM === 'WEBOS' ) {\n    api = require('../platforms/webos/api');\n    api.exit = function () {\n        window.webOS.platformBack();\n    };\n\n    window.extendCorePrototype('device', {\n        model: 'WebOSTV',\n        serialNumber: '',\n        vendor: 'LG',\n        versionHardware: '',\n        activeBank: '',\n        imageDescription: '',\n        imageVersion: '',\n        imageVersionCurrent: '',\n        mac: '',\n        memory: ''\n    });\n}\n\nwindow.top.platformApi = api;\n\nmodule.exports = api;\n","'use strict';\n\n\n/* eslint max-lines-per-function: ['error', {max: 400, skipBlankLines: true, skipComments: true}] */\n/* eslint max-statements: ['warn', 74, {ignoreTopLevelFunctions: false}], */\nvar Intent = require('./intent'),\n    Core   = require('../kernel/core'),\n\n    systemConfig  = require('../tools/config'),\n\n    splash = require('../../components/splash'),\n\n    intentMap = {},\n    hooks     = {},\n\n    // lazy required modules\n    taskManager = null,\n    coreManager = null,\n\n    intentRouter = {\n        lastRoute: null,\n        create: function ( config, callback ) {\n            return new Intent(config, callback);\n        },\n        route: function ( intent, callerCoreInstance, selfCall ) {\n            var result = {\n                    runConfig: null,\n                    handlerList: null\n                },\n                config;\n\n            if ( DEVELOP ) {\n                debug('intent')('route intent with action: ' + intent.action);\n                debug('intent')('route core.pid: ' + callerCoreInstance.pid);\n            }\n\n            if ( coreManager === null ) {\n                coreManager = require('../kernel/core.manager');\n            }\n            if ( taskManager === null ) {\n                taskManager = require('./task.manager');\n            }\n\n            if ( intent.context ) {\n                // try to resolve previous config\n                if ( DEVELOP ) {\n                    debug('intent')('try resolve intent with existing context, pid: ' + intent.context.pid);\n                }\n                if ( typeof intent.context.pid === 'undefined' ) {\n                    intent.state = Intent.prototype.STATE_NOT_RESOLVED;\n                    if ( DEVELOP ) {\n                        debug('intent')('no pid in context');\n                    }\n                } else {\n                    intent.state = Intent.prototype.STATE_RESOLVED;\n\n                    intent.receiver = intent.context.pid;\n                    intent.creator  = callerCoreInstance.pid;\n\n                    this.lastRoute = {\n                        intent: intent,\n                        core: callerCoreInstance\n                    };\n\n                    if ( DEVELOP ) {\n                        debug('intent')('receiver ' + intent.receiver);\n                        debug('intent')('creator ' + intent.creator);\n                    }\n\n                    if ( !selfCall && hooks['before:' + intent.action] ) {\n                        if ( DEVELOP ) {\n                            debug('intent')('hooks[before:' + intent.action + ']');\n                        }\n                        hooks['before:' + intent.action].forEach(function ( hookCallback ) {\n                            hookCallback(intent, taskManager.apps[callerCoreInstance.pid]);\n                        });\n                        if ( intent.state === Intent.prototype.STATE_PAUSED ) {\n                            intent.continueCallback = function () {\n                                intentRouter.route(intent, callerCoreInstance, true);\n                            };\n\n                            result.handlerList = null;\n\n                            return result;\n                        }\n                    }\n\n                    intent.runnerConfig = taskManager.apps[callerCoreInstance.pid].config;\n                    taskManager.apps[intent.context.pid].core.emit('intent', intent, function ( error, context ) {\n                        if ( DEVELOP ) {\n                            debug('intent')('intent with context callback result: ' + (!error));\n                        }\n\n                        if ( hooks[intent.action] ) {\n                            hooks[intent.action].forEach(function ( hookCallback ) {\n                                hookCallback(intent, taskManager.apps[callerCoreInstance.pid]);\n                                if ( DEVELOP ) {\n                                    debug('intent')('call hook!!!!!!!!!!!!!!');\n                                }\n                            });\n                        }\n\n                        if ( error ) {\n                            intent.state = Intent.prototype.STATE_ERROR_RECEIVED;\n                            if ( DEVELOP ) {\n                                debug('intent')('error in intent callback');\n                            }\n                            if ( intent.callback ) {\n                                if ( DEVELOP ) {\n                                    debug('intent')('context: ' + context.pid);\n                                }\n                                intent.callback(error, context);\n                            }\n                        } else {\n                            intent.state = Intent.prototype.STATE_CONTEXT_RECEIVED;\n                            if ( DEVELOP ) {\n                                debug('intent')('context: ' + context.pid);\n                            }\n                            context.pid = intent.context.pid;\n\n                            intent.addListener('close', function ( closeApplication ) {\n                                if ( callerCoreInstance === null ) {\n                                    return;\n                                }\n\n                                if ( DEVELOP ) {\n                                    debug('intent')('close with context');\n                                    debug('intent')('closeApplication? ' + closeApplication);\n                                    debug('intent')('show caller? ' + callerCoreInstance &&\n                                        callerCoreInstance.pid && taskManager.apps[callerCoreInstance.pid]);\n                                }\n\n                                if ( closeApplication ) {\n                                    taskManager.close(taskManager.apps[callerCoreInstance.pid]);\n                                    callerCoreInstance = null;\n                                    taskManager.show(taskManager.launcher);\n                                } if ( callerCoreInstance && callerCoreInstance.pid && taskManager.apps[callerCoreInstance.pid] ) {\n                                    taskManager.show(taskManager.apps[callerCoreInstance.pid], {\n                                        source: Core.prototype.SOURCES.INTENT,\n                                        data: {\n                                            intent: intent\n                                        }\n                                    });\n                                } else {\n                                    callerCoreInstance = null;\n                                    taskManager.show(taskManager.launcher);\n                                }\n                            });\n\n                            if ( intent.callback ) {\n                                if ( DEVELOP ) {\n                                    debug('intent')('context: ' + context.pid);\n                                }\n                                //intent.callback(false, context);\n                            }\n                        }\n                    });\n                }\n\n                return result;\n            }\n\n            result.handlerList = this.findIntentHandlers(intent);\n            if ( result.handlerList.length > 0 ) {\n                intent.state = Intent.prototype.STATE_RESOLVED;\n                config = result.handlerList[0];\n\n                this.lastRoute = {\n                    intent: intent,\n                    core: callerCoreInstance\n                };\n\n                // if ( taskManager.home && !firstHomeIntent && taskManager.home.core === callerCoreInstance ) {\n                //     setInterval(function () {\n                //         console.log(taskManager.home.$iframe.isVisible);\n                //     }, 50)\n                //     taskManager.home.$iframe.hide();\n                //     setTimeout(function () {\n                //         taskManager.home.$iframe.hide();\n                //     }, 0);\n                //     firstHomeIntent = true;\n                // }\n\n                if ( typeof config.pid !== 'undefined' && taskManager.apps[config.pid] ) {\n                    if ( taskManager.apps[callerCoreInstance.pid] ) {\n                        intent.runnerConfig = taskManager.apps[callerCoreInstance.pid].config;\n                    } else if ( taskManager.focusedApp ) {\n                        intent.runnerConfig = taskManager.focusedApp.config;\n                    }\n                    if ( taskManager.apps[config.pid].core ) {\n                        intent.receiver = config.pid;\n                        intent.creator  = callerCoreInstance.pid;\n                        if ( DEVELOP ) {\n                            debug('intent')('receiver ' + intent.receiver);\n                            debug('intent')('creator ' + intent.creator);\n                        }\n\n                        if ( !selfCall && hooks['before:' + intent.action] ) {\n                            if ( DEVELOP ) {\n                                debug('intent')('hooks[before:' + intent.action + ']');\n                            }\n                            hooks['before:' + intent.action].forEach(function ( hookCallback ) {\n                                hookCallback(intent, taskManager.apps[callerCoreInstance.pid]);\n                            });\n\n                            if ( intent.state === Intent.prototype.STATE_PAUSED ) {\n                                taskManager.apps[callerCoreInstance.pid].$iframe.hide();\n                                intent.continueCallback = function () {\n                                    if ( intent.silent ) {\n                                        taskManager.apps[callerCoreInstance.pid].$iframe.show();\n                                    }\n\n                                    intentRouter.route(intent, callerCoreInstance, true);\n                                };\n\n                                result.handlerList = null;\n\n                                return result;\n                            }\n                        }\n\n                        if ( DEVELOP ) {\n                            debug('intent')('emit intent ' + config.name);\n                            debug('intent')(config.pid);\n                            debug('intent')(Object.keys(taskManager.apps).length);\n                        }\n\n                        taskManager.apps[config.pid].core.emit('intent', intent, function ( error, context ) {\n                            if ( DEVELOP ) {\n                                debug('intent')('CALLBACK');\n                                debug('intent')('error: ' + error);\n                                debug('intent')(intent.action);\n                            }\n                            if ( hooks[intent.action] ) {\n                                hooks[intent.action].forEach(function ( hookCallback ) {\n                                    hookCallback(intent, taskManager.apps[callerCoreInstance.pid]);\n                                    if ( DEVELOP ) {\n                                        debug('intent')('call hook!!!!!!!!!!!!!!');\n                                    }\n                                });\n                            }\n                            context = context || {};\n                            context.pid = config.pid;\n                            if ( intent.silent ) {\n                                if ( DEVELOP ) {\n                                    debug('intent')('silent intent');\n                                }\n                                if ( intent.callback ) {\n                                    if ( DEVELOP ) {\n                                        debug('intent')('context: ' +  context.pid);\n                                    }\n                                    intent.callback(error, context);\n                                }\n\n                                if ( DEVELOP ) {\n                                    debug('intent')('add once listener');\n                                }\n                                intent.once('close', function ( closeApplication ) {\n                                    var task;\n\n                                    if ( DEVELOP ) {\n                                        debug('intent')('intent close');\n                                        debug('intent')('intent close application? ' + closeApplication);\n                                        debug('intent')(callerCoreInstance && callerCoreInstance.pid && taskManager.apps[callerCoreInstance.pid]);\n                                    }\n\n                                    if ( closeApplication ) {\n                                        if ( taskManager.apps[callerCoreInstance.pid] ) {\n                                            taskManager.close(taskManager.apps[callerCoreInstance.pid]);\n                                        }\n                                        while ( taskManager.stack.length ) {\n                                            task = taskManager.stack.pop();\n                                            task.$iframe.hide();\n                                            task.core.emit('hide', {\n                                                source: Core.prototype.SOURCES.SYSTEM\n                                            });\n                                        }\n                                        taskManager.show(taskManager.launcher);\n                                        setTimeout(function () {\n                                            taskManager.topApp = null;\n                                        }, 0);\n                                    } else if ( callerCoreInstance && callerCoreInstance.pid && taskManager.apps[callerCoreInstance.pid] ) {\n                                        taskManager.show(taskManager.apps[callerCoreInstance.pid], {\n                                            source: Core.prototype.SOURCES.INTENT,\n                                            data: {\n                                                intent: intent\n                                            }\n                                        });\n                                    } else {\n                                        callerCoreInstance = null;\n                                        while ( taskManager.stack.length ) {\n                                            task = taskManager.stack.pop();\n                                            task.$iframe.hide();\n                                            task.core.emit('hide', {\n                                                source: Core.prototype.SOURCES.INTENT,\n                                                data: {\n                                                    intent: intent\n                                                }\n                                            });\n                                        }\n                                        taskManager.show(taskManager.launcher);\n                                        setTimeout(function () {\n                                            taskManager.topApp = null;\n                                        }, 0);\n                                    }\n                                });\n\n                                return;\n                            }\n\n                            if ( error ) {\n                                intent.state = Intent.prototype.STATE_ERROR_RECEIVED;\n                                if ( DEVELOP ) {\n                                    debug('intent')('error in intent callback');\n                                }\n                                if ( intent.callback ) {\n                                    intent.callback(error, context);\n                                }\n                            } else {\n                                intent.state = Intent.prototype.STATE_CONTEXT_RECEIVED;\n                                if ( DEVELOP ) {\n                                    debug('intent')('context.pid: ' +  context.pid);\n                                    debug('intent')('config.pid: ' +  config.pid);\n                                    debug('intent')('no error in intent callback');\n                                }\n                                if ( taskManager.apps[config.pid].config.type === 'osd' ) {\n                                    //taskManager.apps[config.pid].core.call('show');\n\n                                    if ( DEVELOP ) {\n                                        debug('intent')('add once listener');\n                                    }\n                                    intent.once('close', function ( restoreApplication ) {\n\n                                        if ( DEVELOP ) {\n                                            debug('intent')('intent close');\n                                            debug('intent')('intent restore application? ' + restoreApplication);\n                                            debug('intent')(taskManager.apps[callerCoreInstance.pid]);\n                                            debug('intent')(callerCoreInstance && callerCoreInstance.pid &&\n                                                taskManager.apps[callerCoreInstance.pid]);\n                                        }\n\n                                        if ( restoreApplication && callerCoreInstance &&\n                                                callerCoreInstance.pid && taskManager.apps[callerCoreInstance.pid] ) {\n\n                                            if ( taskManager.topApp ) {\n                                                taskManager.topApp.$iframe.hide();\n                                                taskManager.topApp.core.applicationState.visible = false;\n                                                taskManager.topApp.core.applicationState.focused = false;\n                                                // taskManager.topApp.core.emit('hide', {\n                                                //     source: Core.prototype.SOURCES.SYSTEM\n                                                // });\n                                            }\n                                            taskManager.launcher.$iframe.hide();\n                                            // } else if ( taskManager.launcher ) {\n                                            //     taskManager.launcher.$iframe.hide();\n                                            // }\n                                            taskManager.topApp = null;\n                                            taskManager.show(taskManager.apps[callerCoreInstance.pid]);\n                                            // taskManager.apps[callerCoreInstance.pid].$iframe.contentWindow.focus();\n                                            // taskManager.topApp.core.emit('focus');\n                                            // taskManager.topApp = taskManager.focusedApp = taskManager.apps[callerCoreInstance.pid];\n                                            // taskManager.topApp.core.emit('focus');\n                                            // taskManager.topApp.$iframe.show();\n                                            // taskManager.topApp.core.emit('show');\n                                        }\n                                    });\n                                } else {\n                                    if ( DEVELOP ) {\n                                        debug('intent')('SHOW IN INTENT');\n                                    }\n\n                                    // if ( callerCoreInstance === taskManager.launcher.core ) {\n                                    //     taskManager.launcher.$iframe.hide();\n                                    // }\n\n                                    // if ( callerCoreInstance === window.core ) {\n                                    //     taskManager.launcher.$iframe.hide();\n                                    // }\n\n                                    if ( taskManager.launcher.$iframe.isVisible ) {\n                                        taskManager.launcher.$iframe.hide();\n                                        //taskManager.launcher.core.emit('hide');\n                                        //taskManager.launcher.core.emit('blur');\n                                    }\n\n                                    taskManager.show(taskManager.apps[config.pid], {\n                                        source: Core.prototype.SOURCES.INTENT,\n                                        data: {\n                                            intent: intent\n                                        }\n                                    });\n\n                                    if ( DEVELOP ) {\n                                        debug('intent')('add once listener');\n                                    }\n                                    intent.once('close', function ( closeApplication ) {\n                                        var task;\n\n                                        if ( DEVELOP ) {\n                                            debug('intent')('intent close');\n                                            debug('intent')('intent close application? ' + closeApplication);\n                                            debug('intent')(callerCoreInstance && callerCoreInstance.pid && taskManager.apps[callerCoreInstance.pid]);\n                                        }\n                                        // if ( taskManager.apps[config.pid] ) {\n                                        //     taskManager.hide(taskManager.apps[config.pid], true);\n                                        // }\n                                        if ( closeApplication ) {\n                                            if ( taskManager.apps[callerCoreInstance.pid] ) {\n                                                taskManager.close(taskManager.apps[callerCoreInstance.pid]);\n                                            }\n                                            while ( taskManager.stack.length ) {\n                                                task = taskManager.stack.pop();\n                                                task.$iframe.hide();\n                                                task.core.emit('hide', {\n                                                    source: Core.prototype.SOURCES.SYSTEM\n                                                });\n                                            }\n                                            taskManager.show(taskManager.launcher);\n                                            setTimeout(function () {\n                                                taskManager.topApp = null;\n                                            }, 0);\n                                        } else if ( callerCoreInstance && callerCoreInstance.pid && taskManager.apps[callerCoreInstance.pid] ) {\n                                            // if ( MODE === 'PORTAL' ) {\n                                            //     taskManager.topApp = null;\n                                            // }\n                                            taskManager.show(taskManager.apps[callerCoreInstance.pid], {\n                                                // TODO: make source as intent,after checking that everything is in ok in the player and apps\n                                                source: Core.prototype.SOURCES.SYSTEM,\n                                                data: {\n                                                    intent: intent\n                                                }\n                                            });\n                                        } else {\n                                            callerCoreInstance = null;\n                                            while ( taskManager.stack.length ) {\n                                                task = taskManager.stack.pop();\n                                                task.$iframe.hide();\n                                                task.core.emit('hide', {\n                                                    source: Core.prototype.SOURCES.SYSTEM,\n                                                    data: {\n                                                        intent: intent\n                                                    }\n                                                });\n                                            }\n                                            taskManager.show(taskManager.launcher);\n                                            setTimeout(function () {\n                                                taskManager.topApp = null;\n                                            }, 0);\n                                        }\n                                    });\n                                }\n                                if ( intent.callback ) {\n                                    if ( DEVELOP ) {\n                                        debug('intent')('context: ' + typeof context);\n                                    }\n                                    intent.callback(false, context);\n                                }\n                            }\n                        });\n                    } else {\n                        if ( DEVELOP ) {\n                            debug('intent')('no core at pid ' + config.pid);\n                        }\n                        result.runConfig = config;\n                    }\n                } else {\n                    result.handlerList = [];\n                    result.runConfig = config;\n                    if ( DEVELOP ) {\n                        debug('intent')('no pid for action \"' + intent.action + '\", config.pid:' + config.pid);\n                    }\n                }\n            } else {\n                intent.state = Intent.prototype.STATE_NOT_RESOLVED;\n                if ( DEVELOP ) {\n                    debug('intent')('no intent handlers for action \"' + intent.action + '\"');\n                }\n            }\n\n            return result;\n        },\n        findIntentHandlers: function ( intent ) {\n            var handlerList = [];\n\n            if ( intentMap[intent.action] ) {\n                if ( DEVELOP ) {\n                    debug('intent')('handlers for action \"' + intent.action + '\" size: ' + intentMap[intent.action].length);\n                }\n\n                intentMap[intent.action].forEach(function ( config ) {\n                    if ( DEVELOP ) {\n                        debug('intent')(JSON.stringify(config));\n                    }\n\n                    if ( intent.mime ) {\n                        if ( config.actions[intent.action] !== true && config.actions[intent.action].indexOf(intent.mime) === -1 ) {\n                            if ( DEVELOP ) {\n                                debug('intent')('not found intent with mime: ' + intent.mime);\n                            }\n\n                            return;\n                        }\n                    } else if ( config.actions[intent.action] !== true ) {\n                        if ( DEVELOP ) {\n                            debug('intent')('not found without mime');\n                        }\n\n                        return;\n                    }\n                    handlerList.push(config);\n                });\n            }\n\n            return handlerList;\n        },\n        resolveActionsConfig: function ( config ) {\n            var actions, index, actionsSize, action;\n\n            if ( DEVELOP ) {\n                debug('intent')('resolveActionsConfig for ' + config.name + ', config.actions: ' + JSON.stringify(config.actions));\n            }\n            if ( config.actions ) {\n                actions = Object.keys(config.actions);\n                actionsSize = actions.length;\n                index = 0;\n\n                if ( DEVELOP ) {\n                    debug('intent')('actionsSize: ' + actionsSize);\n                    debug('intent')(config.pid);\n                }\n                while ( index < actionsSize ) {\n                    action = actions[index];\n                    if ( DEVELOP ) {\n                        debug('intent')('action:' + action + ' - ' + JSON.stringify(config.actions[action]));\n                    }\n                    intentMap[action] = intentMap[action] || [];\n                    config.pid = null;\n                    intentMap[action].push(config);\n                    ++index;\n                }\n            }\n        },\n        replaceActionsConfig: function ( oldConfig, newConfig ) {\n            var actions, index, actionsSize, action;\n\n            if ( oldConfig.actions ) {\n                actions = Object.keys(oldConfig.actions);\n                actionsSize = actions.length;\n                index = 0;\n\n                while ( index < actionsSize ) {\n                    action = actions[index];\n                    index = intentMap[action].indexOf(oldConfig);\n                    if ( index !== -1 ) {\n                        intentMap[action][index] = newConfig;\n                    }\n                    ++index;\n                }\n            }\n        },\n        addHook: function ( action, callback ) {\n            hooks[action] = hooks[action] || [];\n            hooks[action].push(callback);\n        }\n    };\n\n\n/* eslint no-invalid-this: 0 */\nwindow.extendCorePrototype('intent', function ( config, callback ) {\n    var self = this,\n        intent = intentRouter.create(config, callback),\n        result, index, size;\n\n    if ( DEVELOP ) {\n        debug('intent')('create intent: ' + config.action);\n        debug('intent')('core.pid: ' + this.pid);\n        debug('intent')('splash.active: ' + splash.active);\n    }\n\n    // if ( taskManager === null ) {\n    //     taskManager = require('./task.manager');\n    // }\n\n    // if ( taskManager.home && this === taskManager.home.core ) {\n    //     if ( splash.active ) {\n    //         splash.init();\n    //         splash.hide();\n\n    //         setTimeout(function () {\n    //             if ( config && config.action ) {\n    //                 result = intentRouter.route(intent, this);\n    //                 if ( DEVELOP ) {\n    //                     debug('intent', 'runConfig ' + result.runConfig);\n    //                 }\n    //                 if ( result.runConfig !== null ) {\n    //                     if ( DEVELOP ) {\n    //                         debug('intent')('result.runConfig: ' + JSON.stringify(result.runConfig));\n    //                     }\n    //                     if ( result.runConfig.pid ) {\n    //                         index = 0;\n    //                         size = systemConfig.data.apps.length;\n    //                         while ( index < size ) {\n    //                             if ( systemConfig.data.apps[index].url === result.runConfig.url ) {\n    //                                 if ( DEVELOP ) {\n    //                                     debug('intent')(JSON.stringify(systemConfig.data.apps[index]));\n    //                                 }\n    //                                 result.runConfig = systemConfig.data.apps[index] = JSON.parse(JSON.stringify(systemConfig.data.apps[index]));\n    //                                 break;\n    //                             }\n    //                             ++index;\n    //                         }\n    //                     }\n    //                     if ( DEVELOP ) {\n    //                         debug('intent')(result.runConfig.pid);\n    //                     }\n    //                     taskManager.runApp({\n    //                         config: result.runConfig,\n    //                         visible: true,\n    //                         onready: function () {\n    //                             intentRouter.route(intent, self);\n    //                         }\n    //                     });\n    //                 } else if ( result.handlerList && result.handlerList.length > 1 ) {\n    //                     if ( DEVELOP ) {\n    //                         debug('intent')('result.handlerList.length: ' + result.handlerList.length);\n    //                     }\n    //                     // maybe next time we must show modal with suggestion for intent handler\n    //                 }\n    //             } else {\n    //                 //        debug('intent')(JSON.stringify(config));\n    //             }\n    //         }, 0);\n\n    //         return intent;\n    //     }\n    // }\n\n\n    if ( config && config.action ) {\n        result = intentRouter.route(intent, this);\n        if ( DEVELOP ) {\n            debug('intent', 'runConfig ' + result.runConfig);\n        }\n        if ( result.runConfig !== null ) {\n            if ( DEVELOP ) {\n                debug('intent')('result.runConfig: ' + JSON.stringify(result.runConfig));\n            }\n            if ( result.runConfig.pid ) {\n                index = 0;\n                size = systemConfig.data.apps.length;\n\n                while ( index < size ) {\n                    if ( systemConfig.data.apps[index].url === result.runConfig.url ) {\n                        if ( DEVELOP ) {\n                            debug('intent')(JSON.stringify(systemConfig.data.apps[index]));\n                        }\n                        result.runConfig = systemConfig.data.apps[index] = JSON.parse(JSON.stringify(systemConfig.data.apps[index]));\n                        break;\n                    }\n                    ++index;\n                }\n            }\n            if ( DEVELOP ) {\n                debug('intent')(result.runConfig.pid);\n            }\n            taskManager.runApp({\n                config: result.runConfig,\n                visible: true,\n                onready: function () {\n                    intentRouter.route(intent, self);\n                }\n            });\n        } else if ( result.handlerList && result.handlerList.length > 1 ) {\n            if ( DEVELOP ) {\n                debug('intent')('result.handlerList.length: ' + result.handlerList.length);\n            }\n            // maybe next time we must show modal with suggestion for intent handler\n        }\n    } else {\n        //        debug('intent')(JSON.stringify(config));\n    }\n\n    return intent;\n});\n\n\nwindow.extendCorePrototype('findIntentHandlers', function ( intent ) {\n    return JSON.parse(JSON.stringify(intentRouter.findIntentHandlers(intent)));\n});\n\n\nwindow.addIntentHook = function ( action, callback ) {\n    intentRouter.addHook(action, callback);\n};\n\n\nrequire('./system').addListener('home', function () {\n    if ( intentRouter.lastRoute ) {\n        intentRouter.lastRoute.intent.continueCallback = null;\n    }\n});\n\n\nmodule.exports = intentRouter;\n","'use strict';\n\n\nvar platformEvent = null;\n\n\nif ( PLATFORM === 'MAG' || NANOCORE ) {\n    platformEvent = require('../platforms/mag/event');\n}\nif ( PLATFORM === 'SMARTTV' ) {\n    platformEvent = require('../platforms/smarttv/event');\n}\nif ( PLATFORM === 'TIZEN' ) {\n    platformEvent = require('../platforms/tizen/event');\n}\n\nif ( PLATFORM !== 'MAG' && PLATFORM !== 'TIZEN' && PLATFORM !== 'SMARTTV' && !NANOCORE ) {\n    platformEvent = require('../platforms/browser/event');\n}\n\nmodule.exports = platformEvent;\n","'use strict';\n\n/* eslint new-cap: 0 */\n/* eslint no-undef: 0 */\n/* eslint camelcase: 0 */\nvar environment = window.gSTB.GetEnv(JSON.stringify({varList: [\n    'Image_Date',\n    'Image_Desc',\n    'Image_Version',\n    'acPassword',\n    'accessControl',\n    'audio_initial_volume',\n    'autoPowerDownTime',\n    'auto_framerate',\n    'autoupdateURL',\n    'autoupdate_cond',\n    'betaupdate_cond',\n    'controlModel',\n    'defaultLedLevel',\n    'dvb_type',\n    'front_panel',\n    'graphicres',\n    'hdmi_event_delay',\n    'lang_audiotracks',\n    'lang_subtitles',\n    'language',\n    'mount_media_ro',\n    'playerClock',\n    'settMaster',\n    'ssaverDelay',\n    'ssaverName',\n    'standByMode',\n    'standbyLedLevel',\n    'startPage',\n    'subtitlesColor',\n    'subtitlesSize',\n    'subtitles_on',\n    'syslog_srv',\n    'teletext_charset',\n    'teletext_on',\n    'teletext_opacity',\n    'teletext_ratio',\n    'ts_endType',\n    'ts_exitType',\n    'ts_icon',\n    'ts_lag',\n    'ts_on',\n    'ts_path',\n    'ts_time',\n    'tvsystem',\n    'upnp_conf',\n    'weather_conf',\n    'weather_place',\n    'audioPrimaryLanguage',\n    'audioSecondaryLanguage',\n    'subtitlesPrimaryLanguage',\n    'subtitlesSecondaryLanguage',\n    'timezone_conf',\n    'ntpurl',\n    'portal1',\n    'portal2',\n    'use_portal_dhcp',\n    'force_dvi',\n    'input_buffer_size',\n    'cec',\n    'igmp_conf',\n    'portal_dhcp',\n    'wifi_ssid',\n    'wifi_auth',\n    'wifi_enc',\n    'wifi_psk',\n    'wifi_wep_key1',\n    'wifi_int_dns',\n    'wifi_int_ip',\n    'wifi_int_mask',\n    'wifi_int_gw',\n    'mc_proxy_enabled',\n    'mc_proxy_url',\n    'lan_noip',\n    'ipaddr_conf',\n    'dnsip',\n    'pppoe_enabled',\n    'pppoe_login',\n    'pppoe_dns1',\n    'update_url',\n    'custom_url_hider',\n    'useExtPortalsPage',\n    'bootstrap_url',\n    'update_channel_url',\n    'audio_stereo_out_mode',\n    'audio_dyn_range_comp',\n    'audio_operational_mode',\n    'audio_spdif_mode',\n    'audio_hdmi_audio_mode',\n    'wifi_wep_def_key',\n    'wifi_wep_key1',\n    'wifi_wep_key2',\n    'wifi_wep_key3',\n    'wifi_wep_key4',\n    'gatewayip',\n    'lan_noip',\n    'netmask',\n    'debug',\n    'playerHardwareAcceleration'\n]}));\n\n\ntry {\n    environment = JSON.parse(environment);\n    environment = environment.result;\n} catch ( error ) {\n    environment = {};\n}\n\nenvironment.language = environment.language || 'en';\n\nenvironment.availableLanguages = [];\n\n(function () {\n    var index = 0,\n        list = gSTB.RDir('tempfile read languages_utf8.txt').split('\\n'),\n        specificLanguages = {\n            estoninan: {\n                code: 'et',\n                name: 'Estonian (Eesti keel)'\n            },\n            latvian: {\n                code: 'lv',\n                name: 'Latvian (Latviešu)'\n            }\n        },\n        language, name;\n\n    // YEAH! It's Legacy\n    while ( index < list.length ) {\n        if ( list[index] !== '' ) {\n            /* eslint no-useless-escape: 0 */\n            language = list[index].split('\\\"');\n            // if ( language[1] === 'bg' || language[1] === 'es'  || language[1] === 'el' ) {\n            //     name = language = language[1];\n            // } else {\n            name = decodeURIComponent(escape(language[3]));\n            language = language[1];\n            // }\n\n            if ( language === specificLanguages.estoninan.code ) {\n                specificLanguages.estoninan = false;\n            }\n\n            if ( language === specificLanguages.latvian.code ) {\n                specificLanguages.latvian = true;\n            }\n\n            environment.availableLanguages.push({\n                code: language,\n                name: name\n            });\n        }\n        ++index;\n    }\n\n    if ( specificLanguages.latvian ) {\n        environment.availableLanguages.push(specificLanguages.latvian);\n    }\n\n    if ( specificLanguages.estoninan ) {\n        environment.availableLanguages.push(specificLanguages.estoninan);\n    }\n})();\n\n// set defaults if value empty\nif ( environment.hdmi_event_delay === '' ) {\n    environment.hdmi_event_delay = '3';\n    window.gSTB.SetEnv(JSON.stringify({hdmi_event_delay: '3'}));\n}\n\nif ( environment.defaultLedLevel === '' ) {\n    environment.defaultLedLevel = 10;\n}\n\nif ( environment.standbyLedLevel === '' ) {\n    environment.standbyLedLevel = 100;\n}\n\nif ( environment.audioPrimaryLanguage === '' ) {\n    environment.audioPrimaryLanguage = environment.language;\n}\n\nif ( environment.audioSecondaryLanguage === '' ) {\n    environment.audioSecondaryLanguage = environment.language;\n}\n\nif ( environment.subtitlesPrimaryLanguage === '' ) {\n    environment.subtitlesPrimaryLanguage = environment.language;\n}\n\nif ( environment.subtitlesSecondaryLanguage === '' ) {\n    environment.subtitlesSecondaryLanguage = environment.language;\n}\n\nif ( environment.auto_framerate === '' ) {\n    environment.auto_framerate = 'Disabled';\n}\n\nenvironment.onFocusDebounceTimeout = 300;\n\n// if ( MODE === 'MINISTRA' ) {\n//     window.gSTB.StandByMode = environment.standByMode = 1;\n// }\n\n// if ( window.gSTB.SetAutoPowerDownInitAttr ) {\n//     window.gSTB.SetAutoPowerDownInitAttr(JSON.stringify({\n//         url: url + 'standby/index.html',\n//         backgroundColor: '#000'\n//     }));\n\n//     window.gSTB.SetAutoPowerDownTime(environment.autoPowerDownTime);\n// }\n\n\nmodule.exports = environment;\n","'use strict';\n\n\nvar Storage = null;\n\n\nif ( PLATFORM === 'MAG' || NANOCORE ) {\n    Storage = require('../platforms/mag/storage');\n}\nif ( PLATFORM === 'SMARTTV' ) {\n    Storage = require('../platforms/smarttv/storage');\n}\nif ( PLATFORM === 'TIZEN' ) {\n    Storage = require('../platforms/smarttv/storage');\n}\nif ( PLATFORM === 'WEBOS' ) {\n    Storage = require('../platforms/smarttv/storage');\n}\nif ( PLATFORM === 'BROWSER' ) {\n    Storage = require('../platforms/browser/storage');\n}\n\nmodule.exports = Storage;\n","'use strict';\n\n\nvar storage = {},\n    filename = 'applications-storage.json',\n    originJson;\n\n\n/* eslint new-cap: 0 */\n/* eslint no-undef: 0 */\ntry {\n    originJson = gSTB.LoadUserData(filename);\n    storage = JSON.parse(originJson);\n} catch ( error ) {\n    if ( DEVELOP ) {\n        debug('mag')('error json parse in storage ' + error);\n    }\n}\n\n\nfunction Storage ( uid ) {\n    // stalker storage\n    this.store = {};\n\n    Object.defineProperty(this, 'prefix', {\n        get: function () {\n            return uid + '.storage';\n        }\n    });\n\n    this.originJSON = storage[this.prefix];\n\n    if ( DEVELOP ) {\n        debug('mag')('storage ' + this.prefix + ' contents: ' + this.originJSON);\n    }\n\n    if ( this.originJSON ) {\n        try {\n            this.store = JSON.parse(this.originJSON);\n        } catch ( error ) {\n            if ( DEVELOP ) {\n                debug('mag')('storage ' + error);\n            }\n            this.originJSON = '';\n        }\n    }\n}\n\nwindow.addEventListener('unload', function () {\n    if ( !NANOCORE ) {\n        Storage.forceFlush();\n    }\n});\n\n\nStorage.prototype.getItem = function ( key ) {\n    return this.store[key];\n};\n\n\nStorage.prototype.setItem = function ( key, data ) {\n    var serialazedData;\n\n    try {\n        serialazedData = JSON.stringify(data);\n    } catch ( error ) {\n        return;\n    }\n\n    if ( DEVELOP ) {\n        debug('mag')('storage ' + this.prefix + ' set ' + key + ' with: ' + JSON.stringify(data));\n    }\n\n    this.store[key] = data;\n\n    serialazedData = JSON.stringify(this.store);\n\n    if ( serialazedData !== this.originJSON ) {\n        if ( DEVELOP ) {\n            debug('mag')('storage ' + this.prefix + ' updated');\n            debug('mag')('storage ' + this.prefix + ' was ' + this.originJSON);\n            debug('mag')('storage ' + this.prefix + ' now ' + serialazedData);\n        }\n        this.originJSON = serialazedData;\n        storage[this.prefix] = this.originJSON;\n\n        return;\n    }\n\n    if ( DEVELOP ) {\n        debug('mag')('storage ' + this.prefix + ' not updated');\n    }\n};\n\nStorage.forceFlush = function () {\n    var json = JSON.stringify(storage);\n\n    if ( DEVELOP ) {\n        debug('mag')('storage json ' + json);\n    }\n\n    if ( DEVELOP ) {\n        debug('mag')('storage originJson ' + originJson);\n    }\n\n    if ( originJson !== json ) {\n        if ( DEVELOP ) {\n            debug('mag')('storage saved');\n        }\n        window.gSTB.SaveUserData(filename, json);\n\n        return;\n    }\n\n    if ( DEVELOP ) {\n        debug('mag')('storage not saved');\n    }\n};\n\n\n//function Storage ( uid ) {\n//    this.store = {};\n//\n//    Object.defineProperty(this, 'prefix', {\n//        get: function () {\n//            return uid + '.storage';\n//        },\n//        set: function () {}\n//    });\n//\n//    this.originJSON = window.stbStorage.getItem(this.prefix);\n//\n//    if ( this.originJSON ) {\n//        try {\n//            this.store = JSON.parse(this.originJSON);\n//        } catch ( e ) {\n//            this.originJSON = '';\n//        }\n//    }\n//}\n//\n//\n///**\n// *\n// * @param key data key\n// */\n//Storage.prototype.getItem = function ( key ) {\n//    return this.store[key];\n//};\n//\n//\n///**\n// *\n// * @param key\n// * @param data\n// */\n//Storage.prototype.setItem = function ( key, data ) {\n//    var serialazedData;\n//\n//    try {\n//        serialazedData = JSON.stringify(data);\n//    } catch ( e ) {\n//        return;\n//    }\n//\n//    this.store[key] = data;\n//\n//    serialazedData = JSON.stringify(this.store);\n//\n//    if ( serialazedData !== this.originJSON ) {\n//        this.originJSON = serialazedData;\n//        window.stbStorage.setItem(this.prefix, this.originJSON);\n//    }\n//};\n\n\nmodule.exports = Storage;\n","'use strict';\n\n// splash  = require('../../components/splash'),\n\nvar coreManager = null,\n    homeKey = 27,\n    taskManager = null,\n    intentManager = null,\n    platformKeydownEventHandler = null,\n    preventDefaultKeys = null;\n\n\nif ( PLATFORM === 'TIZEN' ) {\n    homeKey = 10182;\n}\n\nif ( PLATFORM === 'SMARTTV' ) {\n    homeKey = (new window.top.Common.API.TVKeyValue()).KEY_EXIT;\n    preventDefaultKeys = [\n        'keydown:' + (new window.top.Common.API.TVKeyValue()).KEY_EXIT,\n        'keydown:' + (new window.top.Common.API.TVKeyValue()).KEY_RETURN,\n        'keydown:' + (new window.top.Common.API.TVKeyValue()).KEY_TOOLS\n    ];\n}\n\n\nif ( PLATFORM === 'WEBOS' ) {\n    // home not available at this platform so we use back key code\n    homeKey = 461;\n}\n\n\nmodule.exports = function ( eventName, eventData )  {\n    var api = require('./api'),\n        index, size, appCore;\n\n    if ( coreManager === null ) {\n        coreManager = require('../kernel/core.manager');\n    }\n    if ( taskManager === null ) {\n        taskManager  = require('./task.manager');\n    }\n    if ( intentManager === null ) {\n        intentManager  = require('./intent.manager');\n    }\n\n    if ( preventDefaultKeys !== null ) {\n        if ( taskManager.focusedApp ) {\n            if ( preventDefaultKeys.indexOf(eventName) !== -1 ) {\n                eventData.preventDefault();\n            }\n        }\n    }\n\n    if ( homeKey !== null && eventName === 'keydown:' + homeKey ) {\n        if ( PLATFORM === 'TIZEN' ) {\n            api.exit();\n\n            return;\n        }\n\n        if ( PLATFORM === 'MAG' || NANOCORE ) {\n            require('./system').emit('home');\n            taskManager.hideAll();\n\n            // if ( MODE === 'PORTAL' ) {\n            //     if ( !taskManager.launcher || (taskManager.launcher && taskManager.launcher.$iframe.isVisible) ) {\n            //         /* eslint no-undef: 0 */\n            //         api.exit();\n            //     }\n            // }\n        } else {\n            if ( !taskManager.launcher || (taskManager.launcher && taskManager.launcher.$iframe.isVisible) ) {\n                /* eslint no-undef: 0 */\n                if ( PLATFORM !== 'WEBOS' ) {\n                    api.exit();\n                }\n            }\n\n            if ( PLATFORM !== 'WEBOS' ) {\n                require('./system').emit('home');\n                taskManager.hideAll();\n            }\n\n            return;\n        }\n    }\n\n    index = 0;\n    size = coreManager.coreList.length;\n\n    while ( index < size ) {\n        if ( DEVELOP ) {\n            window.cm = coreManager;\n        }\n\n        appCore = coreManager.coreList[index];\n        if ( appCore && appCore.system ) {\n            if ( appCore.events[eventName] ) {\n                appCore.emit(eventName, eventData);\n            }\n        }\n        ++index;\n    }\n\n    if ( platformKeydownEventHandler === null ) {\n        platformKeydownEventHandler = require('./platform.event').keydown;\n    }\n\n    if ( typeof platformKeydownEventHandler === 'function' ) {\n        platformKeydownEventHandler(eventName, eventData);\n    }\n};\n","'use strict';\n\nmodule.exports = function ( event ) {\n    var eventCode;\n\n    if ( event.keyCode === 0 ) {\n        return;\n    }\n\n    eventCode = event.keyCode;\n\n    if ( event.ctrlKey )  {\n        eventCode += 'c';\n    }\n\n    if ( event.altKey )   {\n        eventCode += 'a';\n    }\n\n    if ( event.shiftKey ) {\n        eventCode += 's';\n    }\n\n    return eventCode;\n}\n","'use strict';\n\n\nmodule.exports = {\n    debug: window.gSTB.Debug,\n    reboot: function () {\n        window.gSTB.ExecAction('reboot');\n    },\n    reload: function ( url ) {\n        var portalWinId = 1,\n            currentWinId = window.stbWebWindow.windowId(),\n            windowList = JSON.parse(window.stbWindowMgr.windowList()),\n            index;\n\n        if ( DEVELOP ) {\n            debug('mag')('reload called');\n        }\n\n        url = url || 'file:///home/web/system/pages/loader/index.html';\n\n        document.body.style.display = 'none';\n        /* eslint new-cap: 0 */\n        top.gSTB.Stop();\n\n        if ( top.stbPlayerManager && typeof top.stbPlayerManager.reset === 'function' ) {\n            // TODO: remove this check, when task http://192.168.1.220:3000/issues/22782 will be closed\n            top.stbPlayerManager.reset();\n        }\n\n        for ( index = 0; index < windowList.result.length; index++ ) {\n            if ( windowList.result[index] !== portalWinId && windowList.result[index] !== currentWinId ) {\n                window.stbWindowMgr.closeWindow(windowList.result[index]);\n            }\n        }\n\n        window.stbStorage.clear();\n        window.stbWindowMgr.windowLoad(portalWinId, url);\n        // window.stbWindowMgr.closeWindow(0);\n    },\n    runNativeApp: function ( config ) {\n\n        var app = {\n            id: config.applicationId\n        };\n\n        if ( DEVELOP ) {\n            debug('system')('native app: ' + JSON.stringify(app));\n        }\n\n        if ( typeof window.stbAppManager !== 'undefined' ) {\n            if ( typeof window.stbAppManager.isInstalled === 'function' ) {\n                if ( window.stbAppManager.isInstalled(config.applicationId) ) {\n                    window.stbAppManager.start(app);\n\n                    if ( DEVELOP ) {\n                        debug('system')('native app: ' + JSON.stringify(app));\n                    }\n\n                } else {\n                    window.stbAppManager.start({\n                        id: 'market://details?id=' + config.applicationId\n                    });\n\n                    if ( DEVELOP ) {\n                        debug('system')('native app: ' + JSON.stringify({\n                            id: 'market://details?id=' + config.applicationId\n                        }));\n                    }\n                }\n            } else if ( typeof window.stbAppManager.start === 'function' ) {\n                window.stbAppManager.start({\n                    id: config.applicationId\n                });\n\n                if ( DEVELOP ) {\n                    debug('system')('native app: ' + JSON.stringify(app));\n                }\n            }\n        }\n    }\n};\n","/**\n * File.\n *\n * @author Igor Zaporozhets <deadbyelpy@gmail.com>\n * @license GNU GENERAL PUBLIC LICENSE Version 3\n */\n\n'use strict';\n\nvar async   = require('cjs-async'),\n\n    config        = require('../tools/config'),\n    taskManager   = require('./task.manager'),\n    platformEvent = require('./platform.event'),\n\n    splash = require('../../components/splash'),\n\n    loaders = [],\n    iterator = 0,\n    loadCss = true,\n\n    appConfig, size,\n\n    ignoreDone = false;\n\n\nif ( DEVELOP ) {\n    window.launcherReady = false;\n}\n\n\n/* eslint max-lines-per-function: ['error', {max: 200, skipBlankLines: true, skipComments: true}] */\nfunction showStartApplication ( app ) {\n    var $link, height;\n\n\n    // window.top.console.log('showStartApplication + ' + app.config.url);\n    if ( loadCss ) {\n        $link = document.createElement('link');\n        height = window.innerHeight || window.screen.height;\n\n        // remove this code, after magcore-osd-base refactoring\n        switch ( height ) {\n            case 480:\n            case 576:\n            case 720:\n            case 1080:\n                break;\n\n            default:\n                height = 720;\n                break;\n        }\n    }\n\n    if ( app.core.ready ) {\n        // window.top.console.log('app already ready');\n        if ( DEVELOP ) {\n            debug('system')('all loaded');\n            debug('system')(app.config.name  + ' ready');\n        }\n\n        // window.top.console.log(app === taskManager.launcher + ' app is launcher?');\n        // window.top.console.log(taskManager.home + ' taskManager.home?');\n        if ( app === taskManager.launcher && taskManager.home ) {\n            showStartApplication(taskManager.home);\n\n            return;\n        }\n\n        // window.top.console.log('no return');\n\n        if ( NANOCORE ) {\n            splash.hide();\n        }\n\n        // window.top.console.log('locked? ' + app.config.locked);\n        if ( app.config.locked ) {\n            if ( window.core.accessControl ) {\n                window.core.accessControl.request(function ( error ) {\n                    if ( DEVELOP ) {\n                        debug('iframe')('access control request error: ' + error);\n                    }\n                    if ( error ) {\n                        splash.init();\n                        taskManager.show(taskManager.launcher);\n                    } else {\n                        splash.init();\n                        taskManager.show(app);\n                    }\n                });\n            } else {\n                splash.init();\n                taskManager.show(app);\n            }\n        } else {\n            // window.top.console.log('splash init');\n            splash.init();\n            // window.top.console.log(' show called');\n            taskManager.show(app);\n        }\n        taskManager.daemons.forEach(function ( daemon ) {\n            if ( DEVELOP ) {\n                try {\n                    setTimeout(function () {\n                        var date = Date.now();\n\n                        daemon.emit('launcher:ready');\n                        debug('plugin')('time to call launcher:ready ' + (Date.now() - date));\n                    }, 0);\n                } catch ( error ) {\n                    debug('system')('emit launcher:ready error: ' + error);\n                }\n            } else {\n                setTimeout(function () {\n                    daemon.emit('launcher:ready');\n                }, 0);\n            }\n        });\n\n        if ( loadCss ) {\n            $link.rel  = 'stylesheet';\n            $link.href = window.core.theme.path + height + '.css';\n            document.head.appendChild($link);\n        }\n\n        if ( DEVELOP ) {\n            debug('kernel')('loading time: ' + (Date.now() - window.st));\n        }\n    } else {\n        if ( DEVELOP ) {\n            debug('system')('all loaded');\n        }\n\n        // window.top.console.log('app wait for ready');\n        app.core.once('app:ready', function () {\n            // window.top.console.log('app now ready');\n            if  ( DEVELOP ) {\n                debug('system')(app.config.name  + ' ready');\n            }\n\n            if ( app === taskManager.launcher && taskManager.home ) {\n                showStartApplication(taskManager.home);\n\n                return;\n            }\n\n            if ( NANOCORE ) {\n                splash.hide();\n            }\n\n            if ( app.config.locked ) {\n                if ( window.core.accessControl ) {\n                    window.core.accessControl.request(function ( error ) {\n                        if ( DEVELOP ) {\n                            debug('iframe')('access control request error: ' + error);\n                        }\n                        if ( error ) {\n                            splash.init();\n                            taskManager.show(taskManager.launcher);\n                        } else {\n                            splash.init();\n                            taskManager.show(app);\n                        }\n                    });\n                } else {\n                    splash.init();\n                    taskManager.show(app);\n                }\n            } else {\n                splash.init();\n                taskManager.show(app);\n            }\n            taskManager.daemons.forEach(function ( daemon ) {\n                if ( DEVELOP ) {\n                    try {\n                        daemon.emit('launcher:ready');\n                    } catch ( error ) {\n                        debug('system')('emit launcher:ready error: ' + error);\n                    }\n                } else {\n                    daemon.emit('launcher:ready');\n                }\n            });\n\n            if ( loadCss ) {\n                $link.rel  = 'stylesheet';\n                $link.href = window.core.theme.path + height + '.css';\n                document.head.appendChild($link);\n            }\n\n            if ( DEVELOP ) {\n                debug('kernel')('loading time: ' + (Date.now() - window.st));\n            }\n        });\n    }\n}\n\n\nif ( DEVELOP ) {\n    debug('system')('init');\n}\nsize  = config.data.apps.length;\n\n/* eslint no-loop-func: 0 */\nwhile ( iterator < size ) {\n    appConfig = config.data.apps[iterator];\n\n    if ( appConfig.type === 'auth' ) {\n        loadCss = false;\n        ++iterator;\n        /* eslint no-continue: 0 */\n        continue;\n    }\n\n    switch ( appConfig.type ) {\n        case 'launcher':\n            (function ( index ) {\n                if ( taskManager.launchers.length > 0 ) {\n                    core.notify({\n                        title: 'Attention you have 2 launchers in config!!!!',\n                        icon: 'warning'\n                    });\n                } else {\n                    loaders.push(function ( done ) {\n                        setTimeout(function () {\n                            taskManager.launcher = taskManager.runApp({\n                                config: config.data.apps[index],\n                                visible: false,\n                                onload: function () {\n                                    setTimeout(function () {\n                                        if ( DEVELOP ) {\n                                            debug('system')(config.data.apps[index].name + ' DONE');\n                                        }\n                                        if ( !ignoreDone ) {\n                                            done(false, taskManager.launcher);\n                                        }\n                                    }, 0);\n                                },\n                                onerror: function ( url ) {\n                                    if ( DEVELOP ) {\n                                        debug('system')('launcher loading error, url:' + url);\n                                    }\n                                }\n                            });\n                        }, 0);\n                    });\n                }\n                taskManager.launchers.push(config.data.apps[index]);\n\n            })(iterator);\n            break;\n\n        case 'system':\n            (function ( index ) {\n                // setTimeout(function () {\n                //     taskManager.runApp({\n                //         config: config.data.apps[index],\n                //         visible: false\n                //     });\n                // }, 0);\n\n                loaders.push(function ( done ) {\n                    setTimeout(function () {\n                        var app = taskManager.runApp({\n                            config: config.data.apps[index],\n                            visible: false,\n                            onready: function () {\n                                setTimeout(function () {\n                                    if ( DEVELOP ) {\n                                        debug('system')(config.data.apps[index].name + ' DONE');\n                                    }\n                                    if ( !ignoreDone ) {\n                                        done(false, app);\n                                    }\n                                }, 0);\n                            },\n                            onerror: function ( url ) {\n                                if ( DEVELOP ) {\n                                    debug('system')('launcher loading error, url:' + url);\n                                }\n                            }\n                        });\n                    }, 0);\n                });\n            })(iterator);\n            break;\n\n        case 'osd':\n            (function ( index ) {\n                setTimeout(function () {\n                    taskManager.runApp({\n                        config: config.data.apps[index],\n                        visible: false\n                    });\n                }, 0);\n            })(iterator);\n            break;\n\n            // case 'app':\n            //     if ( config.data.apps[iterator].home ) {\n            //         (function ( index ) {\n            //             loaders.push(function ( done ) {\n            //                 setTimeout(function () {\n            //                     taskManager.home = taskManager.runApp({\n            //                         config: config.data.apps[index],\n            //                         visible: false,\n            //                         onload: function () {\n            //                             done(false, taskManager.home);\n            //                         },\n            //                         onerror: function ( url ) {\n            //                             if ( DEVELOP ) {\n            //                                 debug('system')('launcher loading error, url:' + url);\n            //                             }\n            //                         }\n            //                     });\n            //                 }, 0);\n            //             });\n            //         })(iterator);\n            //     }\n            //     break;\n\n        default:\n            break;\n    }\n\n    ++iterator;\n}\n\nif ( taskManager.homeConfig ) {\n    loaders.push(function ( done ) {\n        // confirm(JSON.stringify(taskManager.homeConfig));\n        setTimeout(function () {\n            taskManager.home  = taskManager.runApp({\n                config: taskManager.homeConfig,\n                visible: false,\n                onready: function () {\n                    if ( DEVELOP ) {\n                        debug('system')('home app ready');\n                    }\n                    // confirm(111)\n                    setTimeout(function () {\n                        if ( !ignoreDone ) {\n                            done(null, taskManager.home);\n                        }\n                    }, 0);\n                }\n            });\n        }, 0);\n    });\n}\n\n// loaders.push(taskManager.init());\n\nasync.parallel(loaders, function () {\n    if ( platformEvent.load ) {\n        platformEvent.load();\n    }\n\n    ignoreDone = true;\n\n    if ( taskManager.home ) {\n        showStartApplication(taskManager.home);\n    } else if ( taskManager.launcher ) {\n        showStartApplication(taskManager.launcher);\n    } else {\n        /* eslint no-useless-escape: 0 */\n        document.body.innerHTML = '';\n        document.body.style.backgroundColor = '#1B5E20 !important';\n        document.body.style.overflow = 'scroll';\n        document.body.appendChild(document.createElement('pre'));\n        document.body.firstChild.tabIndex = 1;\n        document.body.firstChild.style.cssText = 'overflow-y: scroll; height: ' +\n            window.innerHeight || window.screen.height + 'px; width: ' +\n            window.innerWidth || screen.width + 'px;font-family: monospace;' +\n            'font-size: 26px; text-align: left;padding: 20px;color: #f0f0f0;\"';\n        document.body.firstChild.innerText = '\\Launcher not found in config: Fatal Exception';\n        document.body.firstChild.focus();\n    }\n});\n","/**\n * Application entry point.\n * Load config, resolve app list, start \"osd\", \"system\" applications in background.\n * If the config contains authorization application - launch it.\n * Start launcher after all operations.\n *\n * @author Igor Zapororzhets <deadbyelpy@gmail.com>\n * @license GNU GENERAL PUBLIC LICENSE Version 3\n *\n * @flow\n */\n\n'use strict';\n\n/* eslint-disable */\n// make sure core have access to API (RTS API wrapper sometimes too slow)\n// TODO: move to better place\nwindow.dvbManager = window.top.dvbManager;\nwindow.epgManager = window.top.epgManager;\nwindow.gSTB = window.top.gSTB;\nwindow.pvrManager = window.top.pvrManager;\nwindow.stbDownloadManager = window.top.stbDownloadManager;\nwindow.stbStorage = window.top.stbStorage;\nwindow.stbUpdate = window.top.stbUpdate;\nwindow.stbUPnP = window.top.stbUPnP;\nwindow.stbWebWindow = window.top.stbWebWindow;\nwindow.stbWindowMgr = window.top.stbWindowMgr;\nwindow.timeShift = window.top.timeShift;\nwindow.stbPlayerManager = window.top.stbPlayerManager;\n\nvar // utility modules\n    parse = require('cjs-parse-query'),\n    // preloader = require('spa-preloader'),\n\n    // project modules\n    coreManager   = require('./modules/kernel/core.manager'),\n    taskManager   = require('./modules/system/task.manager'),\n    intentManager = require('./modules/system/intent.manager'),\n    config        = require('./modules/tools/config'),\n\n    // remove this require, after magcore-osd-base refactoring\n    widget = require('./components/widget'),\n\n    // etc.\n    // store GET parameters in variable\n    queryParameters = parse(document.location.search.substring(1)),\n\n    platformEvent = require('./modules/system/platform.event'),\n    splash        = require('./components/splash'),\n    Storage       = require('./modules/system/storage'),\n\n    packages   = [],\n    packageMap = {};\n\n/* eslint-enable */\n\nfunction switchCorePackage ( source, target ) {\n    var xhr         = new XMLHttpRequest(),\n        packagePath = location.protocol + '//' + location.host + location.pathname.replace(source, target) + location.search + location.hash;\n\n    xhr.open('GET', packagePath);\n\n    xhr.onload = function () {\n        if ( this.status === 200 ) {\n            location.href = packagePath;\n        }\n    };\n\n    xhr.send();\n}\n\nif ( !NANOCORE ) {\n    if ( queryParameters.buildDate ) {\n        window.splashAppVersion.innerText = queryParameters.buildDate;\n    }\n}\n\nif ( DEVELOP ) {\n    debug('kernel')('location ' + window.location.href);\n}\n\n// require platform api\nrequire('./modules/system/api');\n// add platform-dependent shims, if needed\nrequire('./modules/system/shims');\n// async css load\nrequire('./css');\n\n// create globals for plugins\n// legacy variables\nwindow.MODE_PORTAL = MODE === 'PORTAL';\nwindow.MODE_STALKER = MODE === 'MINISTRA';\n// new way\nwindow.MODE = MODE;\n\n// create abstract storage in core.storage\nwindow.extendCorePrototype('Storage', Storage);\n\n// first-load actions if platform needs\nplatformEvent.init();\n\nwindow.getCoreInstance = window.getCoreInstanse = function ( contentWindow ) {\n    var core = coreManager.getInstance(contentWindow);\n\n    // remove this code, after magcore-osd-base refactoring\n    core.widget      = widget;\n    core.system      = true;\n    core.packages    = packages;\n    core.packageMap  = packageMap;\n    core.taskManager = taskManager;\n\n    core.updatePackages = function ( apps ) {\n        packages.splice(0);\n        Object.keys(packageMap).forEach(function ( packageName ) {\n            delete packageMap[packageName];\n        });\n        apps.forEach(function ( item ) {\n            packageMap[item.packageName] = item;\n            packages.push(item);\n        });\n    };\n\n    core.reload = function ( url ) {\n        Storage.forceFlush();\n\n        if ( PLATFORM === 'MAG' || NANOCORE ) {\n            require('./modules/platforms/mag/utils').reload(url);\n        } else if ( url ) {\n            location.href = url;\n        } else {\n            location.reload();\n        }\n    };\n\n    core.reboot = function () {\n        Storage.forceFlush();\n\n        if ( PLATFORM === 'MAG' || NANOCORE ) {\n            require('./modules/platforms/mag/utils').reboot();\n        }\n    };\n\n    return core;\n};\n\n// create core for core, we need to go deeper...\nwindow.system = window.core = window.getCoreInstance(window);\nwindow.system.queryParameters = queryParameters;\nwindow.core.storage = new window.core.constructor.prototype.Storage(PACKAGE_NAME);\n\nwindow.addEventListener('keydown', function ( event ) {\n    var eventForwarder = require('./modules/system/event.forwarder'),\n        eventName;\n\n    if ( event.keyCode === 0 ) {\n        return;\n    }\n\n    if ( event.keyCode === 9 ) {\n        event.preventDefault();\n    }\n\n    eventName = 'keydown:' + require('spa-keyboard-event-parser')(event);\n\n    if ( DEVELOP ) {\n        debug('main window')('event ' + event.keyCode);\n    }\n\n    eventForwarder(eventName, event);\n});\n\n\n/* eslint max-lines-per-function: ['error', {max: 220, skipBlankLines: true, skipComments: true}] */\n/* eslint max-statements: ['error', 100] */\nconfig.load(queryParameters, function ( error ) {\n    var index      = -1,\n        authorizer = null,\n        daemons    = {},\n        height, size, $link,\n        packageName, authorizerInstance;\n\n\n    if ( error ) {\n        if ( NANOCORE ) {\n            window.splash = document.body.appendChild(document.createElement('div'));\n            window.splash.style.backgroundColor = '#1B5E20';\n            window.splash.style.overflow = 'scroll';\n            window.splash.innerHTML = '<pre tabindex=\"1\" ' +\n                'style=\"padding: 40px; overflow-y: scroll; height: ' +\n                screen.height + 'px; width: ' +\n                screen.width + 'px;font-family: monospace;' +\n                'font-size: 16px; text-align: left;padding: 10px;color: #fff;\">' +\n                error +\n                '\\nCore Panic: Fatal Exception</pre>';\n            window.splash.firstChild.focus();\n        } else {\n            window.splash.style.backgroundColor = '#1B5E20';\n            window.splash.style.overflow = 'scroll';\n            window.splash.innerHTML = '<pre tabindex=\"1\" ' +\n                'style=\"padding: 40px; overflow-y: scroll; height: ' +\n                screen.height + 'px; width: ' +\n                screen.width + 'px;font-family: monospace;' +\n                'font-size: 16px; text-align: left;padding: 10px;color: #fff;\">' +\n                error +\n                '\\nCore Panic: Fatal Exception</pre>';\n            window.splash.firstChild.focus();\n        }\n\n        return;\n    }\n\n    if ( TARGET === 'android-stb' || TARGET === 'android-app' ) {\n        // TODO: remove when http://192.168.1.220:3000/issues/22236 was implemented\n        if ( typeof gSTB.SetSubtitlesFont === 'undefined' ) {\n            console.log('!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! gSTB.SetSubtitlesFont: ' + gSTB.SetSubtitlesFont);\n            gSTB.SetSubtitlesFont = function () {};\n        }\n        if ( queryParameters.backendHost ) {\n            config.data.options.stalkerHost = queryParameters.backendHost;\n            config.data.options.stalkerApiPath = '/stalker_portal/api/v3/';\n            config.data.options.stalkerAuthPath = '/stalker_portal/auth/token.php';\n            config.data.options.pingTimeout = 120000;\n            config.data.options.stalkerLoaderPath = '/stalker_portal/c/';\n        }\n    }\n\n    if ( NANOCORE ) {\n        for ( index = 0; index < config.data.apps.length; index++ ) {\n            if ( config.data.apps[index].type === 'launcher' ) {\n                window.splash.className = 'container';\n                splash.show(config.data.apps[index]);\n                if ( queryParameters.buildDate ) {\n                    window.splashAppVersion.innerText = queryParameters.buildDate;\n                }\n                break;\n            }\n        }\n        index = -1;\n    }\n\n    if ( queryParameters.backendHost ) {\n        // emulator versions\n        config.data.options.stalkerHost = queryParameters.backendHost;\n        config.data.options.stalkerApiPath = '/stalker_portal/api/v3/';\n        config.data.options.stalkerAuthPath = '/stalker_portal/auth/token.php';\n        config.data.options.pingTimeout = 120000;\n        config.data.options.stalkerLoaderPath = '/stalker_portal/c/';\n        config.data.options.sap = queryParameters.backendHost + '/stalker_portal/server/api/sap.php';\n    }\n\n    core.config = config.data;\n    size = config.data.apps.length - 1;\n\n    require('./modules/kernel/plugin.loader').basePath = config.data.options.pluginsPath;\n\n    window.core.dependencyManager = require('./modules/kernel/plugin.loader');\n\n    window.extendCorePrototype('theme', {\n        path: config.data.theme,\n        vars: config.data.themeVars\n    });\n    window.extendCorePrototype('themes', config.data.themes);\n\n    while ( index < size ) {\n        ++index;\n        packageName = config.data.apps[index].packageName;\n\n        switch ( config.data.apps[index].type ) {\n            case 'auth':\n                authorizer = config.data.apps[index];\n                break;\n\n            case 'plugin':\n                // dependencyManager.packages[packageName] = JSON.parse(JSON.stringify(config.data.apps[index]));\n                // dependencyManager.packages[packageName].depedents = [];\n                // dependencyManager.packages[packageName].instance = null;\n                // dependencyManager.packageNameToName[config.data.apps[index].name] = packageName;\n                if ( DEVELOP ) {\n                    debug('dependency')('add plugin ' + packageName + ' to system');\n                }\n                if ( config.data.apps[index].daemon ) {\n                    daemons[config.data.apps[index].packageName] = config.data.apps[index].version;\n                }\n                /* eslint no-fallthrough: 0 */\n\n            default:\n                packages.push(JSON.parse(JSON.stringify(config.data.apps[index])));\n                packageMap[packageName] = packages[packages.length - 1];\n                break;\n\n            //case 'driver':\n            //    (function ( index ) {\n            //        loaders.push(function ( done ) {\n            //            if ( DEVELOP ) {\n            //                debug('driver')(index);\n            //            }\n            //            var task = taskManager.runApp({\n            //                config: config.data.apps[index],\n            //                visible: false,\n            //                onload: function () {\n            //                    done(false, task);\n            //                },\n            //                onerror: function ( url ) {\n            //                    if ( DEVELOP ) {\n            //                        debug('driver')(url);\n            //                        debug('driver')(config.data.apps[index].name);\n            //                    }\n            //                }\n            //            });\n            //        });\n            //    })(index);\n            //    break;\n        }\n\n        intentManager.resolveActionsConfig(config.data.apps[index]);\n    }\n\n    require('./modules/kernel/plugin.loader').load({\n        dependencies: daemons,\n        dependencyReady: function ( error, plugin ) {\n            if ( error ) {\n                return;\n            }\n\n            if ( DEVELOP ) {\n                debug('daemon')('onInit: ' + plugin.name + ': ' + typeof plugin.instance.onInit);\n            }\n            if ( typeof plugin.instance.onInit === 'function' ) {\n                /* eslint no-empty-function: 0 */\n                if ( DEVELOP ) {\n                    debug('daemon')('onInit: ' + plugin.name);\n                }\n                if ( !plugin.daemonLoaded ) {\n                    plugin.daemonLoaded = true;\n                    plugin.instance.onInit({\n                        storage: require('./modules/kernel/plugin.loader').getPluginStorage(plugin.name),\n                        options: plugin.options,\n                        path: plugin.path\n                    }, function ( error, instance ) {\n                        if ( DEVELOP ) {\n                            debug('daemon')('loaded + push? ' + (!!error));\n                        }\n                        if ( !error && typeof instance === 'object' && typeof instance.emit === 'function' ) {\n                            taskManager.daemons.push(instance);\n                        }\n                    });\n                }\n\n                return;\n            }\n\n            if ( DEVELOP ) {\n                debug('plugin')(plugin.name + ' dont have onInit method');\n            }\n        }\n    });\n    // dependencyManager.load({\n    //     dependencies: daemons,\n    //     dependencyReady: function ( error, plugin ) {\n    //         if ( error ) {\n    //             return;\n    //         }\n\n    //         if ( DEVELOP ) {\n    //             debug('daemon')('onInit: ' + plugin.name + ': ' + plugin.instance.onInit);\n    //         }\n    //         if ( plugin.instance.onInit ) {\n    //             /* eslint no-empty-function: 0 */\n    //             if ( DEVELOP ) {\n    //                 debug('daemon')('onInit: ' + plugin.name);\n    //             }\n    //             plugin.instance.onInit({\n    //                 storage: dependencyManager.getPluginStorage(plugin.name),\n    //                 options: plugin.options,\n    //                 path: plugin.path\n    //             }, function ( error, instance ) {\n    //                 if ( DEVELOP ) {\n    //                     debug('daemon')('loaded + push? ' + (!!error));\n    //                 }\n    //                 if ( !error && typeof instance === 'object' && typeof instance.emit === 'function' ) {\n    //                     taskManager.daemons.push(instance);\n    //                 }\n    //             });\n\n    //             return;\n    //         }\n\n    //         if ( DEVELOP ) {\n    //             debug('plugin')(plugin.name + ' dont have onInit method');\n    //         }\n    //     }\n    // });\n\n    taskManager.init();\n\n    if ( authorizer === null ) {\n        taskManager.daemons.forEach(function ( daemon ) {\n            if ( DEVELOP ) {\n                try {\n                    debug('plugin')('emit system:start event');\n                    daemon.emit('system:start');\n                } catch ( error ) {\n                    debug('plugin')('emit system:start error: ' + error);\n                }\n            } else {\n                daemon.emit('system:start');\n            }\n        });\n        require('./modules/system/init');\n    } else {\n        if ( DEVELOP ) {\n            debug('system')('load auth app');\n        }\n\n        // remove this code, after magcore-osd-base refactoring\n        height = window.innerHeight || window.screen.height;\n        switch ( height ) {\n            case 480:\n            case 576:\n            case 720:\n            case 1080:\n                break;\n\n            default:\n                height = 720;\n                break;\n        }\n\n        $link      = document.createElement('link');\n        $link.rel  = 'stylesheet';\n        $link.href = window.core.theme.path + height + '.css';\n        document.head.appendChild($link);\n\n        authorizerInstance = taskManager.runApp({\n            config: authorizer,\n            visible: true,\n            onready: function () {\n                if ( DEVELOP ) {\n                    debug('system')('auth app ready');\n                }\n                // require('./modules/system/init');\n            },\n            onload: function () {\n                if ( DEVELOP ) {\n                    debug('system')('auth app loaded');\n                }\n                // taskInstance.core.once('ready', function ( event ) {\n                //     if ( DEVELOP ) {\n                //         debug('system')('auth app ready');\n                //     }\n                //     event = event || {};\n                //     if ( !event.stop ) {\n                //         require('./modules/system/init');\n                //     }\n                // });\n                // taskInstance.core.once('show', splash.init);\n            }\n        });\n\n        authorizerInstance.core.once('ready', function ( event ) {\n            if ( DEVELOP ) {\n                debug('system')('auth app ready');\n            }\n            event = event || {};\n            if ( !event.stop ) {\n                taskManager.daemons.forEach(function ( daemon ) {\n                    try {\n                        // console.log(daemon.toString());\n                        daemon.emit('system:start');\n                    } catch ( error ) {\n                        if ( DEVELOP ) {\n                            debug('plugin')('emit system:start error: ' + error);\n                        }\n                    }\n                });\n                authorizerInstance.$iframe.hide();\n                authorizerInstance.core.emit('hide', {\n                    source: window.core.SOURCES.SYSTEM\n                });\n                require('./modules/system/init');\n            }\n        });\n        authorizerInstance.core.once('show', splash.init);\n    }\n});\n\nif ( DEVELOP ) {\n    window.addEventListener('blur', function () {\n        debug('core')('blur');\n    });\n}\n\n\nwindow.addEventListener('unload', function () {\n    if ( platformEvent.unload ) {\n        platformEvent.unload();\n    }\n});\n\nwindow.addEventListener('focus', function () {\n    if ( DEVELOP ) {\n        debug('core')('focus');\n    }\n    if ( taskManager.topApp ) {\n        taskManager.topApp.$iframe.contentWindow.focus();\n    } else if ( taskManager.focusedApp ) {\n        taskManager.focusedApp.$iframe.contentWindow.focus();\n    } else if ( taskManager.launcher ) {\n        taskManager.launcher.$iframe.contentWindow.focus();\n    }\n});\n\ndocument.addEventListener('visibilitychange', function () {\n    if ( document.visibilityState === 'visible' ) {\n        if ( DEVELOP ) {\n            debug('core')('visibilitychange ' + document.visibilityState);\n        }\n\n        if ( taskManager.topApp ) {\n            taskManager.topApp.$iframe.contentWindow.focus();\n            taskManager.topApp.core.emit('focus');\n        } else if ( taskManager.focusedApp ) {\n            taskManager.focusedApp.$iframe.contentWindow.focus();\n            taskManager.focusedApp.core.emit('focus');\n        } else if ( taskManager.launcher ) {\n            taskManager.launcher.$iframe.contentWindow.focus();\n            taskManager.launcher.core.emit('focus');\n        }\n    }\n});\n\nif ( DEVELOP ) {\n    window.core.addListener('keydown:68ca', function () {\n        switchCorePackage('magcore-core-debug', 'magcore-core');\n    });\n} else if ( window.core.environment.debug ) {\n    window.core.addListener('keydown:68ca', function () {\n        switchCorePackage('magcore-core', 'magcore-core-debug');\n    });\n}\n","/**\n * @author Stanislav Kalashnik <darkpark.main@gmail.com>\n * @license GNU GENERAL PUBLIC LICENSE Version 3\n */\n\n'use strict';\n\n\n/**\n * Parse the given location search string into object.\n *\n * @param {string} query string to parse\n *\n * @return {Object.<string, string>} result data\n *\n * @example\n * console.log(parseQuery(document.location.search.substring(1)));\n * console.log(parseQuery('param=value&another_param=another_value'));\n */\nmodule.exports = function ( query ) {\n    var data = {};\n\n    // parse and fill the data\n    query.split('&').forEach(function ( part ) {\n        part = part.split('=');\n        // valid number on params\n        if ( part.length === 2 ) {\n            data[part[0]] = decodeURIComponent(part[1]);\n        }\n    });\n\n    return data;\n};\n","/**\n * Abstract platform environment.\n *\n * @author Igor Zaporozhets <deadbyelpy@gmail.com>\n * @license GNU GENERAL PUBLIC LICENSE Version 3\n */\n\n\n'use strict';\n\n\n/**\n * Minimal environment.\n *\n * @type {{language: string, onFocusDebounceTimeout: number}}\n */\nvar environment;\n\nif ( PLATFORM === 'BROWSER' ) {\n    environment = require('../platforms/browser/environment');\n}\n\nif ( PLATFORM === 'MAG' || NANOCORE ) {\n    environment = require('../platforms/mag/environment');\n}\n\nif ( PLATFORM === 'SMARTTV' ) {\n    environment = require('../platforms/smarttv/environment');\n}\n\nif ( PLATFORM === 'TIZEN' ) {\n    environment = require('../platforms/tizen/environment');\n}\n\nif ( PLATFORM === 'WEBOS' ) {\n    environment = require('../platforms/smarttv/environment');\n}\n\nmodule.exports = environment;\n","'use strict';\n\n\nvar defaultParams = {\n    url: 'about:blank',\n    top: 0,\n    left: 0,\n    visible: 'hidden',\n    width: window.innerWidth || screen.width,\n    height: window.innerHeight || screen.height\n};\n\n\n/* eslint no-invalid-this: 0 */\nfunction hideIframe () {\n    // if ( PLATFORM === 'TIZEN' || PLATFORM === 'SMARTTV' || PLATFORM === 'WEBOS' ) {\n    this.style.display = 'none';\n    // } else {\n    //     this.style.visibility = 'hidden';\n    // }\n    this.isVisible = false;\n\n    if ( DEVELOP ) {\n        debug('iframe')(this.src + ' visibility change: ' + this.isVisible);\n    }\n}\n\nfunction showIframe () {\n    // if ( PLATFORM === 'TIZEN' || PLATFORM === 'SMARTTV' || PLATFORM === 'WEBOS' ) {\n    this.style.display = '';\n    // } else {\n    //     this.style.visibility = '';\n    // }\n    this.isVisible = true;\n\n    if ( DEVELOP ) {\n        debug('iframe')(this.src + ' visibility change: ' + this.isVisible);\n    }\n}\n\n\nswitch ( defaultParams.height ) {\n    case 480:\n    case 576:\n    case 720:\n    case 1080:\n        break;\n\n    default:\n        defaultParams.width = 1280;\n        defaultParams.height = 720;\n        break;\n}\n\n\n/**\n * Iframe fabric.\n *\n * @param {Object} params - iframe creating options\n *\n * @return {HTMLIFrameElement} iframe\n */\nmodule.exports = function ( params ) {\n    var $iframe = document.createElement('iframe'),\n        testRequest;\n\n    if ( typeof params.onload === 'function' ) {\n        $iframe.onload = params.onload;\n    }\n\n    $iframe.show = showIframe;\n    $iframe.hide = hideIframe;\n    $iframe.isVisible = null;\n\n    $iframe.style.width = params.width || defaultParams.width + 'px';\n    $iframe.style.height = params.height || defaultParams.height + 'px';\n    $iframe.style.top = params.top || defaultParams.top;\n    $iframe.style.left = params.left || defaultParams.left;\n\n    if ( params.visible ) {\n        $iframe.show();\n    } else {\n        $iframe.hide();\n    }\n\n    $iframe.src = params.url || defaultParams.url;\n\n    if ( PLATFORM === 'MAG' ) {\n        if ( params.onerror ) {\n            testRequest = new XMLHttpRequest();\n            testRequest.open('HEAD', $iframe.src);\n            testRequest.timeout = 10000;\n            testRequest.onload = function () {\n                if ( this.status !== 200 ) {\n                    if ( !(this.status === 0 && $iframe.src.indexOf('file://') !== -1) ) {\n                        params.onerror(this.status);\n                    }\n                }\n            };\n            testRequest.onerror = function () {\n                params.onerror(this.status);\n            };\n            testRequest.ontimeout = function () {\n                params.onerror(this.status);\n            };\n            testRequest.send();\n        }\n    } else if ( !params.height && $iframe.src !== defaultParams.url ) {\n        $iframe.src += '?screenHeight=' + defaultParams.height;\n    }\n\n\n    params.$container.appendChild($iframe);\n    if ( params.type && params.type !== 'app' ) {\n        $iframe.contentWindow.system = require('../system/system');\n    }\n    /* eslint no-empty-function: 0 */\n    $iframe.contentWindow.alert = function () {};\n    //$iframe.contentWindow.console = {\n    //    log: function ( str ) { у\n    //        gSTB.Debug(str);\n    //    },\n    //    assert: function (  ) {\n    //\n    //    }\n    //};\n    //= function () {\n    //    alert(444)\n    //};\n\n\n    //if ( DEVELOP ) {\n    //    setTimeout(function () {\n    //        var url = 'https://wallpapers.wallhaven.cc/wallpapers/full/wallhaven-346609.jpg';\n    //        url = 'http://www.look.com.ua/pic/201309/1920x1080/look.com.ua-76174.jpg';\n    //        url = 'http://animedia.tv/storage/users/blog/12/56d1950b32f25.jpg';\n    //        url = 'http://mag.moe/wp-content/uploads/2015/07/%E3%80%8ALovelive-The-School-Idol-Movie%E3%80%8B%CE%BCs%E5%BD%A2%E8%B1%A1%E6%89%8B%E6%9C%BA%E9%98%B2%E5%B0%98%E5%A1%9E-1.jpg';\n    //        url = 'http://mmbiz.qpic.cn/mmbiz/oL8bwv4sibbDu5v2TuNxfzVRvKXuasMQ7rmovTa4mwjGlwaQvYjcvtrguHqT1HJ3CpvFUhB1WAcl5F2Kml60NhQ/0?wx_fmt=jpeg';\n    //\n    //        $iframe.contentDocument.body.style.cssText = 'background:url(https://www.excitewallpapers.com/wp-content/uploads/Kantai-Collection-Wallpaper-1.jpg) no-repeat #fff !important;background-size: contain;';\n    //    }, 4000);\n    //}\n\n    return $iframe;\n};\n","'use strict';\n\n/* eslint new-cap: 0 */\n/* eslint no-undef: 0 */\n/* eslint camelcase: 0 */\nvar api = {\n        dvbManager: window.dvbManager,\n        epgManager: window.epgManager,\n        gSTB: window.gSTB,\n        pvrManager: window.pvrManager,\n        stbDownloadManager: window.stbDownloadManager,\n        stbStorage: window.stbStorage,\n        stbUpdate: window.stbUpdate,\n        stbUPnP: window.stbUPnP,\n        stbWebWindow: window.stbWebWindow,\n        stbWindowMgr: window.stbWindowMgr,\n        timeShift: window.timeShift,\n        stbPlayerManager: window.stbPlayerManager,\n        stbEvent: window.stbEvent,\n        exit: function () {\n            window.location.href = require('stb-referrer')() || 'file:///home/web/services.html';\n        }\n    },\n    inputLanguage = require('./environment').language,\n    settings = {},\n    memory;\n\n\nif ( DEVELOP ) {\n    memory = gSTB.RDir('GetMemoryInfo');\n\n    if ( memory && memory.indexOf('MemTotal') !== -1 ) {\n        if ( !String.prototype.trim ) {\n            (function () {\n                /* eslint no-extend-native: 0 */\n                // Вырезаем BOM и неразрывный пробел\n                String.prototype.trim = function () {\n                    return this.replace(/^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g, '');\n                };\n            })();\n        }\n        memory = memory.split('\\n');\n\n        memory = memory.filter(Boolean);\n\n        memory = memory.map(function ( item ) {\n            var data = item.split(':');\n\n            item = {};\n            item[data[0].trim()] = data[1].trim();\n\n            return item;\n        });\n\n        debug('device')('memory: ' + JSON.stringify(memory));\n    }\n}\n\n\nObject.defineProperty(settings, 'inputLanguage', {\n    set: function ( lang ) {\n        inputLanguage = lang;\n        gSTB.SetInputLang(lang);\n    },\n    get: function () {\n        return inputLanguage;\n    }\n});\n\nwindow.extendCorePrototype('tools', {\n    hash: gSTB.GetHashVersion1,\n    uid: gSTB.GetUID,\n    debug: typeof window.debug === 'function' || gSTB.Debug\n});\n\n\nwindow.extendCorePrototype('settings', settings);\n\nwindow.extendCorePrototype('device', {\n    model: gSTB.GetDeviceModelExt(),\n    serialNumber: gSTB.GetDeviceSerialNumber(),\n    vendor: gSTB.GetDeviceVendor(),\n    versionHardware: gSTB.GetDeviceVersionHardware(),\n    activeBank: gSTB.GetDeviceActiveBank(),\n    imageDescription: gSTB.GetDeviceImageDesc(),\n    imageVersion: gSTB.GetDeviceImageVersion(),\n    imageVersionCurrent: gSTB.GetDeviceImageVersionCurrent(),\n    mac: gSTB.GetDeviceMacAddress(),\n    memory: memory\n});\n\n//window.dvbManager         = null;\n//window.epgManager         = null;\n//window.gSTB               = null;\n//window.pvrManager         = null;\n//window.stbDownloadManager = null;\n//window.stbStorage         = null;\n//window.stbUpdate          = null;\n//window.stbUPnP            = null;\n//window.stbWebWindow       = null;\n//window.stbWindowMgr       = null;\n//window.timeShift          = null;\n//window.stbPlayerManager      = null;\n\n\nmodule.exports = api;\n","/**\n * @license The MIT License (MIT)\n * @copyright Stanislav Kalashnik <darkpark.main@gmail.com>\n */\n\n'use strict';\n\nvar parse = require('cjs-query').parse;\n\n\n/**\n * Determine application referrer.\n * If no referrer - return false.\n *\n * @return {string|boolean} referrer url or false\n *\n * @example\n * location.href = referrer() || 'http://google.com/';\n */\nmodule.exports = function () {\n    var queryParams = parse(location.search.substring(1));\n\n    if ( queryParams.referrer ) {\n        // referrer in GET\n        return queryParams.referrer;\n    }\n\n    if ( document.referrer ) {\n        // if in app was used location.reload method, document.referrer === app link, and must return false\n        if ( location.href.split('#')[0] === document.referrer ) {\n            return false;\n        }\n\n        return document.referrer;\n    }\n\n    return false;\n};\n","/**\n * @license The MIT License (MIT)\n * @author Stanislav Kalashnik <darkpark.main@gmail.com>\n */\n\n'use strict';\n\nmodule.exports = {\n    /**\n     * Parse the given location search string into object.\n     *\n     * @param {string} query string to parse\n     *\n     * @return {Object.<string, string>} result data\n     */\n    parse: function ( query ) {\n        var data = {};\n\n        // parse and fill the data\n        query.split('&').forEach(function ( part ) {\n            part = part.split('=');\n            // valid number on params\n            if ( part.length === 2 ) {\n                data[part[0]] = decodeURIComponent(part[1]);\n            }\n        });\n\n        return data;\n    },\n\n\n    /**\n     * Make uri query part in a string form.\n     *\n     * @param {Object} params data to stringify\n     *\n     * @return {string} query string\n     */\n    stringify: function ( params ) {\n        var data = [];\n\n        Object.keys(params).forEach(function ( name ) {\n            data.push(name + '=' + encodeURIComponent(params[name]));\n        });\n\n        return data.join('&');\n    }\n};\n","'use strict';\n\nvar Emitter = require('cjs-emitter'),\n    intentLog, systemLog;\n\n\nif ( DEVELOP ) {\n    intentLog = debug('intent');\n    systemLog = debug('system');\n}\n\nfunction Intent ( config, callback ) {\n    var eventName, state;\n\n    if ( DEVELOP ) {\n        state = Intent.prototype.STATE_CREATED;\n        Object.defineProperty(this, 'state', {\n            set: function (value) {\n                switch ( value ) {\n                    case Intent.prototype.STATE_CLOSED:\n                        intentLog('state change, new state: STATE_CLOSED');\n                        break;\n\n                    case Intent.prototype.STATE_CONTEXT_RECEIVED:\n                        intentLog('state change, new state: STATE_CONTEXT_RECEIVED');\n                        break;\n\n                    case Intent.prototype.STATE_CREATED:\n                        intentLog('state change, new state: STATE_CREATED');\n                        break;\n\n                    case Intent.prototype.STATE_ERROR_RECEIVED:\n                        intentLog('state change, new state: STATE_ERROR_RECEIVED');\n                        break;\n\n                    case Intent.prototype.STATE_NOT_RESOLVED:\n                        intentLog('state change, new state: STATE_NOT_RESOLVED');\n                        break;\n\n                    case Intent.prototype.STATE_PAUSED:\n                        intentLog('state change, new state: STATE_PAUSED');\n                        break;\n\n                    case Intent.prototype.STATE_RESOLVED:\n                        intentLog('state change, new state: STATE_RESOLVED');\n                        break;\n                }\n                state = value;\n            },\n            get: function () {\n                return state;\n            }\n        });\n    } else {\n        this.state = Intent.prototype.STATE_CREATED;\n    }\n\n    this.action = config.action;\n\n    this.parent = config.parent || null;\n\n    this.mime = config.mime;\n\n    this.data = config.data;\n\n    this.context = config.context;\n\n    this.silent = config.silent;\n\n    this.callback = callback;\n\n    Emitter.call(this, config);\n\n    if ( config.events ) {\n        for ( eventName in config.events ) {\n            if ( config.events[eventName] ) {\n                this.addListener(eventName, config.events[eventName]);\n            }\n        }\n    }\n}\n\n// inheritance\nIntent.prototype = Object.create(Emitter.prototype);\nIntent.prototype.constructor = Intent;\n\nIntent.prototype.STATE_CREATED = 0;\nIntent.prototype.STATE_RESOLVED = 1;\nIntent.prototype.STATE_NOT_RESOLVED = 2;\nIntent.prototype.STATE_CONTEXT_RECEIVED = 3;\nIntent.prototype.STATE_ERROR_RECEIVED = 4;\nIntent.prototype.STATE_CLOSED = 5;\nIntent.prototype.STATE_PAUSED = 6;\n\n\nIntent.prototype.emit = function ( name, data ) {\n    var event = this.events[name],\n        index;\n\n    // the event exists and should have some callbacks\n    if ( event ) {\n        for ( index = 0; index < event.length; index++ ) {\n            if ( DEVELOP ) {\n                if ( typeof event[index] !== 'function' ) {\n                    throw new Error(__filename + ': wrong event callback type');\n                }\n            }\n\n            // invoke the callback with parameters\n            try {\n                event[index].call(this, data);\n            } catch ( error ) {\n                if ( DEVELOP ) {\n                    intentLog('error in emit: ' + error);\n                }\n            }\n        }\n    }\n};\n\nIntent.prototype.close = function ( event ) {\n    this.state = Intent.prototype.STATE_CLOSED;\n\n    this.emit('close', event);\n};\n\nIntent.prototype.show = function ( pid, config ) {\n    var self = this,\n        taskManager = require('./task.manager'),\n        Core = require('../kernel/core'),\n        meta = {\n            source: Core.prototype.SOURCES.INTENT,\n            data: {\n                intent: self,\n                config: config\n            }\n        };\n\n    if ( DEVELOP ) {\n        systemLog(taskManager.apps[pid]);\n        systemLog('check ' + pid);\n        Object.keys(taskManager.apps).forEach(function ( processId ) {\n            systemLog('status ' + processId + ': ' + taskManager.apps[processId]);\n        });\n    }\n    if ( taskManager.apps[pid] ) {\n        if ( DEVELOP ) {\n            systemLog(taskManager.topApp.pid !== pid);\n            systemLog(taskManager.topApp.pid);\n            systemLog(pid);\n            systemLog('meta: ' + meta);\n            systemLog('meta source: ' + meta.source);\n        }\n\n        if ( taskManager.topApp.pid !== pid ) {\n            taskManager.show(taskManager.apps[pid], meta);\n        }\n    } else {\n        if ( DEVELOP ) {\n            systemLog(typeof taskManager.topApp);\n            systemLog(taskManager.topApp);\n        }\n        if ( taskManager.topApp ) {\n            taskManager.topApp.$iframe.hide();\n            taskManager.topApp.core.emit('hide', {\n                source: Core.prototype.SOURCES.SYSTEM\n            });\n        }\n        taskManager.show(taskManager.launcher);\n        taskManager.launcher.core.emit('focus');\n    }\n};\n\nIntent.prototype.pause = function () {\n    this.savedstate  = this.state;\n    this.state = Intent.prototype.STATE_PAUSED;\n};\n\nIntent.prototype.resume = function () {\n    var self = this;\n\n    setTimeout(function () {\n        self.state = Intent.prototype.STATE_CREATED;\n        if ( typeof self.continueCallback === 'function' ) {\n            self.continueCallback();\n        }\n    }, 0);\n};\n\nmodule.exports = Intent;\n","'use strict';\n\nmodule.exports = {\n    author: {\n        name: 'Infomir',\n        email: 'support@infomir.eu'\n    },\n    languages: ['de', 'el', 'es', 'fr', 'it', 'nl', 'pl', 'ru', 'et', 'lv', 'sl', 'uk', 'hy', 'ka', 'bg', 'tr', 'pt', 'az'],\n    license: 'license.md',\n    order: [\n        'magcore-app-tv',\n        'magcore-app-tv-classic',\n        'magcore-app-dvb',\n        'magcore-app-video-club',\n        'magcore-app-video-club-prime',\n        'magcore-app-radio',\n        'magcore-app-magic-cast',\n        'magcore-app-audio-club',\n        'magcore-app-explorer',\n        'magcore-app-records',\n        'magcore-app-weather',\n        'magcore-app-personal-account',\n        'magcore-app-settings',\n        'magcore-app-browser',\n        'magcore-app-downloads',\n        'magcore-app-karaoke',\n        'magcore-app-lines',\n        'magcore-app-sudoku',\n        'magcore-app-memory',\n        'magcore-app-2048'\n    ],\n    resolutions: ['480', '576', '720', '1080'],\n    source: 'src'\n};\n","'use strict';\n\n\n/* eslint new-cap: 0 */\nvar Emitter   = require('cjs-emitter'),\n\n    model = window.gSTB.GetDeviceModelExt ? window.gSTB.GetDeviceModelExt() : window.gSTB.GetDeviceModel();\n\n\nwindow.top.stbEvent = window.stbEvent = new Emitter();\n\n/**\n * Event on messages from a window.\n *\n * @event module:stb/app#message\n * @type object\n * @property {boolean} broadcast message flag\n * @property {string} message received from window\n * @property {object} data received from window\n */\n\n/**\n * Fires mag device media events.\n *\n * @param {number} event code\n * @param {string} info associated data in **JSON** format\n */\nwindow.stbEvent.onEvent = function ( event, info ) {\n    if ( DEVELOP ) {\n        debug('mag')('stbEvent.onEvent1 ' + event);\n    }\n\n    try {\n        event = parseInt(event, 10);\n    } catch ( error ) {\n        if ( DEVELOP ) {\n            debug('mag')('stbEvent.onEvent2 ' + error);\n        }\n\n        return;\n    }\n\n    if ( DEVELOP ) {\n        debug('mag')(event);\n    }\n\n    // if ( event === hdmiConnectedEvent ) {\n    //     if ( window.core.environment.hdmi_event_delay !== '0' ) {\n    //         clearTimeout(hdmiTimeout);\n    //         if ( window.gSTB.GetStandByStatus() ) {\n    //             standByToggle(true);\n    //         }\n    //     }\n\n    //     return;\n    // }\n    // if ( event === hdmiDisconnectedEvent ) {\n    //     if ( DEVELOP ) {\n    //         debug('mag')(window.core.environment.hdmi_event_delay);\n    //     }\n    //     if (  window.core.environment.hdmi_event_delay !== '0' ) {\n    //         hdmiTimeout = setTimeout(function () {\n    //             if ( !window.gSTB.GetStandByStatus() ) {\n    //                 standByToggle(true);\n    //             }\n    //         });\n    //         standByToggle(true);\n    //     }\n\n    //     return;\n    // }\n\n    if ( this.events['media'] ) {\n        // additional data\n        if ( info ) {\n            try {\n                info = JSON.parse(info);\n            } catch ( error ) {\n                info = {};\n            }\n        }\n\n        // notify listeners\n        this.emit('media', {code: event, info: info});\n    }\n};\n\n\n/**\n * Fires event on broadcast messages from a window.\n *\n * @param {number} windowId that sent message\n * @param {string} message text\n * @param {Object} data in sent message\n * @fires module:/stb/app#message\n */\nwindow.stbEvent.onBroadcastMessage = function ( windowId, message, data ) {\n    if ( this.events['message'] ) {\n        // notify listeners\n        this.emit('message', {\n            broadcast: true,\n            windowId: windowId,\n            message: message,\n            data: data\n        });\n    }\n};\n\n\n/**\n * Fires event on messages from a window.\n *\n * @param {number} windowId that sent message\n * @param {string} message text\n * @param {Object} data in sent message\n * @fires module:/stb/app#message\n */\nwindow.stbEvent.onMessage = function ( windowId, message, data ) {\n    // if ( message === 'portal.standbyMode' ) {\n    //     standByToggle();\n\n    //     return;\n    // }\n\n    if ( this.events['message'] ) {\n        // notify listeners\n        this.emit('message', {\n            broadcast: false,\n            windowId: windowId,\n            message: message,\n            data: data\n        });\n    }\n};\n\n/**\n * Fires event of callback on internet browser link clicked to ask user what to do with link: play or download.\n *\n * @param {string} mime file type\n * @param {string} url resource link\n *\n * @fires module:/mag/app#media:available\n */\nwindow.stbEvent.onMediaAvailable = function ( mime, url ) {\n    if ( this.events['media:available'] ) {\n        // notify listeners\n        this.emit('media:available', {mime: mime, url: url});\n    }\n};\n\n/**\n * Fires new internet connection state event.\n *\n * @param {boolean} state of internet connection\n * @fires module:/mag/app#internet:state\n */\nwindow.stbEvent.onNetworkStateChange = function ( state ) {\n    if ( this.events['internet:state'] ) {\n        // notify listeners\n        this.emit('internet:state', {state: state});\n    }\n};\n\n/**\n * Fires document loading progress changes event.\n *\n * @param {number} progress of document loading\n * fires module:/mag/app#browser:progress\n */\nwindow.stbEvent.onWebBrowserProgress = function ( progress ) {\n    if ( this.events['browser:progress'] ) {\n        // notify listeners\n        this.emit('browser:progress', {progress: progress});\n    }\n};\n\n/**\n * Fires browser web window activation event.\n *\n * fires module:/mag/app#window:focus\n */\nwindow.stbEvent.onWindowActivated = function () {\n    if ( this.events['window:focus'] ) {\n        // notify listeners\n        this.emit('window:focus');\n    }\n};\n\n\nmodule.exports = {\n    unload: function () {\n        if ( !NANOCORE ) {\n            if ( window.stbPlayerManager ) {\n                window.stbPlayerManager.list.forEach(function ( player ) {\n                    var width = screen.width,\n                        height = screen.height;\n\n                    switch ( window.gSTB.RDir('vmode') ) {\n                        case '480i':\n                        case '480p':\n                            width = 720;\n                            height = 480;\n                            break;\n\n                        case '576i':\n                        case '576p':\n                            width = 720;\n                            height = 576;\n                            break;\n\n                        case '720p':\n                        case '720p60':\n                            width = 1280;\n                            height = 720;\n                            break;\n\n                        case '1080i':\n                        case '1080i60':\n                        case '1080p':\n                        case '1080p60':\n                            width = 1920;\n                            height = 1080;\n                            break;\n\n                    }\n                    player.stop();\n                    player.setViewport({\n                        x: 0,\n                        y: 0,\n                        width: width,\n                        height: height\n                    });\n                });\n            } else {\n                window.gSTB.Stop();\n            }\n        }\n\n        if ( MODE === 'PORTAL' ) {\n            window.gSTB.EnableAppButton(true);\n            window.gSTB.EnableVKButton(true);\n            window.gSTB.EnableServiceButton(true);\n        }\n    },\n    load: function () {\n        if ( !NANOCORE ) {\n            window.gSTB.EnableAppButton(false);\n            if ( model.indexOf('256') === -1 ) {\n                window.gSTB.EnableServiceButton(false);\n            }\n        }\n    },\n    init: function () {\n        var rootPath;\n\n        if ( NANOCORE ) {\n            if ( window.top.location.href.indexOf('load=true') !== -1 ) {\n                window.top.stbWebWindow.close();\n            }\n        } else {\n            if ( MODE === 'PORTAL' ) {\n                if ( DEVELOP ) {\n                    rootPath = location.protocol + '//' + location.host + location.pathname.replace('develop.html', '') + '../../';\n                } else {\n                    rootPath = location.protocol + '//' + location.host + location.pathname.replace('index.html', '') + '../../';\n                }\n\n                window.gSTB.SetSettingsInitAttr(JSON.stringify({\n                    url: rootPath + 'system/settings/index.html',\n                    backgroundColor: '#000'\n                }));\n                window.stbWindowMgr.setVirtualKeyboardInitAttr(JSON.stringify({\n                    url: rootPath + 'system/keyboard/index.html'\n                }));\n\n                window.stbWindowMgr.setWebFaceInitAttr(JSON.stringify({\n                    // URL possible options:\n                    // mode = Choose page to display Bookmarks = 1, Browser = 2\n                    // url = if mode is equal to 2, trying to browsing this link\n                    // view = if isset right url and mode is equal to 2, display browser in full screen\n                    url: rootPath + 'public/app/ibman/index.html?mode=2'\n                }));\n                window.gSTB.EnableServiceButton(true);\n            } else {\n                window.gSTB.EnableServiceButton(false);\n            }\n            window.moveTo(0, 0);\n            window.resizeTo(screen.width, screen.height);\n            window.gSTB.InitPlayer();\n            window.gSTB.EnableAppButton(true);\n            window.gSTB.EnableVKButton(false);\n        }\n\n        if ( window.gSTB.SetNativeStringMode ) {\n            window.gSTB.SetNativeStringMode(true);\n        }\n\n        if ( MODE === 'PORTAL' ) {\n            window.gSTB.ShowVirtualKeyboard(true);\n        }\n    }\n};\n","/**\n * !! remove this module, after magcore-osd-base refactoring\n */\n\n'use strict';\n\nvar Component = require('./component'),\n    widgetClassIndex = 0;\n\n\n/**\n * Base widget implementation.\n *\n * A part-screen top-level layer that can operate as an independent separate entity.\n *\n * @constructor\n * @extends Component\n *\n * @param {Object} [config={}] init parameters (all inherited from the parent)\n * @param {boolean} [config.visible=false] component initial visibility state flag\n * @param {boolean} [config.focusable=false] component can accept focus or not\n *\n * @example\n * var Widget = require('stb/ui/widget'),\n *     widget = new Widget({\n *         $node: document.getElementById(id)\n *     });\n *\n * // somewhere\n * widget.show();\n */\nfunction Widget ( config ) {\n    // sanitize\n    config = config || {};\n\n    if ( DEVELOP ) {\n        if ( typeof config !== 'object' ) { throw new Error(__filename + ': wrong config type'); }\n        // init parameters checks\n        if ( config.className && typeof config.className !== 'string' ) { throw new Error(__filename + ': wrong or empty config.className'); }\n    }\n\n    // can't accept focus\n    config.focusable = config.focusable || false;\n\n    // hidden\n    config.visible = config.visible || false;\n\n    // set default className if classList property empty or undefined\n    config.className = 'widget ' + (config.className || '');\n\n    // parent constructor call\n    Component.call(this, config);\n}\n\n\n// inheritance\nWidget.prototype = Object.create(Component.prototype);\nWidget.prototype.constructor = Widget;\n\n\nmodule.exports = function ( config ) {\n    var widget = new Widget({\n        focusable: config.focusable,\n        visible: config.visible,\n        events: config.events\n    });\n\n    widget.className = widget.$node.className = 'widgetClass' + widgetClassIndex;\n    if ( !config.visible ) {\n        widget.$node.className = 'widgetClass' + widgetClassIndex + ' hidden';\n    }\n    ++widgetClassIndex;\n\n    widget.$node.style.zIndex = 1000;\n\n    document.body.appendChild(widget.$node);\n\n    return widget;\n};\n","/**\n * @license The MIT License (MIT)\n * @copyright Stanislav Kalashnik <darkpark.main@gmail.com>\n */\n\n/* eslint no-path-concat: 0 */\n/* eslint complexity: 0 */\n\n'use strict';\n\nvar Emitter = require('cjs-emitter'),\n    activeComponent = null,\n    counter = 0;\n\n\n/**\n * Base component implementation.\n *\n * Visual element that can handle sub-components.\n * Each component has a DOM element container $node with a set of classes:\n * \"component\" and some specific component class names depending on the hierarchy, for example \"page\".\n * Each component has a unique ID given either from $node.id or from data.id. If not given will generate automatically.\n *\n * @constructor\n * @extends Emitter\n *\n * @param {Object} [config={}] init parameters\n * @param {Element} [config.id] component unique identifier (generated if not set)\n * @param {string} [config.className] space-separated list of classes for \"className\" property of this.$node\n * @param {Element} [config.$node] DOM element/fragment to be a component outer container\n * @param {Element} [config.$body] DOM element/fragment to be a component inner container (by default is the same as $node)\n * @param {Component} [config.parent] link to the parent component which has this component as a child\n * @param {Array.<Component>} [config.children=[]] list of components in this component\n * @param {Object.<string, function>} [config.events={}] list of event callbacks\n * @param {boolean} [config.visible=true] component initial visibility state flag\n * @param {boolean} [config.focusable=true] component can accept focus or not\n * @param {boolean} [config.propagate=false] allow to emit events to the parent component\n *\n * @fires module:stb/component~Component#click\n *\n * @example\n * var component = new Component({\n *     $node: document.getElementById(id),\n *     className: 'bootstrap responsive',\n *     events: {\n *         click: function () { ... }\n *     }\n * });\n * component.add( ... );\n * component.focus();\n */\nfunction Component ( config ) {\n    // current execution context\n    var self = this,\n        name;\n\n    // sanitize\n    config = config || {};\n\n    console.assert(typeof this === 'object', 'must be constructed via new');\n\n    if ( DEVELOP ) {\n        if ( typeof config !== 'object' ) { throw new Error(__filename + ': wrong config type'); }\n        // init parameters checks\n        if ( config.id        && typeof config.id !== 'string'         ) { throw new Error(__filename + ': wrong or empty config.id'); }\n        if ( config.className && typeof config.className !== 'string'  ) { throw new Error(__filename + ': wrong or empty config.className'); }\n        if ( config.$node     && !(config.$node instanceof Element)    ) { throw new Error(__filename + ': wrong config.$node type'); }\n        if ( config.$body     && !(config.$body instanceof Element)    ) { throw new Error(__filename + ': wrong config.$body type'); }\n        if ( config.parent    && !(config.parent instanceof Component) ) { throw new Error(__filename + ': wrong config.parent type'); }\n        if ( config.children  && !Array.isArray(config.children)       ) { throw new Error(__filename + ': wrong config.children type'); }\n    }\n\n    /**\n     * Component visibility state flag.\n     *\n     * @readonly\n     * @type {boolean}\n     */\n    this.visible = true;\n\n    /**\n     * Component can accept focus or not.\n     *\n     * @type {boolean}\n     */\n    this.focusable = true;\n\n    /**\n     * DOM outer handle.\n     *\n     * @type {Element}\n     */\n    this.$node = null;\n\n    /**\n     * DOM inner handle.\n     * In simple cases is the same as $node.\n     *\n     * @type {Element}\n     */\n    this.$body = null;\n\n    /**\n     * Link to the parent component which has this component as a child.\n     *\n     * @type {Component}\n     */\n    this.parent = null;\n\n    /**\n     * List of all children components.\n     *\n     * @type {Component[]}\n     */\n    this.children = [];\n\n    /**\n     * allow to emit events to the parent component\n     *\n     * @readonly\n     * @type {boolean}\n     */\n    this.propagate = !!config.propagate;\n\n    // parent constructor call\n    Emitter.call(this, config.data);\n\n    // outer handle - empty div in case nothing is given\n    this.$node = config.$node || document.createElement('div');\n\n    // inner handle - the same as outer handler in case nothing is given\n    this.$body = config.$body || this.$node;\n\n    // set CSS class names\n    this.$node.className += ' component ' + (config.className || '');\n\n    // apply component id if given, generate otherwise\n    this.id = config.id || this.$node.id || 'cid' + counter++;\n\n    // apply hierarchy\n    if ( config.parent ) {\n        // add to parent component\n        config.parent.add(this);\n    }\n\n    // apply given visibility\n    if ( config.visible === false ) {\n        // default state is visible\n        this.hide();\n    }\n\n    // apply focus handling method\n    if ( config.focusable === false ) {\n        // can't accept focus\n        this.focusable = false;\n    }\n\n    // a descendant defined own events\n    if ( this.defaultEvents ) {\n        // sanitize\n        config.events = config.events || {};\n\n        if ( DEVELOP ) {\n            if ( typeof config.events !== 'object' ) { throw new Error(__filename + ': wrong config.events type'); }\n            if ( typeof this.defaultEvents !== 'object' ) { throw new Error(__filename + ': wrong this.defaultEvents type'); }\n        }\n\n        for ( name in this.defaultEvents ) {\n            // overwrite default events with user-defined\n            config.events[name] = config.events[name] || this.defaultEvents[name];\n        }\n    }\n\n    if ( config.events ) {\n        // apply all given events\n        Object.keys(config.events).forEach(function ( eventName ) {\n            self.addListener(eventName, config.events[eventName]);\n        });\n    }\n\n    // apply the given children components\n    if ( config.children ) {\n        // apply\n        this.add.apply(this, config.children);\n    }\n\n    // component activation by mouse\n    this.$node.addEventListener('click', function ( event ) {\n        // left mouse button\n        //if ( event.button === 0 ) {\n        // activate if possible\n        self.focus();\n\n        // there are some listeners\n        if ( self.events['click'] ) {\n            /**\n             * Mouse click event.\n             *\n             * @event module:stb/component~Component#click\n             *\n             * @type {Object}\n             * @property {Event} event click event data\n             */\n            self.emit('click', event);\n        }\n        //}\n\n        if ( DEVELOP ) {\n            // middle mouse button\n            if ( event.button === 1 ) {\n                //debug.inspect(self, 0);\n                //debug.info('\"window.link\" or \"' + self.id + '.component\"', 'this component is now available in global scope');\n                window.link = self;\n                self.$node.classList.toggle('wired');\n            }\n        }\n\n        event.stopPropagation();\n    });\n\n    if ( DEVELOP ) {\n        // expose inner ID to global scope\n        window[self.id] = self.$node;\n\n        // expose a link\n        this.$node.component = this.$body.component = this;\n        this.$node.title = 'component ' + this.constructor.name + '#' + this.id + ' (outer)';\n        this.$body.title = 'component ' + this.constructor.name + '#' + this.id + ' (inner)';\n    }\n\n    //debug.info('create component ' + this.constructor.name + '#' + this.id, null, {\n    //    tags: ['create', 'component', this.constructor.name, this.id]\n    //});\n}\n\n\n// inheritance\nComponent.prototype = Object.create(Emitter.prototype);\nComponent.prototype.constructor = Component;\n\n\n/**\n * List of all default event callbacks.\n *\n * @type {Object.<string, function>}\n */\nComponent.prototype.defaultEvents = null;\n\n\n/**\n * Add a new component as a child.\n *\n * @param {...Component} [child] variable number of elements to append\n *\n * @files Component#add\n *\n * @example\n * panel.add(\n *     new Button( ... ),\n *     new Button( ... )\n * );\n */\nComponent.prototype.add = function ( child ) {\n    var index;\n\n    // walk through all the given elements\n    for ( index = 0; index < arguments.length; index++ ) {\n        child = arguments[index];\n\n        if ( DEVELOP ) {\n            if ( !(child instanceof Component) ) { throw new Error(__filename + ': wrong child type'); }\n        }\n\n        // apply\n        this.children.push(child);\n        child.parent = this;\n\n        // correct DOM parent/child connection if necessary\n        if ( child.$node && child.$node.parentNode === null ) {\n            this.$body.appendChild(child.$node);\n        }\n\n        //debug.info('add component ' + child.constructor.name + '#' + child.id + ' to ' + this.constructor.name + '#' + this.id, null, {\n        //    tags: ['add', 'component', this.constructor.name, this.id, child.constructor.name, child.id]\n        //});\n\n        // there are some listeners\n        if ( this.events['add'] ) {\n            /**\n             * A child component is added.\n             *\n             * @event module:stb/component~Component#add\n             *\n             * @type {Object}\n             * @property {Component} item new component added\n             */\n            this.emit('add', {item: child});\n        }\n\n        //debug.log('component ' + this.constructor.name + '#' + this.id + ' new child: ' + child.constructor.name + '#' + child.id);\n    }\n};\n\n\n/* @todo: consider activation in future */\n///**\n// * Insert component into the specific position.\n// *\n// * @param {Component} child component instance to insert\n// * @param {number} index insertion position\n// */\n//Component.prototype.insert = function ( child, index ) {\n//    var prevIndex = this.children.indexOf(child);\n//\n//    if ( DEVELOP ) {\n//        if ( arguments.length !== 2 ) { throw new Error(__filename + ': wrong arguments number'); }\n//        if ( !(child instanceof Component) ) { throw new Error(__filename + ': wrong child type'); }\n//    }\n//\n//    if ( prevIndex !== -1 ) {\n//        this.children.splice(prevIndex, 1);\n//        this.$body.removeChild(child.$node);\n//    }\n//\n//    if ( index === this.children.length ) {\n//        this.$body.appendChild(child.$node);\n//    } else {\n//        this.$body.insertBefore(child.$node, this.$body.children[index]);\n//    }\n//    this.children.splice(index, 0, child);\n//\n//    if ( !child.parent ) {\n//        child.parent = this;\n//    }\n//};\n\n\n/**\n * Delete this component and clear all associated events.\n *\n * @fires module:stb/component~Component#remove\n */\nComponent.prototype.remove = function () {\n    // really inserted somewhere\n    if ( this.parent ) {\n        if ( DEVELOP ) {\n            if ( !(this.parent instanceof Component) ) { throw new Error(__filename + ': wrong this.parent type'); }\n        }\n\n        // active at the moment\n        if ( activeComponent === this ) {\n            this.blur();\n            this.parent.focus();\n        }\n        this.parent.children.splice(this.parent.children.indexOf(this), 1);\n    }\n\n    // remove all children\n    this.children.forEach(function ( child ) {\n        if ( DEVELOP ) {\n            if ( !(child instanceof Component) ) { throw new Error(__filename + ': wrong child type'); }\n        }\n\n        child.remove();\n    });\n\n    // remove all listeners\n    this.events = {};\n\n    this.$node.parentNode.removeChild(this.$node);\n\n    // there are some listeners\n    if ( this.events['remove'] ) {\n        /**\n         * Delete this component.\n         *\n         * @event module:stb/component~Component#remove\n         */\n        this.emit('remove');\n    }\n\n    //debug.log('component ' + this.constructor.name + '#' + this.id + ' remove', 'red');\n    //debug.info('remove component ' + this.constructor.name + '#' + this.id, null, {\n    //    tags: ['remove', 'component', this.constructor.name, this.id]\n    //});\n};\n\n\n/**\n * Activate the component.\n * Notify the owner-page and apply CSS class.\n *\n * @param {Object} [data] custom data which passed into handlers\n *\n * @return {boolean} operation status\n *\n * @fires module:stb/component~Component#focus\n */\nComponent.prototype.focus = function ( data ) {\n\n    // this is a visual component on a page\n    // not already focused and can accept focus\n    if ( this.focusable && this !== activeComponent ) {\n        // notify the current active component\n        if ( activeComponent ) { activeComponent.blur(); }\n\n        /* eslint consistent-this: 0 */\n\n        // apply\n        activeComponent = this;\n        activeComponent.$node.classList.add('focus');\n\n        //debug.log('component ' + this.constructor.name + '#' + this.id + ' focus');\n        //debug.info('focus component ' + this.constructor.name + '#' + this.id, null, {\n        //    tags: ['focus', 'component', this.constructor.name, this.id]\n        //});\n\n        // there are some listeners\n        if ( activeComponent.events['focus'] ) {\n            /**\n             * Make this component focused.\n             *\n             * @event module:stb/component~Component#focus\n             */\n            activeComponent.emit('focus', data);\n        }\n\n        return true;\n    }\n\n    // nothing was done\n    return false;\n};\n\n\n/**\n * Remove focus.\n * Change page.activeComponent and notify subscribers.\n *\n * @return {boolean} operation status\n *\n * @fires module:stb/component~Component#blur\n */\nComponent.prototype.blur = function () {\n    // apply visuals anyway\n    this.$node.classList.remove('focus');\n\n    // this is the active component\n    if ( this === activeComponent ) {\n        activeComponent = null;\n\n        //debug.log('component ' + this.constructor.name + '#' + this.id + ' blur', 'grey');\n        //debug.info('blur component ' + this.constructor.name + '#' + this.id, null, {\n        //    tags: ['blur', 'component', this.constructor.name, this.id]\n        //});\n\n        // there are some listeners\n        if ( this.events['blur'] ) {\n            /**\n             * Remove focus from this component.\n             *\n             * @event module:stb/component~Component#blur\n             */\n            this.emit('blur');\n        }\n\n        return true;\n    }\n\n    //debug.warn('component ' + this.constructor.name + '#' + this.id + ' attempt to blur without link to a page', null, {\n    //    tags: ['blur', 'component', this.constructor.name, this.id]\n    //});\n\n    // nothing was done\n    return false;\n};\n\n\n/**\n * Make the component visible and notify subscribers.\n *\n * @param {Object} [data] custom data which passed into handlers\n *\n * @return {boolean} operation status\n *\n * @fires module:stb/component~Component#show\n */\nComponent.prototype.show = function ( data ) {\n    // is it hidden\n    if ( !this.visible ) {\n        // correct style\n        this.$node.classList.remove('hidden');\n        // flag\n        this.visible = true;\n\n        //debug.info('show component ' + this.constructor.name + '#' + this.id, null, {\n        //    tags: ['show', 'component', this.constructor.name, this.id]\n        //});\n\n        // there are some listeners\n        if ( this.events['show'] ) {\n            /**\n             * Make the component visible.\n             *\n             * @event module:stb/component~Component#show\n             */\n            this.emit('show', data);\n        }\n\n        return true;\n    }\n\n    // nothing was done\n    return true;\n};\n\n\n/**\n * Make the component hidden and notify subscribers.\n *\n * @return {boolean} operation status\n *\n * @fires module:stb/component~Component#hide\n */\nComponent.prototype.hide = function () {\n    // is it visible\n    if ( this.visible ) {\n        // correct style\n        this.$node.classList.add('hidden');\n        // flag\n        this.visible = false;\n\n        //debug.info('hide component ' + this.constructor.name + '#' + this.id, null, {\n        //    tags: ['hide', 'component', this.constructor.name, this.id]\n        //});\n\n        // there are some listeners\n        if ( this.events['hide'] ) {\n            /**\n             * Make the component hidden.\n             *\n             * @event module:stb/component~Component#hide\n             */\n            this.emit('hide');\n        }\n\n        return true;\n    }\n\n    // nothing was done\n    return true;\n};\n\n\n// public\nmodule.exports = Component;\n","'use strict';\n\n\nif ( PLATFORM === 'MAG' || NANOCORE ) {\n    require('../platforms/mag/shims');\n}\n","'use strict';\n\nrequire('stb-shim-classlist');\n","/**\n * @license The MIT License (MIT)\n * @copyright Stanislav Kalashnik <darkpark.main@gmail.com>\n */\n\n/* eslint-disable */\n\n'use strict';\n\n\nif ( !document.documentElement.classList ) {\n    var prototype = Array.prototype,\n        indexOf   = prototype.indexOf,\n        slice     = prototype.slice,\n        push      = prototype.push,\n        splice    = prototype.splice,\n        join      = prototype.join;\n\n    window.DOMTokenList = function ( el ) {\n        this._element = el;\n        if (el.className !== this._classCache) {\n            this._classCache = el.className;\n            if (!this._classCache) { return; }\n            var classes = this._classCache.replace(/^\\s+|\\s+$/g,'').split(/\\s+/),\n                i;\n            for (i = 0; i < classes.length; i++) {\n                push.call(this, classes[i]);\n            }\n        }\n    };\n\n    window.DOMTokenList.prototype = {\n        add: function ( token ) {\n            if(this.contains(token)) { return; }\n            push.call(this, token);\n            this._element.className = slice.call(this, 0).join(' ');\n        },\n\n        contains: function ( token ) {\n            return indexOf.call(this, token) !== -1;\n        },\n\n        item: function ( index ) {\n            return this[index] || null;\n        },\n\n        remove: function ( token ) {\n            var i = indexOf.call(this, token);\n            if (i === -1) {\n                return;\n            }\n            splice.call(this, i, 1);\n            this._element.className = slice.call(this, 0).join(' ');\n        },\n\n        toString: function () {\n            return join.call(this, ' ');\n        },\n\n        toggle: function ( token ) {\n            if (!this.contains(token)) {\n                this.add(token);\n            } else {\n                this.remove(token);\n            }\n            return this.contains(token);\n        }\n    };\n\n    Object.defineProperty(Element.prototype, 'classList', {\n        get: function () {\n            return new window.DOMTokenList(this);\n        }\n    });\n}\n","/**\n * Magic module.\n * This module replace mag-app css loader, because we need to load only app styles.\n * Components are not used in this project.\n */\n\n'use strict';\n\nvar link = document.createElement('link'),\n    height = window.innerHeight || window.screen.height;\n\n\nswitch ( height ) {\n    case 480:\n    case 576:\n    case 720:\n    case 1080:\n        break;\n\n    default:\n        height = 720;\n        break;\n}\n\n\nlink.rel  = 'stylesheet';\nlink.href = 'css/app.' + height + '.css' + (DEVELOP ? '?' + Date.now() : '');\ndocument.head.appendChild(link);\n","/**\n * @module cjs-async\n * @license The MIT License (MIT)\n * @author Stanislav Kalashnik <darkpark.main@gmail.com>\n */\n\n'use strict';\n\n\n/**\n * Serial tasks execution.\n *\n * @type {module:cjs-async/serial}\n */\nmodule.exports.serial = require('./serial');\n\n\n/**\n * Parallel tasks execution.\n *\n * @type {module:cjs-async/parallel}\n */\nmodule.exports.parallel = require('./parallel');\n","/**\n * @module cjs-async/serial\n * @license The MIT License (MIT)\n * @author Stanislav Kalashnik <darkpark.main@gmail.com>\n */\n\n'use strict';\n\n/**\n * Method to be called to set task as completed.\n *\n * @callback onTaskFinishCallback\n *\n * @param {boolean} error status of the task execution\n * @param {Array} result data to return from the task\n */\n\n/**\n * Task method to be executed.\n *\n * @callback taskHandler\n *\n * @param {module:cjs-async/serial~onTaskFinishCallback} [callback] method to be called to set task as completed\n *\n * @example\n * function ( callback ) {\n *     callback(null, true);\n * }\n */\n\n/**\n * Method to be called on all given tasks completion.\n *\n * @callback onFinishCallback\n *\n * @param {boolean} error status of all tasks execution\n * @param {Array} result data received from all tasks\n */\n\n/**\n * Serial tasks execution.\n *\n * @param {module:cjs-async/serial~taskHandler[]} tasks set of tasks to execute\n * @param {module:cjs-async/serial~onFinishCallback} [callback] optional callback to run once all the tasks have completed\n *\n * @example\n * serial(taskList, function ( error, results ) {\n *     console.log(error, results);\n * });\n */\nmodule.exports = function ( tasks, callback ) {\n    var isError = false,\n        counter = 0,\n        results = [];\n\n    function handler ( task ) {\n        var done = function ( error, result ) {\n            if ( error ) {\n                // exit this task\n                // and prevent other to callback\n                isError = true;\n\n                callback(error);\n\n                return;\n            }\n\n            // fill results\n            results[counter] = result;\n\n            counter++;\n\n            // all tasks are processed\n            if ( counter >= tasks.length ) {\n                callback(null, results);\n            } else {\n                handler(tasks[counter]);\n            }\n        };\n\n        // error happened in some other task\n        if ( isError ) {\n            // callback was already used\n            return;\n        }\n\n        // actual call condition\n        if ( task.length === 0 ) {\n            done(null, task());\n        } else {\n            task(done);\n        }\n    }\n\n    // sanitize task list\n    tasks = Array.isArray(tasks) ? tasks : [];\n\n    // sanitize final handler\n    if ( typeof callback !== 'function' ) {\n        callback = function () { /* just in case */ };\n    }\n\n    // no tasks were given\n    if ( tasks.length === 0 ) {\n        // empty result\n        callback(null, results);\n    } else {\n        // run the first task\n        handler(tasks[0]);\n    }\n};\n"],"sourceRoot":""}