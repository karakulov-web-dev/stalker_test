{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./node_modules/cjs-emitter/index.js","webpack:///./src/js/main.js","webpack:///./node_modules/stb-keys/index.js","webpack:///./node_modules/spa-keys/index.js","webpack:///./node_modules/mag-gettext/index.js","webpack:///./node_modules/cjs-gettext/index.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","Emitter","this","events","addListener","callback","push","once","self","onceWrapper","removeListener","apply","arguments","addListeners","callbacks","filter","fn","length","undefined","emit","index","event","Array","slice","constructor","gettext","keys","gettextWrapper","daemon","triggers","standbyOn","forEach","item","standbyOff","standByToggle","data","standByStatus","gSTB","GetStandByStatus","standByMode","StandByMode","action","window","MODE_STALKER","setTimeout","SetLedIndicatorMode","StandBy","Stop","Client","trigger","error","destroy","splice","indexOf","onInit","config","load","core","environment","language","path","envStandByMode","Number","JSON","parse","GetEnv","stringify","varList","result","MODE_PORTAL","SetEnv","SupportedStandByModes","power","altKey","system","stbEvent","message","onAppInit","onSettingsInit","content","id","parent","type","description","label","icon","render","api","renders","popupSelect","getters","prepareForRender","selected","prepareForSave","saver","savers","build","back","backspace","channelNext","tab","channelPrev","ok","enter","exit","escape","volumeUp","volumeDown","f1","f2","f3","f4","refresh","frame","phone","set","tv","menu","app","rewind","forward","audio","standby","keyboard","usbMounted","usbUnmounted","playPause","play","pause","stop","record","info","mute","digit0","digit1","digit2","digit3","digit4","digit5","digit6","digit7","digit8","digit9","space","pageUp","pageDown","end","home","left","up","right","down","insert","del","Gettext","loader","prepare","_","pgettext","ngettext","defaultLanguage","xhr","ext","XMLHttpRequest","onload","jsonParseError","json","responseText","onerror","ontimeout","open","send","meta","msgId","context","plural","evalResult","eval"],"mappings":"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","file":"main.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 1);\n","/**\n * @license The MIT License (MIT)\n * @author Stanislav Kalashnik <darkpark.main@gmail.com>\n */\n\n/* eslint no-path-concat: 0 */\n\n'use strict';\n\n\n/**\n * Base Events Emitter implementation.\n *\n * @see http://nodejs.org/api/events.html\n * @constructor\n *\n * @example\n * var emitter = new Emitter();\n */\nfunction Emitter () {\n    console.assert(typeof this === 'object', 'must be constructed via new');\n\n    // if ( DEVELOP ) {\n    //     if ( typeof this !== 'object' ) { throw new Error(__filename + ': must be constructed via new'); }\n    // }\n\n    /**\n     * Inner hash table for event names and linked callbacks.\n     * Manual editing should be avoided.\n     *\n     * @member {Object.<string, function[]>}\n     *\n     * @example\n     * {\n     *     click: [\n     *         function click1 () { ... },\n     *         function click2 () { ... }\n     *     ],\n     *     keydown: [\n     *         function () { ... }\n     *     ]\n     * }\n     **/\n    this.events = {};\n}\n\n\nEmitter.prototype = {\n    /**\n     * Bind an event to the given callback function.\n     * The same callback function can be added multiple times for the same event name.\n     *\n     * @param {string} name event identifier\n     * @param {function} callback function to call on this event\n     *\n     * @example\n     * emitter.addListener('click', function ( data ) { ... });\n     * // one more click handler\n     * emitter.addListener('click', function ( data ) { ... });\n     */\n    addListener: function ( name, callback ) {\n        console.assert(arguments.length === 2, 'wrong arguments number');\n        console.assert(typeof name === 'string', 'wrong name type');\n        console.assert(name.length > 0, 'empty name');\n        console.assert(typeof callback === 'function', 'callback should be a function');\n\n        // if ( DEVELOP ) {\n        //     if ( arguments.length !== 2 ) { throw new Error(__filename + ': wrong arguments number'); }\n        //     if ( typeof name !== 'string' || name.length === 0 ) { throw new Error(__filename + ': wrong or empty name'); }\n        //     if ( typeof callback !== 'function' ) { throw new Error(__filename + ': wrong callback type'); }\n        // }\n\n        // initialization may be required\n        this.events[name] = this.events[name] || [];\n        // append this new event to the list\n        this.events[name].push(callback);\n    },\n\n\n    /**\n     * Add a one time listener for the event.\n     * This listener is invoked only the next time the event is fired, after which it is removed.\n     *\n     * @param {string} name event identifier\n     * @param {function} callback function to call on this event\n     *\n     * @example\n     * emitter.once('click', function ( data ) { ... });\n     */\n    once: function ( name, callback ) {\n        // current execution context\n        var self = this;\n\n        if ( DEVELOP ) {\n            if ( arguments.length !== 2 ) {\n                throw new Error(__filename + ': wrong arguments number');\n            }\n            if ( typeof name !== 'string' || name.length === 0 ) {\n                throw new Error(__filename + ': wrong or empty name');\n            }\n            if ( typeof callback !== 'function' ) {\n                throw new Error(__filename + ': wrong callback type');\n            }\n        }\n\n        // initialization may be required\n        this.events[name] = this.events[name] || [];\n        // append this new event to the list\n        this.events[name].push(function onceWrapper () {\n            self.removeListener(name, onceWrapper);\n            callback.apply(self, arguments);\n        });\n    },\n\n\n    /**\n     * Apply multiple listeners at once.\n     *\n     * @param {Object} callbacks event names with callbacks\n     *\n     * @example\n     * emitter.addListeners({\n     *     click: function ( data ) {},\n     *     close: function ( data ) {}\n     * });\n     */\n    addListeners: function ( callbacks ) {\n        var name;\n\n        if ( DEVELOP ) {\n            if ( arguments.length !== 1 ) {\n                throw new Error(__filename + ': wrong arguments number');\n            }\n            if ( typeof callbacks !== 'object' ) {\n                throw new Error(__filename + ': wrong callbacks type');\n            }\n            if ( Object.keys(callbacks).length === 0 ) {\n                throw new Error(__filename + ': no callbacks given');\n            }\n        }\n\n        for ( name in callbacks ) {\n            if ( callbacks.hasOwnProperty(name) ) {\n                this.addListener(name, callbacks[name]);\n            }\n        }\n    },\n\n\n    /**\n     * Remove all instances of the given callback.\n     *\n     * @param {string} name event identifier\n     * @param {function} callback function to remove\n     *\n     * @example\n     * emitter.removeListener('click', func1);\n     */\n    removeListener: function ( name, callback ) {\n        if ( DEVELOP ) {\n            if ( arguments.length !== 2 ) {\n                throw new Error(__filename + ': wrong arguments number');\n            }\n            if ( typeof name !== 'string' || name.length === 0 ) {\n                throw new Error(__filename + ': wrong or empty name');\n            }\n            if ( typeof callback !== 'function' ) {\n                throw new Error(__filename + ': wrong callback type');\n            }\n            if ( this.events[name] && !Array.isArray(this.events[name]) ) {\n                throw new Error(__filename + ': corrupted inner data');\n            }\n        }\n\n        // the event exists and should have some callbacks\n        if ( this.events[name] ) {\n            // rework the callback list to exclude the given one\n            this.events[name] = this.events[name].filter(function callbacksFilter ( fn ) { return fn !== callback; });\n            // event has no more callbacks so clean it\n            if ( this.events[name].length === 0 ) {\n                // as if there were no listeners at all\n                this.events[name] = undefined;\n            }\n        }\n    },\n\n\n    /**\n     * Remove all callbacks for the given event name.\n     * Without event name clears all events.\n     *\n     * @param {string} [name] event identifier\n     *\n     * @example\n     * emitter.removeAllListeners('click');\n     * emitter.removeAllListeners();\n     *\n     * @deprecated\n     */\n    /*removeAllListeners: function ( name ) {\n        if ( DEVELOP ) {\n            if ( arguments.length !== 0 && (typeof name !== 'string' || name.length === 0) ) {\n                throw new Error(__filename + ': wrong or empty name');\n            }\n        }\n\n        // check input\n        if ( arguments.length === 0 ) {\n            // no arguments so remove everything\n            this.events = {};\n        } else if ( name ) {\n            if ( DEVELOP ) {\n                if ( this.events[name] ) { throw new Error(__filename + ': event is not removed'); }\n            }\n\n            // only name is given so remove all callbacks for the given event\n            // but object structure modification should be avoided\n            this.events[name] = undefined;\n        }\n    },*/\n\n\n    /**\n     * Execute each of the listeners in the given order with the supplied arguments.\n     *\n     * @param {string} name event identifier\n     *\n     * @example\n     * emitter.emit('init');\n     * emitter.emit('click', {src: panel1, dst: panel2});\n     * emitter.emit('load', error, data);\n     *\n     * // it's a good idea to emit event only when there are some listeners\n     * if ( this.events['click'] ) {\n     *     this.emit('click', {event: event});\n     * }\n     */\n    emit: function ( name ) {\n        var event = this.events[name],\n            index;\n\n        if ( DEVELOP ) {\n            if ( arguments.length < 1 ) {\n                throw new Error(__filename + ': wrong arguments number');\n            }\n            if ( typeof name !== 'string' || name.length === 0 ) {\n                throw new Error(__filename + ': wrong or empty name');\n            }\n        }\n\n        // the event exists and should have some callbacks\n        if ( event ) {\n            if ( DEVELOP ) {\n                if ( !Array.isArray(event) ) {\n                    throw new Error(__filename + ': wrong event type');\n                }\n            }\n\n            for ( index = 0; index < event.length; index++ ) {\n                if ( DEVELOP ) {\n                    if ( typeof event[index] !== 'function' ) {\n                        throw new Error(__filename + ': wrong event callback type');\n                    }\n                }\n\n                // invoke the callback with parameters\n                event[index].apply(this, Array.prototype.slice.call(arguments, 1));\n            }\n        }\n    }\n};\n\n\n// correct constructor name\nEmitter.prototype.constructor = Emitter;\n\n\n// public\nmodule.exports = Emitter;\n","/**\n * Created by bas.\n */\n\n'use strict';\n\n//window.MODE_PORTAL = true;\n\nvar keys           = require('stb-keys'),\n    gettextWrapper = require('mag-gettext'),\n    Emitter        = require('cjs-emitter'),\n    daemon         = {\n        triggers: [],\n        standbyOn: function () {\n            this.triggers.forEach(function ( item ) {\n                if ( typeof item.standbyOn === 'function' ) {\n                    item.standbyOn();\n                }\n            });\n        },\n        standbyOff: function () {\n            this.triggers.forEach(function ( item ) {\n                if ( typeof item.standbyOff === 'function' ) {\n                    item.standbyOff();\n                }\n            });\n        }\n    },\n    gettext;\n\n\nfunction standByToggle ( data ) {\n    var standByStatus = !gSTB.GetStandByStatus(),\n        standByMode   = gSTB.StandByMode;\n\n    if (\n        data && data.action\n        && ((data.action === 'on' && !standByStatus) || (data.action === 'off' && standByStatus))\n    ) {\n        // we already in this mode so no need for any actions\n        return;\n    }\n    // ministra/stalker should use only active standby\n    if ( window.MODE_STALKER ) {\n        standByMode = gSTB.StandByMode = 1;\n    }\n\n    if ( standByMode === 3 ) {\n        // deep standBy mode\n        daemon.standbyOn();\n        // need some time to send message to other apps\n        setTimeout(function () {\n            //console.log('standby-> Go to deep');\n            gSTB.SetLedIndicatorMode(2);\n            gSTB.StandBy(standByStatus);\n            // deep standby is a sync operation so following js code will be executed\n            // only after next POWER button press (C++ will wake up box)\n            gSTB.SetLedIndicatorMode(1);\n            daemon.standbyOff();\n            //console.log('standby-> exit from deep');\n        }, 1000);\n    } else if ( standByMode === 1 ) {\n        // active standBy mode\n        if ( standByStatus ) {\n            //console.log('standby-> Go to active');\n            daemon.standbyOn();\n            gSTB.SetLedIndicatorMode(2);\n            gSTB.StandBy(standByStatus);\n            gSTB.Stop();\n        } else {\n            //console.log('standby-> exit from active');\n            gSTB.StandBy(standByStatus);\n            gSTB.SetLedIndicatorMode(1);\n            daemon.standbyOff();\n        }\n    }\n}\n\n\nfunction build ( config ) {\n    var result;\n\n    // stalker always use 'active stand by mode' so no need for options\n    // also if we have only 1 option for select no need to show this setting\n    if ( window.MODE_PORTAL && gSTB.SupportedStandByModes && gSTB.SupportedStandByModes.length > 1 ) {\n        result = {\n            content: [\n                {\n                    id: 'standby',\n                    parent: 'system',\n                    type: 'option',\n                    name: gettext('Stand by mode'),\n                    description: [\n                        {\n                            label: gettext('Mode') + ':',\n                            value: ['', gettext('Active'), '', gettext('Deep')][gSTB.StandByMode] || ''\n                        }, {\n                            label: '',\n                            value: gettext('Selecting standby mode:\\nDeep - all applications complete their work\\nActive - most of the systems work, the screen dims and the player stops\\nThese modes are activated by pressing the Power button on the remote control.') // eslint-disable-line\n                        }\n                    ],\n                    icon: 'theme-icon-standby',\n                    environment: {standByMode: gSTB.StandByMode},\n                    render: config.api.renders.popupSelect,\n                    getter: config.api.getters.environment,\n                    prepareForRender: function ( data, callback ) {\n                        callback([\n                            {value: 1, name: gettext('Active'), selected: gSTB.StandByMode === 1},\n                            {value: 3, name: gettext('Deep'), selected: gSTB.StandByMode === 3}\n                        ]);\n                    },\n                    prepareForSave: function ( value, callback ) {\n                        //console.log('standby:was ' + gSTB.StandByMode + ' set to ' + value);\n                        gSTB.StandByMode = value;\n                        // instant new value apply\n                        gSTB.SetEnv(JSON.stringify({standByMode: gSTB.StandByMode}));\n                        // tell core about new value\n                        this.environment['standByMode'] = value;\n                        callback();\n                    },\n                    saver: config.api.savers.environment\n                }\n            ]\n        };\n    } else {\n        result = {content: []};\n    }\n\n    return result;\n}\n\n\nfunction Client () {\n    var self    = this,\n        trigger = {};\n\n    Emitter.call(this);\n\n    trigger.standbyOn = function () {\n        if ( self.events['standbyOn'] ) {\n            try {\n                self.emit('standbyOn');\n            } catch ( error ) {\n                console.log('standby plugin: error in one of standbyOn listeners. ' + error);\n            }\n        }\n    };\n    trigger.standbyOff = function () {\n        if ( self.events['standbyOff'] ) {\n            try {\n                self.emit('standbyOff');\n            } catch ( error ) {\n                console.log('standby plugin: error in one of standbyOff listeners. ' + error);\n            }\n        }\n    };\n\n    daemon.triggers.push(trigger);\n\n    /**\n     * Stop this client and remove all it listeners. Use it for cleanup before application exit.\n     */\n    this.destroy = function () {\n        daemon.triggers.splice(daemon.triggers.indexOf(trigger), 1);\n        this.events = {};\n    };\n}\n\n\nClient.prototype = Object.create(Emitter.prototype);\nClient.prototype.constructor = Client;\n\n\nmodule.exports = {\n    onInit: function ( config, callback ) {\n        gettextWrapper.load({\n            name: window.core.environment.language,\n            path: config.path + 'lang'\n        }, function () {\n            var envStandByMode = Number(JSON.parse(gSTB.GetEnv(JSON.stringify({varList: ['standByMode']}))).result.standByMode);\n\n            gettext = gettextWrapper.gettext;\n            // if value is empty replace with default\n            if ( window.MODE_PORTAL && envStandByMode === '' ) {\n                gSTB.SetEnv(JSON.stringify({standByMode: gSTB.StandByMode}));\n            }\n            // apply standby mode according to user settings\n            if ( gSTB.SupportedStandByModes && gSTB.SupportedStandByModes.indexOf(envStandByMode) !== -1 ) {\n                gSTB.StandByMode = envStandByMode;\n            }\n            // add listener for power button (keydown code is 85+alt)\n            window.core.addListener('keydown:' + keys.power, function ( data ) {\n                //console.log('power button keydown');\n                if ( data.altKey ) {\n                    standByToggle();\n                }\n            });\n            // add listener for system plugins (for example hdmi reaction plugin can turn on/off standby)\n            window.system.addListener('standby', function ( data ) {\n                //console.log('standby from system with data');\n                //console.log(JSON.stringify(data));\n                standByToggle(data);\n            });\n            // add listener for stand by event from legacy portal (for example magic cast nano-core build)\n            if ( !window.MODE_PORTAL && !window.MODE_STALKER ) {\n                window.stbEvent.addListener('message', function ( data ) {\n                    if ( data.message === 'portal.standbyMode' ) {\n                        standByToggle(data);\n                    }\n                });\n            }\n\n            callback();\n        });\n    },\n    onAppInit: function ( config, callback ) {\n        callback(null, new Client());\n    },\n    onSettingsInit: function ( config, callback ) {\n        callback(null, build(config));\n    }\n};\n","/**\n * Global list of non-printable control key codes.\n *\n * At the moment `keypress` and `keydown` events are emitted for the same keys (for both printable and non-printable characters).\n *\n * WARNING!!! All codes in this file (except 'volumeUp' and 'volumeDown')\n * are used in window 'keydown' handler to prevent wrong 'keypress' firings.\n * If you add new code to this file 'keypress' event with this code will never fire.\n *\n * @license The MIT License (MIT)\n * @copyright Stanislav Kalashnik <darkpark.main@gmail.com>\n */\n\n'use strict';\n\nvar keys = require('spa-keys');\n\n\n// extend with additional codes\nkeys.back         = keys.backspace;\nkeys.channelNext  = keys.tab;        // Tab\nkeys.channelPrev  = keys.tab + 's';  // Shift+Tab\nkeys.ok           = keys.enter;      // Enter\nkeys.exit         = keys.escape;     // Esc\nkeys.volumeUp     = 107;             // NUMPAD +\nkeys.volumeDown   = 109;             // NUMPAD -\nkeys.f1           = 112 + 'c';       // Ctrl+F1\nkeys.f2           = 113 + 'c';       // Ctrl+F2\nkeys.f3           = 114 + 'c';       // Ctrl+F3\nkeys.f4           = 115 + 'c';       // Ctrl+F4\nkeys.refresh      = 116 + 'c';       // Ctrl+F5\nkeys.frame        = 117 + 'c';       // Ctrl+F6\nkeys.phone        = 119 + 'c';       // Ctrl+F8\nkeys.set          = 120 + 'c';       // Ctrl+F9\nkeys.tv           = 121 + 'c';       // Ctrl+F10\nkeys.menu         = 122 + 'c';       // Ctrl+F11\nkeys.app          = 123 + 'c';       // Ctrl+F12\nkeys.rewind       = 66  + 'a';       // Alt+B\nkeys.forward      = 70  + 'a';       // Alt+F\nkeys.audio        = 71  + 'a';       // Alt+G\nkeys.standby      = 74  + 'a';       // Alt+J\nkeys.keyboard     = 76  + 'a';       // Alt+L\nkeys.usbMounted   = 80  + 'a';       // Alt+P\nkeys.usbUnmounted = 81  + 'a';       // Alt+Q\nkeys.playPause    = 82  + 'a';       // Alt+R\nkeys.play         = -1;              // should be redefined on some platforms\nkeys.pause        = -1;              // should be redefined on some platforms\nkeys.stop         = 83  + 'a';       // Alt+S\nkeys.power        = 85  + 'a';       // Alt+U\nkeys.record       = 87  + 'a';       // Alt+W\nkeys.info         = 89  + 'a';       // Alt+Y\nkeys.mute         = 192 + 'a';\nkeys.digit0       = 48;\nkeys.digit1       = 49;\nkeys.digit2       = 50;\nkeys.digit3       = 51;\nkeys.digit4       = 52;\nkeys.digit5       = 53;\nkeys.digit6       = 54;\nkeys.digit7       = 55;\nkeys.digit8       = 56;\nkeys.digit9       = 57;\n\n\n// public\nmodule.exports = keys;\n\n// public\n// module.exports = {\n//     getCode: function ( event ) {\n//         var code = event.keyCode;\n//\n//         // apply key modifiers\n//         if ( event.shiftKey ) { code += 1000; }\n//         if ( event.altKey )   { code += 2000; }\n//\n//         return code;\n//     },\n//\n//     codes: {\n//         back:         8,    // Backspace\n//         channelPrev:  1009, // Shift+Tab\n//         channelNext:  9,    // Tab\n//         ok:           13,   // Enter\n//         exit:         27,   // Esc\n//         pageUp:       33,\n//         pageDown:     34,\n//         end:          35,\n//         home:         36,\n//         left:         37,\n//         up:           38,\n//         right:        39,\n//         down:         40,\n//         'delete':     46,\n//         volumeUp:     107,  // NUMPAD +\n//         volumeDown:   109,  // NUMPAD -\n//         f1:           112,  // F1\n//         f2:           113,  // F2\n//         f3:           114,  // F3\n//         f4:           115,  // F4\n//         refresh:      116,  // F5\n//         frame:        117,  // F6\n//         phone:        119,  // F8\n//         set:          120,  // F9\n//         tv:           121,  // F10\n//         menu:         122,  // F11\n//         app:          123,  // F12\n//         rewind:       2066, // Alt+B\n//         forward:      2070, // Alt+F\n//         audio:        2071, // Alt+G\n//         standby:      2074, // Alt+J\n//         keyboard:     2076, // Alt+L\n//         usbMounted:   2080, // Alt+P\n//         usbUnmounted: 2081, // Alt+Q\n//         playPause:    2082, // Alt+R\n//         stop:         2083, // Alt+S\n//         power:        2085, // Alt+U\n//         record:       2087, // Alt+W\n//         info:         2089, // Alt+Y\n//         mute:         2192\n//     }\n// };\n","/**\n * Global list of non-printable control key codes.\n *\n * @author Stanislav Kalashnik <darkpark.main@gmail.com>\n * @license GNU GENERAL PUBLIC LICENSE Version 3\n */\n\n'use strict';\n\n// public\nmodule.exports = {\n    backspace: 8,\n    tab:       9,\n    enter:     13,\n    escape:    27,\n    space:     32,\n    pageUp:    33,\n    pageDown:  34,\n    end:       35,\n    home:      36,\n    left:      37,\n    up:        38,\n    right:     39,\n    down:      40,\n    insert:    45,\n    // not \"delete\" because of old browsers issue\n    del:       46\n};\n","/**\n * @license The MIT License (MIT)\n * @copyright Stanislav Kalashnik <darkpark.main@gmail.com>\n */\n\n/* eslint no-path-concat: 0 */\n\n'use strict';\n\nvar Emitter = require('cjs-emitter'),\n    Gettext = require('cjs-gettext'),\n    loader  = new Emitter();\n\n\nif ( DEVELOP ) {\n    loader._ = loader.gettext = loader.pgettext = loader.ngettext = function () {\n        throw new Error(__filename + ': you cannot use this function before mag-gettext not yet loaded');\n    };\n}\n\n/**\n * Wrap the given data with gettext instance\n * and export methods to the global scope.\n *\n * @param {Object} [data] localization data\n */\nfunction prepare ( data ) {\n    var gettext = new Gettext(data);\n\n    loader._ = loader.gettext = gettext.gettext;\n    loader.pgettext = gettext.pgettext;\n    loader.ngettext = gettext.ngettext;\n}\n\n\n/**\n * Main application language\n */\nloader.defaultLanguage = 'en';\n\n\n/**\n * Simple gettext implementation.\n *\n * @param {Object} config options\n * @param {string} [config.path=lang] relative path to project root\n * @param {string} config.name language name\n * @param {string} [config.ext=json] language file extension\n * @param {function} callback hook on ready\n */\nloader.load = function ( config, callback ) {\n    var xhr;\n\n    if ( DEVELOP ) {\n        if ( !config.name || typeof config.name !== 'string' ) {\n            throw new Error(__filename + ': config.name must be a nonempty string');\n        }\n        if ( callback && typeof callback !== 'function' ) {\n            throw new Error(__filename + ': wrong callback type');\n        }\n    }\n\n    // defaults\n\n    callback = callback || null;\n    config.ext  = config.ext  || 'json';\n    config.path = config.path || 'lang';\n\n    // is it necessary to request a localization file?\n    if ( config.name === loader.defaultLanguage ) {\n        // no\n        prepare();\n        if ( callback !== null ) {\n            callback(null);\n        }\n    } else {\n        xhr = new XMLHttpRequest();\n\n        xhr.onload = function () {\n            var jsonParseError, json;\n\n            try {\n                json = JSON.parse(xhr.responseText);\n            } catch ( error ) {\n                jsonParseError = error;\n            }\n\n            if ( jsonParseError ) {\n                xhr.onerror(jsonParseError);\n            } else {\n                prepare(json);\n                if ( callback !== null ) {\n                    callback(null);\n                }\n\n                // there are some listeners\n                if ( loader.events['load'] ) {\n                    // notify listeners\n                    loader.emit('load');\n                }\n            }\n        };\n\n        xhr.ontimeout = xhr.onerror = function ( error ) {\n            prepare();\n\n            if ( callback !== null ) {\n                callback(null);\n            }\n\n            // there are some listeners\n            if ( loader.events['error'] ) {\n                // notify listeners\n                loader.emit('error', error);\n            }\n        };\n\n        xhr.open('GET', config.path + '/' + config.name + '.' + config.ext, true);\n        xhr.send(null);\n    }\n};\n\n\n// public\nmodule.exports = loader;\n","/**\n * @license The MIT License (MIT)\n * @author Stanislav Kalashnik <darkpark.main@gmail.com>\n */\n\n/* eslint no-path-concat: 0 */\n\n'use strict';\n\n\n/**\n * Translations handler.\n *\n * @constructor\n *\n * @param {Object} config init parameters\n */\nfunction Gettext ( config ) {\n    var data, meta;\n\n    // sanitize\n    config   = config || {};\n    data     = config.data || {};\n    data[''] = data[''] || {};\n\n    // shortcut\n    meta = config.meta;\n\n    /**\n     * Display the native language translation of a textual message.\n     *\n     * @param {string} msgId textual message\n     *\n     * @return {string} translated text\n     */\n    this.gettext = function ( msgId ) {\n        return data[''][msgId] || msgId;\n    };\n\n\n    /**\n     * The \"p\" in \"pgettext\" stands for \"particular\": fetches a particular translation of the textual message.\n     *\n     * @param {string} context message context\n     * @param {string} msgId textual message\n     *\n     * @return {string} translated text\n     */\n    this.pgettext = function ( context, msgId ) {\n        return data[context] && data[context][msgId] || msgId;\n    };\n\n\n    /**\n     * Display the native language translation of a textual message whose grammatical form depends on a number.\n     *\n     * @param {string} msgId textual message in a singular form\n     * @param {string} plural textual message in a plural form\n     * @param {number} value message number\n     *\n     * @return {string} translated text\n     */\n    this.ngettext = function ( msgId, plural, value ) {\n        /* eslint no-unused-vars: 0 */\n        /* eslint no-eval: 0 */\n        /* eslint id-length: 0 */\n        var n, evalResult;\n\n        if ( DEVELOP ) {\n            if ( Number(value) !== value ) {\n                throw new Error(__filename + ': value must be a number');\n            }\n        }\n\n        if ( data && meta && data[''][msgId] ) {\n            evalResult = eval('n = ' + value + '; ' + meta.plural);\n\n            if ( typeof evalResult === 'boolean' ) {\n                evalResult = +evalResult;\n            }\n\n            // translation\n            return data[''][msgId][evalResult];\n        }\n\n        // english\n        return value === 1 ? msgId : plural;\n    };\n}\n\n\n// correct constructor name\nGettext.prototype.constructor = Gettext;\n\n\n// public\nmodule.exports = Gettext;\n"],"sourceRoot":""}