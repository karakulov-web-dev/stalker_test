{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./node_modules/cjs-emitter/index.js","webpack:///./src/js/main.js","webpack:///./node_modules/stb-keys/index.js","webpack:///./node_modules/spa-keys/index.js","webpack:///./node_modules/mag-gettext/index.js","webpack:///./node_modules/cjs-gettext/index.js","webpack:///./src/js/volume.wrapper.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","Emitter","this","events","addListener","callback","push","once","self","onceWrapper","removeListener","apply","arguments","addListeners","callbacks","filter","fn","length","undefined","emit","index","event","Array","slice","constructor","api","audioVolume","mute","gettext","keys","gettextWrapper","volumeWrapper","provider","correction","correctionReady","checkSelected","options","select","selected","setMute","system","updateVolume","setValue","volume","setVolume","manual","old","curr","prev","core","device","model","volumeUp","volumeDown","defineProperties","set","onAppInit","config","onInit","needCheck","top","MODE_PORTAL","MODE_STALKER","environment","audio_initial_volume","parseInt","init","onSettingsInit","load","language","path","data","id","description","icon","sections","render","renders","popupSelect","saveImmediate","audio_stereo_out_mode","prepareForRender","prepareForSave","gSTB","SetStereoMode","STEREO","MONO","MONO_LEFT","MONO_RIGHT","LT_RT","getters","saver","savers","parent","advanced","audio_spdif_mode","SetupSPdif","audio_hdmi_audio_mode","SetHDMIAudioOut","content","rangeInput","min","max","step","error","audio_dyn_range_comp","title","SetDRC","audio_operational_mode","SetAudioOperationalMode","RF_MODDE","LINE_MODE","CUSTOM0","CUSTOM1","buildList","back","backspace","channelNext","tab","channelPrev","ok","enter","exit","escape","f1","f2","f3","f4","refresh","frame","phone","tv","menu","app","rewind","forward","audio","standby","keyboard","usbMounted","usbUnmounted","playPause","play","pause","stop","power","record","info","digit0","digit1","digit2","digit3","digit4","digit5","digit6","digit7","digit8","digit9","space","pageUp","pageDown","end","home","left","up","right","down","insert","del","Gettext","loader","prepare","_","pgettext","ngettext","defaultLanguage","xhr","ext","XMLHttpRequest","onload","jsonParseError","json","JSON","parse","responseText","onerror","ontimeout","open","send","meta","msgId","context","plural","evalResult","eval","audioManager","stbAudioOutput","playerManager","window","stbPlayer","volumeValue","GetVolume","muteValue","GetMute","stbAudioManager","SetMute","SetVolume","list","stbPlayerManager","val","idx"],"mappings":"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","file":"main.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 1);\n","/**\n * @license The MIT License (MIT)\n * @author Stanislav Kalashnik <darkpark.main@gmail.com>\n */\n\n/* eslint no-path-concat: 0 */\n\n'use strict';\n\n\n/**\n * Base Events Emitter implementation.\n *\n * @see http://nodejs.org/api/events.html\n * @constructor\n *\n * @example\n * var emitter = new Emitter();\n */\nfunction Emitter () {\n    console.assert(typeof this === 'object', 'must be constructed via new');\n\n    // if ( DEVELOP ) {\n    //     if ( typeof this !== 'object' ) { throw new Error(__filename + ': must be constructed via new'); }\n    // }\n\n    /**\n     * Inner hash table for event names and linked callbacks.\n     * Manual editing should be avoided.\n     *\n     * @member {Object.<string, function[]>}\n     *\n     * @example\n     * {\n     *     click: [\n     *         function click1 () { ... },\n     *         function click2 () { ... }\n     *     ],\n     *     keydown: [\n     *         function () { ... }\n     *     ]\n     * }\n     **/\n    this.events = {};\n}\n\n\nEmitter.prototype = {\n    /**\n     * Bind an event to the given callback function.\n     * The same callback function can be added multiple times for the same event name.\n     *\n     * @param {string} name event identifier\n     * @param {function} callback function to call on this event\n     *\n     * @example\n     * emitter.addListener('click', function ( data ) { ... });\n     * // one more click handler\n     * emitter.addListener('click', function ( data ) { ... });\n     */\n    addListener: function ( name, callback ) {\n        console.assert(arguments.length === 2, 'wrong arguments number');\n        console.assert(typeof name === 'string', 'wrong name type');\n        console.assert(name.length > 0, 'empty name');\n        console.assert(typeof callback === 'function', 'callback should be a function');\n\n        // if ( DEVELOP ) {\n        //     if ( arguments.length !== 2 ) { throw new Error(__filename + ': wrong arguments number'); }\n        //     if ( typeof name !== 'string' || name.length === 0 ) { throw new Error(__filename + ': wrong or empty name'); }\n        //     if ( typeof callback !== 'function' ) { throw new Error(__filename + ': wrong callback type'); }\n        // }\n\n        // initialization may be required\n        this.events[name] = this.events[name] || [];\n        // append this new event to the list\n        this.events[name].push(callback);\n    },\n\n\n    /**\n     * Add a one time listener for the event.\n     * This listener is invoked only the next time the event is fired, after which it is removed.\n     *\n     * @param {string} name event identifier\n     * @param {function} callback function to call on this event\n     *\n     * @example\n     * emitter.once('click', function ( data ) { ... });\n     */\n    once: function ( name, callback ) {\n        // current execution context\n        var self = this;\n\n        if ( DEVELOP ) {\n            if ( arguments.length !== 2 ) {\n                throw new Error(__filename + ': wrong arguments number');\n            }\n            if ( typeof name !== 'string' || name.length === 0 ) {\n                throw new Error(__filename + ': wrong or empty name');\n            }\n            if ( typeof callback !== 'function' ) {\n                throw new Error(__filename + ': wrong callback type');\n            }\n        }\n\n        // initialization may be required\n        this.events[name] = this.events[name] || [];\n        // append this new event to the list\n        this.events[name].push(function onceWrapper () {\n            self.removeListener(name, onceWrapper);\n            callback.apply(self, arguments);\n        });\n    },\n\n\n    /**\n     * Apply multiple listeners at once.\n     *\n     * @param {Object} callbacks event names with callbacks\n     *\n     * @example\n     * emitter.addListeners({\n     *     click: function ( data ) {},\n     *     close: function ( data ) {}\n     * });\n     */\n    addListeners: function ( callbacks ) {\n        var name;\n\n        if ( DEVELOP ) {\n            if ( arguments.length !== 1 ) {\n                throw new Error(__filename + ': wrong arguments number');\n            }\n            if ( typeof callbacks !== 'object' ) {\n                throw new Error(__filename + ': wrong callbacks type');\n            }\n            if ( Object.keys(callbacks).length === 0 ) {\n                throw new Error(__filename + ': no callbacks given');\n            }\n        }\n\n        for ( name in callbacks ) {\n            if ( callbacks.hasOwnProperty(name) ) {\n                this.addListener(name, callbacks[name]);\n            }\n        }\n    },\n\n\n    /**\n     * Remove all instances of the given callback.\n     *\n     * @param {string} name event identifier\n     * @param {function} callback function to remove\n     *\n     * @example\n     * emitter.removeListener('click', func1);\n     */\n    removeListener: function ( name, callback ) {\n        if ( DEVELOP ) {\n            if ( arguments.length !== 2 ) {\n                throw new Error(__filename + ': wrong arguments number');\n            }\n            if ( typeof name !== 'string' || name.length === 0 ) {\n                throw new Error(__filename + ': wrong or empty name');\n            }\n            if ( typeof callback !== 'function' ) {\n                throw new Error(__filename + ': wrong callback type');\n            }\n            if ( this.events[name] && !Array.isArray(this.events[name]) ) {\n                throw new Error(__filename + ': corrupted inner data');\n            }\n        }\n\n        // the event exists and should have some callbacks\n        if ( this.events[name] ) {\n            // rework the callback list to exclude the given one\n            this.events[name] = this.events[name].filter(function callbacksFilter ( fn ) { return fn !== callback; });\n            // event has no more callbacks so clean it\n            if ( this.events[name].length === 0 ) {\n                // as if there were no listeners at all\n                this.events[name] = undefined;\n            }\n        }\n    },\n\n\n    /**\n     * Remove all callbacks for the given event name.\n     * Without event name clears all events.\n     *\n     * @param {string} [name] event identifier\n     *\n     * @example\n     * emitter.removeAllListeners('click');\n     * emitter.removeAllListeners();\n     *\n     * @deprecated\n     */\n    /*removeAllListeners: function ( name ) {\n        if ( DEVELOP ) {\n            if ( arguments.length !== 0 && (typeof name !== 'string' || name.length === 0) ) {\n                throw new Error(__filename + ': wrong or empty name');\n            }\n        }\n\n        // check input\n        if ( arguments.length === 0 ) {\n            // no arguments so remove everything\n            this.events = {};\n        } else if ( name ) {\n            if ( DEVELOP ) {\n                if ( this.events[name] ) { throw new Error(__filename + ': event is not removed'); }\n            }\n\n            // only name is given so remove all callbacks for the given event\n            // but object structure modification should be avoided\n            this.events[name] = undefined;\n        }\n    },*/\n\n\n    /**\n     * Execute each of the listeners in the given order with the supplied arguments.\n     *\n     * @param {string} name event identifier\n     *\n     * @example\n     * emitter.emit('init');\n     * emitter.emit('click', {src: panel1, dst: panel2});\n     * emitter.emit('load', error, data);\n     *\n     * // it's a good idea to emit event only when there are some listeners\n     * if ( this.events['click'] ) {\n     *     this.emit('click', {event: event});\n     * }\n     */\n    emit: function ( name ) {\n        var event = this.events[name],\n            index;\n\n        if ( DEVELOP ) {\n            if ( arguments.length < 1 ) {\n                throw new Error(__filename + ': wrong arguments number');\n            }\n            if ( typeof name !== 'string' || name.length === 0 ) {\n                throw new Error(__filename + ': wrong or empty name');\n            }\n        }\n\n        // the event exists and should have some callbacks\n        if ( event ) {\n            if ( DEVELOP ) {\n                if ( !Array.isArray(event) ) {\n                    throw new Error(__filename + ': wrong event type');\n                }\n            }\n\n            for ( index = 0; index < event.length; index++ ) {\n                if ( DEVELOP ) {\n                    if ( typeof event[index] !== 'function' ) {\n                        throw new Error(__filename + ': wrong event callback type');\n                    }\n                }\n\n                // invoke the callback with parameters\n                event[index].apply(this, Array.prototype.slice.call(arguments, 1));\n            }\n        }\n    }\n};\n\n\n// correct constructor name\nEmitter.prototype.constructor = Emitter;\n\n\n// public\nmodule.exports = Emitter;\n","/**\n * Remote control settings plugin.\n */\n\n'use strict';\n\n/* eslint max-lines-per-function: 0 */\n/* eslint quote-props: 0 */\n\nvar Emitter        = require('cjs-emitter'),\n    keys           = require('stb-keys'),\n    gettextWrapper = require('mag-gettext'),\n    volumeWrapper  = require('./volume.wrapper'),\n\n    provider = new Emitter(),\n\n    correction = 0,\n    correctionReady = 0,\n    step = 5,\n\n    api, audioVolume, mute, gettext;\n\n\nfunction checkSelected ( options, select ) {\n    var index;\n\n    for ( index = 0; index < options.length; index++ ) {\n        if ( options[index].value === select ) {\n            options[index].selected = true;\n            break;\n        }\n    }\n}\n\n\nfunction buildList () {\n    var data = {};\n\n    switch ( core.device.model ) {\n        case 'emulator_stb':\n        case 'AndroidSTB':\n            data = {\n                id: 'audio',\n                name: gettext('Audio'),\n                description: gettext('Setting audio parameters'),\n                icon: 'theme-icon-volume',\n                sections: [\n                    {\n                        id: 'audio',\n                        name: gettext('Audio'),\n                        description: gettext('Setting audio parameters'),\n                        icon: 'theme-icon-volume'\n                    }\n                ],\n                options: [\n                    {\n                        id: 'audioOutputMode',\n                        name:  gettext('Audio Output Mode'),\n                        description: gettext('Select the sound output mode: Mono, Stereo, Lt / Rt, etc.'),\n                        icon: 'theme-icon-equalizer',\n                        render: api.renders.popupSelect,\n                        saveImmediate: true,\n                        environment: {\n                            'audio_stereo_out_mode': 'STEREO'\n                        },\n                        prepareForRender: function ( environment, callback ) {\n                            var select = environment['audio_stereo_out_mode'],\n                                options = [\n                                    {value: 'STEREO', name: gettext('Stereo')},\n                                    {value: 'MONO', name: gettext('Mono')},\n                                    {value: 'MONO_LEFT', name: gettext('Mono Left')},\n                                    {value: 'MONO_RIGHT', name: gettext('Mono Right')},\n                                    {value: 'LT_RT', name: 'Lt/Rt'}\n                                ];\n\n                            checkSelected(options, select);\n                            callback(options);\n                        },\n                        prepareForSave: function ( value, callback ) {\n                            var audioModes = {\n                                STEREO: 0,\n                                MONO: 1,\n                                MONO_LEFT: 2,\n                                MONO_RIGHT: 3,\n                                LT_RT: 4\n                            };\n\n                            gSTB.SetStereoMode(audioModes[value]);\n                            this.environment['audio_stereo_out_mode'] = value;\n                            callback();\n                        },\n                        getter: api.getters.environment,\n                        saver: api.savers.environment,\n                        parent: 'audio'\n                    },\n\n                    //advanced\n                    {\n                        id: 'audioSPDIF',\n                        name:  gettext('SPDIF Mode'),\n                        description: '',\n                        icon: 'theme-icon-volume',\n                        render: api.renders.popupSelect,\n                        saveImmediate: true,\n                        advanced: true,\n                        environment: {\n                            'audio_spdif_mode': 'BITSTEAM'\n                        },\n                        prepareForRender: function ( environment, callback ) {\n                            var select = environment['audio_spdif_mode'] || 'BITSTEAM',\n                                options = [\n                                    {value: 'PCM', name: 'PCM'},\n                                    {value: 'BITSTEAM', name: 'Bitstream'}\n                                ];\n\n                            checkSelected(options, select);\n                            callback(options);\n                        },\n                        prepareForSave: function ( value, callback ) {\n                            this.environment['audio_spdif_mode'] = value;\n                            gSTB.SetupSPdif(value === 'PCM' ? 1 : 2);\n                            callback();\n                        },\n                        getter: api.getters.environment,\n                        saver: api.savers.environment,\n                        parent: 'audio'\n                    },\n                    {\n                        id: 'audioHDMI',\n                        name:  gettext('HDMI Audio'),\n                        description: '',\n                        icon: 'theme-icon-volume',\n                        render: api.renders.popupSelect,\n                        saveImmediate: true,\n                        advanced: true,\n                        environment: {\n                            'audio_hdmi_audio_mode': 'PCM'\n                        },\n                        prepareForRender: function ( environment, callback ) {\n                            var select = environment['audio_hdmi_audio_mode'] || 'PCM',\n                                options = [\n                                    {value: 'PCM', name: 'PCM'},\n                                    {value: 'SPDIF', name: 'SPDIF'}\n                                ];\n\n                            checkSelected(options, select);\n                            callback(options);\n                        },\n                        prepareForSave: function ( value, callback ) {\n                            this.environment['audio_hdmi_audio_mode'] = value;\n                            gSTB.SetHDMIAudioOut(value === 'SPDIF' ? 1 : 0);\n                            callback();\n                        },\n                        getter: api.getters.environment,\n                        saver: api.savers.environment,\n                        parent: 'audio'\n                    }\n                ],\n                content: []\n            };\n            break;\n        default:\n            data = {\n                id: 'audio',\n                name: gettext('Audio'),\n                description: gettext('Setting audio parameters'),\n                icon: 'theme-icon-volume',\n                sections: [\n                    {\n                        id: 'audio',\n                        name: gettext('Audio'),\n                        description: gettext('Setting audio parameters'),\n                        icon: 'theme-icon-volume'\n                    }\n                ],\n                options: [\n                    {\n                        id: 'audioVolume',\n                        name: gettext('Initial volume level'),\n                        description: gettext('Setting the initial volume level with which playback will be performed after switch on'),\n                        icon: 'theme-icon-volume',\n                        render: api.renders.rangeInput,\n                        saveImmediate: true,\n                        config: {\n                            min: 0,\n                            max: 100,\n                            step: 5\n                        },\n                        environment: {\n                            'audio_initial_volume': 100\n                        },\n                        prepareForRender: function ( environment, callback ) {\n                            var value = 100;\n\n                            try {\n                                if ( environment['audio_initial_volume'] ) {\n                                    value = parseInt(environment['audio_initial_volume'], 10);\n                                }\n                            } catch ( error ) {\n                                value = 100;\n                            }\n\n                            callback(value);\n                        },\n                        prepareForSave: function ( value, callback ) {\n                            this.environment['audio_initial_volume'] = value;\n                            callback();\n                        },\n                        getter: api.getters.environment,\n                        saver: api.savers.environment,\n                        parent: 'audio'\n                    },\n                    {\n                        id: 'audioOutputMode',\n                        name:  gettext('Audio Output Mode'),\n                        description: gettext('Select the sound output mode: Mono, Stereo, Lt / Rt, etc.'),\n                        icon: 'theme-icon-equalizer',\n                        render: api.renders.popupSelect,\n                        saveImmediate: true,\n                        environment: {\n                            'audio_stereo_out_mode': 'STEREO'\n                        },\n                        prepareForRender: function ( environment, callback ) {\n                            var select = environment['audio_stereo_out_mode'],\n                                options = [\n                                    {value: 'STEREO', name: gettext('Stereo')},\n                                    {value: 'MONO', name: gettext('Mono')},\n                                    {value: 'MONO_LEFT', name: gettext('Mono Left')},\n                                    {value: 'MONO_RIGHT', name: gettext('Mono Right')},\n                                    {value: 'LT_RT', name: 'Lt/Rt'}\n                                ];\n\n                            checkSelected(options, select);\n                            callback(options);\n                        },\n                        prepareForSave: function ( value, callback ) {\n                            var audioModes = {\n                                STEREO: 0,\n                                MONO: 1,\n                                MONO_LEFT: 2,\n                                MONO_RIGHT: 3,\n                                LT_RT: 4\n                            };\n\n                            gSTB.SetStereoMode(audioModes[value]);\n                            this.environment['audio_stereo_out_mode'] = value;\n                            callback();\n                        },\n                        getter: api.getters.environment,\n                        saver: api.savers.environment,\n                        parent: 'audio'\n                    },\n\n                    //advanced\n                    {\n                        id: 'audioDRC',\n                        name:  gettext('Dynamic range compression'),\n                        description: '',\n                        icon: 'theme-icon-volume',\n                        render: api.renders.popupSelect,\n                        saveImmediate: true,\n                        advanced: true,\n                        environment: {\n                            'audio_dyn_range_comp': 'OFF'\n                        },\n                        prepareForRender: function ( environment, callback ) {\n                            var select = environment['audio_dyn_range_comp'],\n                                options = [\n                                    {value: 'OFF', title: gettext('Disabled')},\n                                    {value: '1', title: '1/8'},\n                                    {value: '2', title: '2/8'},\n                                    {value: '3', title: '3/8'},\n                                    {value: '4', title: '4/8'},\n                                    {value: '5', title: '5/8'},\n                                    {value: '6', title: '6/8'},\n                                    {value: '7', title: '7/8'},\n                                    {value: 'MAX', title: gettext('Max')}\n                                ];\n\n                            checkSelected(options, select);\n                            callback(options);\n                        },\n                        prepareForSave: function ( value, callback ) {\n                            this.environment['audio_dyn_range_comp'] = value;\n\n                            switch ( value ) {\n                                case 'OFF':\n                                    gSTB.SetDRC(0, 0);\n                                    break;\n                                case 'MAX':\n                                    gSTB.SetDRC(255, 255);\n                                    break;\n                                default:\n                                    value = parseInt(value, 10) * 31;\n                                    gSTB.SetDRC(value, value);\n                                    break;\n                            }\n                            callback();\n                        },\n                        getter: api.getters.environment,\n                        saver: api.savers.environment,\n                        parent: 'audio'\n                    },\n                    {\n                        id: 'audioOpMode',\n                        name:  gettext('Operating mode'),\n                        description: '',\n                        icon: 'theme-icon-volume',\n                        render: api.renders.popupSelect,\n                        saveImmediate: true,\n                        advanced: true,\n                        environment: {\n                            'audio_operational_mode': 'RF_MODDE'\n                        },\n                        prepareForRender: function ( environment, callback ) {\n                            var select = environment['audio_operational_mode'] || 'RF_MODDE',\n                                options = [\n                                    {value: 'RF_MODDE', name: 'RF Mode'},\n                                    {value: 'LINE_MODE', name: 'Line Mode'},\n                                    {value: 'CUSTOM0', name: 'Custom 0'},\n                                    {value: 'CUSTOM1', name: 'Custom 1'}\n                                ];\n\n                            checkSelected(options, select);\n                            callback(options);\n                        },\n                        prepareForSave: function ( value, callback ) {\n                            var operatingModes = {\n                                RF_MODDE: 0,\n                                LINE_MODE: 1,\n                                CUSTOM0: 2,\n                                CUSTOM1: 3\n                            };\n\n                            this.environment['audio_operational_mode'] = value;\n\n                            gSTB.SetAudioOperationalMode(operatingModes[value]);\n                            callback();\n                        },\n                        getter: api.getters.environment,\n                        saver: api.savers.environment,\n                        parent: 'audio'\n                    },\n                    {\n                        id: 'audioSPDIF',\n                        name:  gettext('SPDIF Mode'),\n                        description: '',\n                        icon: 'theme-icon-volume',\n                        render: api.renders.popupSelect,\n                        saveImmediate: true,\n                        advanced: true,\n                        environment: {\n                            'audio_spdif_mode': 'BITSTEAM'\n                        },\n                        prepareForRender: function ( environment, callback ) {\n                            var select = environment['audio_spdif_mode'] || 'BITSTEAM',\n                                options = [\n                                    {value: 'PCM', name: 'PCM'},\n                                    {value: 'BITSTEAM', name: 'Bitstream'}\n                                ];\n\n                            checkSelected(options, select);\n                            callback(options);\n                        },\n                        prepareForSave: function ( value, callback ) {\n                            this.environment['audio_spdif_mode'] = value;\n                            gSTB.SetupSPdif(value === 'PCM' ? 1 : 2);\n                            callback();\n                        },\n                        getter: api.getters.environment,\n                        saver: api.savers.environment,\n                        parent: 'audio'\n                    },\n                    {\n                        id: 'audioHDMI',\n                        name:  gettext('HDMI Audio'),\n                        description: '',\n                        icon: 'theme-icon-volume',\n                        render: api.renders.popupSelect,\n                        saveImmediate: true,\n                        advanced: true,\n                        environment: {\n                            'audio_hdmi_audio_mode': 'PCM'\n                        },\n                        prepareForRender: function ( environment, callback ) {\n                            var select = environment['audio_hdmi_audio_mode'] || 'PCM',\n                                options = [\n                                    {value: 'PCM', name: 'PCM'},\n                                    {value: 'SPDIF', name: 'SPDIF'}\n                                ];\n\n                            checkSelected(options, select);\n                            callback(options);\n                        },\n                        prepareForSave: function ( value, callback ) {\n                            this.environment['audio_hdmi_audio_mode'] = value;\n                            gSTB.SetHDMIAudioOut(value === 'SPDIF' ? 1 : 0);\n                            callback();\n                        },\n                        getter: api.getters.environment,\n                        saver: api.savers.environment,\n                        parent: 'audio'\n                    }\n                ],\n                content: []\n            };\n            break;\n    }\n\n    return data;\n}\n\nfunction setMute ( value ) {\n    if ( mute !== value ) {\n        mute = value;\n        volumeWrapper.mute = mute;\n        provider.emit('mute:change', {value: mute, system: true});\n    }\n}\n\nfunction updateVolume () {\n    var setValue = audioVolume + correctionReady;\n\n    if ( setValue > 100 ) {\n        setValue = 100;\n    }\n    if ( setValue < 0 ) {\n        setValue = 0;\n    }\n\n    volumeWrapper.volume = setValue;\n}\n\nfunction setVolume ( value, manual ) {\n    var old = audioVolume;\n\n    audioVolume = value || value === 0 ? value : old;\n\n    if ( audioVolume > 100 ) {\n        audioVolume = 100;\n    }\n    if ( audioVolume < 0 ) {\n        audioVolume = 0;\n    }\n\n    updateVolume();\n    setMute(false);\n    provider.emit('volume:change', {curr: audioVolume, prev: old, system: !manual});\n}\n\nif ( core.device.model !== 'AndroidSTB' && core.device.model !== 'emulator_stb' ) {\n    core.addListener('keydown:' + keys.volumeUp, function () {\n        audioVolume += step;\n        setVolume(audioVolume);\n    });\n\n    core.addListener('keydown:' + keys.volumeDown, function () {\n        audioVolume -= step;\n        setVolume(audioVolume);\n    });\n\n    core.addListener('keydown:' + keys.mute, function () {\n        setMute(!mute);\n    });\n\n\n    Object.defineProperties(\n        provider,\n        {\n            volume: {\n                get: function () {\n                    return audioVolume;\n                },\n                set: function ( value ) {\n                    setVolume(value, true);\n                }\n            },\n\n            mute: {\n                get: function () {\n                    return mute;\n                },\n                set: function ( value ) {\n                    setMute(value);\n                }\n            },\n\n            correction: {\n                get: function () {\n                    return correction;\n                },\n                set: function ( value ) {\n                    if ( value >= 100 || value <= -100 ) {\n                        return false;\n                    }\n\n                    correction = value;\n                    // use correction formula from wiki value = (correction * step / 10)\n                    correctionReady = correction * step / 10;\n                    updateVolume();\n\n                    return correction;\n                }\n            }\n        }\n    );\n}\n\n\nmodule.exports = {\n    onAppInit: function ( config, callback ) {\n        callback(null, provider);\n    },\n    onInit: function ( config, callback ) {\n        var needCheck = !top.MODE_PORTAL && !top.MODE_STALKER;\n\n        if ( core.device.model !== 'AndroidSTB' && core.device.model !== 'emulator_stb' ) {\n            if ( needCheck && volumeWrapper.volume ) {\n                audioVolume = volumeWrapper.volume;\n                mute = volumeWrapper.mute;\n            } else {\n                if ( core.environment.audio_initial_volume ) {\n                    audioVolume = parseInt(core.environment.audio_initial_volume, 10) || 100;\n                } else {\n                    audioVolume = 100;\n                }\n                mute = false;\n            }\n            volumeWrapper.init(audioVolume, mute);\n        }\n\n        if ( callback ) {\n            callback();\n        }\n    },\n    onSettingsInit: function ( config, callback ) {\n        api = config.api;\n        gettextWrapper.load({\n            name: core.environment.language,\n            path: config.path + 'lang'\n        }, function () {\n            var data;\n\n            gettext = gettextWrapper.gettext;\n            data = buildList();\n\n            callback(null, data);\n        });\n    }\n};\n","/**\n * Global list of non-printable control key codes.\n *\n * At the moment `keypress` and `keydown` events are emitted for the same keys (for both printable and non-printable characters).\n *\n * WARNING!!! All codes in this file (except 'volumeUp' and 'volumeDown')\n * are used in window 'keydown' handler to prevent wrong 'keypress' firings.\n * If you add new code to this file 'keypress' event with this code will never fire.\n *\n * @license The MIT License (MIT)\n * @copyright Stanislav Kalashnik <darkpark.main@gmail.com>\n */\n\n'use strict';\n\nvar keys = require('spa-keys');\n\n\n// extend with additional codes\nkeys.back         = keys.backspace;\nkeys.channelNext  = keys.tab;        // Tab\nkeys.channelPrev  = keys.tab + 's';  // Shift+Tab\nkeys.ok           = keys.enter;      // Enter\nkeys.exit         = keys.escape;     // Esc\nkeys.volumeUp     = 107;             // NUMPAD +\nkeys.volumeDown   = 109;             // NUMPAD -\nkeys.f1           = 112 + 'c';       // Ctrl+F1\nkeys.f2           = 113 + 'c';       // Ctrl+F2\nkeys.f3           = 114 + 'c';       // Ctrl+F3\nkeys.f4           = 115 + 'c';       // Ctrl+F4\nkeys.refresh      = 116 + 'c';       // Ctrl+F5\nkeys.frame        = 117 + 'c';       // Ctrl+F6\nkeys.phone        = 119 + 'c';       // Ctrl+F8\nkeys.set          = 120 + 'c';       // Ctrl+F9\nkeys.tv           = 121 + 'c';       // Ctrl+F10\nkeys.menu         = 122 + 'c';       // Ctrl+F11\nkeys.app          = 123 + 'c';       // Ctrl+F12\nkeys.rewind       = 66  + 'a';       // Alt+B\nkeys.forward      = 70  + 'a';       // Alt+F\nkeys.audio        = 71  + 'a';       // Alt+G\nkeys.standby      = 74  + 'a';       // Alt+J\nkeys.keyboard     = 76  + 'a';       // Alt+L\nkeys.usbMounted   = 80  + 'a';       // Alt+P\nkeys.usbUnmounted = 81  + 'a';       // Alt+Q\nkeys.playPause    = 82  + 'a';       // Alt+R\nkeys.play         = -1;              // should be redefined on some platforms\nkeys.pause        = -1;              // should be redefined on some platforms\nkeys.stop         = 83  + 'a';       // Alt+S\nkeys.power        = 85  + 'a';       // Alt+U\nkeys.record       = 87  + 'a';       // Alt+W\nkeys.info         = 89  + 'a';       // Alt+Y\nkeys.mute         = 192 + 'a';\nkeys.digit0       = 48;\nkeys.digit1       = 49;\nkeys.digit2       = 50;\nkeys.digit3       = 51;\nkeys.digit4       = 52;\nkeys.digit5       = 53;\nkeys.digit6       = 54;\nkeys.digit7       = 55;\nkeys.digit8       = 56;\nkeys.digit9       = 57;\n\n\n// public\nmodule.exports = keys;\n\n// public\n// module.exports = {\n//     getCode: function ( event ) {\n//         var code = event.keyCode;\n//\n//         // apply key modifiers\n//         if ( event.shiftKey ) { code += 1000; }\n//         if ( event.altKey )   { code += 2000; }\n//\n//         return code;\n//     },\n//\n//     codes: {\n//         back:         8,    // Backspace\n//         channelPrev:  1009, // Shift+Tab\n//         channelNext:  9,    // Tab\n//         ok:           13,   // Enter\n//         exit:         27,   // Esc\n//         pageUp:       33,\n//         pageDown:     34,\n//         end:          35,\n//         home:         36,\n//         left:         37,\n//         up:           38,\n//         right:        39,\n//         down:         40,\n//         'delete':     46,\n//         volumeUp:     107,  // NUMPAD +\n//         volumeDown:   109,  // NUMPAD -\n//         f1:           112,  // F1\n//         f2:           113,  // F2\n//         f3:           114,  // F3\n//         f4:           115,  // F4\n//         refresh:      116,  // F5\n//         frame:        117,  // F6\n//         phone:        119,  // F8\n//         set:          120,  // F9\n//         tv:           121,  // F10\n//         menu:         122,  // F11\n//         app:          123,  // F12\n//         rewind:       2066, // Alt+B\n//         forward:      2070, // Alt+F\n//         audio:        2071, // Alt+G\n//         standby:      2074, // Alt+J\n//         keyboard:     2076, // Alt+L\n//         usbMounted:   2080, // Alt+P\n//         usbUnmounted: 2081, // Alt+Q\n//         playPause:    2082, // Alt+R\n//         stop:         2083, // Alt+S\n//         power:        2085, // Alt+U\n//         record:       2087, // Alt+W\n//         info:         2089, // Alt+Y\n//         mute:         2192\n//     }\n// };\n","/**\n * Global list of non-printable control key codes.\n *\n * @author Stanislav Kalashnik <darkpark.main@gmail.com>\n * @license GNU GENERAL PUBLIC LICENSE Version 3\n */\n\n'use strict';\n\n// public\nmodule.exports = {\n    backspace: 8,\n    tab:       9,\n    enter:     13,\n    escape:    27,\n    space:     32,\n    pageUp:    33,\n    pageDown:  34,\n    end:       35,\n    home:      36,\n    left:      37,\n    up:        38,\n    right:     39,\n    down:      40,\n    insert:    45,\n    // not \"delete\" because of old browsers issue\n    del:       46\n};\n","/**\n * @license The MIT License (MIT)\n * @copyright Stanislav Kalashnik <darkpark.main@gmail.com>\n */\n\n/* eslint no-path-concat: 0 */\n\n'use strict';\n\nvar Emitter = require('cjs-emitter'),\n    Gettext = require('cjs-gettext'),\n    loader  = new Emitter();\n\n\nif ( DEVELOP ) {\n    loader._ = loader.gettext = loader.pgettext = loader.ngettext = function () {\n        throw new Error(__filename + ': you cannot use this function before mag-gettext not yet loaded');\n    };\n}\n\n/**\n * Wrap the given data with gettext instance\n * and export methods to the global scope.\n *\n * @param {Object} [data] localization data\n */\nfunction prepare ( data ) {\n    var gettext = new Gettext(data);\n\n    loader._ = loader.gettext = gettext.gettext;\n    loader.pgettext = gettext.pgettext;\n    loader.ngettext = gettext.ngettext;\n}\n\n\n/**\n * Main application language\n */\nloader.defaultLanguage = 'en';\n\n\n/**\n * Simple gettext implementation.\n *\n * @param {Object} config options\n * @param {string} [config.path=lang] relative path to project root\n * @param {string} config.name language name\n * @param {string} [config.ext=json] language file extension\n * @param {function} callback hook on ready\n */\nloader.load = function ( config, callback ) {\n    var xhr;\n\n    if ( DEVELOP ) {\n        if ( !config.name || typeof config.name !== 'string' ) {\n            throw new Error(__filename + ': config.name must be a nonempty string');\n        }\n        if ( callback && typeof callback !== 'function' ) {\n            throw new Error(__filename + ': wrong callback type');\n        }\n    }\n\n    // defaults\n\n    callback = callback || null;\n    config.ext  = config.ext  || 'json';\n    config.path = config.path || 'lang';\n\n    // is it necessary to request a localization file?\n    if ( config.name === loader.defaultLanguage ) {\n        // no\n        prepare();\n        if ( callback !== null ) {\n            callback(null);\n        }\n    } else {\n        xhr = new XMLHttpRequest();\n\n        xhr.onload = function () {\n            var jsonParseError, json;\n\n            try {\n                json = JSON.parse(xhr.responseText);\n            } catch ( error ) {\n                jsonParseError = error;\n            }\n\n            if ( jsonParseError ) {\n                xhr.onerror(jsonParseError);\n            } else {\n                prepare(json);\n                if ( callback !== null ) {\n                    callback(null);\n                }\n\n                // there are some listeners\n                if ( loader.events['load'] ) {\n                    // notify listeners\n                    loader.emit('load');\n                }\n            }\n        };\n\n        xhr.ontimeout = xhr.onerror = function ( error ) {\n            prepare();\n\n            if ( callback !== null ) {\n                callback(null);\n            }\n\n            // there are some listeners\n            if ( loader.events['error'] ) {\n                // notify listeners\n                loader.emit('error', error);\n            }\n        };\n\n        xhr.open('GET', config.path + '/' + config.name + '.' + config.ext, true);\n        xhr.send(null);\n    }\n};\n\n\n// public\nmodule.exports = loader;\n","/**\n * @license The MIT License (MIT)\n * @author Stanislav Kalashnik <darkpark.main@gmail.com>\n */\n\n/* eslint no-path-concat: 0 */\n\n'use strict';\n\n\n/**\n * Translations handler.\n *\n * @constructor\n *\n * @param {Object} config init parameters\n */\nfunction Gettext ( config ) {\n    var data, meta;\n\n    // sanitize\n    config   = config || {};\n    data     = config.data || {};\n    data[''] = data[''] || {};\n\n    // shortcut\n    meta = config.meta;\n\n    /**\n     * Display the native language translation of a textual message.\n     *\n     * @param {string} msgId textual message\n     *\n     * @return {string} translated text\n     */\n    this.gettext = function ( msgId ) {\n        return data[''][msgId] || msgId;\n    };\n\n\n    /**\n     * The \"p\" in \"pgettext\" stands for \"particular\": fetches a particular translation of the textual message.\n     *\n     * @param {string} context message context\n     * @param {string} msgId textual message\n     *\n     * @return {string} translated text\n     */\n    this.pgettext = function ( context, msgId ) {\n        return data[context] && data[context][msgId] || msgId;\n    };\n\n\n    /**\n     * Display the native language translation of a textual message whose grammatical form depends on a number.\n     *\n     * @param {string} msgId textual message in a singular form\n     * @param {string} plural textual message in a plural form\n     * @param {number} value message number\n     *\n     * @return {string} translated text\n     */\n    this.ngettext = function ( msgId, plural, value ) {\n        /* eslint no-unused-vars: 0 */\n        /* eslint no-eval: 0 */\n        /* eslint id-length: 0 */\n        var n, evalResult;\n\n        if ( DEVELOP ) {\n            if ( Number(value) !== value ) {\n                throw new Error(__filename + ': value must be a number');\n            }\n        }\n\n        if ( data && meta && data[''][msgId] ) {\n            evalResult = eval('n = ' + value + '; ' + meta.plural);\n\n            if ( typeof evalResult === 'boolean' ) {\n                evalResult = +evalResult;\n            }\n\n            // translation\n            return data[''][msgId][evalResult];\n        }\n\n        // english\n        return value === 1 ? msgId : plural;\n    };\n}\n\n\n// correct constructor name\nGettext.prototype.constructor = Gettext;\n\n\n// public\nmodule.exports = Gettext;\n","'use strict';\n\n/*eslint-disable*/\n\nvar gSTB = window.gSTB,\n    audioManager, stbAudioOutput, playerManager,\n    stbPlayer = {},\n    volumeValue = gSTB.GetVolume() || 0,\n    muteValue = !!gSTB.GetMute(),\n    volumeWrapper = {};\n\nif ( window.stbAudioManager ) {\n    audioManager = window.stbAudioManager;\n} else {\n    stbAudioOutput = {};\n\n    Object.defineProperties(stbAudioOutput, {\n        /**\n         * Master mute state of audio output.\n         *\n         * After the cycle of switching off/on with this property the volume level remains unchanged.\n         *\n         * @type {boolean}\n         */\n        mute: {\n            get: function () {\n                return !!gSTB.GetMute();\n            },\n            set: function ( value ) {\n                gSTB.SetMute(!!value);\n            }\n        },\n\n        /**\n         * Master volume level in percents (0 - no sound, 100 - maximal level).\n         *\n         * @type {number}\n         */\n        volume: {\n            get: function () {\n                return gSTB.GetVolume();\n            },\n            set: function ( value ) {\n                gSTB.SetVolume(+value);\n            }\n        }\n    });\n\n    audioManager = {\n        /**\n         * Get array of all available stbAudioOutput instances in the system.\n         *\n         * @type {stbAudioOutput[]}\n         * @readonly\n         *\n         * @example\n         * // get audio output #1 instance\n         * var output = stbAudioManager.list[1];\n         * // and link it with a player\n         * output.source = stbPlayerManager.list[1];\n         */\n        list: [stbAudioOutput]\n    };\n}\n\nif ( window.stbPlayerManager ) {\n// if ( false ) {\n    playerManager = window.stbPlayerManager;\n} else {\n    Object.defineProperties(stbPlayer, {\n        /**\n         * Mute state of audio output.\n         *\n         * This is a combination of master mute state (see {@link stbAudioOutput.mute}) and local player state.\n         *\n         * After the cycle of switching off/on with this property the volume level remains unchanged.\n         *\n         * @type {boolean}\n         */\n        mute: {\n            get: function () {\n                return gSTB.GetMute();\n            },\n            set: function ( val ) {\n                gSTB.SetMute(val? 1 : 0);\n            }\n        },\n\n\n        /**\n         * Current volume level in percents (0 - no sound, 100 - maximal level).\n         *\n         * This is a combination of master volume level (see {@link stbAudioOutput.volume}) and local player volume level.\n         *\n         * @type {number}\n         */\n        volume: {\n            get: function () {\n                return gSTB.GetVolume();\n            },\n            set: function ( val ) {\n                gSTB.SetVolume(+val);\n            }\n        }\n    });\n\n\n    playerManager = {\n        list: [stbPlayer]\n    }\n}\n\n\nvolumeWrapper.init = function ( volume, mute ) {\n    var idx;\n\n    volumeValue = volume;\n    muteValue = !!mute;\n\n    for ( idx = 0; idx < audioManager.list.length; idx++ ) {\n        audioManager.list[idx].volume = 100;\n        audioManager.list[idx].mute = false;\n    }\n\n    for ( idx = 0; idx < playerManager.list.length; idx++ ) {\n        playerManager.list[idx].volume = volume;\n        playerManager.list[idx].mute = mute;\n    }\n};\n\nObject.defineProperties(volumeWrapper, {\n    volume: {\n        get: function () {\n            return volumeValue;\n        },\n        set: function ( value ) {\n            var idx;\n\n            volumeValue = value;\n\n            for ( idx = 0; idx < playerManager.list.length; idx++ ) {\n                playerManager.list[idx].volume = value;\n            }\n        }\n    },\n    mute: {\n        get: function () {\n            return muteValue;\n        },\n        set: function ( value ) {\n            var idx;\n\n            muteValue = !!value;\n\n            for ( idx = 0; idx < playerManager.list.length; idx++ ) {\n                playerManager.list[idx].mute = value;\n            }\n        }\n    }\n});\n\n\nmodule.exports = volumeWrapper;\n"],"sourceRoot":""}