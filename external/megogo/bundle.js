(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
(function (global){
/**
 * @license
 * lodash 3.10.1 (Custom Build) <https://lodash.com/>
 * Build: `lodash modern -d -o ./index.js`
 * Copyright 2012-2015 The Dojo Foundation <http://dojofoundation.org/>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright 2009-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 * Available under MIT license <https://lodash.com/license>
 */
;(function() {

  /** Used as a safe reference for `undefined` in pre-ES5 environments. */
  var undefined;

  /** Used as the semantic version number. */
  var VERSION = '3.10.1';

  /** Used to compose bitmasks for wrapper metadata. */
  var BIND_FLAG = 1,
      BIND_KEY_FLAG = 2,
      CURRY_BOUND_FLAG = 4,
      CURRY_FLAG = 8,
      CURRY_RIGHT_FLAG = 16,
      PARTIAL_FLAG = 32,
      PARTIAL_RIGHT_FLAG = 64,
      ARY_FLAG = 128,
      REARG_FLAG = 256;

  /** Used as default options for `_.trunc`. */
  var DEFAULT_TRUNC_LENGTH = 30,
      DEFAULT_TRUNC_OMISSION = '...';

  /** Used to detect when a function becomes hot. */
  var HOT_COUNT = 150,
      HOT_SPAN = 16;

  /** Used as the size to enable large array optimizations. */
  var LARGE_ARRAY_SIZE = 200;

  /** Used to indicate the type of lazy iteratees. */
  var LAZY_FILTER_FLAG = 1,
      LAZY_MAP_FLAG = 2;

  /** Used as the `TypeError` message for "Functions" methods. */
  var FUNC_ERROR_TEXT = 'Expected a function';

  /** Used as the internal argument placeholder. */
  var PLACEHOLDER = '__lodash_placeholder__';

  /** `Object#toString` result references. */
  var argsTag = '[object Arguments]',
      arrayTag = '[object Array]',
      boolTag = '[object Boolean]',
      dateTag = '[object Date]',
      errorTag = '[object Error]',
      funcTag = '[object Function]',
      mapTag = '[object Map]',
      numberTag = '[object Number]',
      objectTag = '[object Object]',
      regexpTag = '[object RegExp]',
      setTag = '[object Set]',
      stringTag = '[object String]',
      weakMapTag = '[object WeakMap]';

  var arrayBufferTag = '[object ArrayBuffer]',
      float32Tag = '[object Float32Array]',
      float64Tag = '[object Float64Array]',
      int8Tag = '[object Int8Array]',
      int16Tag = '[object Int16Array]',
      int32Tag = '[object Int32Array]',
      uint8Tag = '[object Uint8Array]',
      uint8ClampedTag = '[object Uint8ClampedArray]',
      uint16Tag = '[object Uint16Array]',
      uint32Tag = '[object Uint32Array]';

  /** Used to match empty string literals in compiled template source. */
  var reEmptyStringLeading = /\b__p \+= '';/g,
      reEmptyStringMiddle = /\b(__p \+=) '' \+/g,
      reEmptyStringTrailing = /(__e\(.*?\)|\b__t\)) \+\n'';/g;

  /** Used to match HTML entities and HTML characters. */
  var reEscapedHtml = /&(?:amp|lt|gt|quot|#39|#96);/g,
      reUnescapedHtml = /[&<>"'`]/g,
      reHasEscapedHtml = RegExp(reEscapedHtml.source),
      reHasUnescapedHtml = RegExp(reUnescapedHtml.source);

  /** Used to match template delimiters. */
  var reEscape = /<%-([\s\S]+?)%>/g,
      reEvaluate = /<%([\s\S]+?)%>/g,
      reInterpolate = /<%=([\s\S]+?)%>/g;

  /** Used to match property names within property paths. */
  var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\n\\]|\\.)*?\1)\]/,
      reIsPlainProp = /^\w*$/,
      rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\n\\]|\\.)*?)\2)\]/g;

  /**
   * Used to match `RegExp` [syntax characters](http://ecma-international.org/ecma-262/6.0/#sec-patterns)
   * and those outlined by [`EscapeRegExpPattern`](http://ecma-international.org/ecma-262/6.0/#sec-escaperegexppattern).
   */
  var reRegExpChars = /^[:!,]|[\\^$.*+?()[\]{}|\/]|(^[0-9a-fA-Fnrtuvx])|([\n\r\u2028\u2029])/g,
      reHasRegExpChars = RegExp(reRegExpChars.source);

  /** Used to match [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks). */
  var reComboMark = /[\u0300-\u036f\ufe20-\ufe23]/g;

  /** Used to match backslashes in property paths. */
  var reEscapeChar = /\\(\\)?/g;

  /** Used to match [ES template delimiters](http://ecma-international.org/ecma-262/6.0/#sec-template-literal-lexical-components). */
  var reEsTemplate = /\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g;

  /** Used to match `RegExp` flags from their coerced string values. */
  var reFlags = /\w*$/;

  /** Used to detect hexadecimal string values. */
  var reHasHexPrefix = /^0[xX]/;

  /** Used to detect host constructors (Safari > 5). */
  var reIsHostCtor = /^\[object .+?Constructor\]$/;

  /** Used to detect unsigned integer values. */
  var reIsUint = /^\d+$/;

  /** Used to match latin-1 supplementary letters (excluding mathematical operators). */
  var reLatin1 = /[\xc0-\xd6\xd8-\xde\xdf-\xf6\xf8-\xff]/g;

  /** Used to ensure capturing order of template delimiters. */
  var reNoMatch = /($^)/;

  /** Used to match unescaped characters in compiled string literals. */
  var reUnescapedString = /['\n\r\u2028\u2029\\]/g;

  /** Used to match words to create compound words. */
  var reWords = (function() {
    var upper = '[A-Z\\xc0-\\xd6\\xd8-\\xde]',
        lower = '[a-z\\xdf-\\xf6\\xf8-\\xff]+';

    return RegExp(upper + '+(?=' + upper + lower + ')|' + upper + '?' + lower + '|' + upper + '+|[0-9]+', 'g');
  }());

  /** Used to assign default `context` object properties. */
  var contextProps = [
    'Array', 'ArrayBuffer', 'Date', 'Error', 'Float32Array', 'Float64Array',
    'Function', 'Int8Array', 'Int16Array', 'Int32Array', 'Math', 'Number',
    'Object', 'RegExp', 'Set', 'String', '_', 'clearTimeout', 'isFinite',
    'parseFloat', 'parseInt', 'setTimeout', 'TypeError', 'Uint8Array',
    'Uint8ClampedArray', 'Uint16Array', 'Uint32Array', 'WeakMap'
  ];

  /** Used to make template sourceURLs easier to identify. */
  var templateCounter = -1;

  /** Used to identify `toStringTag` values of typed arrays. */
  var typedArrayTags = {};
  typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =
  typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =
  typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =
  typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =
  typedArrayTags[uint32Tag] = true;
  typedArrayTags[argsTag] = typedArrayTags[arrayTag] =
  typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =
  typedArrayTags[dateTag] = typedArrayTags[errorTag] =
  typedArrayTags[funcTag] = typedArrayTags[mapTag] =
  typedArrayTags[numberTag] = typedArrayTags[objectTag] =
  typedArrayTags[regexpTag] = typedArrayTags[setTag] =
  typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;

  /** Used to identify `toStringTag` values supported by `_.clone`. */
  var cloneableTags = {};
  cloneableTags[argsTag] = cloneableTags[arrayTag] =
  cloneableTags[arrayBufferTag] = cloneableTags[boolTag] =
  cloneableTags[dateTag] = cloneableTags[float32Tag] =
  cloneableTags[float64Tag] = cloneableTags[int8Tag] =
  cloneableTags[int16Tag] = cloneableTags[int32Tag] =
  cloneableTags[numberTag] = cloneableTags[objectTag] =
  cloneableTags[regexpTag] = cloneableTags[stringTag] =
  cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =
  cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
  cloneableTags[errorTag] = cloneableTags[funcTag] =
  cloneableTags[mapTag] = cloneableTags[setTag] =
  cloneableTags[weakMapTag] = false;

  /** Used to map latin-1 supplementary letters to basic latin letters. */
  var deburredLetters = {
    '\xc0': 'A',  '\xc1': 'A', '\xc2': 'A', '\xc3': 'A', '\xc4': 'A', '\xc5': 'A',
    '\xe0': 'a',  '\xe1': 'a', '\xe2': 'a', '\xe3': 'a', '\xe4': 'a', '\xe5': 'a',
    '\xc7': 'C',  '\xe7': 'c',
    '\xd0': 'D',  '\xf0': 'd',
    '\xc8': 'E',  '\xc9': 'E', '\xca': 'E', '\xcb': 'E',
    '\xe8': 'e',  '\xe9': 'e', '\xea': 'e', '\xeb': 'e',
    '\xcC': 'I',  '\xcd': 'I', '\xce': 'I', '\xcf': 'I',
    '\xeC': 'i',  '\xed': 'i', '\xee': 'i', '\xef': 'i',
    '\xd1': 'N',  '\xf1': 'n',
    '\xd2': 'O',  '\xd3': 'O', '\xd4': 'O', '\xd5': 'O', '\xd6': 'O', '\xd8': 'O',
    '\xf2': 'o',  '\xf3': 'o', '\xf4': 'o', '\xf5': 'o', '\xf6': 'o', '\xf8': 'o',
    '\xd9': 'U',  '\xda': 'U', '\xdb': 'U', '\xdc': 'U',
    '\xf9': 'u',  '\xfa': 'u', '\xfb': 'u', '\xfc': 'u',
    '\xdd': 'Y',  '\xfd': 'y', '\xff': 'y',
    '\xc6': 'Ae', '\xe6': 'ae',
    '\xde': 'Th', '\xfe': 'th',
    '\xdf': 'ss'
  };

  /** Used to map characters to HTML entities. */
  var htmlEscapes = {
    '&': '&amp;',
    '<': '&lt;',
    '>': '&gt;',
    '"': '&quot;',
    "'": '&#39;',
    '`': '&#96;'
  };

  /** Used to map HTML entities to characters. */
  var htmlUnescapes = {
    '&amp;': '&',
    '&lt;': '<',
    '&gt;': '>',
    '&quot;': '"',
    '&#39;': "'",
    '&#96;': '`'
  };

  /** Used to determine if values are of the language type `Object`. */
  var objectTypes = {
    'function': true,
    'object': true
  };

  /** Used to escape characters for inclusion in compiled regexes. */
  var regexpEscapes = {
    '0': 'x30', '1': 'x31', '2': 'x32', '3': 'x33', '4': 'x34',
    '5': 'x35', '6': 'x36', '7': 'x37', '8': 'x38', '9': 'x39',
    'A': 'x41', 'B': 'x42', 'C': 'x43', 'D': 'x44', 'E': 'x45', 'F': 'x46',
    'a': 'x61', 'b': 'x62', 'c': 'x63', 'd': 'x64', 'e': 'x65', 'f': 'x66',
    'n': 'x6e', 'r': 'x72', 't': 'x74', 'u': 'x75', 'v': 'x76', 'x': 'x78'
  };

  /** Used to escape characters for inclusion in compiled string literals. */
  var stringEscapes = {
    '\\': '\\',
    "'": "'",
    '\n': 'n',
    '\r': 'r',
    '\u2028': 'u2028',
    '\u2029': 'u2029'
  };

  /** Detect free variable `exports`. */
  var freeExports = objectTypes[typeof exports] && exports && !exports.nodeType && exports;

  /** Detect free variable `module`. */
  var freeModule = objectTypes[typeof module] && module && !module.nodeType && module;

  /** Detect free variable `global` from Node.js. */
  var freeGlobal = freeExports && freeModule && typeof global == 'object' && global && global.Object && global;

  /** Detect free variable `self`. */
  var freeSelf = objectTypes[typeof self] && self && self.Object && self;

  /** Detect free variable `window`. */
  var freeWindow = objectTypes[typeof window] && window && window.Object && window;

  /** Detect the popular CommonJS extension `module.exports`. */
  var moduleExports = freeModule && freeModule.exports === freeExports && freeExports;

  /**
   * Used as a reference to the global object.
   *
   * The `this` value is used if it's the global object to avoid Greasemonkey's
   * restricted `window` object, otherwise the `window` object is used.
   */
  var root = freeGlobal || ((freeWindow !== (this && this.window)) && freeWindow) || freeSelf || this;

  /*--------------------------------------------------------------------------*/

  /**
   * The base implementation of `compareAscending` which compares values and
   * sorts them in ascending order without guaranteeing a stable sort.
   *
   * @private
   * @param {*} value The value to compare.
   * @param {*} other The other value to compare.
   * @returns {number} Returns the sort order indicator for `value`.
   */
  function baseCompareAscending(value, other) {
    if (value !== other) {
      var valIsNull = value === null,
          valIsUndef = value === undefined,
          valIsReflexive = value === value;

      var othIsNull = other === null,
          othIsUndef = other === undefined,
          othIsReflexive = other === other;

      if ((value > other && !othIsNull) || !valIsReflexive ||
          (valIsNull && !othIsUndef && othIsReflexive) ||
          (valIsUndef && othIsReflexive)) {
        return 1;
      }
      if ((value < other && !valIsNull) || !othIsReflexive ||
          (othIsNull && !valIsUndef && valIsReflexive) ||
          (othIsUndef && valIsReflexive)) {
        return -1;
      }
    }
    return 0;
  }

  /**
   * The base implementation of `_.findIndex` and `_.findLastIndex` without
   * support for callback shorthands and `this` binding.
   *
   * @private
   * @param {Array} array The array to search.
   * @param {Function} predicate The function invoked per iteration.
   * @param {boolean} [fromRight] Specify iterating from right to left.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function baseFindIndex(array, predicate, fromRight) {
    var length = array.length,
        index = fromRight ? length : -1;

    while ((fromRight ? index-- : ++index < length)) {
      if (predicate(array[index], index, array)) {
        return index;
      }
    }
    return -1;
  }

  /**
   * The base implementation of `_.indexOf` without support for binary searches.
   *
   * @private
   * @param {Array} array The array to search.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function baseIndexOf(array, value, fromIndex) {
    if (value !== value) {
      return indexOfNaN(array, fromIndex);
    }
    var index = fromIndex - 1,
        length = array.length;

    while (++index < length) {
      if (array[index] === value) {
        return index;
      }
    }
    return -1;
  }

  /**
   * The base implementation of `_.isFunction` without support for environments
   * with incorrect `typeof` results.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
   */
  function baseIsFunction(value) {
    // Avoid a Chakra JIT bug in compatibility modes of IE 11.
    // See https://github.com/jashkenas/underscore/issues/1621 for more details.
    return typeof value == 'function' || false;
  }

  /**
   * Converts `value` to a string if it's not one. An empty string is returned
   * for `null` or `undefined` values.
   *
   * @private
   * @param {*} value The value to process.
   * @returns {string} Returns the string.
   */
  function baseToString(value) {
    return value == null ? '' : (value + '');
  }

  /**
   * Used by `_.trim` and `_.trimLeft` to get the index of the first character
   * of `string` that is not found in `chars`.
   *
   * @private
   * @param {string} string The string to inspect.
   * @param {string} chars The characters to find.
   * @returns {number} Returns the index of the first character not found in `chars`.
   */
  function charsLeftIndex(string, chars) {
    var index = -1,
        length = string.length;

    while (++index < length && chars.indexOf(string.charAt(index)) > -1) {}
    return index;
  }

  /**
   * Used by `_.trim` and `_.trimRight` to get the index of the last character
   * of `string` that is not found in `chars`.
   *
   * @private
   * @param {string} string The string to inspect.
   * @param {string} chars The characters to find.
   * @returns {number} Returns the index of the last character not found in `chars`.
   */
  function charsRightIndex(string, chars) {
    var index = string.length;

    while (index-- && chars.indexOf(string.charAt(index)) > -1) {}
    return index;
  }

  /**
   * Used by `_.sortBy` to compare transformed elements of a collection and stable
   * sort them in ascending order.
   *
   * @private
   * @param {Object} object The object to compare.
   * @param {Object} other The other object to compare.
   * @returns {number} Returns the sort order indicator for `object`.
   */
  function compareAscending(object, other) {
    return baseCompareAscending(object.criteria, other.criteria) || (object.index - other.index);
  }

  /**
   * Used by `_.sortByOrder` to compare multiple properties of a value to another
   * and stable sort them.
   *
   * If `orders` is unspecified, all valuess are sorted in ascending order. Otherwise,
   * a value is sorted in ascending order if its corresponding order is "asc", and
   * descending if "desc".
   *
   * @private
   * @param {Object} object The object to compare.
   * @param {Object} other The other object to compare.
   * @param {boolean[]} orders The order to sort by for each property.
   * @returns {number} Returns the sort order indicator for `object`.
   */
  function compareMultiple(object, other, orders) {
    var index = -1,
        objCriteria = object.criteria,
        othCriteria = other.criteria,
        length = objCriteria.length,
        ordersLength = orders.length;

    while (++index < length) {
      var result = baseCompareAscending(objCriteria[index], othCriteria[index]);
      if (result) {
        if (index >= ordersLength) {
          return result;
        }
        var order = orders[index];
        return result * ((order === 'asc' || order === true) ? 1 : -1);
      }
    }
    // Fixes an `Array#sort` bug in the JS engine embedded in Adobe applications
    // that causes it, under certain circumstances, to provide the same value for
    // `object` and `other`. See https://github.com/jashkenas/underscore/pull/1247
    // for more details.
    //
    // This also ensures a stable sort in V8 and other engines.
    // See https://code.google.com/p/v8/issues/detail?id=90 for more details.
    return object.index - other.index;
  }

  /**
   * Used by `_.deburr` to convert latin-1 supplementary letters to basic latin letters.
   *
   * @private
   * @param {string} letter The matched letter to deburr.
   * @returns {string} Returns the deburred letter.
   */
  function deburrLetter(letter) {
    return deburredLetters[letter];
  }

  /**
   * Used by `_.escape` to convert characters to HTML entities.
   *
   * @private
   * @param {string} chr The matched character to escape.
   * @returns {string} Returns the escaped character.
   */
  function escapeHtmlChar(chr) {
    return htmlEscapes[chr];
  }

  /**
   * Used by `_.escapeRegExp` to escape characters for inclusion in compiled regexes.
   *
   * @private
   * @param {string} chr The matched character to escape.
   * @param {string} leadingChar The capture group for a leading character.
   * @param {string} whitespaceChar The capture group for a whitespace character.
   * @returns {string} Returns the escaped character.
   */
  function escapeRegExpChar(chr, leadingChar, whitespaceChar) {
    if (leadingChar) {
      chr = regexpEscapes[chr];
    } else if (whitespaceChar) {
      chr = stringEscapes[chr];
    }
    return '\\' + chr;
  }

  /**
   * Used by `_.template` to escape characters for inclusion in compiled string literals.
   *
   * @private
   * @param {string} chr The matched character to escape.
   * @returns {string} Returns the escaped character.
   */
  function escapeStringChar(chr) {
    return '\\' + stringEscapes[chr];
  }

  /**
   * Gets the index at which the first occurrence of `NaN` is found in `array`.
   *
   * @private
   * @param {Array} array The array to search.
   * @param {number} fromIndex The index to search from.
   * @param {boolean} [fromRight] Specify iterating from right to left.
   * @returns {number} Returns the index of the matched `NaN`, else `-1`.
   */
  function indexOfNaN(array, fromIndex, fromRight) {
    var length = array.length,
        index = fromIndex + (fromRight ? 0 : -1);

    while ((fromRight ? index-- : ++index < length)) {
      var other = array[index];
      if (other !== other) {
        return index;
      }
    }
    return -1;
  }

  /**
   * Checks if `value` is object-like.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
   */
  function isObjectLike(value) {
    return !!value && typeof value == 'object';
  }

  /**
   * Used by `trimmedLeftIndex` and `trimmedRightIndex` to determine if a
   * character code is whitespace.
   *
   * @private
   * @param {number} charCode The character code to inspect.
   * @returns {boolean} Returns `true` if `charCode` is whitespace, else `false`.
   */
  function isSpace(charCode) {
    return ((charCode <= 160 && (charCode >= 9 && charCode <= 13) || charCode == 32 || charCode == 160) || charCode == 5760 || charCode == 6158 ||
      (charCode >= 8192 && (charCode <= 8202 || charCode == 8232 || charCode == 8233 || charCode == 8239 || charCode == 8287 || charCode == 12288 || charCode == 65279)));
  }

  /**
   * Replaces all `placeholder` elements in `array` with an internal placeholder
   * and returns an array of their indexes.
   *
   * @private
   * @param {Array} array The array to modify.
   * @param {*} placeholder The placeholder to replace.
   * @returns {Array} Returns the new array of placeholder indexes.
   */
  function replaceHolders(array, placeholder) {
    var index = -1,
        length = array.length,
        resIndex = -1,
        result = [];

    while (++index < length) {
      if (array[index] === placeholder) {
        array[index] = PLACEHOLDER;
        result[++resIndex] = index;
      }
    }
    return result;
  }

  /**
   * An implementation of `_.uniq` optimized for sorted arrays without support
   * for callback shorthands and `this` binding.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {Function} [iteratee] The function invoked per iteration.
   * @returns {Array} Returns the new duplicate-value-free array.
   */
  function sortedUniq(array, iteratee) {
    var seen,
        index = -1,
        length = array.length,
        resIndex = -1,
        result = [];

    while (++index < length) {
      var value = array[index],
          computed = iteratee ? iteratee(value, index, array) : value;

      if (!index || seen !== computed) {
        seen = computed;
        result[++resIndex] = value;
      }
    }
    return result;
  }

  /**
   * Used by `_.trim` and `_.trimLeft` to get the index of the first non-whitespace
   * character of `string`.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {number} Returns the index of the first non-whitespace character.
   */
  function trimmedLeftIndex(string) {
    var index = -1,
        length = string.length;

    while (++index < length && isSpace(string.charCodeAt(index))) {}
    return index;
  }

  /**
   * Used by `_.trim` and `_.trimRight` to get the index of the last non-whitespace
   * character of `string`.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {number} Returns the index of the last non-whitespace character.
   */
  function trimmedRightIndex(string) {
    var index = string.length;

    while (index-- && isSpace(string.charCodeAt(index))) {}
    return index;
  }

  /**
   * Used by `_.unescape` to convert HTML entities to characters.
   *
   * @private
   * @param {string} chr The matched character to unescape.
   * @returns {string} Returns the unescaped character.
   */
  function unescapeHtmlChar(chr) {
    return htmlUnescapes[chr];
  }

  /*--------------------------------------------------------------------------*/

  /**
   * Create a new pristine `lodash` function using the given `context` object.
   *
   * @static
   * @memberOf _
   * @category Utility
   * @param {Object} [context=root] The context object.
   * @returns {Function} Returns a new `lodash` function.
   * @example
   *
   * _.mixin({ 'foo': _.constant('foo') });
   *
   * var lodash = _.runInContext();
   * lodash.mixin({ 'bar': lodash.constant('bar') });
   *
   * _.isFunction(_.foo);
   * // => true
   * _.isFunction(_.bar);
   * // => false
   *
   * lodash.isFunction(lodash.foo);
   * // => false
   * lodash.isFunction(lodash.bar);
   * // => true
   *
   * // using `context` to mock `Date#getTime` use in `_.now`
   * var mock = _.runInContext({
   *   'Date': function() {
   *     return { 'getTime': getTimeMock };
   *   }
   * });
   *
   * // or creating a suped-up `defer` in Node.js
   * var defer = _.runInContext({ 'setTimeout': setImmediate }).defer;
   */
  function runInContext(context) {
    // Avoid issues with some ES3 environments that attempt to use values, named
    // after built-in constructors like `Object`, for the creation of literals.
    // ES5 clears this up by stating that literals must use built-in constructors.
    // See https://es5.github.io/#x11.1.5 for more details.
    context = context ? _.defaults(root.Object(), context, _.pick(root, contextProps)) : root;

    /** Native constructor references. */
    var Array = context.Array,
        Date = context.Date,
        Error = context.Error,
        Function = context.Function,
        Math = context.Math,
        Number = context.Number,
        Object = context.Object,
        RegExp = context.RegExp,
        String = context.String,
        TypeError = context.TypeError;

    /** Used for native method references. */
    var arrayProto = Array.prototype,
        objectProto = Object.prototype,
        stringProto = String.prototype;

    /** Used to resolve the decompiled source of functions. */
    var fnToString = Function.prototype.toString;

    /** Used to check objects for own properties. */
    var hasOwnProperty = objectProto.hasOwnProperty;

    /** Used to generate unique IDs. */
    var idCounter = 0;

    /**
     * Used to resolve the [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)
     * of values.
     */
    var objToString = objectProto.toString;

    /** Used to restore the original `_` reference in `_.noConflict`. */
    var oldDash = root._;

    /** Used to detect if a method is native. */
    var reIsNative = RegExp('^' +
      fnToString.call(hasOwnProperty).replace(/[\\^$.*+?()[\]{}|]/g, '\\$&')
      .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
    );

    /** Native method references. */
    var ArrayBuffer = context.ArrayBuffer,
        clearTimeout = context.clearTimeout,
        parseFloat = context.parseFloat,
        pow = Math.pow,
        propertyIsEnumerable = objectProto.propertyIsEnumerable,
        Set = getNative(context, 'Set'),
        setTimeout = context.setTimeout,
        splice = arrayProto.splice,
        Uint8Array = context.Uint8Array,
        WeakMap = getNative(context, 'WeakMap');

    /* Native method references for those with the same name as other `lodash` methods. */
    var nativeCeil = Math.ceil,
        nativeCreate = getNative(Object, 'create'),
        nativeFloor = Math.floor,
        nativeIsArray = getNative(Array, 'isArray'),
        nativeIsFinite = context.isFinite,
        nativeKeys = getNative(Object, 'keys'),
        nativeMax = Math.max,
        nativeMin = Math.min,
        nativeNow = getNative(Date, 'now'),
        nativeParseInt = context.parseInt,
        nativeRandom = Math.random;

    /** Used as references for `-Infinity` and `Infinity`. */
    var NEGATIVE_INFINITY = Number.NEGATIVE_INFINITY,
        POSITIVE_INFINITY = Number.POSITIVE_INFINITY;

    /** Used as references for the maximum length and index of an array. */
    var MAX_ARRAY_LENGTH = 4294967295,
        MAX_ARRAY_INDEX = MAX_ARRAY_LENGTH - 1,
        HALF_MAX_ARRAY_LENGTH = MAX_ARRAY_LENGTH >>> 1;

    /**
     * Used as the [maximum length](http://ecma-international.org/ecma-262/6.0/#sec-number.max_safe_integer)
     * of an array-like value.
     */
    var MAX_SAFE_INTEGER = 9007199254740991;

    /** Used to store function metadata. */
    var metaMap = WeakMap && new WeakMap;

    /** Used to lookup unminified function names. */
    var realNames = {};

    /*------------------------------------------------------------------------*/

    /**
     * Creates a `lodash` object which wraps `value` to enable implicit chaining.
     * Methods that operate on and return arrays, collections, and functions can
     * be chained together. Methods that retrieve a single value or may return a
     * primitive value will automatically end the chain returning the unwrapped
     * value. Explicit chaining may be enabled using `_.chain`. The execution of
     * chained methods is lazy, that is, execution is deferred until `_#value`
     * is implicitly or explicitly called.
     *
     * Lazy evaluation allows several methods to support shortcut fusion. Shortcut
     * fusion is an optimization strategy which merge iteratee calls; this can help
     * to avoid the creation of intermediate data structures and greatly reduce the
     * number of iteratee executions.
     *
     * Chaining is supported in custom builds as long as the `_#value` method is
     * directly or indirectly included in the build.
     *
     * In addition to lodash methods, wrappers have `Array` and `String` methods.
     *
     * The wrapper `Array` methods are:
     * `concat`, `join`, `pop`, `push`, `reverse`, `shift`, `slice`, `sort`,
     * `splice`, and `unshift`
     *
     * The wrapper `String` methods are:
     * `replace` and `split`
     *
     * The wrapper methods that support shortcut fusion are:
     * `compact`, `drop`, `dropRight`, `dropRightWhile`, `dropWhile`, `filter`,
     * `first`, `initial`, `last`, `map`, `pluck`, `reject`, `rest`, `reverse`,
     * `slice`, `take`, `takeRight`, `takeRightWhile`, `takeWhile`, `toArray`,
     * and `where`
     *
     * The chainable wrapper methods are:
     * `after`, `ary`, `assign`, `at`, `before`, `bind`, `bindAll`, `bindKey`,
     * `callback`, `chain`, `chunk`, `commit`, `compact`, `concat`, `constant`,
     * `countBy`, `create`, `curry`, `debounce`, `defaults`, `defaultsDeep`,
     * `defer`, `delay`, `difference`, `drop`, `dropRight`, `dropRightWhile`,
     * `dropWhile`, `fill`, `filter`, `flatten`, `flattenDeep`, `flow`, `flowRight`,
     * `forEach`, `forEachRight`, `forIn`, `forInRight`, `forOwn`, `forOwnRight`,
     * `functions`, `groupBy`, `indexBy`, `initial`, `intersection`, `invert`,
     * `invoke`, `keys`, `keysIn`, `map`, `mapKeys`, `mapValues`, `matches`,
     * `matchesProperty`, `memoize`, `merge`, `method`, `methodOf`, `mixin`,
     * `modArgs`, `negate`, `omit`, `once`, `pairs`, `partial`, `partialRight`,
     * `partition`, `pick`, `plant`, `pluck`, `property`, `propertyOf`, `pull`,
     * `pullAt`, `push`, `range`, `rearg`, `reject`, `remove`, `rest`, `restParam`,
     * `reverse`, `set`, `shuffle`, `slice`, `sort`, `sortBy`, `sortByAll`,
     * `sortByOrder`, `splice`, `spread`, `take`, `takeRight`, `takeRightWhile`,
     * `takeWhile`, `tap`, `throttle`, `thru`, `times`, `toArray`, `toPlainObject`,
     * `transform`, `union`, `uniq`, `unshift`, `unzip`, `unzipWith`, `values`,
     * `valuesIn`, `where`, `without`, `wrap`, `xor`, `zip`, `zipObject`, `zipWith`
     *
     * The wrapper methods that are **not** chainable by default are:
     * `add`, `attempt`, `camelCase`, `capitalize`, `ceil`, `clone`, `cloneDeep`,
     * `deburr`, `endsWith`, `escape`, `escapeRegExp`, `every`, `find`, `findIndex`,
     * `findKey`, `findLast`, `findLastIndex`, `findLastKey`, `findWhere`, `first`,
     * `floor`, `get`, `gt`, `gte`, `has`, `identity`, `includes`, `indexOf`,
     * `inRange`, `isArguments`, `isArray`, `isBoolean`, `isDate`, `isElement`,
     * `isEmpty`, `isEqual`, `isError`, `isFinite` `isFunction`, `isMatch`,
     * `isNative`, `isNaN`, `isNull`, `isNumber`, `isObject`, `isPlainObject`,
     * `isRegExp`, `isString`, `isUndefined`, `isTypedArray`, `join`, `kebabCase`,
     * `last`, `lastIndexOf`, `lt`, `lte`, `max`, `min`, `noConflict`, `noop`,
     * `now`, `pad`, `padLeft`, `padRight`, `parseInt`, `pop`, `random`, `reduce`,
     * `reduceRight`, `repeat`, `result`, `round`, `runInContext`, `shift`, `size`,
     * `snakeCase`, `some`, `sortedIndex`, `sortedLastIndex`, `startCase`,
     * `startsWith`, `sum`, `template`, `trim`, `trimLeft`, `trimRight`, `trunc`,
     * `unescape`, `uniqueId`, `value`, and `words`
     *
     * The wrapper method `sample` will return a wrapped value when `n` is provided,
     * otherwise an unwrapped value is returned.
     *
     * @name _
     * @constructor
     * @category Chain
     * @param {*} value The value to wrap in a `lodash` instance.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var wrapped = _([1, 2, 3]);
     *
     * // returns an unwrapped value
     * wrapped.reduce(function(total, n) {
     *   return total + n;
     * });
     * // => 6
     *
     * // returns a wrapped value
     * var squares = wrapped.map(function(n) {
     *   return n * n;
     * });
     *
     * _.isArray(squares);
     * // => false
     *
     * _.isArray(squares.value());
     * // => true
     */
    function lodash(value) {
      if (isObjectLike(value) && !isArray(value) && !(value instanceof LazyWrapper)) {
        if (value instanceof LodashWrapper) {
          return value;
        }
        if (hasOwnProperty.call(value, '__chain__') && hasOwnProperty.call(value, '__wrapped__')) {
          return wrapperClone(value);
        }
      }
      return new LodashWrapper(value);
    }

    /**
     * The function whose prototype all chaining wrappers inherit from.
     *
     * @private
     */
    function baseLodash() {
      // No operation performed.
    }

    /**
     * The base constructor for creating `lodash` wrapper objects.
     *
     * @private
     * @param {*} value The value to wrap.
     * @param {boolean} [chainAll] Enable chaining for all wrapper methods.
     * @param {Array} [actions=[]] Actions to peform to resolve the unwrapped value.
     */
    function LodashWrapper(value, chainAll, actions) {
      this.__wrapped__ = value;
      this.__actions__ = actions || [];
      this.__chain__ = !!chainAll;
    }

    /**
     * An object environment feature flags.
     *
     * @static
     * @memberOf _
     * @type Object
     */
    var support = lodash.support = {};

    /**
     * By default, the template delimiters used by lodash are like those in
     * embedded Ruby (ERB). Change the following template settings to use
     * alternative delimiters.
     *
     * @static
     * @memberOf _
     * @type Object
     */
    lodash.templateSettings = {

      /**
       * Used to detect `data` property values to be HTML-escaped.
       *
       * @memberOf _.templateSettings
       * @type RegExp
       */
      'escape': reEscape,

      /**
       * Used to detect code to be evaluated.
       *
       * @memberOf _.templateSettings
       * @type RegExp
       */
      'evaluate': reEvaluate,

      /**
       * Used to detect `data` property values to inject.
       *
       * @memberOf _.templateSettings
       * @type RegExp
       */
      'interpolate': reInterpolate,

      /**
       * Used to reference the data object in the template text.
       *
       * @memberOf _.templateSettings
       * @type string
       */
      'variable': '',

      /**
       * Used to import variables into the compiled template.
       *
       * @memberOf _.templateSettings
       * @type Object
       */
      'imports': {

        /**
         * A reference to the `lodash` function.
         *
         * @memberOf _.templateSettings.imports
         * @type Function
         */
        '_': lodash
      }
    };

    /*------------------------------------------------------------------------*/

    /**
     * Creates a lazy wrapper object which wraps `value` to enable lazy evaluation.
     *
     * @private
     * @param {*} value The value to wrap.
     */
    function LazyWrapper(value) {
      this.__wrapped__ = value;
      this.__actions__ = [];
      this.__dir__ = 1;
      this.__filtered__ = false;
      this.__iteratees__ = [];
      this.__takeCount__ = POSITIVE_INFINITY;
      this.__views__ = [];
    }

    /**
     * Creates a clone of the lazy wrapper object.
     *
     * @private
     * @name clone
     * @memberOf LazyWrapper
     * @returns {Object} Returns the cloned `LazyWrapper` object.
     */
    function lazyClone() {
      var result = new LazyWrapper(this.__wrapped__);
      result.__actions__ = arrayCopy(this.__actions__);
      result.__dir__ = this.__dir__;
      result.__filtered__ = this.__filtered__;
      result.__iteratees__ = arrayCopy(this.__iteratees__);
      result.__takeCount__ = this.__takeCount__;
      result.__views__ = arrayCopy(this.__views__);
      return result;
    }

    /**
     * Reverses the direction of lazy iteration.
     *
     * @private
     * @name reverse
     * @memberOf LazyWrapper
     * @returns {Object} Returns the new reversed `LazyWrapper` object.
     */
    function lazyReverse() {
      if (this.__filtered__) {
        var result = new LazyWrapper(this);
        result.__dir__ = -1;
        result.__filtered__ = true;
      } else {
        result = this.clone();
        result.__dir__ *= -1;
      }
      return result;
    }

    /**
     * Extracts the unwrapped value from its lazy wrapper.
     *
     * @private
     * @name value
     * @memberOf LazyWrapper
     * @returns {*} Returns the unwrapped value.
     */
    function lazyValue() {
      var array = this.__wrapped__.value(),
          dir = this.__dir__,
          isArr = isArray(array),
          isRight = dir < 0,
          arrLength = isArr ? array.length : 0,
          view = getView(0, arrLength, this.__views__),
          start = view.start,
          end = view.end,
          length = end - start,
          index = isRight ? end : (start - 1),
          iteratees = this.__iteratees__,
          iterLength = iteratees.length,
          resIndex = 0,
          takeCount = nativeMin(length, this.__takeCount__);

      if (!isArr || arrLength < LARGE_ARRAY_SIZE || (arrLength == length && takeCount == length)) {
        return baseWrapperValue((isRight && isArr) ? array.reverse() : array, this.__actions__);
      }
      var result = [];

      outer:
      while (length-- && resIndex < takeCount) {
        index += dir;

        var iterIndex = -1,
            value = array[index];

        while (++iterIndex < iterLength) {
          var data = iteratees[iterIndex],
              iteratee = data.iteratee,
              type = data.type,
              computed = iteratee(value);

          if (type == LAZY_MAP_FLAG) {
            value = computed;
          } else if (!computed) {
            if (type == LAZY_FILTER_FLAG) {
              continue outer;
            } else {
              break outer;
            }
          }
        }
        result[resIndex++] = value;
      }
      return result;
    }

    /*------------------------------------------------------------------------*/

    /**
     * Creates a cache object to store key/value pairs.
     *
     * @private
     * @static
     * @name Cache
     * @memberOf _.memoize
     */
    function MapCache() {
      this.__data__ = {};
    }

    /**
     * Removes `key` and its value from the cache.
     *
     * @private
     * @name delete
     * @memberOf _.memoize.Cache
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed successfully, else `false`.
     */
    function mapDelete(key) {
      return this.has(key) && delete this.__data__[key];
    }

    /**
     * Gets the cached value for `key`.
     *
     * @private
     * @name get
     * @memberOf _.memoize.Cache
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the cached value.
     */
    function mapGet(key) {
      return key == '__proto__' ? undefined : this.__data__[key];
    }

    /**
     * Checks if a cached value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf _.memoize.Cache
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function mapHas(key) {
      return key != '__proto__' && hasOwnProperty.call(this.__data__, key);
    }

    /**
     * Sets `value` to `key` of the cache.
     *
     * @private
     * @name set
     * @memberOf _.memoize.Cache
     * @param {string} key The key of the value to cache.
     * @param {*} value The value to cache.
     * @returns {Object} Returns the cache object.
     */
    function mapSet(key, value) {
      if (key != '__proto__') {
        this.__data__[key] = value;
      }
      return this;
    }

    /*------------------------------------------------------------------------*/

    /**
     *
     * Creates a cache object to store unique values.
     *
     * @private
     * @param {Array} [values] The values to cache.
     */
    function SetCache(values) {
      var length = values ? values.length : 0;

      this.data = { 'hash': nativeCreate(null), 'set': new Set };
      while (length--) {
        this.push(values[length]);
      }
    }

    /**
     * Checks if `value` is in `cache` mimicking the return signature of
     * `_.indexOf` by returning `0` if the value is found, else `-1`.
     *
     * @private
     * @param {Object} cache The cache to search.
     * @param {*} value The value to search for.
     * @returns {number} Returns `0` if `value` is found, else `-1`.
     */
    function cacheIndexOf(cache, value) {
      var data = cache.data,
          result = (typeof value == 'string' || isObject(value)) ? data.set.has(value) : data.hash[value];

      return result ? 0 : -1;
    }

    /**
     * Adds `value` to the cache.
     *
     * @private
     * @name push
     * @memberOf SetCache
     * @param {*} value The value to cache.
     */
    function cachePush(value) {
      var data = this.data;
      if (typeof value == 'string' || isObject(value)) {
        data.set.add(value);
      } else {
        data.hash[value] = true;
      }
    }

    /*------------------------------------------------------------------------*/

    /**
     * Creates a new array joining `array` with `other`.
     *
     * @private
     * @param {Array} array The array to join.
     * @param {Array} other The other array to join.
     * @returns {Array} Returns the new concatenated array.
     */
    function arrayConcat(array, other) {
      var index = -1,
          length = array.length,
          othIndex = -1,
          othLength = other.length,
          result = Array(length + othLength);

      while (++index < length) {
        result[index] = array[index];
      }
      while (++othIndex < othLength) {
        result[index++] = other[othIndex];
      }
      return result;
    }

    /**
     * Copies the values of `source` to `array`.
     *
     * @private
     * @param {Array} source The array to copy values from.
     * @param {Array} [array=[]] The array to copy values to.
     * @returns {Array} Returns `array`.
     */
    function arrayCopy(source, array) {
      var index = -1,
          length = source.length;

      array || (array = Array(length));
      while (++index < length) {
        array[index] = source[index];
      }
      return array;
    }

    /**
     * A specialized version of `_.forEach` for arrays without support for callback
     * shorthands and `this` binding.
     *
     * @private
     * @param {Array} array The array to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array} Returns `array`.
     */
    function arrayEach(array, iteratee) {
      var index = -1,
          length = array.length;

      while (++index < length) {
        if (iteratee(array[index], index, array) === false) {
          break;
        }
      }
      return array;
    }

    /**
     * A specialized version of `_.forEachRight` for arrays without support for
     * callback shorthands and `this` binding.
     *
     * @private
     * @param {Array} array The array to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array} Returns `array`.
     */
    function arrayEachRight(array, iteratee) {
      var length = array.length;

      while (length--) {
        if (iteratee(array[length], length, array) === false) {
          break;
        }
      }
      return array;
    }

    /**
     * A specialized version of `_.every` for arrays without support for callback
     * shorthands and `this` binding.
     *
     * @private
     * @param {Array} array The array to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {boolean} Returns `true` if all elements pass the predicate check,
     *  else `false`.
     */
    function arrayEvery(array, predicate) {
      var index = -1,
          length = array.length;

      while (++index < length) {
        if (!predicate(array[index], index, array)) {
          return false;
        }
      }
      return true;
    }

    /**
     * A specialized version of `baseExtremum` for arrays which invokes `iteratee`
     * with one argument: (value).
     *
     * @private
     * @param {Array} array The array to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {Function} comparator The function used to compare values.
     * @param {*} exValue The initial extremum value.
     * @returns {*} Returns the extremum value.
     */
    function arrayExtremum(array, iteratee, comparator, exValue) {
      var index = -1,
          length = array.length,
          computed = exValue,
          result = computed;

      while (++index < length) {
        var value = array[index],
            current = +iteratee(value);

        if (comparator(current, computed)) {
          computed = current;
          result = value;
        }
      }
      return result;
    }

    /**
     * A specialized version of `_.filter` for arrays without support for callback
     * shorthands and `this` binding.
     *
     * @private
     * @param {Array} array The array to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {Array} Returns the new filtered array.
     */
    function arrayFilter(array, predicate) {
      var index = -1,
          length = array.length,
          resIndex = -1,
          result = [];

      while (++index < length) {
        var value = array[index];
        if (predicate(value, index, array)) {
          result[++resIndex] = value;
        }
      }
      return result;
    }

    /**
     * A specialized version of `_.map` for arrays without support for callback
     * shorthands and `this` binding.
     *
     * @private
     * @param {Array} array The array to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array} Returns the new mapped array.
     */
    function arrayMap(array, iteratee) {
      var index = -1,
          length = array.length,
          result = Array(length);

      while (++index < length) {
        result[index] = iteratee(array[index], index, array);
      }
      return result;
    }

    /**
     * Appends the elements of `values` to `array`.
     *
     * @private
     * @param {Array} array The array to modify.
     * @param {Array} values The values to append.
     * @returns {Array} Returns `array`.
     */
    function arrayPush(array, values) {
      var index = -1,
          length = values.length,
          offset = array.length;

      while (++index < length) {
        array[offset + index] = values[index];
      }
      return array;
    }

    /**
     * A specialized version of `_.reduce` for arrays without support for callback
     * shorthands and `this` binding.
     *
     * @private
     * @param {Array} array The array to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {*} [accumulator] The initial value.
     * @param {boolean} [initFromArray] Specify using the first element of `array`
     *  as the initial value.
     * @returns {*} Returns the accumulated value.
     */
    function arrayReduce(array, iteratee, accumulator, initFromArray) {
      var index = -1,
          length = array.length;

      if (initFromArray && length) {
        accumulator = array[++index];
      }
      while (++index < length) {
        accumulator = iteratee(accumulator, array[index], index, array);
      }
      return accumulator;
    }

    /**
     * A specialized version of `_.reduceRight` for arrays without support for
     * callback shorthands and `this` binding.
     *
     * @private
     * @param {Array} array The array to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {*} [accumulator] The initial value.
     * @param {boolean} [initFromArray] Specify using the last element of `array`
     *  as the initial value.
     * @returns {*} Returns the accumulated value.
     */
    function arrayReduceRight(array, iteratee, accumulator, initFromArray) {
      var length = array.length;
      if (initFromArray && length) {
        accumulator = array[--length];
      }
      while (length--) {
        accumulator = iteratee(accumulator, array[length], length, array);
      }
      return accumulator;
    }

    /**
     * A specialized version of `_.some` for arrays without support for callback
     * shorthands and `this` binding.
     *
     * @private
     * @param {Array} array The array to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {boolean} Returns `true` if any element passes the predicate check,
     *  else `false`.
     */
    function arraySome(array, predicate) {
      var index = -1,
          length = array.length;

      while (++index < length) {
        if (predicate(array[index], index, array)) {
          return true;
        }
      }
      return false;
    }

    /**
     * A specialized version of `_.sum` for arrays without support for callback
     * shorthands and `this` binding..
     *
     * @private
     * @param {Array} array The array to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {number} Returns the sum.
     */
    function arraySum(array, iteratee) {
      var length = array.length,
          result = 0;

      while (length--) {
        result += +iteratee(array[length]) || 0;
      }
      return result;
    }

    /**
     * Used by `_.defaults` to customize its `_.assign` use.
     *
     * @private
     * @param {*} objectValue The destination object property value.
     * @param {*} sourceValue The source object property value.
     * @returns {*} Returns the value to assign to the destination object.
     */
    function assignDefaults(objectValue, sourceValue) {
      return objectValue === undefined ? sourceValue : objectValue;
    }

    /**
     * Used by `_.template` to customize its `_.assign` use.
     *
     * **Note:** This function is like `assignDefaults` except that it ignores
     * inherited property values when checking if a property is `undefined`.
     *
     * @private
     * @param {*} objectValue The destination object property value.
     * @param {*} sourceValue The source object property value.
     * @param {string} key The key associated with the object and source values.
     * @param {Object} object The destination object.
     * @returns {*} Returns the value to assign to the destination object.
     */
    function assignOwnDefaults(objectValue, sourceValue, key, object) {
      return (objectValue === undefined || !hasOwnProperty.call(object, key))
        ? sourceValue
        : objectValue;
    }

    /**
     * A specialized version of `_.assign` for customizing assigned values without
     * support for argument juggling, multiple sources, and `this` binding `customizer`
     * functions.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @param {Function} customizer The function to customize assigned values.
     * @returns {Object} Returns `object`.
     */
    function assignWith(object, source, customizer) {
      var index = -1,
          props = keys(source),
          length = props.length;

      while (++index < length) {
        var key = props[index],
            value = object[key],
            result = customizer(value, source[key], key, object, source);

        if ((result === result ? (result !== value) : (value === value)) ||
            (value === undefined && !(key in object))) {
          object[key] = result;
        }
      }
      return object;
    }

    /**
     * The base implementation of `_.assign` without support for argument juggling,
     * multiple sources, and `customizer` functions.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @returns {Object} Returns `object`.
     */
    function baseAssign(object, source) {
      return source == null
        ? object
        : baseCopy(source, keys(source), object);
    }

    /**
     * The base implementation of `_.at` without support for string collections
     * and individual key arguments.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {number[]|string[]} props The property names or indexes of elements to pick.
     * @returns {Array} Returns the new array of picked elements.
     */
    function baseAt(collection, props) {
      var index = -1,
          isNil = collection == null,
          isArr = !isNil && isArrayLike(collection),
          length = isArr ? collection.length : 0,
          propsLength = props.length,
          result = Array(propsLength);

      while(++index < propsLength) {
        var key = props[index];
        if (isArr) {
          result[index] = isIndex(key, length) ? collection[key] : undefined;
        } else {
          result[index] = isNil ? undefined : collection[key];
        }
      }
      return result;
    }

    /**
     * Copies properties of `source` to `object`.
     *
     * @private
     * @param {Object} source The object to copy properties from.
     * @param {Array} props The property names to copy.
     * @param {Object} [object={}] The object to copy properties to.
     * @returns {Object} Returns `object`.
     */
    function baseCopy(source, props, object) {
      object || (object = {});

      var index = -1,
          length = props.length;

      while (++index < length) {
        var key = props[index];
        object[key] = source[key];
      }
      return object;
    }

    /**
     * The base implementation of `_.callback` which supports specifying the
     * number of arguments to provide to `func`.
     *
     * @private
     * @param {*} [func=_.identity] The value to convert to a callback.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param {number} [argCount] The number of arguments to provide to `func`.
     * @returns {Function} Returns the callback.
     */
    function baseCallback(func, thisArg, argCount) {
      var type = typeof func;
      if (type == 'function') {
        return thisArg === undefined
          ? func
          : bindCallback(func, thisArg, argCount);
      }
      if (func == null) {
        return identity;
      }
      if (type == 'object') {
        return baseMatches(func);
      }
      return thisArg === undefined
        ? property(func)
        : baseMatchesProperty(func, thisArg);
    }

    /**
     * The base implementation of `_.clone` without support for argument juggling
     * and `this` binding `customizer` functions.
     *
     * @private
     * @param {*} value The value to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @param {Function} [customizer] The function to customize cloning values.
     * @param {string} [key] The key of `value`.
     * @param {Object} [object] The object `value` belongs to.
     * @param {Array} [stackA=[]] Tracks traversed source objects.
     * @param {Array} [stackB=[]] Associates clones with source counterparts.
     * @returns {*} Returns the cloned value.
     */
    function baseClone(value, isDeep, customizer, key, object, stackA, stackB) {
      var result;
      if (customizer) {
        result = object ? customizer(value, key, object) : customizer(value);
      }
      if (result !== undefined) {
        return result;
      }
      if (!isObject(value)) {
        return value;
      }
      var isArr = isArray(value);
      if (isArr) {
        result = initCloneArray(value);
        if (!isDeep) {
          return arrayCopy(value, result);
        }
      } else {
        var tag = objToString.call(value),
            isFunc = tag == funcTag;

        if (tag == objectTag || tag == argsTag || (isFunc && !object)) {
          result = initCloneObject(isFunc ? {} : value);
          if (!isDeep) {
            return baseAssign(result, value);
          }
        } else {
          return cloneableTags[tag]
            ? initCloneByTag(value, tag, isDeep)
            : (object ? value : {});
        }
      }
      // Check for circular references and return its corresponding clone.
      stackA || (stackA = []);
      stackB || (stackB = []);

      var length = stackA.length;
      while (length--) {
        if (stackA[length] == value) {
          return stackB[length];
        }
      }
      // Add the source value to the stack of traversed objects and associate it with its clone.
      stackA.push(value);
      stackB.push(result);

      // Recursively populate clone (susceptible to call stack limits).
      (isArr ? arrayEach : baseForOwn)(value, function(subValue, key) {
        result[key] = baseClone(subValue, isDeep, customizer, key, value, stackA, stackB);
      });
      return result;
    }

    /**
     * The base implementation of `_.create` without support for assigning
     * properties to the created object.
     *
     * @private
     * @param {Object} prototype The object to inherit from.
     * @returns {Object} Returns the new object.
     */
    var baseCreate = (function() {
      function object() {}
      return function(prototype) {
        if (isObject(prototype)) {
          object.prototype = prototype;
          var result = new object;
          object.prototype = undefined;
        }
        return result || {};
      };
    }());

    /**
     * The base implementation of `_.delay` and `_.defer` which accepts an index
     * of where to slice the arguments to provide to `func`.
     *
     * @private
     * @param {Function} func The function to delay.
     * @param {number} wait The number of milliseconds to delay invocation.
     * @param {Object} args The arguments provide to `func`.
     * @returns {number} Returns the timer id.
     */
    function baseDelay(func, wait, args) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      return setTimeout(function() { func.apply(undefined, args); }, wait);
    }

    /**
     * The base implementation of `_.difference` which accepts a single array
     * of values to exclude.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {Array} values The values to exclude.
     * @returns {Array} Returns the new array of filtered values.
     */
    function baseDifference(array, values) {
      var length = array ? array.length : 0,
          result = [];

      if (!length) {
        return result;
      }
      var index = -1,
          indexOf = getIndexOf(),
          isCommon = indexOf == baseIndexOf,
          cache = (isCommon && values.length >= LARGE_ARRAY_SIZE) ? createCache(values) : null,
          valuesLength = values.length;

      if (cache) {
        indexOf = cacheIndexOf;
        isCommon = false;
        values = cache;
      }
      outer:
      while (++index < length) {
        var value = array[index];

        if (isCommon && value === value) {
          var valuesIndex = valuesLength;
          while (valuesIndex--) {
            if (values[valuesIndex] === value) {
              continue outer;
            }
          }
          result.push(value);
        }
        else if (indexOf(values, value, 0) < 0) {
          result.push(value);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.forEach` without support for callback
     * shorthands and `this` binding.
     *
     * @private
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array|Object|string} Returns `collection`.
     */
    var baseEach = createBaseEach(baseForOwn);

    /**
     * The base implementation of `_.forEachRight` without support for callback
     * shorthands and `this` binding.
     *
     * @private
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array|Object|string} Returns `collection`.
     */
    var baseEachRight = createBaseEach(baseForOwnRight, true);

    /**
     * The base implementation of `_.every` without support for callback
     * shorthands and `this` binding.
     *
     * @private
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {boolean} Returns `true` if all elements pass the predicate check,
     *  else `false`
     */
    function baseEvery(collection, predicate) {
      var result = true;
      baseEach(collection, function(value, index, collection) {
        result = !!predicate(value, index, collection);
        return result;
      });
      return result;
    }

    /**
     * Gets the extremum value of `collection` invoking `iteratee` for each value
     * in `collection` to generate the criterion by which the value is ranked.
     * The `iteratee` is invoked with three arguments: (value, index|key, collection).
     *
     * @private
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {Function} comparator The function used to compare values.
     * @param {*} exValue The initial extremum value.
     * @returns {*} Returns the extremum value.
     */
    function baseExtremum(collection, iteratee, comparator, exValue) {
      var computed = exValue,
          result = computed;

      baseEach(collection, function(value, index, collection) {
        var current = +iteratee(value, index, collection);
        if (comparator(current, computed) || (current === exValue && current === result)) {
          computed = current;
          result = value;
        }
      });
      return result;
    }

    /**
     * The base implementation of `_.fill` without an iteratee call guard.
     *
     * @private
     * @param {Array} array The array to fill.
     * @param {*} value The value to fill `array` with.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns `array`.
     */
    function baseFill(array, value, start, end) {
      var length = array.length;

      start = start == null ? 0 : (+start || 0);
      if (start < 0) {
        start = -start > length ? 0 : (length + start);
      }
      end = (end === undefined || end > length) ? length : (+end || 0);
      if (end < 0) {
        end += length;
      }
      length = start > end ? 0 : (end >>> 0);
      start >>>= 0;

      while (start < length) {
        array[start++] = value;
      }
      return array;
    }

    /**
     * The base implementation of `_.filter` without support for callback
     * shorthands and `this` binding.
     *
     * @private
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {Array} Returns the new filtered array.
     */
    function baseFilter(collection, predicate) {
      var result = [];
      baseEach(collection, function(value, index, collection) {
        if (predicate(value, index, collection)) {
          result.push(value);
        }
      });
      return result;
    }

    /**
     * The base implementation of `_.find`, `_.findLast`, `_.findKey`, and `_.findLastKey`,
     * without support for callback shorthands and `this` binding, which iterates
     * over `collection` using the provided `eachFunc`.
     *
     * @private
     * @param {Array|Object|string} collection The collection to search.
     * @param {Function} predicate The function invoked per iteration.
     * @param {Function} eachFunc The function to iterate over `collection`.
     * @param {boolean} [retKey] Specify returning the key of the found element
     *  instead of the element itself.
     * @returns {*} Returns the found element or its key, else `undefined`.
     */
    function baseFind(collection, predicate, eachFunc, retKey) {
      var result;
      eachFunc(collection, function(value, key, collection) {
        if (predicate(value, key, collection)) {
          result = retKey ? key : value;
          return false;
        }
      });
      return result;
    }

    /**
     * The base implementation of `_.flatten` with added support for restricting
     * flattening and specifying the start index.
     *
     * @private
     * @param {Array} array The array to flatten.
     * @param {boolean} [isDeep] Specify a deep flatten.
     * @param {boolean} [isStrict] Restrict flattening to arrays-like objects.
     * @param {Array} [result=[]] The initial result value.
     * @returns {Array} Returns the new flattened array.
     */
    function baseFlatten(array, isDeep, isStrict, result) {
      result || (result = []);

      var index = -1,
          length = array.length;

      while (++index < length) {
        var value = array[index];
        if (isObjectLike(value) && isArrayLike(value) &&
            (isStrict || isArray(value) || isArguments(value))) {
          if (isDeep) {
            // Recursively flatten arrays (susceptible to call stack limits).
            baseFlatten(value, isDeep, isStrict, result);
          } else {
            arrayPush(result, value);
          }
        } else if (!isStrict) {
          result[result.length] = value;
        }
      }
      return result;
    }

    /**
     * The base implementation of `baseForIn` and `baseForOwn` which iterates
     * over `object` properties returned by `keysFunc` invoking `iteratee` for
     * each property. Iteratee functions may exit iteration early by explicitly
     * returning `false`.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {Function} keysFunc The function to get the keys of `object`.
     * @returns {Object} Returns `object`.
     */
    var baseFor = createBaseFor();

    /**
     * This function is like `baseFor` except that it iterates over properties
     * in the opposite order.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {Function} keysFunc The function to get the keys of `object`.
     * @returns {Object} Returns `object`.
     */
    var baseForRight = createBaseFor(true);

    /**
     * The base implementation of `_.forIn` without support for callback
     * shorthands and `this` binding.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Object} Returns `object`.
     */
    function baseForIn(object, iteratee) {
      return baseFor(object, iteratee, keysIn);
    }

    /**
     * The base implementation of `_.forOwn` without support for callback
     * shorthands and `this` binding.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Object} Returns `object`.
     */
    function baseForOwn(object, iteratee) {
      return baseFor(object, iteratee, keys);
    }

    /**
     * The base implementation of `_.forOwnRight` without support for callback
     * shorthands and `this` binding.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Object} Returns `object`.
     */
    function baseForOwnRight(object, iteratee) {
      return baseForRight(object, iteratee, keys);
    }

    /**
     * The base implementation of `_.functions` which creates an array of
     * `object` function property names filtered from those provided.
     *
     * @private
     * @param {Object} object The object to inspect.
     * @param {Array} props The property names to filter.
     * @returns {Array} Returns the new array of filtered property names.
     */
    function baseFunctions(object, props) {
      var index = -1,
          length = props.length,
          resIndex = -1,
          result = [];

      while (++index < length) {
        var key = props[index];
        if (isFunction(object[key])) {
          result[++resIndex] = key;
        }
      }
      return result;
    }

    /**
     * The base implementation of `get` without support for string paths
     * and default values.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array} path The path of the property to get.
     * @param {string} [pathKey] The key representation of path.
     * @returns {*} Returns the resolved value.
     */
    function baseGet(object, path, pathKey) {
      if (object == null) {
        return;
      }
      if (pathKey !== undefined && pathKey in toObject(object)) {
        path = [pathKey];
      }
      var index = 0,
          length = path.length;

      while (object != null && index < length) {
        object = object[path[index++]];
      }
      return (index && index == length) ? object : undefined;
    }

    /**
     * The base implementation of `_.isEqual` without support for `this` binding
     * `customizer` functions.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @param {Function} [customizer] The function to customize comparing values.
     * @param {boolean} [isLoose] Specify performing partial comparisons.
     * @param {Array} [stackA] Tracks traversed `value` objects.
     * @param {Array} [stackB] Tracks traversed `other` objects.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     */
    function baseIsEqual(value, other, customizer, isLoose, stackA, stackB) {
      if (value === other) {
        return true;
      }
      if (value == null || other == null || (!isObject(value) && !isObjectLike(other))) {
        return value !== value && other !== other;
      }
      return baseIsEqualDeep(value, other, baseIsEqual, customizer, isLoose, stackA, stackB);
    }

    /**
     * A specialized version of `baseIsEqual` for arrays and objects which performs
     * deep comparisons and tracks traversed objects enabling objects with circular
     * references to be compared.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Function} [customizer] The function to customize comparing objects.
     * @param {boolean} [isLoose] Specify performing partial comparisons.
     * @param {Array} [stackA=[]] Tracks traversed `value` objects.
     * @param {Array} [stackB=[]] Tracks traversed `other` objects.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */
    function baseIsEqualDeep(object, other, equalFunc, customizer, isLoose, stackA, stackB) {
      var objIsArr = isArray(object),
          othIsArr = isArray(other),
          objTag = arrayTag,
          othTag = arrayTag;

      if (!objIsArr) {
        objTag = objToString.call(object);
        if (objTag == argsTag) {
          objTag = objectTag;
        } else if (objTag != objectTag) {
          objIsArr = isTypedArray(object);
        }
      }
      if (!othIsArr) {
        othTag = objToString.call(other);
        if (othTag == argsTag) {
          othTag = objectTag;
        } else if (othTag != objectTag) {
          othIsArr = isTypedArray(other);
        }
      }
      var objIsObj = objTag == objectTag,
          othIsObj = othTag == objectTag,
          isSameTag = objTag == othTag;

      if (isSameTag && !(objIsArr || objIsObj)) {
        return equalByTag(object, other, objTag);
      }
      if (!isLoose) {
        var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),
            othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');

        if (objIsWrapped || othIsWrapped) {
          return equalFunc(objIsWrapped ? object.value() : object, othIsWrapped ? other.value() : other, customizer, isLoose, stackA, stackB);
        }
      }
      if (!isSameTag) {
        return false;
      }
      // Assume cyclic values are equal.
      // For more information on detecting circular references see https://es5.github.io/#JO.
      stackA || (stackA = []);
      stackB || (stackB = []);

      var length = stackA.length;
      while (length--) {
        if (stackA[length] == object) {
          return stackB[length] == other;
        }
      }
      // Add `object` and `other` to the stack of traversed objects.
      stackA.push(object);
      stackB.push(other);

      var result = (objIsArr ? equalArrays : equalObjects)(object, other, equalFunc, customizer, isLoose, stackA, stackB);

      stackA.pop();
      stackB.pop();

      return result;
    }

    /**
     * The base implementation of `_.isMatch` without support for callback
     * shorthands and `this` binding.
     *
     * @private
     * @param {Object} object The object to inspect.
     * @param {Array} matchData The propery names, values, and compare flags to match.
     * @param {Function} [customizer] The function to customize comparing objects.
     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
     */
    function baseIsMatch(object, matchData, customizer) {
      var index = matchData.length,
          length = index,
          noCustomizer = !customizer;

      if (object == null) {
        return !length;
      }
      object = toObject(object);
      while (index--) {
        var data = matchData[index];
        if ((noCustomizer && data[2])
              ? data[1] !== object[data[0]]
              : !(data[0] in object)
            ) {
          return false;
        }
      }
      while (++index < length) {
        data = matchData[index];
        var key = data[0],
            objValue = object[key],
            srcValue = data[1];

        if (noCustomizer && data[2]) {
          if (objValue === undefined && !(key in object)) {
            return false;
          }
        } else {
          var result = customizer ? customizer(objValue, srcValue, key) : undefined;
          if (!(result === undefined ? baseIsEqual(srcValue, objValue, customizer, true) : result)) {
            return false;
          }
        }
      }
      return true;
    }

    /**
     * The base implementation of `_.map` without support for callback shorthands
     * and `this` binding.
     *
     * @private
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array} Returns the new mapped array.
     */
    function baseMap(collection, iteratee) {
      var index = -1,
          result = isArrayLike(collection) ? Array(collection.length) : [];

      baseEach(collection, function(value, key, collection) {
        result[++index] = iteratee(value, key, collection);
      });
      return result;
    }

    /**
     * The base implementation of `_.matches` which does not clone `source`.
     *
     * @private
     * @param {Object} source The object of property values to match.
     * @returns {Function} Returns the new function.
     */
    function baseMatches(source) {
      var matchData = getMatchData(source);
      if (matchData.length == 1 && matchData[0][2]) {
        var key = matchData[0][0],
            value = matchData[0][1];

        return function(object) {
          if (object == null) {
            return false;
          }
          return object[key] === value && (value !== undefined || (key in toObject(object)));
        };
      }
      return function(object) {
        return baseIsMatch(object, matchData);
      };
    }

    /**
     * The base implementation of `_.matchesProperty` which does not clone `srcValue`.
     *
     * @private
     * @param {string} path The path of the property to get.
     * @param {*} srcValue The value to compare.
     * @returns {Function} Returns the new function.
     */
    function baseMatchesProperty(path, srcValue) {
      var isArr = isArray(path),
          isCommon = isKey(path) && isStrictComparable(srcValue),
          pathKey = (path + '');

      path = toPath(path);
      return function(object) {
        if (object == null) {
          return false;
        }
        var key = pathKey;
        object = toObject(object);
        if ((isArr || !isCommon) && !(key in object)) {
          object = path.length == 1 ? object : baseGet(object, baseSlice(path, 0, -1));
          if (object == null) {
            return false;
          }
          key = last(path);
          object = toObject(object);
        }
        return object[key] === srcValue
          ? (srcValue !== undefined || (key in object))
          : baseIsEqual(srcValue, object[key], undefined, true);
      };
    }

    /**
     * The base implementation of `_.merge` without support for argument juggling,
     * multiple sources, and `this` binding `customizer` functions.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @param {Function} [customizer] The function to customize merged values.
     * @param {Array} [stackA=[]] Tracks traversed source objects.
     * @param {Array} [stackB=[]] Associates values with source counterparts.
     * @returns {Object} Returns `object`.
     */
    function baseMerge(object, source, customizer, stackA, stackB) {
      if (!isObject(object)) {
        return object;
      }
      var isSrcArr = isArrayLike(source) && (isArray(source) || isTypedArray(source)),
          props = isSrcArr ? undefined : keys(source);

      arrayEach(props || source, function(srcValue, key) {
        if (props) {
          key = srcValue;
          srcValue = source[key];
        }
        if (isObjectLike(srcValue)) {
          stackA || (stackA = []);
          stackB || (stackB = []);
          baseMergeDeep(object, source, key, baseMerge, customizer, stackA, stackB);
        }
        else {
          var value = object[key],
              result = customizer ? customizer(value, srcValue, key, object, source) : undefined,
              isCommon = result === undefined;

          if (isCommon) {
            result = srcValue;
          }
          if ((result !== undefined || (isSrcArr && !(key in object))) &&
              (isCommon || (result === result ? (result !== value) : (value === value)))) {
            object[key] = result;
          }
        }
      });
      return object;
    }

    /**
     * A specialized version of `baseMerge` for arrays and objects which performs
     * deep merges and tracks traversed objects enabling objects with circular
     * references to be merged.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @param {string} key The key of the value to merge.
     * @param {Function} mergeFunc The function to merge values.
     * @param {Function} [customizer] The function to customize merged values.
     * @param {Array} [stackA=[]] Tracks traversed source objects.
     * @param {Array} [stackB=[]] Associates values with source counterparts.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */
    function baseMergeDeep(object, source, key, mergeFunc, customizer, stackA, stackB) {
      var length = stackA.length,
          srcValue = source[key];

      while (length--) {
        if (stackA[length] == srcValue) {
          object[key] = stackB[length];
          return;
        }
      }
      var value = object[key],
          result = customizer ? customizer(value, srcValue, key, object, source) : undefined,
          isCommon = result === undefined;

      if (isCommon) {
        result = srcValue;
        if (isArrayLike(srcValue) && (isArray(srcValue) || isTypedArray(srcValue))) {
          result = isArray(value)
            ? value
            : (isArrayLike(value) ? arrayCopy(value) : []);
        }
        else if (isPlainObject(srcValue) || isArguments(srcValue)) {
          result = isArguments(value)
            ? toPlainObject(value)
            : (isPlainObject(value) ? value : {});
        }
        else {
          isCommon = false;
        }
      }
      // Add the source value to the stack of traversed objects and associate
      // it with its merged value.
      stackA.push(srcValue);
      stackB.push(result);

      if (isCommon) {
        // Recursively merge objects and arrays (susceptible to call stack limits).
        object[key] = mergeFunc(result, srcValue, customizer, stackA, stackB);
      } else if (result === result ? (result !== value) : (value === value)) {
        object[key] = result;
      }
    }

    /**
     * The base implementation of `_.property` without support for deep paths.
     *
     * @private
     * @param {string} key The key of the property to get.
     * @returns {Function} Returns the new function.
     */
    function baseProperty(key) {
      return function(object) {
        return object == null ? undefined : object[key];
      };
    }

    /**
     * A specialized version of `baseProperty` which supports deep paths.
     *
     * @private
     * @param {Array|string} path The path of the property to get.
     * @returns {Function} Returns the new function.
     */
    function basePropertyDeep(path) {
      var pathKey = (path + '');
      path = toPath(path);
      return function(object) {
        return baseGet(object, path, pathKey);
      };
    }

    /**
     * The base implementation of `_.pullAt` without support for individual
     * index arguments and capturing the removed elements.
     *
     * @private
     * @param {Array} array The array to modify.
     * @param {number[]} indexes The indexes of elements to remove.
     * @returns {Array} Returns `array`.
     */
    function basePullAt(array, indexes) {
      var length = array ? indexes.length : 0;
      while (length--) {
        var index = indexes[length];
        if (index != previous && isIndex(index)) {
          var previous = index;
          splice.call(array, index, 1);
        }
      }
      return array;
    }

    /**
     * The base implementation of `_.random` without support for argument juggling
     * and returning floating-point numbers.
     *
     * @private
     * @param {number} min The minimum possible value.
     * @param {number} max The maximum possible value.
     * @returns {number} Returns the random number.
     */
    function baseRandom(min, max) {
      return min + nativeFloor(nativeRandom() * (max - min + 1));
    }

    /**
     * The base implementation of `_.reduce` and `_.reduceRight` without support
     * for callback shorthands and `this` binding, which iterates over `collection`
     * using the provided `eachFunc`.
     *
     * @private
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {*} accumulator The initial value.
     * @param {boolean} initFromCollection Specify using the first or last element
     *  of `collection` as the initial value.
     * @param {Function} eachFunc The function to iterate over `collection`.
     * @returns {*} Returns the accumulated value.
     */
    function baseReduce(collection, iteratee, accumulator, initFromCollection, eachFunc) {
      eachFunc(collection, function(value, index, collection) {
        accumulator = initFromCollection
          ? (initFromCollection = false, value)
          : iteratee(accumulator, value, index, collection);
      });
      return accumulator;
    }

    /**
     * The base implementation of `setData` without support for hot loop detection.
     *
     * @private
     * @param {Function} func The function to associate metadata with.
     * @param {*} data The metadata.
     * @returns {Function} Returns `func`.
     */
    var baseSetData = !metaMap ? identity : function(func, data) {
      metaMap.set(func, data);
      return func;
    };

    /**
     * The base implementation of `_.slice` without an iteratee call guard.
     *
     * @private
     * @param {Array} array The array to slice.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns the slice of `array`.
     */
    function baseSlice(array, start, end) {
      var index = -1,
          length = array.length;

      start = start == null ? 0 : (+start || 0);
      if (start < 0) {
        start = -start > length ? 0 : (length + start);
      }
      end = (end === undefined || end > length) ? length : (+end || 0);
      if (end < 0) {
        end += length;
      }
      length = start > end ? 0 : ((end - start) >>> 0);
      start >>>= 0;

      var result = Array(length);
      while (++index < length) {
        result[index] = array[index + start];
      }
      return result;
    }

    /**
     * The base implementation of `_.some` without support for callback shorthands
     * and `this` binding.
     *
     * @private
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {boolean} Returns `true` if any element passes the predicate check,
     *  else `false`.
     */
    function baseSome(collection, predicate) {
      var result;

      baseEach(collection, function(value, index, collection) {
        result = predicate(value, index, collection);
        return !result;
      });
      return !!result;
    }

    /**
     * The base implementation of `_.sortBy` which uses `comparer` to define
     * the sort order of `array` and replaces criteria objects with their
     * corresponding values.
     *
     * @private
     * @param {Array} array The array to sort.
     * @param {Function} comparer The function to define sort order.
     * @returns {Array} Returns `array`.
     */
    function baseSortBy(array, comparer) {
      var length = array.length;

      array.sort(comparer);
      while (length--) {
        array[length] = array[length].value;
      }
      return array;
    }

    /**
     * The base implementation of `_.sortByOrder` without param guards.
     *
     * @private
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.
     * @param {boolean[]} orders The sort orders of `iteratees`.
     * @returns {Array} Returns the new sorted array.
     */
    function baseSortByOrder(collection, iteratees, orders) {
      var callback = getCallback(),
          index = -1;

      iteratees = arrayMap(iteratees, function(iteratee) { return callback(iteratee); });

      var result = baseMap(collection, function(value) {
        var criteria = arrayMap(iteratees, function(iteratee) { return iteratee(value); });
        return { 'criteria': criteria, 'index': ++index, 'value': value };
      });

      return baseSortBy(result, function(object, other) {
        return compareMultiple(object, other, orders);
      });
    }

    /**
     * The base implementation of `_.sum` without support for callback shorthands
     * and `this` binding.
     *
     * @private
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {number} Returns the sum.
     */
    function baseSum(collection, iteratee) {
      var result = 0;
      baseEach(collection, function(value, index, collection) {
        result += +iteratee(value, index, collection) || 0;
      });
      return result;
    }

    /**
     * The base implementation of `_.uniq` without support for callback shorthands
     * and `this` binding.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee] The function invoked per iteration.
     * @returns {Array} Returns the new duplicate-value-free array.
     */
    function baseUniq(array, iteratee) {
      var index = -1,
          indexOf = getIndexOf(),
          length = array.length,
          isCommon = indexOf == baseIndexOf,
          isLarge = isCommon && length >= LARGE_ARRAY_SIZE,
          seen = isLarge ? createCache() : null,
          result = [];

      if (seen) {
        indexOf = cacheIndexOf;
        isCommon = false;
      } else {
        isLarge = false;
        seen = iteratee ? [] : result;
      }
      outer:
      while (++index < length) {
        var value = array[index],
            computed = iteratee ? iteratee(value, index, array) : value;

        if (isCommon && value === value) {
          var seenIndex = seen.length;
          while (seenIndex--) {
            if (seen[seenIndex] === computed) {
              continue outer;
            }
          }
          if (iteratee) {
            seen.push(computed);
          }
          result.push(value);
        }
        else if (indexOf(seen, computed, 0) < 0) {
          if (iteratee || isLarge) {
            seen.push(computed);
          }
          result.push(value);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.values` and `_.valuesIn` which creates an
     * array of `object` property values corresponding to the property names
     * of `props`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array} props The property names to get values for.
     * @returns {Object} Returns the array of property values.
     */
    function baseValues(object, props) {
      var index = -1,
          length = props.length,
          result = Array(length);

      while (++index < length) {
        result[index] = object[props[index]];
      }
      return result;
    }

    /**
     * The base implementation of `_.dropRightWhile`, `_.dropWhile`, `_.takeRightWhile`,
     * and `_.takeWhile` without support for callback shorthands and `this` binding.
     *
     * @private
     * @param {Array} array The array to query.
     * @param {Function} predicate The function invoked per iteration.
     * @param {boolean} [isDrop] Specify dropping elements instead of taking them.
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Array} Returns the slice of `array`.
     */
    function baseWhile(array, predicate, isDrop, fromRight) {
      var length = array.length,
          index = fromRight ? length : -1;

      while ((fromRight ? index-- : ++index < length) && predicate(array[index], index, array)) {}
      return isDrop
        ? baseSlice(array, (fromRight ? 0 : index), (fromRight ? index + 1 : length))
        : baseSlice(array, (fromRight ? index + 1 : 0), (fromRight ? length : index));
    }

    /**
     * The base implementation of `wrapperValue` which returns the result of
     * performing a sequence of actions on the unwrapped `value`, where each
     * successive action is supplied the return value of the previous.
     *
     * @private
     * @param {*} value The unwrapped value.
     * @param {Array} actions Actions to peform to resolve the unwrapped value.
     * @returns {*} Returns the resolved value.
     */
    function baseWrapperValue(value, actions) {
      var result = value;
      if (result instanceof LazyWrapper) {
        result = result.value();
      }
      var index = -1,
          length = actions.length;

      while (++index < length) {
        var action = actions[index];
        result = action.func.apply(action.thisArg, arrayPush([result], action.args));
      }
      return result;
    }

    /**
     * Performs a binary search of `array` to determine the index at which `value`
     * should be inserted into `array` in order to maintain its sort order.
     *
     * @private
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {boolean} [retHighest] Specify returning the highest qualified index.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     */
    function binaryIndex(array, value, retHighest) {
      var low = 0,
          high = array ? array.length : low;

      if (typeof value == 'number' && value === value && high <= HALF_MAX_ARRAY_LENGTH) {
        while (low < high) {
          var mid = (low + high) >>> 1,
              computed = array[mid];

          if ((retHighest ? (computed <= value) : (computed < value)) && computed !== null) {
            low = mid + 1;
          } else {
            high = mid;
          }
        }
        return high;
      }
      return binaryIndexBy(array, value, identity, retHighest);
    }

    /**
     * This function is like `binaryIndex` except that it invokes `iteratee` for
     * `value` and each element of `array` to compute their sort ranking. The
     * iteratee is invoked with one argument; (value).
     *
     * @private
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {boolean} [retHighest] Specify returning the highest qualified index.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     */
    function binaryIndexBy(array, value, iteratee, retHighest) {
      value = iteratee(value);

      var low = 0,
          high = array ? array.length : 0,
          valIsNaN = value !== value,
          valIsNull = value === null,
          valIsUndef = value === undefined;

      while (low < high) {
        var mid = nativeFloor((low + high) / 2),
            computed = iteratee(array[mid]),
            isDef = computed !== undefined,
            isReflexive = computed === computed;

        if (valIsNaN) {
          var setLow = isReflexive || retHighest;
        } else if (valIsNull) {
          setLow = isReflexive && isDef && (retHighest || computed != null);
        } else if (valIsUndef) {
          setLow = isReflexive && (retHighest || isDef);
        } else if (computed == null) {
          setLow = false;
        } else {
          setLow = retHighest ? (computed <= value) : (computed < value);
        }
        if (setLow) {
          low = mid + 1;
        } else {
          high = mid;
        }
      }
      return nativeMin(high, MAX_ARRAY_INDEX);
    }

    /**
     * A specialized version of `baseCallback` which only supports `this` binding
     * and specifying the number of arguments to provide to `func`.
     *
     * @private
     * @param {Function} func The function to bind.
     * @param {*} thisArg The `this` binding of `func`.
     * @param {number} [argCount] The number of arguments to provide to `func`.
     * @returns {Function} Returns the callback.
     */
    function bindCallback(func, thisArg, argCount) {
      if (typeof func != 'function') {
        return identity;
      }
      if (thisArg === undefined) {
        return func;
      }
      switch (argCount) {
        case 1: return function(value) {
          return func.call(thisArg, value);
        };
        case 3: return function(value, index, collection) {
          return func.call(thisArg, value, index, collection);
        };
        case 4: return function(accumulator, value, index, collection) {
          return func.call(thisArg, accumulator, value, index, collection);
        };
        case 5: return function(value, other, key, object, source) {
          return func.call(thisArg, value, other, key, object, source);
        };
      }
      return function() {
        return func.apply(thisArg, arguments);
      };
    }

    /**
     * Creates a clone of the given array buffer.
     *
     * @private
     * @param {ArrayBuffer} buffer The array buffer to clone.
     * @returns {ArrayBuffer} Returns the cloned array buffer.
     */
    function bufferClone(buffer) {
      var result = new ArrayBuffer(buffer.byteLength),
          view = new Uint8Array(result);

      view.set(new Uint8Array(buffer));
      return result;
    }

    /**
     * Creates an array that is the composition of partially applied arguments,
     * placeholders, and provided arguments into a single array of arguments.
     *
     * @private
     * @param {Array|Object} args The provided arguments.
     * @param {Array} partials The arguments to prepend to those provided.
     * @param {Array} holders The `partials` placeholder indexes.
     * @returns {Array} Returns the new array of composed arguments.
     */
    function composeArgs(args, partials, holders) {
      var holdersLength = holders.length,
          argsIndex = -1,
          argsLength = nativeMax(args.length - holdersLength, 0),
          leftIndex = -1,
          leftLength = partials.length,
          result = Array(leftLength + argsLength);

      while (++leftIndex < leftLength) {
        result[leftIndex] = partials[leftIndex];
      }
      while (++argsIndex < holdersLength) {
        result[holders[argsIndex]] = args[argsIndex];
      }
      while (argsLength--) {
        result[leftIndex++] = args[argsIndex++];
      }
      return result;
    }

    /**
     * This function is like `composeArgs` except that the arguments composition
     * is tailored for `_.partialRight`.
     *
     * @private
     * @param {Array|Object} args The provided arguments.
     * @param {Array} partials The arguments to append to those provided.
     * @param {Array} holders The `partials` placeholder indexes.
     * @returns {Array} Returns the new array of composed arguments.
     */
    function composeArgsRight(args, partials, holders) {
      var holdersIndex = -1,
          holdersLength = holders.length,
          argsIndex = -1,
          argsLength = nativeMax(args.length - holdersLength, 0),
          rightIndex = -1,
          rightLength = partials.length,
          result = Array(argsLength + rightLength);

      while (++argsIndex < argsLength) {
        result[argsIndex] = args[argsIndex];
      }
      var offset = argsIndex;
      while (++rightIndex < rightLength) {
        result[offset + rightIndex] = partials[rightIndex];
      }
      while (++holdersIndex < holdersLength) {
        result[offset + holders[holdersIndex]] = args[argsIndex++];
      }
      return result;
    }

    /**
     * Creates a `_.countBy`, `_.groupBy`, `_.indexBy`, or `_.partition` function.
     *
     * @private
     * @param {Function} setter The function to set keys and values of the accumulator object.
     * @param {Function} [initializer] The function to initialize the accumulator object.
     * @returns {Function} Returns the new aggregator function.
     */
    function createAggregator(setter, initializer) {
      return function(collection, iteratee, thisArg) {
        var result = initializer ? initializer() : {};
        iteratee = getCallback(iteratee, thisArg, 3);

        if (isArray(collection)) {
          var index = -1,
              length = collection.length;

          while (++index < length) {
            var value = collection[index];
            setter(result, value, iteratee(value, index, collection), collection);
          }
        } else {
          baseEach(collection, function(value, key, collection) {
            setter(result, value, iteratee(value, key, collection), collection);
          });
        }
        return result;
      };
    }

    /**
     * Creates a `_.assign`, `_.defaults`, or `_.merge` function.
     *
     * @private
     * @param {Function} assigner The function to assign values.
     * @returns {Function} Returns the new assigner function.
     */
    function createAssigner(assigner) {
      return restParam(function(object, sources) {
        var index = -1,
            length = object == null ? 0 : sources.length,
            customizer = length > 2 ? sources[length - 2] : undefined,
            guard = length > 2 ? sources[2] : undefined,
            thisArg = length > 1 ? sources[length - 1] : undefined;

        if (typeof customizer == 'function') {
          customizer = bindCallback(customizer, thisArg, 5);
          length -= 2;
        } else {
          customizer = typeof thisArg == 'function' ? thisArg : undefined;
          length -= (customizer ? 1 : 0);
        }
        if (guard && isIterateeCall(sources[0], sources[1], guard)) {
          customizer = length < 3 ? undefined : customizer;
          length = 1;
        }
        while (++index < length) {
          var source = sources[index];
          if (source) {
            assigner(object, source, customizer);
          }
        }
        return object;
      });
    }

    /**
     * Creates a `baseEach` or `baseEachRight` function.
     *
     * @private
     * @param {Function} eachFunc The function to iterate over a collection.
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new base function.
     */
    function createBaseEach(eachFunc, fromRight) {
      return function(collection, iteratee) {
        var length = collection ? getLength(collection) : 0;
        if (!isLength(length)) {
          return eachFunc(collection, iteratee);
        }
        var index = fromRight ? length : -1,
            iterable = toObject(collection);

        while ((fromRight ? index-- : ++index < length)) {
          if (iteratee(iterable[index], index, iterable) === false) {
            break;
          }
        }
        return collection;
      };
    }

    /**
     * Creates a base function for `_.forIn` or `_.forInRight`.
     *
     * @private
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new base function.
     */
    function createBaseFor(fromRight) {
      return function(object, iteratee, keysFunc) {
        var iterable = toObject(object),
            props = keysFunc(object),
            length = props.length,
            index = fromRight ? length : -1;

        while ((fromRight ? index-- : ++index < length)) {
          var key = props[index];
          if (iteratee(iterable[key], key, iterable) === false) {
            break;
          }
        }
        return object;
      };
    }

    /**
     * Creates a function that wraps `func` and invokes it with the `this`
     * binding of `thisArg`.
     *
     * @private
     * @param {Function} func The function to bind.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @returns {Function} Returns the new bound function.
     */
    function createBindWrapper(func, thisArg) {
      var Ctor = createCtorWrapper(func);

      function wrapper() {
        var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;
        return fn.apply(thisArg, arguments);
      }
      return wrapper;
    }

    /**
     * Creates a `Set` cache object to optimize linear searches of large arrays.
     *
     * @private
     * @param {Array} [values] The values to cache.
     * @returns {null|Object} Returns the new cache object if `Set` is supported, else `null`.
     */
    function createCache(values) {
      return (nativeCreate && Set) ? new SetCache(values) : null;
    }

    /**
     * Creates a function that produces compound words out of the words in a
     * given string.
     *
     * @private
     * @param {Function} callback The function to combine each word.
     * @returns {Function} Returns the new compounder function.
     */
    function createCompounder(callback) {
      return function(string) {
        var index = -1,
            array = words(deburr(string)),
            length = array.length,
            result = '';

        while (++index < length) {
          result = callback(result, array[index], index);
        }
        return result;
      };
    }

    /**
     * Creates a function that produces an instance of `Ctor` regardless of
     * whether it was invoked as part of a `new` expression or by `call` or `apply`.
     *
     * @private
     * @param {Function} Ctor The constructor to wrap.
     * @returns {Function} Returns the new wrapped function.
     */
    function createCtorWrapper(Ctor) {
      return function() {
        // Use a `switch` statement to work with class constructors.
        // See http://ecma-international.org/ecma-262/6.0/#sec-ecmascript-function-objects-call-thisargument-argumentslist
        // for more details.
        var args = arguments;
        switch (args.length) {
          case 0: return new Ctor;
          case 1: return new Ctor(args[0]);
          case 2: return new Ctor(args[0], args[1]);
          case 3: return new Ctor(args[0], args[1], args[2]);
          case 4: return new Ctor(args[0], args[1], args[2], args[3]);
          case 5: return new Ctor(args[0], args[1], args[2], args[3], args[4]);
          case 6: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5]);
          case 7: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5], args[6]);
        }
        var thisBinding = baseCreate(Ctor.prototype),
            result = Ctor.apply(thisBinding, args);

        // Mimic the constructor's `return` behavior.
        // See https://es5.github.io/#x13.2.2 for more details.
        return isObject(result) ? result : thisBinding;
      };
    }

    /**
     * Creates a `_.curry` or `_.curryRight` function.
     *
     * @private
     * @param {boolean} flag The curry bit flag.
     * @returns {Function} Returns the new curry function.
     */
    function createCurry(flag) {
      function curryFunc(func, arity, guard) {
        if (guard && isIterateeCall(func, arity, guard)) {
          arity = undefined;
        }
        var result = createWrapper(func, flag, undefined, undefined, undefined, undefined, undefined, arity);
        result.placeholder = curryFunc.placeholder;
        return result;
      }
      return curryFunc;
    }

    /**
     * Creates a `_.defaults` or `_.defaultsDeep` function.
     *
     * @private
     * @param {Function} assigner The function to assign values.
     * @param {Function} customizer The function to customize assigned values.
     * @returns {Function} Returns the new defaults function.
     */
    function createDefaults(assigner, customizer) {
      return restParam(function(args) {
        var object = args[0];
        if (object == null) {
          return object;
        }
        args.push(customizer);
        return assigner.apply(undefined, args);
      });
    }

    /**
     * Creates a `_.max` or `_.min` function.
     *
     * @private
     * @param {Function} comparator The function used to compare values.
     * @param {*} exValue The initial extremum value.
     * @returns {Function} Returns the new extremum function.
     */
    function createExtremum(comparator, exValue) {
      return function(collection, iteratee, thisArg) {
        if (thisArg && isIterateeCall(collection, iteratee, thisArg)) {
          iteratee = undefined;
        }
        iteratee = getCallback(iteratee, thisArg, 3);
        if (iteratee.length == 1) {
          collection = isArray(collection) ? collection : toIterable(collection);
          var result = arrayExtremum(collection, iteratee, comparator, exValue);
          if (!(collection.length && result === exValue)) {
            return result;
          }
        }
        return baseExtremum(collection, iteratee, comparator, exValue);
      };
    }

    /**
     * Creates a `_.find` or `_.findLast` function.
     *
     * @private
     * @param {Function} eachFunc The function to iterate over a collection.
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new find function.
     */
    function createFind(eachFunc, fromRight) {
      return function(collection, predicate, thisArg) {
        predicate = getCallback(predicate, thisArg, 3);
        if (isArray(collection)) {
          var index = baseFindIndex(collection, predicate, fromRight);
          return index > -1 ? collection[index] : undefined;
        }
        return baseFind(collection, predicate, eachFunc);
      };
    }

    /**
     * Creates a `_.findIndex` or `_.findLastIndex` function.
     *
     * @private
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new find function.
     */
    function createFindIndex(fromRight) {
      return function(array, predicate, thisArg) {
        if (!(array && array.length)) {
          return -1;
        }
        predicate = getCallback(predicate, thisArg, 3);
        return baseFindIndex(array, predicate, fromRight);
      };
    }

    /**
     * Creates a `_.findKey` or `_.findLastKey` function.
     *
     * @private
     * @param {Function} objectFunc The function to iterate over an object.
     * @returns {Function} Returns the new find function.
     */
    function createFindKey(objectFunc) {
      return function(object, predicate, thisArg) {
        predicate = getCallback(predicate, thisArg, 3);
        return baseFind(object, predicate, objectFunc, true);
      };
    }

    /**
     * Creates a `_.flow` or `_.flowRight` function.
     *
     * @private
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new flow function.
     */
    function createFlow(fromRight) {
      return function() {
        var wrapper,
            length = arguments.length,
            index = fromRight ? length : -1,
            leftIndex = 0,
            funcs = Array(length);

        while ((fromRight ? index-- : ++index < length)) {
          var func = funcs[leftIndex++] = arguments[index];
          if (typeof func != 'function') {
            throw new TypeError(FUNC_ERROR_TEXT);
          }
          if (!wrapper && LodashWrapper.prototype.thru && getFuncName(func) == 'wrapper') {
            wrapper = new LodashWrapper([], true);
          }
        }
        index = wrapper ? -1 : length;
        while (++index < length) {
          func = funcs[index];

          var funcName = getFuncName(func),
              data = funcName == 'wrapper' ? getData(func) : undefined;

          if (data && isLaziable(data[0]) && data[1] == (ARY_FLAG | CURRY_FLAG | PARTIAL_FLAG | REARG_FLAG) && !data[4].length && data[9] == 1) {
            wrapper = wrapper[getFuncName(data[0])].apply(wrapper, data[3]);
          } else {
            wrapper = (func.length == 1 && isLaziable(func)) ? wrapper[funcName]() : wrapper.thru(func);
          }
        }
        return function() {
          var args = arguments,
              value = args[0];

          if (wrapper && args.length == 1 && isArray(value) && value.length >= LARGE_ARRAY_SIZE) {
            return wrapper.plant(value).value();
          }
          var index = 0,
              result = length ? funcs[index].apply(this, args) : value;

          while (++index < length) {
            result = funcs[index].call(this, result);
          }
          return result;
        };
      };
    }

    /**
     * Creates a function for `_.forEach` or `_.forEachRight`.
     *
     * @private
     * @param {Function} arrayFunc The function to iterate over an array.
     * @param {Function} eachFunc The function to iterate over a collection.
     * @returns {Function} Returns the new each function.
     */
    function createForEach(arrayFunc, eachFunc) {
      return function(collection, iteratee, thisArg) {
        return (typeof iteratee == 'function' && thisArg === undefined && isArray(collection))
          ? arrayFunc(collection, iteratee)
          : eachFunc(collection, bindCallback(iteratee, thisArg, 3));
      };
    }

    /**
     * Creates a function for `_.forIn` or `_.forInRight`.
     *
     * @private
     * @param {Function} objectFunc The function to iterate over an object.
     * @returns {Function} Returns the new each function.
     */
    function createForIn(objectFunc) {
      return function(object, iteratee, thisArg) {
        if (typeof iteratee != 'function' || thisArg !== undefined) {
          iteratee = bindCallback(iteratee, thisArg, 3);
        }
        return objectFunc(object, iteratee, keysIn);
      };
    }

    /**
     * Creates a function for `_.forOwn` or `_.forOwnRight`.
     *
     * @private
     * @param {Function} objectFunc The function to iterate over an object.
     * @returns {Function} Returns the new each function.
     */
    function createForOwn(objectFunc) {
      return function(object, iteratee, thisArg) {
        if (typeof iteratee != 'function' || thisArg !== undefined) {
          iteratee = bindCallback(iteratee, thisArg, 3);
        }
        return objectFunc(object, iteratee);
      };
    }

    /**
     * Creates a function for `_.mapKeys` or `_.mapValues`.
     *
     * @private
     * @param {boolean} [isMapKeys] Specify mapping keys instead of values.
     * @returns {Function} Returns the new map function.
     */
    function createObjectMapper(isMapKeys) {
      return function(object, iteratee, thisArg) {
        var result = {};
        iteratee = getCallback(iteratee, thisArg, 3);

        baseForOwn(object, function(value, key, object) {
          var mapped = iteratee(value, key, object);
          key = isMapKeys ? mapped : key;
          value = isMapKeys ? value : mapped;
          result[key] = value;
        });
        return result;
      };
    }

    /**
     * Creates a function for `_.padLeft` or `_.padRight`.
     *
     * @private
     * @param {boolean} [fromRight] Specify padding from the right.
     * @returns {Function} Returns the new pad function.
     */
    function createPadDir(fromRight) {
      return function(string, length, chars) {
        string = baseToString(string);
        return (fromRight ? string : '') + createPadding(string, length, chars) + (fromRight ? '' : string);
      };
    }

    /**
     * Creates a `_.partial` or `_.partialRight` function.
     *
     * @private
     * @param {boolean} flag The partial bit flag.
     * @returns {Function} Returns the new partial function.
     */
    function createPartial(flag) {
      var partialFunc = restParam(function(func, partials) {
        var holders = replaceHolders(partials, partialFunc.placeholder);
        return createWrapper(func, flag, undefined, partials, holders);
      });
      return partialFunc;
    }

    /**
     * Creates a function for `_.reduce` or `_.reduceRight`.
     *
     * @private
     * @param {Function} arrayFunc The function to iterate over an array.
     * @param {Function} eachFunc The function to iterate over a collection.
     * @returns {Function} Returns the new each function.
     */
    function createReduce(arrayFunc, eachFunc) {
      return function(collection, iteratee, accumulator, thisArg) {
        var initFromArray = arguments.length < 3;
        return (typeof iteratee == 'function' && thisArg === undefined && isArray(collection))
          ? arrayFunc(collection, iteratee, accumulator, initFromArray)
          : baseReduce(collection, getCallback(iteratee, thisArg, 4), accumulator, initFromArray, eachFunc);
      };
    }

    /**
     * Creates a function that wraps `func` and invokes it with optional `this`
     * binding of, partial application, and currying.
     *
     * @private
     * @param {Function|string} func The function or method name to reference.
     * @param {number} bitmask The bitmask of flags. See `createWrapper` for more details.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param {Array} [partials] The arguments to prepend to those provided to the new function.
     * @param {Array} [holders] The `partials` placeholder indexes.
     * @param {Array} [partialsRight] The arguments to append to those provided to the new function.
     * @param {Array} [holdersRight] The `partialsRight` placeholder indexes.
     * @param {Array} [argPos] The argument positions of the new function.
     * @param {number} [ary] The arity cap of `func`.
     * @param {number} [arity] The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createHybridWrapper(func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary, arity) {
      var isAry = bitmask & ARY_FLAG,
          isBind = bitmask & BIND_FLAG,
          isBindKey = bitmask & BIND_KEY_FLAG,
          isCurry = bitmask & CURRY_FLAG,
          isCurryBound = bitmask & CURRY_BOUND_FLAG,
          isCurryRight = bitmask & CURRY_RIGHT_FLAG,
          Ctor = isBindKey ? undefined : createCtorWrapper(func);

      function wrapper() {
        // Avoid `arguments` object use disqualifying optimizations by
        // converting it to an array before providing it to other functions.
        var length = arguments.length,
            index = length,
            args = Array(length);

        while (index--) {
          args[index] = arguments[index];
        }
        if (partials) {
          args = composeArgs(args, partials, holders);
        }
        if (partialsRight) {
          args = composeArgsRight(args, partialsRight, holdersRight);
        }
        if (isCurry || isCurryRight) {
          var placeholder = wrapper.placeholder,
              argsHolders = replaceHolders(args, placeholder);

          length -= argsHolders.length;
          if (length < arity) {
            var newArgPos = argPos ? arrayCopy(argPos) : undefined,
                newArity = nativeMax(arity - length, 0),
                newsHolders = isCurry ? argsHolders : undefined,
                newHoldersRight = isCurry ? undefined : argsHolders,
                newPartials = isCurry ? args : undefined,
                newPartialsRight = isCurry ? undefined : args;

            bitmask |= (isCurry ? PARTIAL_FLAG : PARTIAL_RIGHT_FLAG);
            bitmask &= ~(isCurry ? PARTIAL_RIGHT_FLAG : PARTIAL_FLAG);

            if (!isCurryBound) {
              bitmask &= ~(BIND_FLAG | BIND_KEY_FLAG);
            }
            var newData = [func, bitmask, thisArg, newPartials, newsHolders, newPartialsRight, newHoldersRight, newArgPos, ary, newArity],
                result = createHybridWrapper.apply(undefined, newData);

            if (isLaziable(func)) {
              setData(result, newData);
            }
            result.placeholder = placeholder;
            return result;
          }
        }
        var thisBinding = isBind ? thisArg : this,
            fn = isBindKey ? thisBinding[func] : func;

        if (argPos) {
          args = reorder(args, argPos);
        }
        if (isAry && ary < args.length) {
          args.length = ary;
        }
        if (this && this !== root && this instanceof wrapper) {
          fn = Ctor || createCtorWrapper(func);
        }
        return fn.apply(thisBinding, args);
      }
      return wrapper;
    }

    /**
     * Creates the padding required for `string` based on the given `length`.
     * The `chars` string is truncated if the number of characters exceeds `length`.
     *
     * @private
     * @param {string} string The string to create padding for.
     * @param {number} [length=0] The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the pad for `string`.
     */
    function createPadding(string, length, chars) {
      var strLength = string.length;
      length = +length;

      if (strLength >= length || !nativeIsFinite(length)) {
        return '';
      }
      var padLength = length - strLength;
      chars = chars == null ? ' ' : (chars + '');
      return repeat(chars, nativeCeil(padLength / chars.length)).slice(0, padLength);
    }

    /**
     * Creates a function that wraps `func` and invokes it with the optional `this`
     * binding of `thisArg` and the `partials` prepended to those provided to
     * the wrapper.
     *
     * @private
     * @param {Function} func The function to partially apply arguments to.
     * @param {number} bitmask The bitmask of flags. See `createWrapper` for more details.
     * @param {*} thisArg The `this` binding of `func`.
     * @param {Array} partials The arguments to prepend to those provided to the new function.
     * @returns {Function} Returns the new bound function.
     */
    function createPartialWrapper(func, bitmask, thisArg, partials) {
      var isBind = bitmask & BIND_FLAG,
          Ctor = createCtorWrapper(func);

      function wrapper() {
        // Avoid `arguments` object use disqualifying optimizations by
        // converting it to an array before providing it `func`.
        var argsIndex = -1,
            argsLength = arguments.length,
            leftIndex = -1,
            leftLength = partials.length,
            args = Array(leftLength + argsLength);

        while (++leftIndex < leftLength) {
          args[leftIndex] = partials[leftIndex];
        }
        while (argsLength--) {
          args[leftIndex++] = arguments[++argsIndex];
        }
        var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;
        return fn.apply(isBind ? thisArg : this, args);
      }
      return wrapper;
    }

    /**
     * Creates a `_.ceil`, `_.floor`, or `_.round` function.
     *
     * @private
     * @param {string} methodName The name of the `Math` method to use when rounding.
     * @returns {Function} Returns the new round function.
     */
    function createRound(methodName) {
      var func = Math[methodName];
      return function(number, precision) {
        precision = precision === undefined ? 0 : (+precision || 0);
        if (precision) {
          precision = pow(10, precision);
          return func(number * precision) / precision;
        }
        return func(number);
      };
    }

    /**
     * Creates a `_.sortedIndex` or `_.sortedLastIndex` function.
     *
     * @private
     * @param {boolean} [retHighest] Specify returning the highest qualified index.
     * @returns {Function} Returns the new index function.
     */
    function createSortedIndex(retHighest) {
      return function(array, value, iteratee, thisArg) {
        var callback = getCallback(iteratee);
        return (iteratee == null && callback === baseCallback)
          ? binaryIndex(array, value, retHighest)
          : binaryIndexBy(array, value, callback(iteratee, thisArg, 1), retHighest);
      };
    }

    /**
     * Creates a function that either curries or invokes `func` with optional
     * `this` binding and partially applied arguments.
     *
     * @private
     * @param {Function|string} func The function or method name to reference.
     * @param {number} bitmask The bitmask of flags.
     *  The bitmask may be composed of the following flags:
     *     1 - `_.bind`
     *     2 - `_.bindKey`
     *     4 - `_.curry` or `_.curryRight` of a bound function
     *     8 - `_.curry`
     *    16 - `_.curryRight`
     *    32 - `_.partial`
     *    64 - `_.partialRight`
     *   128 - `_.rearg`
     *   256 - `_.ary`
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param {Array} [partials] The arguments to be partially applied.
     * @param {Array} [holders] The `partials` placeholder indexes.
     * @param {Array} [argPos] The argument positions of the new function.
     * @param {number} [ary] The arity cap of `func`.
     * @param {number} [arity] The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createWrapper(func, bitmask, thisArg, partials, holders, argPos, ary, arity) {
      var isBindKey = bitmask & BIND_KEY_FLAG;
      if (!isBindKey && typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      var length = partials ? partials.length : 0;
      if (!length) {
        bitmask &= ~(PARTIAL_FLAG | PARTIAL_RIGHT_FLAG);
        partials = holders = undefined;
      }
      length -= (holders ? holders.length : 0);
      if (bitmask & PARTIAL_RIGHT_FLAG) {
        var partialsRight = partials,
            holdersRight = holders;

        partials = holders = undefined;
      }
      var data = isBindKey ? undefined : getData(func),
          newData = [func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary, arity];

      if (data) {
        mergeData(newData, data);
        bitmask = newData[1];
        arity = newData[9];
      }
      newData[9] = arity == null
        ? (isBindKey ? 0 : func.length)
        : (nativeMax(arity - length, 0) || 0);

      if (bitmask == BIND_FLAG) {
        var result = createBindWrapper(newData[0], newData[2]);
      } else if ((bitmask == PARTIAL_FLAG || bitmask == (BIND_FLAG | PARTIAL_FLAG)) && !newData[4].length) {
        result = createPartialWrapper.apply(undefined, newData);
      } else {
        result = createHybridWrapper.apply(undefined, newData);
      }
      var setter = data ? baseSetData : setData;
      return setter(result, newData);
    }

    /**
     * A specialized version of `baseIsEqualDeep` for arrays with support for
     * partial deep comparisons.
     *
     * @private
     * @param {Array} array The array to compare.
     * @param {Array} other The other array to compare.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Function} [customizer] The function to customize comparing arrays.
     * @param {boolean} [isLoose] Specify performing partial comparisons.
     * @param {Array} [stackA] Tracks traversed `value` objects.
     * @param {Array} [stackB] Tracks traversed `other` objects.
     * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
     */
    function equalArrays(array, other, equalFunc, customizer, isLoose, stackA, stackB) {
      var index = -1,
          arrLength = array.length,
          othLength = other.length;

      if (arrLength != othLength && !(isLoose && othLength > arrLength)) {
        return false;
      }
      // Ignore non-index properties.
      while (++index < arrLength) {
        var arrValue = array[index],
            othValue = other[index],
            result = customizer ? customizer(isLoose ? othValue : arrValue, isLoose ? arrValue : othValue, index) : undefined;

        if (result !== undefined) {
          if (result) {
            continue;
          }
          return false;
        }
        // Recursively compare arrays (susceptible to call stack limits).
        if (isLoose) {
          if (!arraySome(other, function(othValue) {
                return arrValue === othValue || equalFunc(arrValue, othValue, customizer, isLoose, stackA, stackB);
              })) {
            return false;
          }
        } else if (!(arrValue === othValue || equalFunc(arrValue, othValue, customizer, isLoose, stackA, stackB))) {
          return false;
        }
      }
      return true;
    }

    /**
     * A specialized version of `baseIsEqualDeep` for comparing objects of
     * the same `toStringTag`.
     *
     * **Note:** This function only supports comparing values with tags of
     * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {string} tag The `toStringTag` of the objects to compare.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */
    function equalByTag(object, other, tag) {
      switch (tag) {
        case boolTag:
        case dateTag:
          // Coerce dates and booleans to numbers, dates to milliseconds and booleans
          // to `1` or `0` treating invalid dates coerced to `NaN` as not equal.
          return +object == +other;

        case errorTag:
          return object.name == other.name && object.message == other.message;

        case numberTag:
          // Treat `NaN` vs. `NaN` as equal.
          return (object != +object)
            ? other != +other
            : object == +other;

        case regexpTag:
        case stringTag:
          // Coerce regexes to strings and treat strings primitives and string
          // objects as equal. See https://es5.github.io/#x15.10.6.4 for more details.
          return object == (other + '');
      }
      return false;
    }

    /**
     * A specialized version of `baseIsEqualDeep` for objects with support for
     * partial deep comparisons.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Function} [customizer] The function to customize comparing values.
     * @param {boolean} [isLoose] Specify performing partial comparisons.
     * @param {Array} [stackA] Tracks traversed `value` objects.
     * @param {Array} [stackB] Tracks traversed `other` objects.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */
    function equalObjects(object, other, equalFunc, customizer, isLoose, stackA, stackB) {
      var objProps = keys(object),
          objLength = objProps.length,
          othProps = keys(other),
          othLength = othProps.length;

      if (objLength != othLength && !isLoose) {
        return false;
      }
      var index = objLength;
      while (index--) {
        var key = objProps[index];
        if (!(isLoose ? key in other : hasOwnProperty.call(other, key))) {
          return false;
        }
      }
      var skipCtor = isLoose;
      while (++index < objLength) {
        key = objProps[index];
        var objValue = object[key],
            othValue = other[key],
            result = customizer ? customizer(isLoose ? othValue : objValue, isLoose? objValue : othValue, key) : undefined;

        // Recursively compare objects (susceptible to call stack limits).
        if (!(result === undefined ? equalFunc(objValue, othValue, customizer, isLoose, stackA, stackB) : result)) {
          return false;
        }
        skipCtor || (skipCtor = key == 'constructor');
      }
      if (!skipCtor) {
        var objCtor = object.constructor,
            othCtor = other.constructor;

        // Non `Object` object instances with different constructors are not equal.
        if (objCtor != othCtor &&
            ('constructor' in object && 'constructor' in other) &&
            !(typeof objCtor == 'function' && objCtor instanceof objCtor &&
              typeof othCtor == 'function' && othCtor instanceof othCtor)) {
          return false;
        }
      }
      return true;
    }

    /**
     * Gets the appropriate "callback" function. If the `_.callback` method is
     * customized this function returns the custom method, otherwise it returns
     * the `baseCallback` function. If arguments are provided the chosen function
     * is invoked with them and its result is returned.
     *
     * @private
     * @returns {Function} Returns the chosen function or its result.
     */
    function getCallback(func, thisArg, argCount) {
      var result = lodash.callback || callback;
      result = result === callback ? baseCallback : result;
      return argCount ? result(func, thisArg, argCount) : result;
    }

    /**
     * Gets metadata for `func`.
     *
     * @private
     * @param {Function} func The function to query.
     * @returns {*} Returns the metadata for `func`.
     */
    var getData = !metaMap ? noop : function(func) {
      return metaMap.get(func);
    };

    /**
     * Gets the name of `func`.
     *
     * @private
     * @param {Function} func The function to query.
     * @returns {string} Returns the function name.
     */
    function getFuncName(func) {
      var result = func.name,
          array = realNames[result],
          length = array ? array.length : 0;

      while (length--) {
        var data = array[length],
            otherFunc = data.func;
        if (otherFunc == null || otherFunc == func) {
          return data.name;
        }
      }
      return result;
    }

    /**
     * Gets the appropriate "indexOf" function. If the `_.indexOf` method is
     * customized this function returns the custom method, otherwise it returns
     * the `baseIndexOf` function. If arguments are provided the chosen function
     * is invoked with them and its result is returned.
     *
     * @private
     * @returns {Function|number} Returns the chosen function or its result.
     */
    function getIndexOf(collection, target, fromIndex) {
      var result = lodash.indexOf || indexOf;
      result = result === indexOf ? baseIndexOf : result;
      return collection ? result(collection, target, fromIndex) : result;
    }

    /**
     * Gets the "length" property value of `object`.
     *
     * **Note:** This function is used to avoid a [JIT bug](https://bugs.webkit.org/show_bug.cgi?id=142792)
     * that affects Safari on at least iOS 8.1-8.3 ARM64.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {*} Returns the "length" value.
     */
    var getLength = baseProperty('length');

    /**
     * Gets the propery names, values, and compare flags of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the match data of `object`.
     */
    function getMatchData(object) {
      var result = pairs(object),
          length = result.length;

      while (length--) {
        result[length][2] = isStrictComparable(result[length][1]);
      }
      return result;
    }

    /**
     * Gets the native function at `key` of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {string} key The key of the method to get.
     * @returns {*} Returns the function if it's native, else `undefined`.
     */
    function getNative(object, key) {
      var value = object == null ? undefined : object[key];
      return isNative(value) ? value : undefined;
    }

    /**
     * Gets the view, applying any `transforms` to the `start` and `end` positions.
     *
     * @private
     * @param {number} start The start of the view.
     * @param {number} end The end of the view.
     * @param {Array} transforms The transformations to apply to the view.
     * @returns {Object} Returns an object containing the `start` and `end`
     *  positions of the view.
     */
    function getView(start, end, transforms) {
      var index = -1,
          length = transforms.length;

      while (++index < length) {
        var data = transforms[index],
            size = data.size;

        switch (data.type) {
          case 'drop':      start += size; break;
          case 'dropRight': end -= size; break;
          case 'take':      end = nativeMin(end, start + size); break;
          case 'takeRight': start = nativeMax(start, end - size); break;
        }
      }
      return { 'start': start, 'end': end };
    }

    /**
     * Initializes an array clone.
     *
     * @private
     * @param {Array} array The array to clone.
     * @returns {Array} Returns the initialized clone.
     */
    function initCloneArray(array) {
      var length = array.length,
          result = new array.constructor(length);

      // Add array properties assigned by `RegExp#exec`.
      if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {
        result.index = array.index;
        result.input = array.input;
      }
      return result;
    }

    /**
     * Initializes an object clone.
     *
     * @private
     * @param {Object} object The object to clone.
     * @returns {Object} Returns the initialized clone.
     */
    function initCloneObject(object) {
      var Ctor = object.constructor;
      if (!(typeof Ctor == 'function' && Ctor instanceof Ctor)) {
        Ctor = Object;
      }
      return new Ctor;
    }

    /**
     * Initializes an object clone based on its `toStringTag`.
     *
     * **Note:** This function only supports cloning values with tags of
     * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
     *
     * @private
     * @param {Object} object The object to clone.
     * @param {string} tag The `toStringTag` of the object to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Object} Returns the initialized clone.
     */
    function initCloneByTag(object, tag, isDeep) {
      var Ctor = object.constructor;
      switch (tag) {
        case arrayBufferTag:
          return bufferClone(object);

        case boolTag:
        case dateTag:
          return new Ctor(+object);

        case float32Tag: case float64Tag:
        case int8Tag: case int16Tag: case int32Tag:
        case uint8Tag: case uint8ClampedTag: case uint16Tag: case uint32Tag:
          var buffer = object.buffer;
          return new Ctor(isDeep ? bufferClone(buffer) : buffer, object.byteOffset, object.length);

        case numberTag:
        case stringTag:
          return new Ctor(object);

        case regexpTag:
          var result = new Ctor(object.source, reFlags.exec(object));
          result.lastIndex = object.lastIndex;
      }
      return result;
    }

    /**
     * Invokes the method at `path` on `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the method to invoke.
     * @param {Array} args The arguments to invoke the method with.
     * @returns {*} Returns the result of the invoked method.
     */
    function invokePath(object, path, args) {
      if (object != null && !isKey(path, object)) {
        path = toPath(path);
        object = path.length == 1 ? object : baseGet(object, baseSlice(path, 0, -1));
        path = last(path);
      }
      var func = object == null ? object : object[path];
      return func == null ? undefined : func.apply(object, args);
    }

    /**
     * Checks if `value` is array-like.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
     */
    function isArrayLike(value) {
      return value != null && isLength(getLength(value));
    }

    /**
     * Checks if `value` is a valid array-like index.
     *
     * @private
     * @param {*} value The value to check.
     * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
     * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
     */
    function isIndex(value, length) {
      value = (typeof value == 'number' || reIsUint.test(value)) ? +value : -1;
      length = length == null ? MAX_SAFE_INTEGER : length;
      return value > -1 && value % 1 == 0 && value < length;
    }

    /**
     * Checks if the provided arguments are from an iteratee call.
     *
     * @private
     * @param {*} value The potential iteratee value argument.
     * @param {*} index The potential iteratee index or key argument.
     * @param {*} object The potential iteratee object argument.
     * @returns {boolean} Returns `true` if the arguments are from an iteratee call, else `false`.
     */
    function isIterateeCall(value, index, object) {
      if (!isObject(object)) {
        return false;
      }
      var type = typeof index;
      if (type == 'number'
          ? (isArrayLike(object) && isIndex(index, object.length))
          : (type == 'string' && index in object)) {
        var other = object[index];
        return value === value ? (value === other) : (other !== other);
      }
      return false;
    }

    /**
     * Checks if `value` is a property name and not a property path.
     *
     * @private
     * @param {*} value The value to check.
     * @param {Object} [object] The object to query keys on.
     * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
     */
    function isKey(value, object) {
      var type = typeof value;
      if ((type == 'string' && reIsPlainProp.test(value)) || type == 'number') {
        return true;
      }
      if (isArray(value)) {
        return false;
      }
      var result = !reIsDeepProp.test(value);
      return result || (object != null && value in toObject(object));
    }

    /**
     * Checks if `func` has a lazy counterpart.
     *
     * @private
     * @param {Function} func The function to check.
     * @returns {boolean} Returns `true` if `func` has a lazy counterpart, else `false`.
     */
    function isLaziable(func) {
      var funcName = getFuncName(func);
      if (!(funcName in LazyWrapper.prototype)) {
        return false;
      }
      var other = lodash[funcName];
      if (func === other) {
        return true;
      }
      var data = getData(other);
      return !!data && func === data[0];
    }

    /**
     * Checks if `value` is a valid array-like length.
     *
     * **Note:** This function is based on [`ToLength`](http://ecma-international.org/ecma-262/6.0/#sec-tolength).
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
     */
    function isLength(value) {
      return typeof value == 'number' && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
    }

    /**
     * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` if suitable for strict
     *  equality comparisons, else `false`.
     */
    function isStrictComparable(value) {
      return value === value && !isObject(value);
    }

    /**
     * Merges the function metadata of `source` into `data`.
     *
     * Merging metadata reduces the number of wrappers required to invoke a function.
     * This is possible because methods like `_.bind`, `_.curry`, and `_.partial`
     * may be applied regardless of execution order. Methods like `_.ary` and `_.rearg`
     * augment function arguments, making the order in which they are executed important,
     * preventing the merging of metadata. However, we make an exception for a safe
     * common case where curried functions have `_.ary` and or `_.rearg` applied.
     *
     * @private
     * @param {Array} data The destination metadata.
     * @param {Array} source The source metadata.
     * @returns {Array} Returns `data`.
     */
    function mergeData(data, source) {
      var bitmask = data[1],
          srcBitmask = source[1],
          newBitmask = bitmask | srcBitmask,
          isCommon = newBitmask < ARY_FLAG;

      var isCombo =
        (srcBitmask == ARY_FLAG && bitmask == CURRY_FLAG) ||
        (srcBitmask == ARY_FLAG && bitmask == REARG_FLAG && data[7].length <= source[8]) ||
        (srcBitmask == (ARY_FLAG | REARG_FLAG) && bitmask == CURRY_FLAG);

      // Exit early if metadata can't be merged.
      if (!(isCommon || isCombo)) {
        return data;
      }
      // Use source `thisArg` if available.
      if (srcBitmask & BIND_FLAG) {
        data[2] = source[2];
        // Set when currying a bound function.
        newBitmask |= (bitmask & BIND_FLAG) ? 0 : CURRY_BOUND_FLAG;
      }
      // Compose partial arguments.
      var value = source[3];
      if (value) {
        var partials = data[3];
        data[3] = partials ? composeArgs(partials, value, source[4]) : arrayCopy(value);
        data[4] = partials ? replaceHolders(data[3], PLACEHOLDER) : arrayCopy(source[4]);
      }
      // Compose partial right arguments.
      value = source[5];
      if (value) {
        partials = data[5];
        data[5] = partials ? composeArgsRight(partials, value, source[6]) : arrayCopy(value);
        data[6] = partials ? replaceHolders(data[5], PLACEHOLDER) : arrayCopy(source[6]);
      }
      // Use source `argPos` if available.
      value = source[7];
      if (value) {
        data[7] = arrayCopy(value);
      }
      // Use source `ary` if it's smaller.
      if (srcBitmask & ARY_FLAG) {
        data[8] = data[8] == null ? source[8] : nativeMin(data[8], source[8]);
      }
      // Use source `arity` if one is not provided.
      if (data[9] == null) {
        data[9] = source[9];
      }
      // Use source `func` and merge bitmasks.
      data[0] = source[0];
      data[1] = newBitmask;

      return data;
    }

    /**
     * Used by `_.defaultsDeep` to customize its `_.merge` use.
     *
     * @private
     * @param {*} objectValue The destination object property value.
     * @param {*} sourceValue The source object property value.
     * @returns {*} Returns the value to assign to the destination object.
     */
    function mergeDefaults(objectValue, sourceValue) {
      return objectValue === undefined ? sourceValue : merge(objectValue, sourceValue, mergeDefaults);
    }

    /**
     * A specialized version of `_.pick` which picks `object` properties specified
     * by `props`.
     *
     * @private
     * @param {Object} object The source object.
     * @param {string[]} props The property names to pick.
     * @returns {Object} Returns the new object.
     */
    function pickByArray(object, props) {
      object = toObject(object);

      var index = -1,
          length = props.length,
          result = {};

      while (++index < length) {
        var key = props[index];
        if (key in object) {
          result[key] = object[key];
        }
      }
      return result;
    }

    /**
     * A specialized version of `_.pick` which picks `object` properties `predicate`
     * returns truthy for.
     *
     * @private
     * @param {Object} object The source object.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {Object} Returns the new object.
     */
    function pickByCallback(object, predicate) {
      var result = {};
      baseForIn(object, function(value, key, object) {
        if (predicate(value, key, object)) {
          result[key] = value;
        }
      });
      return result;
    }

    /**
     * Reorder `array` according to the specified indexes where the element at
     * the first index is assigned as the first element, the element at
     * the second index is assigned as the second element, and so on.
     *
     * @private
     * @param {Array} array The array to reorder.
     * @param {Array} indexes The arranged array indexes.
     * @returns {Array} Returns `array`.
     */
    function reorder(array, indexes) {
      var arrLength = array.length,
          length = nativeMin(indexes.length, arrLength),
          oldArray = arrayCopy(array);

      while (length--) {
        var index = indexes[length];
        array[length] = isIndex(index, arrLength) ? oldArray[index] : undefined;
      }
      return array;
    }

    /**
     * Sets metadata for `func`.
     *
     * **Note:** If this function becomes hot, i.e. is invoked a lot in a short
     * period of time, it will trip its breaker and transition to an identity function
     * to avoid garbage collection pauses in V8. See [V8 issue 2070](https://code.google.com/p/v8/issues/detail?id=2070)
     * for more details.
     *
     * @private
     * @param {Function} func The function to associate metadata with.
     * @param {*} data The metadata.
     * @returns {Function} Returns `func`.
     */
    var setData = (function() {
      var count = 0,
          lastCalled = 0;

      return function(key, value) {
        var stamp = now(),
            remaining = HOT_SPAN - (stamp - lastCalled);

        lastCalled = stamp;
        if (remaining > 0) {
          if (++count >= HOT_COUNT) {
            return key;
          }
        } else {
          count = 0;
        }
        return baseSetData(key, value);
      };
    }());

    /**
     * A fallback implementation of `Object.keys` which creates an array of the
     * own enumerable property names of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     */
    function shimKeys(object) {
      var props = keysIn(object),
          propsLength = props.length,
          length = propsLength && object.length;

      var allowIndexes = !!length && isLength(length) &&
        (isArray(object) || isArguments(object));

      var index = -1,
          result = [];

      while (++index < propsLength) {
        var key = props[index];
        if ((allowIndexes && isIndex(key, length)) || hasOwnProperty.call(object, key)) {
          result.push(key);
        }
      }
      return result;
    }

    /**
     * Converts `value` to an array-like object if it's not one.
     *
     * @private
     * @param {*} value The value to process.
     * @returns {Array|Object} Returns the array-like object.
     */
    function toIterable(value) {
      if (value == null) {
        return [];
      }
      if (!isArrayLike(value)) {
        return values(value);
      }
      return isObject(value) ? value : Object(value);
    }

    /**
     * Converts `value` to an object if it's not one.
     *
     * @private
     * @param {*} value The value to process.
     * @returns {Object} Returns the object.
     */
    function toObject(value) {
      return isObject(value) ? value : Object(value);
    }

    /**
     * Converts `value` to property path array if it's not one.
     *
     * @private
     * @param {*} value The value to process.
     * @returns {Array} Returns the property path array.
     */
    function toPath(value) {
      if (isArray(value)) {
        return value;
      }
      var result = [];
      baseToString(value).replace(rePropName, function(match, number, quote, string) {
        result.push(quote ? string.replace(reEscapeChar, '$1') : (number || match));
      });
      return result;
    }

    /**
     * Creates a clone of `wrapper`.
     *
     * @private
     * @param {Object} wrapper The wrapper to clone.
     * @returns {Object} Returns the cloned wrapper.
     */
    function wrapperClone(wrapper) {
      return wrapper instanceof LazyWrapper
        ? wrapper.clone()
        : new LodashWrapper(wrapper.__wrapped__, wrapper.__chain__, arrayCopy(wrapper.__actions__));
    }

    /*------------------------------------------------------------------------*/

    /**
     * Creates an array of elements split into groups the length of `size`.
     * If `collection` can't be split evenly, the final chunk will be the remaining
     * elements.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to process.
     * @param {number} [size=1] The length of each chunk.
     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
     * @returns {Array} Returns the new array containing chunks.
     * @example
     *
     * _.chunk(['a', 'b', 'c', 'd'], 2);
     * // => [['a', 'b'], ['c', 'd']]
     *
     * _.chunk(['a', 'b', 'c', 'd'], 3);
     * // => [['a', 'b', 'c'], ['d']]
     */
    function chunk(array, size, guard) {
      if (guard ? isIterateeCall(array, size, guard) : size == null) {
        size = 1;
      } else {
        size = nativeMax(nativeFloor(size) || 1, 1);
      }
      var index = 0,
          length = array ? array.length : 0,
          resIndex = -1,
          result = Array(nativeCeil(length / size));

      while (index < length) {
        result[++resIndex] = baseSlice(array, index, (index += size));
      }
      return result;
    }

    /**
     * Creates an array with all falsey values removed. The values `false`, `null`,
     * `0`, `""`, `undefined`, and `NaN` are falsey.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to compact.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * _.compact([0, 1, false, 2, '', 3]);
     * // => [1, 2, 3]
     */
    function compact(array) {
      var index = -1,
          length = array ? array.length : 0,
          resIndex = -1,
          result = [];

      while (++index < length) {
        var value = array[index];
        if (value) {
          result[++resIndex] = value;
        }
      }
      return result;
    }

    /**
     * Creates an array of unique `array` values not included in the other
     * provided arrays using [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...Array} [values] The arrays of values to exclude.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * _.difference([1, 2, 3], [4, 2]);
     * // => [1, 3]
     */
    var difference = restParam(function(array, values) {
      return (isObjectLike(array) && isArrayLike(array))
        ? baseDifference(array, baseFlatten(values, false, true))
        : [];
    });

    /**
     * Creates a slice of `array` with `n` elements dropped from the beginning.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to drop.
     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.drop([1, 2, 3]);
     * // => [2, 3]
     *
     * _.drop([1, 2, 3], 2);
     * // => [3]
     *
     * _.drop([1, 2, 3], 5);
     * // => []
     *
     * _.drop([1, 2, 3], 0);
     * // => [1, 2, 3]
     */
    function drop(array, n, guard) {
      var length = array ? array.length : 0;
      if (!length) {
        return [];
      }
      if (guard ? isIterateeCall(array, n, guard) : n == null) {
        n = 1;
      }
      return baseSlice(array, n < 0 ? 0 : n);
    }

    /**
     * Creates a slice of `array` with `n` elements dropped from the end.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to drop.
     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.dropRight([1, 2, 3]);
     * // => [1, 2]
     *
     * _.dropRight([1, 2, 3], 2);
     * // => [1]
     *
     * _.dropRight([1, 2, 3], 5);
     * // => []
     *
     * _.dropRight([1, 2, 3], 0);
     * // => [1, 2, 3]
     */
    function dropRight(array, n, guard) {
      var length = array ? array.length : 0;
      if (!length) {
        return [];
      }
      if (guard ? isIterateeCall(array, n, guard) : n == null) {
        n = 1;
      }
      n = length - (+n || 0);
      return baseSlice(array, 0, n < 0 ? 0 : n);
    }

    /**
     * Creates a slice of `array` excluding elements dropped from the end.
     * Elements are dropped until `predicate` returns falsey. The predicate is
     * bound to `thisArg` and invoked with three arguments: (value, index, array).
     *
     * If a property name is provided for `predicate` the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If a value is also provided for `thisArg` the created `_.matchesProperty`
     * style callback returns `true` for elements that have a matching property
     * value, else `false`.
     *
     * If an object is provided for `predicate` the created `_.matches` style
     * callback returns `true` for elements that match the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked
     *  per iteration.
     * @param {*} [thisArg] The `this` binding of `predicate`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.dropRightWhile([1, 2, 3], function(n) {
     *   return n > 1;
     * });
     * // => [1]
     *
     * var users = [
     *   { 'user': 'barney',  'active': true },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': false }
     * ];
     *
     * // using the `_.matches` callback shorthand
     * _.pluck(_.dropRightWhile(users, { 'user': 'pebbles', 'active': false }), 'user');
     * // => ['barney', 'fred']
     *
     * // using the `_.matchesProperty` callback shorthand
     * _.pluck(_.dropRightWhile(users, 'active', false), 'user');
     * // => ['barney']
     *
     * // using the `_.property` callback shorthand
     * _.pluck(_.dropRightWhile(users, 'active'), 'user');
     * // => ['barney', 'fred', 'pebbles']
     */
    function dropRightWhile(array, predicate, thisArg) {
      return (array && array.length)
        ? baseWhile(array, getCallback(predicate, thisArg, 3), true, true)
        : [];
    }

    /**
     * Creates a slice of `array` excluding elements dropped from the beginning.
     * Elements are dropped until `predicate` returns falsey. The predicate is
     * bound to `thisArg` and invoked with three arguments: (value, index, array).
     *
     * If a property name is provided for `predicate` the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If a value is also provided for `thisArg` the created `_.matchesProperty`
     * style callback returns `true` for elements that have a matching property
     * value, else `false`.
     *
     * If an object is provided for `predicate` the created `_.matches` style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked
     *  per iteration.
     * @param {*} [thisArg] The `this` binding of `predicate`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.dropWhile([1, 2, 3], function(n) {
     *   return n < 3;
     * });
     * // => [3]
     *
     * var users = [
     *   { 'user': 'barney',  'active': false },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': true }
     * ];
     *
     * // using the `_.matches` callback shorthand
     * _.pluck(_.dropWhile(users, { 'user': 'barney', 'active': false }), 'user');
     * // => ['fred', 'pebbles']
     *
     * // using the `_.matchesProperty` callback shorthand
     * _.pluck(_.dropWhile(users, 'active', false), 'user');
     * // => ['pebbles']
     *
     * // using the `_.property` callback shorthand
     * _.pluck(_.dropWhile(users, 'active'), 'user');
     * // => ['barney', 'fred', 'pebbles']
     */
    function dropWhile(array, predicate, thisArg) {
      return (array && array.length)
        ? baseWhile(array, getCallback(predicate, thisArg, 3), true)
        : [];
    }

    /**
     * Fills elements of `array` with `value` from `start` up to, but not
     * including, `end`.
     *
     * **Note:** This method mutates `array`.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to fill.
     * @param {*} value The value to fill `array` with.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [1, 2, 3];
     *
     * _.fill(array, 'a');
     * console.log(array);
     * // => ['a', 'a', 'a']
     *
     * _.fill(Array(3), 2);
     * // => [2, 2, 2]
     *
     * _.fill([4, 6, 8], '*', 1, 2);
     * // => [4, '*', 8]
     */
    function fill(array, value, start, end) {
      var length = array ? array.length : 0;
      if (!length) {
        return [];
      }
      if (start && typeof start != 'number' && isIterateeCall(array, value, start)) {
        start = 0;
        end = length;
      }
      return baseFill(array, value, start, end);
    }

    /**
     * This method is like `_.find` except that it returns the index of the first
     * element `predicate` returns truthy for instead of the element itself.
     *
     * If a property name is provided for `predicate` the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If a value is also provided for `thisArg` the created `_.matchesProperty`
     * style callback returns `true` for elements that have a matching property
     * value, else `false`.
     *
     * If an object is provided for `predicate` the created `_.matches` style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to search.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked
     *  per iteration.
     * @param {*} [thisArg] The `this` binding of `predicate`.
     * @returns {number} Returns the index of the found element, else `-1`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': false },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': true }
     * ];
     *
     * _.findIndex(users, function(chr) {
     *   return chr.user == 'barney';
     * });
     * // => 0
     *
     * // using the `_.matches` callback shorthand
     * _.findIndex(users, { 'user': 'fred', 'active': false });
     * // => 1
     *
     * // using the `_.matchesProperty` callback shorthand
     * _.findIndex(users, 'active', false);
     * // => 0
     *
     * // using the `_.property` callback shorthand
     * _.findIndex(users, 'active');
     * // => 2
     */
    var findIndex = createFindIndex();

    /**
     * This method is like `_.findIndex` except that it iterates over elements
     * of `collection` from right to left.
     *
     * If a property name is provided for `predicate` the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If a value is also provided for `thisArg` the created `_.matchesProperty`
     * style callback returns `true` for elements that have a matching property
     * value, else `false`.
     *
     * If an object is provided for `predicate` the created `_.matches` style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to search.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked
     *  per iteration.
     * @param {*} [thisArg] The `this` binding of `predicate`.
     * @returns {number} Returns the index of the found element, else `-1`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': true },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': false }
     * ];
     *
     * _.findLastIndex(users, function(chr) {
     *   return chr.user == 'pebbles';
     * });
     * // => 2
     *
     * // using the `_.matches` callback shorthand
     * _.findLastIndex(users, { 'user': 'barney', 'active': true });
     * // => 0
     *
     * // using the `_.matchesProperty` callback shorthand
     * _.findLastIndex(users, 'active', false);
     * // => 2
     *
     * // using the `_.property` callback shorthand
     * _.findLastIndex(users, 'active');
     * // => 0
     */
    var findLastIndex = createFindIndex(true);

    /**
     * Gets the first element of `array`.
     *
     * @static
     * @memberOf _
     * @alias head
     * @category Array
     * @param {Array} array The array to query.
     * @returns {*} Returns the first element of `array`.
     * @example
     *
     * _.first([1, 2, 3]);
     * // => 1
     *
     * _.first([]);
     * // => undefined
     */
    function first(array) {
      return array ? array[0] : undefined;
    }

    /**
     * Flattens a nested array. If `isDeep` is `true` the array is recursively
     * flattened, otherwise it is only flattened a single level.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to flatten.
     * @param {boolean} [isDeep] Specify a deep flatten.
     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * _.flatten([1, [2, 3, [4]]]);
     * // => [1, 2, 3, [4]]
     *
     * // using `isDeep`
     * _.flatten([1, [2, 3, [4]]], true);
     * // => [1, 2, 3, 4]
     */
    function flatten(array, isDeep, guard) {
      var length = array ? array.length : 0;
      if (guard && isIterateeCall(array, isDeep, guard)) {
        isDeep = false;
      }
      return length ? baseFlatten(array, isDeep) : [];
    }

    /**
     * Recursively flattens a nested array.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to recursively flatten.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * _.flattenDeep([1, [2, 3, [4]]]);
     * // => [1, 2, 3, 4]
     */
    function flattenDeep(array) {
      var length = array ? array.length : 0;
      return length ? baseFlatten(array, true) : [];
    }

    /**
     * Gets the index at which the first occurrence of `value` is found in `array`
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
     * for equality comparisons. If `fromIndex` is negative, it is used as the offset
     * from the end of `array`. If `array` is sorted providing `true` for `fromIndex`
     * performs a faster binary search.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to search.
     * @param {*} value The value to search for.
     * @param {boolean|number} [fromIndex=0] The index to search from or `true`
     *  to perform a binary search on a sorted array.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.indexOf([1, 2, 1, 2], 2);
     * // => 1
     *
     * // using `fromIndex`
     * _.indexOf([1, 2, 1, 2], 2, 2);
     * // => 3
     *
     * // performing a binary search
     * _.indexOf([1, 1, 2, 2], 2, true);
     * // => 2
     */
    function indexOf(array, value, fromIndex) {
      var length = array ? array.length : 0;
      if (!length) {
        return -1;
      }
      if (typeof fromIndex == 'number') {
        fromIndex = fromIndex < 0 ? nativeMax(length + fromIndex, 0) : fromIndex;
      } else if (fromIndex) {
        var index = binaryIndex(array, value);
        if (index < length &&
            (value === value ? (value === array[index]) : (array[index] !== array[index]))) {
          return index;
        }
        return -1;
      }
      return baseIndexOf(array, value, fromIndex || 0);
    }

    /**
     * Gets all but the last element of `array`.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to query.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.initial([1, 2, 3]);
     * // => [1, 2]
     */
    function initial(array) {
      return dropRight(array, 1);
    }

    /**
     * Creates an array of unique values that are included in all of the provided
     * arrays using [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @returns {Array} Returns the new array of shared values.
     * @example
     * _.intersection([1, 2], [4, 2], [2, 1]);
     * // => [2]
     */
    var intersection = restParam(function(arrays) {
      var othLength = arrays.length,
          othIndex = othLength,
          caches = Array(length),
          indexOf = getIndexOf(),
          isCommon = indexOf == baseIndexOf,
          result = [];

      while (othIndex--) {
        var value = arrays[othIndex] = isArrayLike(value = arrays[othIndex]) ? value : [];
        caches[othIndex] = (isCommon && value.length >= 120) ? createCache(othIndex && value) : null;
      }
      var array = arrays[0],
          index = -1,
          length = array ? array.length : 0,
          seen = caches[0];

      outer:
      while (++index < length) {
        value = array[index];
        if ((seen ? cacheIndexOf(seen, value) : indexOf(result, value, 0)) < 0) {
          var othIndex = othLength;
          while (--othIndex) {
            var cache = caches[othIndex];
            if ((cache ? cacheIndexOf(cache, value) : indexOf(arrays[othIndex], value, 0)) < 0) {
              continue outer;
            }
          }
          if (seen) {
            seen.push(value);
          }
          result.push(value);
        }
      }
      return result;
    });

    /**
     * Gets the last element of `array`.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to query.
     * @returns {*} Returns the last element of `array`.
     * @example
     *
     * _.last([1, 2, 3]);
     * // => 3
     */
    function last(array) {
      var length = array ? array.length : 0;
      return length ? array[length - 1] : undefined;
    }

    /**
     * This method is like `_.indexOf` except that it iterates over elements of
     * `array` from right to left.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to search.
     * @param {*} value The value to search for.
     * @param {boolean|number} [fromIndex=array.length-1] The index to search from
     *  or `true` to perform a binary search on a sorted array.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.lastIndexOf([1, 2, 1, 2], 2);
     * // => 3
     *
     * // using `fromIndex`
     * _.lastIndexOf([1, 2, 1, 2], 2, 2);
     * // => 1
     *
     * // performing a binary search
     * _.lastIndexOf([1, 1, 2, 2], 2, true);
     * // => 3
     */
    function lastIndexOf(array, value, fromIndex) {
      var length = array ? array.length : 0;
      if (!length) {
        return -1;
      }
      var index = length;
      if (typeof fromIndex == 'number') {
        index = (fromIndex < 0 ? nativeMax(length + fromIndex, 0) : nativeMin(fromIndex || 0, length - 1)) + 1;
      } else if (fromIndex) {
        index = binaryIndex(array, value, true) - 1;
        var other = array[index];
        if (value === value ? (value === other) : (other !== other)) {
          return index;
        }
        return -1;
      }
      if (value !== value) {
        return indexOfNaN(array, index, true);
      }
      while (index--) {
        if (array[index] === value) {
          return index;
        }
      }
      return -1;
    }

    /**
     * Removes all provided values from `array` using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * **Note:** Unlike `_.without`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to modify.
     * @param {...*} [values] The values to remove.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [1, 2, 3, 1, 2, 3];
     *
     * _.pull(array, 2, 3);
     * console.log(array);
     * // => [1, 1]
     */
    function pull() {
      var args = arguments,
          array = args[0];

      if (!(array && array.length)) {
        return array;
      }
      var index = 0,
          indexOf = getIndexOf(),
          length = args.length;

      while (++index < length) {
        var fromIndex = 0,
            value = args[index];

        while ((fromIndex = indexOf(array, value, fromIndex)) > -1) {
          splice.call(array, fromIndex, 1);
        }
      }
      return array;
    }

    /**
     * Removes elements from `array` corresponding to the given indexes and returns
     * an array of the removed elements. Indexes may be specified as an array of
     * indexes or as individual arguments.
     *
     * **Note:** Unlike `_.at`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to modify.
     * @param {...(number|number[])} [indexes] The indexes of elements to remove,
     *  specified as individual indexes or arrays of indexes.
     * @returns {Array} Returns the new array of removed elements.
     * @example
     *
     * var array = [5, 10, 15, 20];
     * var evens = _.pullAt(array, 1, 3);
     *
     * console.log(array);
     * // => [5, 15]
     *
     * console.log(evens);
     * // => [10, 20]
     */
    var pullAt = restParam(function(array, indexes) {
      indexes = baseFlatten(indexes);

      var result = baseAt(array, indexes);
      basePullAt(array, indexes.sort(baseCompareAscending));
      return result;
    });

    /**
     * Removes all elements from `array` that `predicate` returns truthy for
     * and returns an array of the removed elements. The predicate is bound to
     * `thisArg` and invoked with three arguments: (value, index, array).
     *
     * If a property name is provided for `predicate` the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If a value is also provided for `thisArg` the created `_.matchesProperty`
     * style callback returns `true` for elements that have a matching property
     * value, else `false`.
     *
     * If an object is provided for `predicate` the created `_.matches` style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * **Note:** Unlike `_.filter`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked
     *  per iteration.
     * @param {*} [thisArg] The `this` binding of `predicate`.
     * @returns {Array} Returns the new array of removed elements.
     * @example
     *
     * var array = [1, 2, 3, 4];
     * var evens = _.remove(array, function(n) {
     *   return n % 2 == 0;
     * });
     *
     * console.log(array);
     * // => [1, 3]
     *
     * console.log(evens);
     * // => [2, 4]
     */
    function remove(array, predicate, thisArg) {
      var result = [];
      if (!(array && array.length)) {
        return result;
      }
      var index = -1,
          indexes = [],
          length = array.length;

      predicate = getCallback(predicate, thisArg, 3);
      while (++index < length) {
        var value = array[index];
        if (predicate(value, index, array)) {
          result.push(value);
          indexes.push(index);
        }
      }
      basePullAt(array, indexes);
      return result;
    }

    /**
     * Gets all but the first element of `array`.
     *
     * @static
     * @memberOf _
     * @alias tail
     * @category Array
     * @param {Array} array The array to query.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.rest([1, 2, 3]);
     * // => [2, 3]
     */
    function rest(array) {
      return drop(array, 1);
    }

    /**
     * Creates a slice of `array` from `start` up to, but not including, `end`.
     *
     * **Note:** This method is used instead of `Array#slice` to support node
     * lists in IE < 9 and to ensure dense arrays are returned.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to slice.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns the slice of `array`.
     */
    function slice(array, start, end) {
      var length = array ? array.length : 0;
      if (!length) {
        return [];
      }
      if (end && typeof end != 'number' && isIterateeCall(array, start, end)) {
        start = 0;
        end = length;
      }
      return baseSlice(array, start, end);
    }

    /**
     * Uses a binary search to determine the lowest index at which `value` should
     * be inserted into `array` in order to maintain its sort order. If an iteratee
     * function is provided it is invoked for `value` and each element of `array`
     * to compute their sort ranking. The iteratee is bound to `thisArg` and
     * invoked with one argument; (value).
     *
     * If a property name is provided for `iteratee` the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If a value is also provided for `thisArg` the created `_.matchesProperty`
     * style callback returns `true` for elements that have a matching property
     * value, else `false`.
     *
     * If an object is provided for `iteratee` the created `_.matches` style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {Function|Object|string} [iteratee=_.identity] The function invoked
     *  per iteration.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * _.sortedIndex([30, 50], 40);
     * // => 1
     *
     * _.sortedIndex([4, 4, 5, 5], 5);
     * // => 2
     *
     * var dict = { 'data': { 'thirty': 30, 'forty': 40, 'fifty': 50 } };
     *
     * // using an iteratee function
     * _.sortedIndex(['thirty', 'fifty'], 'forty', function(word) {
     *   return this.data[word];
     * }, dict);
     * // => 1
     *
     * // using the `_.property` callback shorthand
     * _.sortedIndex([{ 'x': 30 }, { 'x': 50 }], { 'x': 40 }, 'x');
     * // => 1
     */
    var sortedIndex = createSortedIndex();

    /**
     * This method is like `_.sortedIndex` except that it returns the highest
     * index at which `value` should be inserted into `array` in order to
     * maintain its sort order.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {Function|Object|string} [iteratee=_.identity] The function invoked
     *  per iteration.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * _.sortedLastIndex([4, 4, 5, 5], 5);
     * // => 4
     */
    var sortedLastIndex = createSortedIndex(true);

    /**
     * Creates a slice of `array` with `n` elements taken from the beginning.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to take.
     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.take([1, 2, 3]);
     * // => [1]
     *
     * _.take([1, 2, 3], 2);
     * // => [1, 2]
     *
     * _.take([1, 2, 3], 5);
     * // => [1, 2, 3]
     *
     * _.take([1, 2, 3], 0);
     * // => []
     */
    function take(array, n, guard) {
      var length = array ? array.length : 0;
      if (!length) {
        return [];
      }
      if (guard ? isIterateeCall(array, n, guard) : n == null) {
        n = 1;
      }
      return baseSlice(array, 0, n < 0 ? 0 : n);
    }

    /**
     * Creates a slice of `array` with `n` elements taken from the end.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to take.
     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.takeRight([1, 2, 3]);
     * // => [3]
     *
     * _.takeRight([1, 2, 3], 2);
     * // => [2, 3]
     *
     * _.takeRight([1, 2, 3], 5);
     * // => [1, 2, 3]
     *
     * _.takeRight([1, 2, 3], 0);
     * // => []
     */
    function takeRight(array, n, guard) {
      var length = array ? array.length : 0;
      if (!length) {
        return [];
      }
      if (guard ? isIterateeCall(array, n, guard) : n == null) {
        n = 1;
      }
      n = length - (+n || 0);
      return baseSlice(array, n < 0 ? 0 : n);
    }

    /**
     * Creates a slice of `array` with elements taken from the end. Elements are
     * taken until `predicate` returns falsey. The predicate is bound to `thisArg`
     * and invoked with three arguments: (value, index, array).
     *
     * If a property name is provided for `predicate` the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If a value is also provided for `thisArg` the created `_.matchesProperty`
     * style callback returns `true` for elements that have a matching property
     * value, else `false`.
     *
     * If an object is provided for `predicate` the created `_.matches` style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked
     *  per iteration.
     * @param {*} [thisArg] The `this` binding of `predicate`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.takeRightWhile([1, 2, 3], function(n) {
     *   return n > 1;
     * });
     * // => [2, 3]
     *
     * var users = [
     *   { 'user': 'barney',  'active': true },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': false }
     * ];
     *
     * // using the `_.matches` callback shorthand
     * _.pluck(_.takeRightWhile(users, { 'user': 'pebbles', 'active': false }), 'user');
     * // => ['pebbles']
     *
     * // using the `_.matchesProperty` callback shorthand
     * _.pluck(_.takeRightWhile(users, 'active', false), 'user');
     * // => ['fred', 'pebbles']
     *
     * // using the `_.property` callback shorthand
     * _.pluck(_.takeRightWhile(users, 'active'), 'user');
     * // => []
     */
    function takeRightWhile(array, predicate, thisArg) {
      return (array && array.length)
        ? baseWhile(array, getCallback(predicate, thisArg, 3), false, true)
        : [];
    }

    /**
     * Creates a slice of `array` with elements taken from the beginning. Elements
     * are taken until `predicate` returns falsey. The predicate is bound to
     * `thisArg` and invoked with three arguments: (value, index, array).
     *
     * If a property name is provided for `predicate` the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If a value is also provided for `thisArg` the created `_.matchesProperty`
     * style callback returns `true` for elements that have a matching property
     * value, else `false`.
     *
     * If an object is provided for `predicate` the created `_.matches` style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked
     *  per iteration.
     * @param {*} [thisArg] The `this` binding of `predicate`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.takeWhile([1, 2, 3], function(n) {
     *   return n < 3;
     * });
     * // => [1, 2]
     *
     * var users = [
     *   { 'user': 'barney',  'active': false },
     *   { 'user': 'fred',    'active': false},
     *   { 'user': 'pebbles', 'active': true }
     * ];
     *
     * // using the `_.matches` callback shorthand
     * _.pluck(_.takeWhile(users, { 'user': 'barney', 'active': false }), 'user');
     * // => ['barney']
     *
     * // using the `_.matchesProperty` callback shorthand
     * _.pluck(_.takeWhile(users, 'active', false), 'user');
     * // => ['barney', 'fred']
     *
     * // using the `_.property` callback shorthand
     * _.pluck(_.takeWhile(users, 'active'), 'user');
     * // => []
     */
    function takeWhile(array, predicate, thisArg) {
      return (array && array.length)
        ? baseWhile(array, getCallback(predicate, thisArg, 3))
        : [];
    }

    /**
     * Creates an array of unique values, in order, from all of the provided arrays
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @returns {Array} Returns the new array of combined values.
     * @example
     *
     * _.union([1, 2], [4, 2], [2, 1]);
     * // => [1, 2, 4]
     */
    var union = restParam(function(arrays) {
      return baseUniq(baseFlatten(arrays, false, true));
    });

    /**
     * Creates a duplicate-free version of an array, using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
     * for equality comparisons, in which only the first occurence of each element
     * is kept. Providing `true` for `isSorted` performs a faster search algorithm
     * for sorted arrays. If an iteratee function is provided it is invoked for
     * each element in the array to generate the criterion by which uniqueness
     * is computed. The `iteratee` is bound to `thisArg` and invoked with three
     * arguments: (value, index, array).
     *
     * If a property name is provided for `iteratee` the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If a value is also provided for `thisArg` the created `_.matchesProperty`
     * style callback returns `true` for elements that have a matching property
     * value, else `false`.
     *
     * If an object is provided for `iteratee` the created `_.matches` style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @alias unique
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {boolean} [isSorted] Specify the array is sorted.
     * @param {Function|Object|string} [iteratee] The function invoked per iteration.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {Array} Returns the new duplicate-value-free array.
     * @example
     *
     * _.uniq([2, 1, 2]);
     * // => [2, 1]
     *
     * // using `isSorted`
     * _.uniq([1, 1, 2], true);
     * // => [1, 2]
     *
     * // using an iteratee function
     * _.uniq([1, 2.5, 1.5, 2], function(n) {
     *   return this.floor(n);
     * }, Math);
     * // => [1, 2.5]
     *
     * // using the `_.property` callback shorthand
     * _.uniq([{ 'x': 1 }, { 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 1 }, { 'x': 2 }]
     */
    function uniq(array, isSorted, iteratee, thisArg) {
      var length = array ? array.length : 0;
      if (!length) {
        return [];
      }
      if (isSorted != null && typeof isSorted != 'boolean') {
        thisArg = iteratee;
        iteratee = isIterateeCall(array, isSorted, thisArg) ? undefined : isSorted;
        isSorted = false;
      }
      var callback = getCallback();
      if (!(iteratee == null && callback === baseCallback)) {
        iteratee = callback(iteratee, thisArg, 3);
      }
      return (isSorted && getIndexOf() == baseIndexOf)
        ? sortedUniq(array, iteratee)
        : baseUniq(array, iteratee);
    }

    /**
     * This method is like `_.zip` except that it accepts an array of grouped
     * elements and creates an array regrouping the elements to their pre-zip
     * configuration.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array of grouped elements to process.
     * @returns {Array} Returns the new array of regrouped elements.
     * @example
     *
     * var zipped = _.zip(['fred', 'barney'], [30, 40], [true, false]);
     * // => [['fred', 30, true], ['barney', 40, false]]
     *
     * _.unzip(zipped);
     * // => [['fred', 'barney'], [30, 40], [true, false]]
     */
    function unzip(array) {
      if (!(array && array.length)) {
        return [];
      }
      var index = -1,
          length = 0;

      array = arrayFilter(array, function(group) {
        if (isArrayLike(group)) {
          length = nativeMax(group.length, length);
          return true;
        }
      });
      var result = Array(length);
      while (++index < length) {
        result[index] = arrayMap(array, baseProperty(index));
      }
      return result;
    }

    /**
     * This method is like `_.unzip` except that it accepts an iteratee to specify
     * how regrouped values should be combined. The `iteratee` is bound to `thisArg`
     * and invoked with four arguments: (accumulator, value, index, group).
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array of grouped elements to process.
     * @param {Function} [iteratee] The function to combine regrouped values.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {Array} Returns the new array of regrouped elements.
     * @example
     *
     * var zipped = _.zip([1, 2], [10, 20], [100, 200]);
     * // => [[1, 10, 100], [2, 20, 200]]
     *
     * _.unzipWith(zipped, _.add);
     * // => [3, 30, 300]
     */
    function unzipWith(array, iteratee, thisArg) {
      var length = array ? array.length : 0;
      if (!length) {
        return [];
      }
      var result = unzip(array);
      if (iteratee == null) {
        return result;
      }
      iteratee = bindCallback(iteratee, thisArg, 4);
      return arrayMap(result, function(group) {
        return arrayReduce(group, iteratee, undefined, true);
      });
    }

    /**
     * Creates an array excluding all provided values using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to filter.
     * @param {...*} [values] The values to exclude.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * _.without([1, 2, 1, 3], 1, 2);
     * // => [3]
     */
    var without = restParam(function(array, values) {
      return isArrayLike(array)
        ? baseDifference(array, values)
        : [];
    });

    /**
     * Creates an array of unique values that is the [symmetric difference](https://en.wikipedia.org/wiki/Symmetric_difference)
     * of the provided arrays.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @returns {Array} Returns the new array of values.
     * @example
     *
     * _.xor([1, 2], [4, 2]);
     * // => [1, 4]
     */
    function xor() {
      var index = -1,
          length = arguments.length;

      while (++index < length) {
        var array = arguments[index];
        if (isArrayLike(array)) {
          var result = result
            ? arrayPush(baseDifference(result, array), baseDifference(array, result))
            : array;
        }
      }
      return result ? baseUniq(result) : [];
    }

    /**
     * Creates an array of grouped elements, the first of which contains the first
     * elements of the given arrays, the second of which contains the second elements
     * of the given arrays, and so on.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {...Array} [arrays] The arrays to process.
     * @returns {Array} Returns the new array of grouped elements.
     * @example
     *
     * _.zip(['fred', 'barney'], [30, 40], [true, false]);
     * // => [['fred', 30, true], ['barney', 40, false]]
     */
    var zip = restParam(unzip);

    /**
     * The inverse of `_.pairs`; this method returns an object composed from arrays
     * of property names and values. Provide either a single two dimensional array,
     * e.g. `[[key1, value1], [key2, value2]]` or two arrays, one of property names
     * and one of corresponding values.
     *
     * @static
     * @memberOf _
     * @alias object
     * @category Array
     * @param {Array} props The property names.
     * @param {Array} [values=[]] The property values.
     * @returns {Object} Returns the new object.
     * @example
     *
     * _.zipObject([['fred', 30], ['barney', 40]]);
     * // => { 'fred': 30, 'barney': 40 }
     *
     * _.zipObject(['fred', 'barney'], [30, 40]);
     * // => { 'fred': 30, 'barney': 40 }
     */
    function zipObject(props, values) {
      var index = -1,
          length = props ? props.length : 0,
          result = {};

      if (length && !values && !isArray(props[0])) {
        values = [];
      }
      while (++index < length) {
        var key = props[index];
        if (values) {
          result[key] = values[index];
        } else if (key) {
          result[key[0]] = key[1];
        }
      }
      return result;
    }

    /**
     * This method is like `_.zip` except that it accepts an iteratee to specify
     * how grouped values should be combined. The `iteratee` is bound to `thisArg`
     * and invoked with four arguments: (accumulator, value, index, group).
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {...Array} [arrays] The arrays to process.
     * @param {Function} [iteratee] The function to combine grouped values.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {Array} Returns the new array of grouped elements.
     * @example
     *
     * _.zipWith([1, 2], [10, 20], [100, 200], _.add);
     * // => [111, 222]
     */
    var zipWith = restParam(function(arrays) {
      var length = arrays.length,
          iteratee = length > 2 ? arrays[length - 2] : undefined,
          thisArg = length > 1 ? arrays[length - 1] : undefined;

      if (length > 2 && typeof iteratee == 'function') {
        length -= 2;
      } else {
        iteratee = (length > 1 && typeof thisArg == 'function') ? (--length, thisArg) : undefined;
        thisArg = undefined;
      }
      arrays.length = length;
      return unzipWith(arrays, iteratee, thisArg);
    });

    /*------------------------------------------------------------------------*/

    /**
     * Creates a `lodash` object that wraps `value` with explicit method
     * chaining enabled.
     *
     * @static
     * @memberOf _
     * @category Chain
     * @param {*} value The value to wrap.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'age': 36 },
     *   { 'user': 'fred',    'age': 40 },
     *   { 'user': 'pebbles', 'age': 1 }
     * ];
     *
     * var youngest = _.chain(users)
     *   .sortBy('age')
     *   .map(function(chr) {
     *     return chr.user + ' is ' + chr.age;
     *   })
     *   .first()
     *   .value();
     * // => 'pebbles is 1'
     */
    function chain(value) {
      var result = lodash(value);
      result.__chain__ = true;
      return result;
    }

    /**
     * This method invokes `interceptor` and returns `value`. The interceptor is
     * bound to `thisArg` and invoked with one argument; (value). The purpose of
     * this method is to "tap into" a method chain in order to perform operations
     * on intermediate results within the chain.
     *
     * @static
     * @memberOf _
     * @category Chain
     * @param {*} value The value to provide to `interceptor`.
     * @param {Function} interceptor The function to invoke.
     * @param {*} [thisArg] The `this` binding of `interceptor`.
     * @returns {*} Returns `value`.
     * @example
     *
     * _([1, 2, 3])
     *  .tap(function(array) {
     *    array.pop();
     *  })
     *  .reverse()
     *  .value();
     * // => [2, 1]
     */
    function tap(value, interceptor, thisArg) {
      interceptor.call(thisArg, value);
      return value;
    }

    /**
     * This method is like `_.tap` except that it returns the result of `interceptor`.
     *
     * @static
     * @memberOf _
     * @category Chain
     * @param {*} value The value to provide to `interceptor`.
     * @param {Function} interceptor The function to invoke.
     * @param {*} [thisArg] The `this` binding of `interceptor`.
     * @returns {*} Returns the result of `interceptor`.
     * @example
     *
     * _('  abc  ')
     *  .chain()
     *  .trim()
     *  .thru(function(value) {
     *    return [value];
     *  })
     *  .value();
     * // => ['abc']
     */
    function thru(value, interceptor, thisArg) {
      return interceptor.call(thisArg, value);
    }

    /**
     * Enables explicit method chaining on the wrapper object.
     *
     * @name chain
     * @memberOf _
     * @category Chain
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36 },
     *   { 'user': 'fred',   'age': 40 }
     * ];
     *
     * // without explicit chaining
     * _(users).first();
     * // => { 'user': 'barney', 'age': 36 }
     *
     * // with explicit chaining
     * _(users).chain()
     *   .first()
     *   .pick('user')
     *   .value();
     * // => { 'user': 'barney' }
     */
    function wrapperChain() {
      return chain(this);
    }

    /**
     * Executes the chained sequence and returns the wrapped result.
     *
     * @name commit
     * @memberOf _
     * @category Chain
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var array = [1, 2];
     * var wrapped = _(array).push(3);
     *
     * console.log(array);
     * // => [1, 2]
     *
     * wrapped = wrapped.commit();
     * console.log(array);
     * // => [1, 2, 3]
     *
     * wrapped.last();
     * // => 3
     *
     * console.log(array);
     * // => [1, 2, 3]
     */
    function wrapperCommit() {
      return new LodashWrapper(this.value(), this.__chain__);
    }

    /**
     * Creates a new array joining a wrapped array with any additional arrays
     * and/or values.
     *
     * @name concat
     * @memberOf _
     * @category Chain
     * @param {...*} [values] The values to concatenate.
     * @returns {Array} Returns the new concatenated array.
     * @example
     *
     * var array = [1];
     * var wrapped = _(array).concat(2, [3], [[4]]);
     *
     * console.log(wrapped.value());
     * // => [1, 2, 3, [4]]
     *
     * console.log(array);
     * // => [1]
     */
    var wrapperConcat = restParam(function(values) {
      values = baseFlatten(values);
      return this.thru(function(array) {
        return arrayConcat(isArray(array) ? array : [toObject(array)], values);
      });
    });

    /**
     * Creates a clone of the chained sequence planting `value` as the wrapped value.
     *
     * @name plant
     * @memberOf _
     * @category Chain
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var array = [1, 2];
     * var wrapped = _(array).map(function(value) {
     *   return Math.pow(value, 2);
     * });
     *
     * var other = [3, 4];
     * var otherWrapped = wrapped.plant(other);
     *
     * otherWrapped.value();
     * // => [9, 16]
     *
     * wrapped.value();
     * // => [1, 4]
     */
    function wrapperPlant(value) {
      var result,
          parent = this;

      while (parent instanceof baseLodash) {
        var clone = wrapperClone(parent);
        if (result) {
          previous.__wrapped__ = clone;
        } else {
          result = clone;
        }
        var previous = clone;
        parent = parent.__wrapped__;
      }
      previous.__wrapped__ = value;
      return result;
    }

    /**
     * Reverses the wrapped array so the first element becomes the last, the
     * second element becomes the second to last, and so on.
     *
     * **Note:** This method mutates the wrapped array.
     *
     * @name reverse
     * @memberOf _
     * @category Chain
     * @returns {Object} Returns the new reversed `lodash` wrapper instance.
     * @example
     *
     * var array = [1, 2, 3];
     *
     * _(array).reverse().value()
     * // => [3, 2, 1]
     *
     * console.log(array);
     * // => [3, 2, 1]
     */
    function wrapperReverse() {
      var value = this.__wrapped__;

      var interceptor = function(value) {
        return (wrapped && wrapped.__dir__ < 0) ? value : value.reverse();
      };
      if (value instanceof LazyWrapper) {
        var wrapped = value;
        if (this.__actions__.length) {
          wrapped = new LazyWrapper(this);
        }
        wrapped = wrapped.reverse();
        wrapped.__actions__.push({ 'func': thru, 'args': [interceptor], 'thisArg': undefined });
        return new LodashWrapper(wrapped, this.__chain__);
      }
      return this.thru(interceptor);
    }

    /**
     * Produces the result of coercing the unwrapped value to a string.
     *
     * @name toString
     * @memberOf _
     * @category Chain
     * @returns {string} Returns the coerced string value.
     * @example
     *
     * _([1, 2, 3]).toString();
     * // => '1,2,3'
     */
    function wrapperToString() {
      return (this.value() + '');
    }

    /**
     * Executes the chained sequence to extract the unwrapped value.
     *
     * @name value
     * @memberOf _
     * @alias run, toJSON, valueOf
     * @category Chain
     * @returns {*} Returns the resolved unwrapped value.
     * @example
     *
     * _([1, 2, 3]).value();
     * // => [1, 2, 3]
     */
    function wrapperValue() {
      return baseWrapperValue(this.__wrapped__, this.__actions__);
    }

    /*------------------------------------------------------------------------*/

    /**
     * Creates an array of elements corresponding to the given keys, or indexes,
     * of `collection`. Keys may be specified as individual arguments or as arrays
     * of keys.
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {...(number|number[]|string|string[])} [props] The property names
     *  or indexes of elements to pick, specified individually or in arrays.
     * @returns {Array} Returns the new array of picked elements.
     * @example
     *
     * _.at(['a', 'b', 'c'], [0, 2]);
     * // => ['a', 'c']
     *
     * _.at(['barney', 'fred', 'pebbles'], 0, 2);
     * // => ['barney', 'pebbles']
     */
    var at = restParam(function(collection, props) {
      return baseAt(collection, baseFlatten(props));
    });

    /**
     * Creates an object composed of keys generated from the results of running
     * each element of `collection` through `iteratee`. The corresponding value
     * of each key is the number of times the key was returned by `iteratee`.
     * The `iteratee` is bound to `thisArg` and invoked with three arguments:
     * (value, index|key, collection).
     *
     * If a property name is provided for `iteratee` the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If a value is also provided for `thisArg` the created `_.matchesProperty`
     * style callback returns `true` for elements that have a matching property
     * value, else `false`.
     *
     * If an object is provided for `iteratee` the created `_.matches` style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|Object|string} [iteratee=_.identity] The function invoked
     *  per iteration.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {Object} Returns the composed aggregate object.
     * @example
     *
     * _.countBy([4.3, 6.1, 6.4], function(n) {
     *   return Math.floor(n);
     * });
     * // => { '4': 1, '6': 2 }
     *
     * _.countBy([4.3, 6.1, 6.4], function(n) {
     *   return this.floor(n);
     * }, Math);
     * // => { '4': 1, '6': 2 }
     *
     * _.countBy(['one', 'two', 'three'], 'length');
     * // => { '3': 2, '5': 1 }
     */
    var countBy = createAggregator(function(result, value, key) {
      hasOwnProperty.call(result, key) ? ++result[key] : (result[key] = 1);
    });

    /**
     * Checks if `predicate` returns truthy for **all** elements of `collection`.
     * The predicate is bound to `thisArg` and invoked with three arguments:
     * (value, index|key, collection).
     *
     * If a property name is provided for `predicate` the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If a value is also provided for `thisArg` the created `_.matchesProperty`
     * style callback returns `true` for elements that have a matching property
     * value, else `false`.
     *
     * If an object is provided for `predicate` the created `_.matches` style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @alias all
     * @category Collection
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked
     *  per iteration.
     * @param {*} [thisArg] The `this` binding of `predicate`.
     * @returns {boolean} Returns `true` if all elements pass the predicate check,
     *  else `false`.
     * @example
     *
     * _.every([true, 1, null, 'yes'], Boolean);
     * // => false
     *
     * var users = [
     *   { 'user': 'barney', 'active': false },
     *   { 'user': 'fred',   'active': false }
     * ];
     *
     * // using the `_.matches` callback shorthand
     * _.every(users, { 'user': 'barney', 'active': false });
     * // => false
     *
     * // using the `_.matchesProperty` callback shorthand
     * _.every(users, 'active', false);
     * // => true
     *
     * // using the `_.property` callback shorthand
     * _.every(users, 'active');
     * // => false
     */
    function every(collection, predicate, thisArg) {
      var func = isArray(collection) ? arrayEvery : baseEvery;
      if (thisArg && isIterateeCall(collection, predicate, thisArg)) {
        predicate = undefined;
      }
      if (typeof predicate != 'function' || thisArg !== undefined) {
        predicate = getCallback(predicate, thisArg, 3);
      }
      return func(collection, predicate);
    }

    /**
     * Iterates over elements of `collection`, returning an array of all elements
     * `predicate` returns truthy for. The predicate is bound to `thisArg` and
     * invoked with three arguments: (value, index|key, collection).
     *
     * If a property name is provided for `predicate` the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If a value is also provided for `thisArg` the created `_.matchesProperty`
     * style callback returns `true` for elements that have a matching property
     * value, else `false`.
     *
     * If an object is provided for `predicate` the created `_.matches` style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @alias select
     * @category Collection
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked
     *  per iteration.
     * @param {*} [thisArg] The `this` binding of `predicate`.
     * @returns {Array} Returns the new filtered array.
     * @example
     *
     * _.filter([4, 5, 6], function(n) {
     *   return n % 2 == 0;
     * });
     * // => [4, 6]
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': true },
     *   { 'user': 'fred',   'age': 40, 'active': false }
     * ];
     *
     * // using the `_.matches` callback shorthand
     * _.pluck(_.filter(users, { 'age': 36, 'active': true }), 'user');
     * // => ['barney']
     *
     * // using the `_.matchesProperty` callback shorthand
     * _.pluck(_.filter(users, 'active', false), 'user');
     * // => ['fred']
     *
     * // using the `_.property` callback shorthand
     * _.pluck(_.filter(users, 'active'), 'user');
     * // => ['barney']
     */
    function filter(collection, predicate, thisArg) {
      var func = isArray(collection) ? arrayFilter : baseFilter;
      predicate = getCallback(predicate, thisArg, 3);
      return func(collection, predicate);
    }

    /**
     * Iterates over elements of `collection`, returning the first element
     * `predicate` returns truthy for. The predicate is bound to `thisArg` and
     * invoked with three arguments: (value, index|key, collection).
     *
     * If a property name is provided for `predicate` the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If a value is also provided for `thisArg` the created `_.matchesProperty`
     * style callback returns `true` for elements that have a matching property
     * value, else `false`.
     *
     * If an object is provided for `predicate` the created `_.matches` style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @alias detect
     * @category Collection
     * @param {Array|Object|string} collection The collection to search.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked
     *  per iteration.
     * @param {*} [thisArg] The `this` binding of `predicate`.
     * @returns {*} Returns the matched element, else `undefined`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'age': 36, 'active': true },
     *   { 'user': 'fred',    'age': 40, 'active': false },
     *   { 'user': 'pebbles', 'age': 1,  'active': true }
     * ];
     *
     * _.result(_.find(users, function(chr) {
     *   return chr.age < 40;
     * }), 'user');
     * // => 'barney'
     *
     * // using the `_.matches` callback shorthand
     * _.result(_.find(users, { 'age': 1, 'active': true }), 'user');
     * // => 'pebbles'
     *
     * // using the `_.matchesProperty` callback shorthand
     * _.result(_.find(users, 'active', false), 'user');
     * // => 'fred'
     *
     * // using the `_.property` callback shorthand
     * _.result(_.find(users, 'active'), 'user');
     * // => 'barney'
     */
    var find = createFind(baseEach);

    /**
     * This method is like `_.find` except that it iterates over elements of
     * `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object|string} collection The collection to search.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked
     *  per iteration.
     * @param {*} [thisArg] The `this` binding of `predicate`.
     * @returns {*} Returns the matched element, else `undefined`.
     * @example
     *
     * _.findLast([1, 2, 3, 4], function(n) {
     *   return n % 2 == 1;
     * });
     * // => 3
     */
    var findLast = createFind(baseEachRight, true);

    /**
     * Performs a deep comparison between each element in `collection` and the
     * source object, returning the first element that has equivalent property
     * values.
     *
     * **Note:** This method supports comparing arrays, booleans, `Date` objects,
     * numbers, `Object` objects, regexes, and strings. Objects are compared by
     * their own, not inherited, enumerable properties. For comparing a single
     * own or inherited property value see `_.matchesProperty`.
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object|string} collection The collection to search.
     * @param {Object} source The object of property values to match.
     * @returns {*} Returns the matched element, else `undefined`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': true },
     *   { 'user': 'fred',   'age': 40, 'active': false }
     * ];
     *
     * _.result(_.findWhere(users, { 'age': 36, 'active': true }), 'user');
     * // => 'barney'
     *
     * _.result(_.findWhere(users, { 'age': 40, 'active': false }), 'user');
     * // => 'fred'
     */
    function findWhere(collection, source) {
      return find(collection, baseMatches(source));
    }

    /**
     * Iterates over elements of `collection` invoking `iteratee` for each element.
     * The `iteratee` is bound to `thisArg` and invoked with three arguments:
     * (value, index|key, collection). Iteratee functions may exit iteration early
     * by explicitly returning `false`.
     *
     * **Note:** As with other "Collections" methods, objects with a "length" property
     * are iterated like arrays. To avoid this behavior `_.forIn` or `_.forOwn`
     * may be used for object iteration.
     *
     * @static
     * @memberOf _
     * @alias each
     * @category Collection
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {Array|Object|string} Returns `collection`.
     * @example
     *
     * _([1, 2]).forEach(function(n) {
     *   console.log(n);
     * }).value();
     * // => logs each value from left to right and returns the array
     *
     * _.forEach({ 'a': 1, 'b': 2 }, function(n, key) {
     *   console.log(n, key);
     * });
     * // => logs each value-key pair and returns the object (iteration order is not guaranteed)
     */
    var forEach = createForEach(arrayEach, baseEach);

    /**
     * This method is like `_.forEach` except that it iterates over elements of
     * `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @alias eachRight
     * @category Collection
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {Array|Object|string} Returns `collection`.
     * @example
     *
     * _([1, 2]).forEachRight(function(n) {
     *   console.log(n);
     * }).value();
     * // => logs each value from right to left and returns the array
     */
    var forEachRight = createForEach(arrayEachRight, baseEachRight);

    /**
     * Creates an object composed of keys generated from the results of running
     * each element of `collection` through `iteratee`. The corresponding value
     * of each key is an array of the elements responsible for generating the key.
     * The `iteratee` is bound to `thisArg` and invoked with three arguments:
     * (value, index|key, collection).
     *
     * If a property name is provided for `iteratee` the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If a value is also provided for `thisArg` the created `_.matchesProperty`
     * style callback returns `true` for elements that have a matching property
     * value, else `false`.
     *
     * If an object is provided for `iteratee` the created `_.matches` style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|Object|string} [iteratee=_.identity] The function invoked
     *  per iteration.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {Object} Returns the composed aggregate object.
     * @example
     *
     * _.groupBy([4.2, 6.1, 6.4], function(n) {
     *   return Math.floor(n);
     * });
     * // => { '4': [4.2], '6': [6.1, 6.4] }
     *
     * _.groupBy([4.2, 6.1, 6.4], function(n) {
     *   return this.floor(n);
     * }, Math);
     * // => { '4': [4.2], '6': [6.1, 6.4] }
     *
     * // using the `_.property` callback shorthand
     * _.groupBy(['one', 'two', 'three'], 'length');
     * // => { '3': ['one', 'two'], '5': ['three'] }
     */
    var groupBy = createAggregator(function(result, value, key) {
      if (hasOwnProperty.call(result, key)) {
        result[key].push(value);
      } else {
        result[key] = [value];
      }
    });

    /**
     * Checks if `value` is in `collection` using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
     * for equality comparisons. If `fromIndex` is negative, it is used as the offset
     * from the end of `collection`.
     *
     * @static
     * @memberOf _
     * @alias contains, include
     * @category Collection
     * @param {Array|Object|string} collection The collection to search.
     * @param {*} target The value to search for.
     * @param {number} [fromIndex=0] The index to search from.
     * @param- {Object} [guard] Enables use as a callback for functions like `_.reduce`.
     * @returns {boolean} Returns `true` if a matching element is found, else `false`.
     * @example
     *
     * _.includes([1, 2, 3], 1);
     * // => true
     *
     * _.includes([1, 2, 3], 1, 2);
     * // => false
     *
     * _.includes({ 'user': 'fred', 'age': 40 }, 'fred');
     * // => true
     *
     * _.includes('pebbles', 'eb');
     * // => true
     */
    function includes(collection, target, fromIndex, guard) {
      var length = collection ? getLength(collection) : 0;
      if (!isLength(length)) {
        collection = values(collection);
        length = collection.length;
      }
      if (typeof fromIndex != 'number' || (guard && isIterateeCall(target, fromIndex, guard))) {
        fromIndex = 0;
      } else {
        fromIndex = fromIndex < 0 ? nativeMax(length + fromIndex, 0) : (fromIndex || 0);
      }
      return (typeof collection == 'string' || !isArray(collection) && isString(collection))
        ? (fromIndex <= length && collection.indexOf(target, fromIndex) > -1)
        : (!!length && getIndexOf(collection, target, fromIndex) > -1);
    }

    /**
     * Creates an object composed of keys generated from the results of running
     * each element of `collection` through `iteratee`. The corresponding value
     * of each key is the last element responsible for generating the key. The
     * iteratee function is bound to `thisArg` and invoked with three arguments:
     * (value, index|key, collection).
     *
     * If a property name is provided for `iteratee` the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If a value is also provided for `thisArg` the created `_.matchesProperty`
     * style callback returns `true` for elements that have a matching property
     * value, else `false`.
     *
     * If an object is provided for `iteratee` the created `_.matches` style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|Object|string} [iteratee=_.identity] The function invoked
     *  per iteration.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {Object} Returns the composed aggregate object.
     * @example
     *
     * var keyData = [
     *   { 'dir': 'left', 'code': 97 },
     *   { 'dir': 'right', 'code': 100 }
     * ];
     *
     * _.indexBy(keyData, 'dir');
     * // => { 'left': { 'dir': 'left', 'code': 97 }, 'right': { 'dir': 'right', 'code': 100 } }
     *
     * _.indexBy(keyData, function(object) {
     *   return String.fromCharCode(object.code);
     * });
     * // => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }
     *
     * _.indexBy(keyData, function(object) {
     *   return this.fromCharCode(object.code);
     * }, String);
     * // => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }
     */
    var indexBy = createAggregator(function(result, value, key) {
      result[key] = value;
    });

    /**
     * Invokes the method at `path` of each element in `collection`, returning
     * an array of the results of each invoked method. Any additional arguments
     * are provided to each invoked method. If `methodName` is a function it is
     * invoked for, and `this` bound to, each element in `collection`.
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Array|Function|string} path The path of the method to invoke or
     *  the function invoked per iteration.
     * @param {...*} [args] The arguments to invoke the method with.
     * @returns {Array} Returns the array of results.
     * @example
     *
     * _.invoke([[5, 1, 7], [3, 2, 1]], 'sort');
     * // => [[1, 5, 7], [1, 2, 3]]
     *
     * _.invoke([123, 456], String.prototype.split, '');
     * // => [['1', '2', '3'], ['4', '5', '6']]
     */
    var invoke = restParam(function(collection, path, args) {
      var index = -1,
          isFunc = typeof path == 'function',
          isProp = isKey(path),
          result = isArrayLike(collection) ? Array(collection.length) : [];

      baseEach(collection, function(value) {
        var func = isFunc ? path : ((isProp && value != null) ? value[path] : undefined);
        result[++index] = func ? func.apply(value, args) : invokePath(value, path, args);
      });
      return result;
    });

    /**
     * Creates an array of values by running each element in `collection` through
     * `iteratee`. The `iteratee` is bound to `thisArg` and invoked with three
     * arguments: (value, index|key, collection).
     *
     * If a property name is provided for `iteratee` the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If a value is also provided for `thisArg` the created `_.matchesProperty`
     * style callback returns `true` for elements that have a matching property
     * value, else `false`.
     *
     * If an object is provided for `iteratee` the created `_.matches` style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * Many lodash methods are guarded to work as iteratees for methods like
     * `_.every`, `_.filter`, `_.map`, `_.mapValues`, `_.reject`, and `_.some`.
     *
     * The guarded methods are:
     * `ary`, `callback`, `chunk`, `clone`, `create`, `curry`, `curryRight`,
     * `drop`, `dropRight`, `every`, `fill`, `flatten`, `invert`, `max`, `min`,
     * `parseInt`, `slice`, `sortBy`, `take`, `takeRight`, `template`, `trim`,
     * `trimLeft`, `trimRight`, `trunc`, `random`, `range`, `sample`, `some`,
     * `sum`, `uniq`, and `words`
     *
     * @static
     * @memberOf _
     * @alias collect
     * @category Collection
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|Object|string} [iteratee=_.identity] The function invoked
     *  per iteration.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {Array} Returns the new mapped array.
     * @example
     *
     * function timesThree(n) {
     *   return n * 3;
     * }
     *
     * _.map([1, 2], timesThree);
     * // => [3, 6]
     *
     * _.map({ 'a': 1, 'b': 2 }, timesThree);
     * // => [3, 6] (iteration order is not guaranteed)
     *
     * var users = [
     *   { 'user': 'barney' },
     *   { 'user': 'fred' }
     * ];
     *
     * // using the `_.property` callback shorthand
     * _.map(users, 'user');
     * // => ['barney', 'fred']
     */
    function map(collection, iteratee, thisArg) {
      var func = isArray(collection) ? arrayMap : baseMap;
      iteratee = getCallback(iteratee, thisArg, 3);
      return func(collection, iteratee);
    }

    /**
     * Creates an array of elements split into two groups, the first of which
     * contains elements `predicate` returns truthy for, while the second of which
     * contains elements `predicate` returns falsey for. The predicate is bound
     * to `thisArg` and invoked with three arguments: (value, index|key, collection).
     *
     * If a property name is provided for `predicate` the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If a value is also provided for `thisArg` the created `_.matchesProperty`
     * style callback returns `true` for elements that have a matching property
     * value, else `false`.
     *
     * If an object is provided for `predicate` the created `_.matches` style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked
     *  per iteration.
     * @param {*} [thisArg] The `this` binding of `predicate`.
     * @returns {Array} Returns the array of grouped elements.
     * @example
     *
     * _.partition([1, 2, 3], function(n) {
     *   return n % 2;
     * });
     * // => [[1, 3], [2]]
     *
     * _.partition([1.2, 2.3, 3.4], function(n) {
     *   return this.floor(n) % 2;
     * }, Math);
     * // => [[1.2, 3.4], [2.3]]
     *
     * var users = [
     *   { 'user': 'barney',  'age': 36, 'active': false },
     *   { 'user': 'fred',    'age': 40, 'active': true },
     *   { 'user': 'pebbles', 'age': 1,  'active': false }
     * ];
     *
     * var mapper = function(array) {
     *   return _.pluck(array, 'user');
     * };
     *
     * // using the `_.matches` callback shorthand
     * _.map(_.partition(users, { 'age': 1, 'active': false }), mapper);
     * // => [['pebbles'], ['barney', 'fred']]
     *
     * // using the `_.matchesProperty` callback shorthand
     * _.map(_.partition(users, 'active', false), mapper);
     * // => [['barney', 'pebbles'], ['fred']]
     *
     * // using the `_.property` callback shorthand
     * _.map(_.partition(users, 'active'), mapper);
     * // => [['fred'], ['barney', 'pebbles']]
     */
    var partition = createAggregator(function(result, value, key) {
      result[key ? 0 : 1].push(value);
    }, function() { return [[], []]; });

    /**
     * Gets the property value of `path` from all elements in `collection`.
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Array|string} path The path of the property to pluck.
     * @returns {Array} Returns the property values.
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36 },
     *   { 'user': 'fred',   'age': 40 }
     * ];
     *
     * _.pluck(users, 'user');
     * // => ['barney', 'fred']
     *
     * var userIndex = _.indexBy(users, 'user');
     * _.pluck(userIndex, 'age');
     * // => [36, 40] (iteration order is not guaranteed)
     */
    function pluck(collection, path) {
      return map(collection, property(path));
    }

    /**
     * Reduces `collection` to a value which is the accumulated result of running
     * each element in `collection` through `iteratee`, where each successive
     * invocation is supplied the return value of the previous. If `accumulator`
     * is not provided the first element of `collection` is used as the initial
     * value. The `iteratee` is bound to `thisArg` and invoked with four arguments:
     * (accumulator, value, index|key, collection).
     *
     * Many lodash methods are guarded to work as iteratees for methods like
     * `_.reduce`, `_.reduceRight`, and `_.transform`.
     *
     * The guarded methods are:
     * `assign`, `defaults`, `defaultsDeep`, `includes`, `merge`, `sortByAll`,
     * and `sortByOrder`
     *
     * @static
     * @memberOf _
     * @alias foldl, inject
     * @category Collection
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [accumulator] The initial value.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {*} Returns the accumulated value.
     * @example
     *
     * _.reduce([1, 2], function(total, n) {
     *   return total + n;
     * });
     * // => 3
     *
     * _.reduce({ 'a': 1, 'b': 2 }, function(result, n, key) {
     *   result[key] = n * 3;
     *   return result;
     * }, {});
     * // => { 'a': 3, 'b': 6 } (iteration order is not guaranteed)
     */
    var reduce = createReduce(arrayReduce, baseEach);

    /**
     * This method is like `_.reduce` except that it iterates over elements of
     * `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @alias foldr
     * @category Collection
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [accumulator] The initial value.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {*} Returns the accumulated value.
     * @example
     *
     * var array = [[0, 1], [2, 3], [4, 5]];
     *
     * _.reduceRight(array, function(flattened, other) {
     *   return flattened.concat(other);
     * }, []);
     * // => [4, 5, 2, 3, 0, 1]
     */
    var reduceRight = createReduce(arrayReduceRight, baseEachRight);

    /**
     * The opposite of `_.filter`; this method returns the elements of `collection`
     * that `predicate` does **not** return truthy for.
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked
     *  per iteration.
     * @param {*} [thisArg] The `this` binding of `predicate`.
     * @returns {Array} Returns the new filtered array.
     * @example
     *
     * _.reject([1, 2, 3, 4], function(n) {
     *   return n % 2 == 0;
     * });
     * // => [1, 3]
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': false },
     *   { 'user': 'fred',   'age': 40, 'active': true }
     * ];
     *
     * // using the `_.matches` callback shorthand
     * _.pluck(_.reject(users, { 'age': 40, 'active': true }), 'user');
     * // => ['barney']
     *
     * // using the `_.matchesProperty` callback shorthand
     * _.pluck(_.reject(users, 'active', false), 'user');
     * // => ['fred']
     *
     * // using the `_.property` callback shorthand
     * _.pluck(_.reject(users, 'active'), 'user');
     * // => ['barney']
     */
    function reject(collection, predicate, thisArg) {
      var func = isArray(collection) ? arrayFilter : baseFilter;
      predicate = getCallback(predicate, thisArg, 3);
      return func(collection, function(value, index, collection) {
        return !predicate(value, index, collection);
      });
    }

    /**
     * Gets a random element or `n` random elements from a collection.
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object|string} collection The collection to sample.
     * @param {number} [n] The number of elements to sample.
     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
     * @returns {*} Returns the random sample(s).
     * @example
     *
     * _.sample([1, 2, 3, 4]);
     * // => 2
     *
     * _.sample([1, 2, 3, 4], 2);
     * // => [3, 1]
     */
    function sample(collection, n, guard) {
      if (guard ? isIterateeCall(collection, n, guard) : n == null) {
        collection = toIterable(collection);
        var length = collection.length;
        return length > 0 ? collection[baseRandom(0, length - 1)] : undefined;
      }
      var index = -1,
          result = toArray(collection),
          length = result.length,
          lastIndex = length - 1;

      n = nativeMin(n < 0 ? 0 : (+n || 0), length);
      while (++index < n) {
        var rand = baseRandom(index, lastIndex),
            value = result[rand];

        result[rand] = result[index];
        result[index] = value;
      }
      result.length = n;
      return result;
    }

    /**
     * Creates an array of shuffled values, using a version of the
     * [Fisher-Yates shuffle](https://en.wikipedia.org/wiki/Fisher-Yates_shuffle).
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object|string} collection The collection to shuffle.
     * @returns {Array} Returns the new shuffled array.
     * @example
     *
     * _.shuffle([1, 2, 3, 4]);
     * // => [4, 1, 3, 2]
     */
    function shuffle(collection) {
      return sample(collection, POSITIVE_INFINITY);
    }

    /**
     * Gets the size of `collection` by returning its length for array-like
     * values or the number of own enumerable properties for objects.
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object|string} collection The collection to inspect.
     * @returns {number} Returns the size of `collection`.
     * @example
     *
     * _.size([1, 2, 3]);
     * // => 3
     *
     * _.size({ 'a': 1, 'b': 2 });
     * // => 2
     *
     * _.size('pebbles');
     * // => 7
     */
    function size(collection) {
      var length = collection ? getLength(collection) : 0;
      return isLength(length) ? length : keys(collection).length;
    }

    /**
     * Checks if `predicate` returns truthy for **any** element of `collection`.
     * The function returns as soon as it finds a passing value and does not iterate
     * over the entire collection. The predicate is bound to `thisArg` and invoked
     * with three arguments: (value, index|key, collection).
     *
     * If a property name is provided for `predicate` the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If a value is also provided for `thisArg` the created `_.matchesProperty`
     * style callback returns `true` for elements that have a matching property
     * value, else `false`.
     *
     * If an object is provided for `predicate` the created `_.matches` style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @alias any
     * @category Collection
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked
     *  per iteration.
     * @param {*} [thisArg] The `this` binding of `predicate`.
     * @returns {boolean} Returns `true` if any element passes the predicate check,
     *  else `false`.
     * @example
     *
     * _.some([null, 0, 'yes', false], Boolean);
     * // => true
     *
     * var users = [
     *   { 'user': 'barney', 'active': true },
     *   { 'user': 'fred',   'active': false }
     * ];
     *
     * // using the `_.matches` callback shorthand
     * _.some(users, { 'user': 'barney', 'active': false });
     * // => false
     *
     * // using the `_.matchesProperty` callback shorthand
     * _.some(users, 'active', false);
     * // => true
     *
     * // using the `_.property` callback shorthand
     * _.some(users, 'active');
     * // => true
     */
    function some(collection, predicate, thisArg) {
      var func = isArray(collection) ? arraySome : baseSome;
      if (thisArg && isIterateeCall(collection, predicate, thisArg)) {
        predicate = undefined;
      }
      if (typeof predicate != 'function' || thisArg !== undefined) {
        predicate = getCallback(predicate, thisArg, 3);
      }
      return func(collection, predicate);
    }

    /**
     * Creates an array of elements, sorted in ascending order by the results of
     * running each element in a collection through `iteratee`. This method performs
     * a stable sort, that is, it preserves the original sort order of equal elements.
     * The `iteratee` is bound to `thisArg` and invoked with three arguments:
     * (value, index|key, collection).
     *
     * If a property name is provided for `iteratee` the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If a value is also provided for `thisArg` the created `_.matchesProperty`
     * style callback returns `true` for elements that have a matching property
     * value, else `false`.
     *
     * If an object is provided for `iteratee` the created `_.matches` style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|Object|string} [iteratee=_.identity] The function invoked
     *  per iteration.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {Array} Returns the new sorted array.
     * @example
     *
     * _.sortBy([1, 2, 3], function(n) {
     *   return Math.sin(n);
     * });
     * // => [3, 1, 2]
     *
     * _.sortBy([1, 2, 3], function(n) {
     *   return this.sin(n);
     * }, Math);
     * // => [3, 1, 2]
     *
     * var users = [
     *   { 'user': 'fred' },
     *   { 'user': 'pebbles' },
     *   { 'user': 'barney' }
     * ];
     *
     * // using the `_.property` callback shorthand
     * _.pluck(_.sortBy(users, 'user'), 'user');
     * // => ['barney', 'fred', 'pebbles']
     */
    function sortBy(collection, iteratee, thisArg) {
      if (collection == null) {
        return [];
      }
      if (thisArg && isIterateeCall(collection, iteratee, thisArg)) {
        iteratee = undefined;
      }
      var index = -1;
      iteratee = getCallback(iteratee, thisArg, 3);

      var result = baseMap(collection, function(value, key, collection) {
        return { 'criteria': iteratee(value, key, collection), 'index': ++index, 'value': value };
      });
      return baseSortBy(result, compareAscending);
    }

    /**
     * This method is like `_.sortBy` except that it can sort by multiple iteratees
     * or property names.
     *
     * If a property name is provided for an iteratee the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If an object is provided for an iteratee the created `_.matches` style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {...(Function|Function[]|Object|Object[]|string|string[])} iteratees
     *  The iteratees to sort by, specified as individual values or arrays of values.
     * @returns {Array} Returns the new sorted array.
     * @example
     *
     * var users = [
     *   { 'user': 'fred',   'age': 48 },
     *   { 'user': 'barney', 'age': 36 },
     *   { 'user': 'fred',   'age': 42 },
     *   { 'user': 'barney', 'age': 34 }
     * ];
     *
     * _.map(_.sortByAll(users, ['user', 'age']), _.values);
     * // => [['barney', 34], ['barney', 36], ['fred', 42], ['fred', 48]]
     *
     * _.map(_.sortByAll(users, 'user', function(chr) {
     *   return Math.floor(chr.age / 10);
     * }), _.values);
     * // => [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 42]]
     */
    var sortByAll = restParam(function(collection, iteratees) {
      if (collection == null) {
        return [];
      }
      var guard = iteratees[2];
      if (guard && isIterateeCall(iteratees[0], iteratees[1], guard)) {
        iteratees.length = 1;
      }
      return baseSortByOrder(collection, baseFlatten(iteratees), []);
    });

    /**
     * This method is like `_.sortByAll` except that it allows specifying the
     * sort orders of the iteratees to sort by. If `orders` is unspecified, all
     * values are sorted in ascending order. Otherwise, a value is sorted in
     * ascending order if its corresponding order is "asc", and descending if "desc".
     *
     * If a property name is provided for an iteratee the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If an object is provided for an iteratee the created `_.matches` style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.
     * @param {boolean[]} [orders] The sort orders of `iteratees`.
     * @param- {Object} [guard] Enables use as a callback for functions like `_.reduce`.
     * @returns {Array} Returns the new sorted array.
     * @example
     *
     * var users = [
     *   { 'user': 'fred',   'age': 48 },
     *   { 'user': 'barney', 'age': 34 },
     *   { 'user': 'fred',   'age': 42 },
     *   { 'user': 'barney', 'age': 36 }
     * ];
     *
     * // sort by `user` in ascending order and by `age` in descending order
     * _.map(_.sortByOrder(users, ['user', 'age'], ['asc', 'desc']), _.values);
     * // => [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 42]]
     */
    function sortByOrder(collection, iteratees, orders, guard) {
      if (collection == null) {
        return [];
      }
      if (guard && isIterateeCall(iteratees, orders, guard)) {
        orders = undefined;
      }
      if (!isArray(iteratees)) {
        iteratees = iteratees == null ? [] : [iteratees];
      }
      if (!isArray(orders)) {
        orders = orders == null ? [] : [orders];
      }
      return baseSortByOrder(collection, iteratees, orders);
    }

    /**
     * Performs a deep comparison between each element in `collection` and the
     * source object, returning an array of all elements that have equivalent
     * property values.
     *
     * **Note:** This method supports comparing arrays, booleans, `Date` objects,
     * numbers, `Object` objects, regexes, and strings. Objects are compared by
     * their own, not inherited, enumerable properties. For comparing a single
     * own or inherited property value see `_.matchesProperty`.
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object|string} collection The collection to search.
     * @param {Object} source The object of property values to match.
     * @returns {Array} Returns the new filtered array.
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': false, 'pets': ['hoppy'] },
     *   { 'user': 'fred',   'age': 40, 'active': true, 'pets': ['baby puss', 'dino'] }
     * ];
     *
     * _.pluck(_.where(users, { 'age': 36, 'active': false }), 'user');
     * // => ['barney']
     *
     * _.pluck(_.where(users, { 'pets': ['dino'] }), 'user');
     * // => ['fred']
     */
    function where(collection, source) {
      return filter(collection, baseMatches(source));
    }

    /*------------------------------------------------------------------------*/

    /**
     * Gets the number of milliseconds that have elapsed since the Unix epoch
     * (1 January 1970 00:00:00 UTC).
     *
     * @static
     * @memberOf _
     * @category Date
     * @example
     *
     * _.defer(function(stamp) {
     *   console.log(_.now() - stamp);
     * }, _.now());
     * // => logs the number of milliseconds it took for the deferred function to be invoked
     */
    var now = nativeNow || function() {
      return new Date().getTime();
    };

    /*------------------------------------------------------------------------*/

    /**
     * The opposite of `_.before`; this method creates a function that invokes
     * `func` once it is called `n` or more times.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {number} n The number of calls before `func` is invoked.
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new restricted function.
     * @example
     *
     * var saves = ['profile', 'settings'];
     *
     * var done = _.after(saves.length, function() {
     *   console.log('done saving!');
     * });
     *
     * _.forEach(saves, function(type) {
     *   asyncSave({ 'type': type, 'complete': done });
     * });
     * // => logs 'done saving!' after the two async saves have completed
     */
    function after(n, func) {
      if (typeof func != 'function') {
        if (typeof n == 'function') {
          var temp = n;
          n = func;
          func = temp;
        } else {
          throw new TypeError(FUNC_ERROR_TEXT);
        }
      }
      n = nativeIsFinite(n = +n) ? n : 0;
      return function() {
        if (--n < 1) {
          return func.apply(this, arguments);
        }
      };
    }

    /**
     * Creates a function that accepts up to `n` arguments ignoring any
     * additional arguments.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} func The function to cap arguments for.
     * @param {number} [n=func.length] The arity cap.
     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
     * @returns {Function} Returns the new function.
     * @example
     *
     * _.map(['6', '8', '10'], _.ary(parseInt, 1));
     * // => [6, 8, 10]
     */
    function ary(func, n, guard) {
      if (guard && isIterateeCall(func, n, guard)) {
        n = undefined;
      }
      n = (func && n == null) ? func.length : nativeMax(+n || 0, 0);
      return createWrapper(func, ARY_FLAG, undefined, undefined, undefined, undefined, n);
    }

    /**
     * Creates a function that invokes `func`, with the `this` binding and arguments
     * of the created function, while it is called less than `n` times. Subsequent
     * calls to the created function return the result of the last `func` invocation.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {number} n The number of calls at which `func` is no longer invoked.
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new restricted function.
     * @example
     *
     * jQuery('#add').on('click', _.before(5, addContactToList));
     * // => allows adding up to 4 contacts to the list
     */
    function before(n, func) {
      var result;
      if (typeof func != 'function') {
        if (typeof n == 'function') {
          var temp = n;
          n = func;
          func = temp;
        } else {
          throw new TypeError(FUNC_ERROR_TEXT);
        }
      }
      return function() {
        if (--n > 0) {
          result = func.apply(this, arguments);
        }
        if (n <= 1) {
          func = undefined;
        }
        return result;
      };
    }

    /**
     * Creates a function that invokes `func` with the `this` binding of `thisArg`
     * and prepends any additional `_.bind` arguments to those provided to the
     * bound function.
     *
     * The `_.bind.placeholder` value, which defaults to `_` in monolithic builds,
     * may be used as a placeholder for partially applied arguments.
     *
     * **Note:** Unlike native `Function#bind` this method does not set the "length"
     * property of bound functions.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} func The function to bind.
     * @param {*} thisArg The `this` binding of `func`.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new bound function.
     * @example
     *
     * var greet = function(greeting, punctuation) {
     *   return greeting + ' ' + this.user + punctuation;
     * };
     *
     * var object = { 'user': 'fred' };
     *
     * var bound = _.bind(greet, object, 'hi');
     * bound('!');
     * // => 'hi fred!'
     *
     * // using placeholders
     * var bound = _.bind(greet, object, _, '!');
     * bound('hi');
     * // => 'hi fred!'
     */
    var bind = restParam(function(func, thisArg, partials) {
      var bitmask = BIND_FLAG;
      if (partials.length) {
        var holders = replaceHolders(partials, bind.placeholder);
        bitmask |= PARTIAL_FLAG;
      }
      return createWrapper(func, bitmask, thisArg, partials, holders);
    });

    /**
     * Binds methods of an object to the object itself, overwriting the existing
     * method. Method names may be specified as individual arguments or as arrays
     * of method names. If no method names are provided all enumerable function
     * properties, own and inherited, of `object` are bound.
     *
     * **Note:** This method does not set the "length" property of bound functions.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Object} object The object to bind and assign the bound methods to.
     * @param {...(string|string[])} [methodNames] The object method names to bind,
     *  specified as individual method names or arrays of method names.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var view = {
     *   'label': 'docs',
     *   'onClick': function() {
     *     console.log('clicked ' + this.label);
     *   }
     * };
     *
     * _.bindAll(view);
     * jQuery('#docs').on('click', view.onClick);
     * // => logs 'clicked docs' when the element is clicked
     */
    var bindAll = restParam(function(object, methodNames) {
      methodNames = methodNames.length ? baseFlatten(methodNames) : functions(object);

      var index = -1,
          length = methodNames.length;

      while (++index < length) {
        var key = methodNames[index];
        object[key] = createWrapper(object[key], BIND_FLAG, object);
      }
      return object;
    });

    /**
     * Creates a function that invokes the method at `object[key]` and prepends
     * any additional `_.bindKey` arguments to those provided to the bound function.
     *
     * This method differs from `_.bind` by allowing bound functions to reference
     * methods that may be redefined or don't yet exist.
     * See [Peter Michaux's article](http://peter.michaux.ca/articles/lazy-function-definition-pattern)
     * for more details.
     *
     * The `_.bindKey.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for partially applied arguments.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Object} object The object the method belongs to.
     * @param {string} key The key of the method.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new bound function.
     * @example
     *
     * var object = {
     *   'user': 'fred',
     *   'greet': function(greeting, punctuation) {
     *     return greeting + ' ' + this.user + punctuation;
     *   }
     * };
     *
     * var bound = _.bindKey(object, 'greet', 'hi');
     * bound('!');
     * // => 'hi fred!'
     *
     * object.greet = function(greeting, punctuation) {
     *   return greeting + 'ya ' + this.user + punctuation;
     * };
     *
     * bound('!');
     * // => 'hiya fred!'
     *
     * // using placeholders
     * var bound = _.bindKey(object, 'greet', _, '!');
     * bound('hi');
     * // => 'hiya fred!'
     */
    var bindKey = restParam(function(object, key, partials) {
      var bitmask = BIND_FLAG | BIND_KEY_FLAG;
      if (partials.length) {
        var holders = replaceHolders(partials, bindKey.placeholder);
        bitmask |= PARTIAL_FLAG;
      }
      return createWrapper(key, bitmask, object, partials, holders);
    });

    /**
     * Creates a function that accepts one or more arguments of `func` that when
     * called either invokes `func` returning its result, if all `func` arguments
     * have been provided, or returns a function that accepts one or more of the
     * remaining `func` arguments, and so on. The arity of `func` may be specified
     * if `func.length` is not sufficient.
     *
     * The `_.curry.placeholder` value, which defaults to `_` in monolithic builds,
     * may be used as a placeholder for provided arguments.
     *
     * **Note:** This method does not set the "length" property of curried functions.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} func The function to curry.
     * @param {number} [arity=func.length] The arity of `func`.
     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
     * @returns {Function} Returns the new curried function.
     * @example
     *
     * var abc = function(a, b, c) {
     *   return [a, b, c];
     * };
     *
     * var curried = _.curry(abc);
     *
     * curried(1)(2)(3);
     * // => [1, 2, 3]
     *
     * curried(1, 2)(3);
     * // => [1, 2, 3]
     *
     * curried(1, 2, 3);
     * // => [1, 2, 3]
     *
     * // using placeholders
     * curried(1)(_, 3)(2);
     * // => [1, 2, 3]
     */
    var curry = createCurry(CURRY_FLAG);

    /**
     * This method is like `_.curry` except that arguments are applied to `func`
     * in the manner of `_.partialRight` instead of `_.partial`.
     *
     * The `_.curryRight.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for provided arguments.
     *
     * **Note:** This method does not set the "length" property of curried functions.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} func The function to curry.
     * @param {number} [arity=func.length] The arity of `func`.
     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
     * @returns {Function} Returns the new curried function.
     * @example
     *
     * var abc = function(a, b, c) {
     *   return [a, b, c];
     * };
     *
     * var curried = _.curryRight(abc);
     *
     * curried(3)(2)(1);
     * // => [1, 2, 3]
     *
     * curried(2, 3)(1);
     * // => [1, 2, 3]
     *
     * curried(1, 2, 3);
     * // => [1, 2, 3]
     *
     * // using placeholders
     * curried(3)(1, _)(2);
     * // => [1, 2, 3]
     */
    var curryRight = createCurry(CURRY_RIGHT_FLAG);

    /**
     * Creates a debounced function that delays invoking `func` until after `wait`
     * milliseconds have elapsed since the last time the debounced function was
     * invoked. The debounced function comes with a `cancel` method to cancel
     * delayed invocations. Provide an options object to indicate that `func`
     * should be invoked on the leading and/or trailing edge of the `wait` timeout.
     * Subsequent calls to the debounced function return the result of the last
     * `func` invocation.
     *
     * **Note:** If `leading` and `trailing` options are `true`, `func` is invoked
     * on the trailing edge of the timeout only if the the debounced function is
     * invoked more than once during the `wait` timeout.
     *
     * See [David Corbacho's article](http://drupalmotion.com/article/debounce-and-throttle-visual-explanation)
     * for details over the differences between `_.debounce` and `_.throttle`.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} func The function to debounce.
     * @param {number} [wait=0] The number of milliseconds to delay.
     * @param {Object} [options] The options object.
     * @param {boolean} [options.leading=false] Specify invoking on the leading
     *  edge of the timeout.
     * @param {number} [options.maxWait] The maximum time `func` is allowed to be
     *  delayed before it is invoked.
     * @param {boolean} [options.trailing=true] Specify invoking on the trailing
     *  edge of the timeout.
     * @returns {Function} Returns the new debounced function.
     * @example
     *
     * // avoid costly calculations while the window size is in flux
     * jQuery(window).on('resize', _.debounce(calculateLayout, 150));
     *
     * // invoke `sendMail` when the click event is fired, debouncing subsequent calls
     * jQuery('#postbox').on('click', _.debounce(sendMail, 300, {
     *   'leading': true,
     *   'trailing': false
     * }));
     *
     * // ensure `batchLog` is invoked once after 1 second of debounced calls
     * var source = new EventSource('/stream');
     * jQuery(source).on('message', _.debounce(batchLog, 250, {
     *   'maxWait': 1000
     * }));
     *
     * // cancel a debounced call
     * var todoChanges = _.debounce(batchLog, 1000);
     * Object.observe(models.todo, todoChanges);
     *
     * Object.observe(models, function(changes) {
     *   if (_.find(changes, { 'user': 'todo', 'type': 'delete'})) {
     *     todoChanges.cancel();
     *   }
     * }, ['delete']);
     *
     * // ...at some point `models.todo` is changed
     * models.todo.completed = true;
     *
     * // ...before 1 second has passed `models.todo` is deleted
     * // which cancels the debounced `todoChanges` call
     * delete models.todo;
     */
    function debounce(func, wait, options) {
      var args,
          maxTimeoutId,
          result,
          stamp,
          thisArg,
          timeoutId,
          trailingCall,
          lastCalled = 0,
          maxWait = false,
          trailing = true;

      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      wait = wait < 0 ? 0 : (+wait || 0);
      if (options === true) {
        var leading = true;
        trailing = false;
      } else if (isObject(options)) {
        leading = !!options.leading;
        maxWait = 'maxWait' in options && nativeMax(+options.maxWait || 0, wait);
        trailing = 'trailing' in options ? !!options.trailing : trailing;
      }

      function cancel() {
        if (timeoutId) {
          clearTimeout(timeoutId);
        }
        if (maxTimeoutId) {
          clearTimeout(maxTimeoutId);
        }
        lastCalled = 0;
        maxTimeoutId = timeoutId = trailingCall = undefined;
      }

      function complete(isCalled, id) {
        if (id) {
          clearTimeout(id);
        }
        maxTimeoutId = timeoutId = trailingCall = undefined;
        if (isCalled) {
          lastCalled = now();
          result = func.apply(thisArg, args);
          if (!timeoutId && !maxTimeoutId) {
            args = thisArg = undefined;
          }
        }
      }

      function delayed() {
        var remaining = wait - (now() - stamp);
        if (remaining <= 0 || remaining > wait) {
          complete(trailingCall, maxTimeoutId);
        } else {
          timeoutId = setTimeout(delayed, remaining);
        }
      }

      function maxDelayed() {
        complete(trailing, timeoutId);
      }

      function debounced() {
        args = arguments;
        stamp = now();
        thisArg = this;
        trailingCall = trailing && (timeoutId || !leading);

        if (maxWait === false) {
          var leadingCall = leading && !timeoutId;
        } else {
          if (!maxTimeoutId && !leading) {
            lastCalled = stamp;
          }
          var remaining = maxWait - (stamp - lastCalled),
              isCalled = remaining <= 0 || remaining > maxWait;

          if (isCalled) {
            if (maxTimeoutId) {
              maxTimeoutId = clearTimeout(maxTimeoutId);
            }
            lastCalled = stamp;
            result = func.apply(thisArg, args);
          }
          else if (!maxTimeoutId) {
            maxTimeoutId = setTimeout(maxDelayed, remaining);
          }
        }
        if (isCalled && timeoutId) {
          timeoutId = clearTimeout(timeoutId);
        }
        else if (!timeoutId && wait !== maxWait) {
          timeoutId = setTimeout(delayed, wait);
        }
        if (leadingCall) {
          isCalled = true;
          result = func.apply(thisArg, args);
        }
        if (isCalled && !timeoutId && !maxTimeoutId) {
          args = thisArg = undefined;
        }
        return result;
      }
      debounced.cancel = cancel;
      return debounced;
    }

    /**
     * Defers invoking the `func` until the current call stack has cleared. Any
     * additional arguments are provided to `func` when it is invoked.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} func The function to defer.
     * @param {...*} [args] The arguments to invoke the function with.
     * @returns {number} Returns the timer id.
     * @example
     *
     * _.defer(function(text) {
     *   console.log(text);
     * }, 'deferred');
     * // logs 'deferred' after one or more milliseconds
     */
    var defer = restParam(function(func, args) {
      return baseDelay(func, 1, args);
    });

    /**
     * Invokes `func` after `wait` milliseconds. Any additional arguments are
     * provided to `func` when it is invoked.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} func The function to delay.
     * @param {number} wait The number of milliseconds to delay invocation.
     * @param {...*} [args] The arguments to invoke the function with.
     * @returns {number} Returns the timer id.
     * @example
     *
     * _.delay(function(text) {
     *   console.log(text);
     * }, 1000, 'later');
     * // => logs 'later' after one second
     */
    var delay = restParam(function(func, wait, args) {
      return baseDelay(func, wait, args);
    });

    /**
     * Creates a function that returns the result of invoking the provided
     * functions with the `this` binding of the created function, where each
     * successive invocation is supplied the return value of the previous.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {...Function} [funcs] Functions to invoke.
     * @returns {Function} Returns the new function.
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var addSquare = _.flow(_.add, square);
     * addSquare(1, 2);
     * // => 9
     */
    var flow = createFlow();

    /**
     * This method is like `_.flow` except that it creates a function that
     * invokes the provided functions from right to left.
     *
     * @static
     * @memberOf _
     * @alias backflow, compose
     * @category Function
     * @param {...Function} [funcs] Functions to invoke.
     * @returns {Function} Returns the new function.
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var addSquare = _.flowRight(square, _.add);
     * addSquare(1, 2);
     * // => 9
     */
    var flowRight = createFlow(true);

    /**
     * Creates a function that memoizes the result of `func`. If `resolver` is
     * provided it determines the cache key for storing the result based on the
     * arguments provided to the memoized function. By default, the first argument
     * provided to the memoized function is coerced to a string and used as the
     * cache key. The `func` is invoked with the `this` binding of the memoized
     * function.
     *
     * **Note:** The cache is exposed as the `cache` property on the memoized
     * function. Its creation may be customized by replacing the `_.memoize.Cache`
     * constructor with one whose instances implement the [`Map`](http://ecma-international.org/ecma-262/6.0/#sec-properties-of-the-map-prototype-object)
     * method interface of `get`, `has`, and `set`.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} func The function to have its output memoized.
     * @param {Function} [resolver] The function to resolve the cache key.
     * @returns {Function} Returns the new memoizing function.
     * @example
     *
     * var upperCase = _.memoize(function(string) {
     *   return string.toUpperCase();
     * });
     *
     * upperCase('fred');
     * // => 'FRED'
     *
     * // modifying the result cache
     * upperCase.cache.set('fred', 'BARNEY');
     * upperCase('fred');
     * // => 'BARNEY'
     *
     * // replacing `_.memoize.Cache`
     * var object = { 'user': 'fred' };
     * var other = { 'user': 'barney' };
     * var identity = _.memoize(_.identity);
     *
     * identity(object);
     * // => { 'user': 'fred' }
     * identity(other);
     * // => { 'user': 'fred' }
     *
     * _.memoize.Cache = WeakMap;
     * var identity = _.memoize(_.identity);
     *
     * identity(object);
     * // => { 'user': 'fred' }
     * identity(other);
     * // => { 'user': 'barney' }
     */
    function memoize(func, resolver) {
      if (typeof func != 'function' || (resolver && typeof resolver != 'function')) {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      var memoized = function() {
        var args = arguments,
            key = resolver ? resolver.apply(this, args) : args[0],
            cache = memoized.cache;

        if (cache.has(key)) {
          return cache.get(key);
        }
        var result = func.apply(this, args);
        memoized.cache = cache.set(key, result);
        return result;
      };
      memoized.cache = new memoize.Cache;
      return memoized;
    }

    /**
     * Creates a function that runs each argument through a corresponding
     * transform function.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} func The function to wrap.
     * @param {...(Function|Function[])} [transforms] The functions to transform
     * arguments, specified as individual functions or arrays of functions.
     * @returns {Function} Returns the new function.
     * @example
     *
     * function doubled(n) {
     *   return n * 2;
     * }
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var modded = _.modArgs(function(x, y) {
     *   return [x, y];
     * }, square, doubled);
     *
     * modded(1, 2);
     * // => [1, 4]
     *
     * modded(5, 10);
     * // => [25, 20]
     */
    var modArgs = restParam(function(func, transforms) {
      transforms = baseFlatten(transforms);
      if (typeof func != 'function' || !arrayEvery(transforms, baseIsFunction)) {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      var length = transforms.length;
      return restParam(function(args) {
        var index = nativeMin(args.length, length);
        while (index--) {
          args[index] = transforms[index](args[index]);
        }
        return func.apply(this, args);
      });
    });

    /**
     * Creates a function that negates the result of the predicate `func`. The
     * `func` predicate is invoked with the `this` binding and arguments of the
     * created function.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} predicate The predicate to negate.
     * @returns {Function} Returns the new function.
     * @example
     *
     * function isEven(n) {
     *   return n % 2 == 0;
     * }
     *
     * _.filter([1, 2, 3, 4, 5, 6], _.negate(isEven));
     * // => [1, 3, 5]
     */
    function negate(predicate) {
      if (typeof predicate != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      return function() {
        return !predicate.apply(this, arguments);
      };
    }

    /**
     * Creates a function that is restricted to invoking `func` once. Repeat calls
     * to the function return the value of the first call. The `func` is invoked
     * with the `this` binding and arguments of the created function.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new restricted function.
     * @example
     *
     * var initialize = _.once(createApplication);
     * initialize();
     * initialize();
     * // `initialize` invokes `createApplication` once
     */
    function once(func) {
      return before(2, func);
    }

    /**
     * Creates a function that invokes `func` with `partial` arguments prepended
     * to those provided to the new function. This method is like `_.bind` except
     * it does **not** alter the `this` binding.
     *
     * The `_.partial.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for partially applied arguments.
     *
     * **Note:** This method does not set the "length" property of partially
     * applied functions.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} func The function to partially apply arguments to.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new partially applied function.
     * @example
     *
     * var greet = function(greeting, name) {
     *   return greeting + ' ' + name;
     * };
     *
     * var sayHelloTo = _.partial(greet, 'hello');
     * sayHelloTo('fred');
     * // => 'hello fred'
     *
     * // using placeholders
     * var greetFred = _.partial(greet, _, 'fred');
     * greetFred('hi');
     * // => 'hi fred'
     */
    var partial = createPartial(PARTIAL_FLAG);

    /**
     * This method is like `_.partial` except that partially applied arguments
     * are appended to those provided to the new function.
     *
     * The `_.partialRight.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for partially applied arguments.
     *
     * **Note:** This method does not set the "length" property of partially
     * applied functions.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} func The function to partially apply arguments to.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new partially applied function.
     * @example
     *
     * var greet = function(greeting, name) {
     *   return greeting + ' ' + name;
     * };
     *
     * var greetFred = _.partialRight(greet, 'fred');
     * greetFred('hi');
     * // => 'hi fred'
     *
     * // using placeholders
     * var sayHelloTo = _.partialRight(greet, 'hello', _);
     * sayHelloTo('fred');
     * // => 'hello fred'
     */
    var partialRight = createPartial(PARTIAL_RIGHT_FLAG);

    /**
     * Creates a function that invokes `func` with arguments arranged according
     * to the specified indexes where the argument value at the first index is
     * provided as the first argument, the argument value at the second index is
     * provided as the second argument, and so on.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} func The function to rearrange arguments for.
     * @param {...(number|number[])} indexes The arranged argument indexes,
     *  specified as individual indexes or arrays of indexes.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var rearged = _.rearg(function(a, b, c) {
     *   return [a, b, c];
     * }, 2, 0, 1);
     *
     * rearged('b', 'c', 'a')
     * // => ['a', 'b', 'c']
     *
     * var map = _.rearg(_.map, [1, 0]);
     * map(function(n) {
     *   return n * 3;
     * }, [1, 2, 3]);
     * // => [3, 6, 9]
     */
    var rearg = restParam(function(func, indexes) {
      return createWrapper(func, REARG_FLAG, undefined, undefined, undefined, baseFlatten(indexes));
    });

    /**
     * Creates a function that invokes `func` with the `this` binding of the
     * created function and arguments from `start` and beyond provided as an array.
     *
     * **Note:** This method is based on the [rest parameter](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/rest_parameters).
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} func The function to apply a rest parameter to.
     * @param {number} [start=func.length-1] The start position of the rest parameter.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var say = _.restParam(function(what, names) {
     *   return what + ' ' + _.initial(names).join(', ') +
     *     (_.size(names) > 1 ? ', & ' : '') + _.last(names);
     * });
     *
     * say('hello', 'fred', 'barney', 'pebbles');
     * // => 'hello fred, barney, & pebbles'
     */
    function restParam(func, start) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      start = nativeMax(start === undefined ? (func.length - 1) : (+start || 0), 0);
      return function() {
        var args = arguments,
            index = -1,
            length = nativeMax(args.length - start, 0),
            rest = Array(length);

        while (++index < length) {
          rest[index] = args[start + index];
        }
        switch (start) {
          case 0: return func.call(this, rest);
          case 1: return func.call(this, args[0], rest);
          case 2: return func.call(this, args[0], args[1], rest);
        }
        var otherArgs = Array(start + 1);
        index = -1;
        while (++index < start) {
          otherArgs[index] = args[index];
        }
        otherArgs[start] = rest;
        return func.apply(this, otherArgs);
      };
    }

    /**
     * Creates a function that invokes `func` with the `this` binding of the created
     * function and an array of arguments much like [`Function#apply`](https://es5.github.io/#x15.3.4.3).
     *
     * **Note:** This method is based on the [spread operator](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_operator).
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} func The function to spread arguments over.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var say = _.spread(function(who, what) {
     *   return who + ' says ' + what;
     * });
     *
     * say(['fred', 'hello']);
     * // => 'fred says hello'
     *
     * // with a Promise
     * var numbers = Promise.all([
     *   Promise.resolve(40),
     *   Promise.resolve(36)
     * ]);
     *
     * numbers.then(_.spread(function(x, y) {
     *   return x + y;
     * }));
     * // => a Promise of 76
     */
    function spread(func) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      return function(array) {
        return func.apply(this, array);
      };
    }

    /**
     * Creates a throttled function that only invokes `func` at most once per
     * every `wait` milliseconds. The throttled function comes with a `cancel`
     * method to cancel delayed invocations. Provide an options object to indicate
     * that `func` should be invoked on the leading and/or trailing edge of the
     * `wait` timeout. Subsequent calls to the throttled function return the
     * result of the last `func` call.
     *
     * **Note:** If `leading` and `trailing` options are `true`, `func` is invoked
     * on the trailing edge of the timeout only if the the throttled function is
     * invoked more than once during the `wait` timeout.
     *
     * See [David Corbacho's article](http://drupalmotion.com/article/debounce-and-throttle-visual-explanation)
     * for details over the differences between `_.throttle` and `_.debounce`.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} func The function to throttle.
     * @param {number} [wait=0] The number of milliseconds to throttle invocations to.
     * @param {Object} [options] The options object.
     * @param {boolean} [options.leading=true] Specify invoking on the leading
     *  edge of the timeout.
     * @param {boolean} [options.trailing=true] Specify invoking on the trailing
     *  edge of the timeout.
     * @returns {Function} Returns the new throttled function.
     * @example
     *
     * // avoid excessively updating the position while scrolling
     * jQuery(window).on('scroll', _.throttle(updatePosition, 100));
     *
     * // invoke `renewToken` when the click event is fired, but not more than once every 5 minutes
     * jQuery('.interactive').on('click', _.throttle(renewToken, 300000, {
     *   'trailing': false
     * }));
     *
     * // cancel a trailing throttled call
     * jQuery(window).on('popstate', throttled.cancel);
     */
    function throttle(func, wait, options) {
      var leading = true,
          trailing = true;

      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      if (options === false) {
        leading = false;
      } else if (isObject(options)) {
        leading = 'leading' in options ? !!options.leading : leading;
        trailing = 'trailing' in options ? !!options.trailing : trailing;
      }
      return debounce(func, wait, { 'leading': leading, 'maxWait': +wait, 'trailing': trailing });
    }

    /**
     * Creates a function that provides `value` to the wrapper function as its
     * first argument. Any additional arguments provided to the function are
     * appended to those provided to the wrapper function. The wrapper is invoked
     * with the `this` binding of the created function.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {*} value The value to wrap.
     * @param {Function} wrapper The wrapper function.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var p = _.wrap(_.escape, function(func, text) {
     *   return '<p>' + func(text) + '</p>';
     * });
     *
     * p('fred, barney, & pebbles');
     * // => '<p>fred, barney, &amp; pebbles</p>'
     */
    function wrap(value, wrapper) {
      wrapper = wrapper == null ? identity : wrapper;
      return createWrapper(wrapper, PARTIAL_FLAG, undefined, [value], []);
    }

    /*------------------------------------------------------------------------*/

    /**
     * Creates a clone of `value`. If `isDeep` is `true` nested objects are cloned,
     * otherwise they are assigned by reference. If `customizer` is provided it is
     * invoked to produce the cloned values. If `customizer` returns `undefined`
     * cloning is handled by the method instead. The `customizer` is bound to
     * `thisArg` and invoked with two argument; (value [, index|key, object]).
     *
     * **Note:** This method is loosely based on the
     * [structured clone algorithm](http://www.w3.org/TR/html5/infrastructure.html#internal-structured-cloning-algorithm).
     * The enumerable properties of `arguments` objects and objects created by
     * constructors other than `Object` are cloned to plain `Object` objects. An
     * empty object is returned for uncloneable values such as functions, DOM nodes,
     * Maps, Sets, and WeakMaps.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @param {Function} [customizer] The function to customize cloning values.
     * @param {*} [thisArg] The `this` binding of `customizer`.
     * @returns {*} Returns the cloned value.
     * @example
     *
     * var users = [
     *   { 'user': 'barney' },
     *   { 'user': 'fred' }
     * ];
     *
     * var shallow = _.clone(users);
     * shallow[0] === users[0];
     * // => true
     *
     * var deep = _.clone(users, true);
     * deep[0] === users[0];
     * // => false
     *
     * // using a customizer callback
     * var el = _.clone(document.body, function(value) {
     *   if (_.isElement(value)) {
     *     return value.cloneNode(false);
     *   }
     * });
     *
     * el === document.body
     * // => false
     * el.nodeName
     * // => BODY
     * el.childNodes.length;
     * // => 0
     */
    function clone(value, isDeep, customizer, thisArg) {
      if (isDeep && typeof isDeep != 'boolean' && isIterateeCall(value, isDeep, customizer)) {
        isDeep = false;
      }
      else if (typeof isDeep == 'function') {
        thisArg = customizer;
        customizer = isDeep;
        isDeep = false;
      }
      return typeof customizer == 'function'
        ? baseClone(value, isDeep, bindCallback(customizer, thisArg, 1))
        : baseClone(value, isDeep);
    }

    /**
     * Creates a deep clone of `value`. If `customizer` is provided it is invoked
     * to produce the cloned values. If `customizer` returns `undefined` cloning
     * is handled by the method instead. The `customizer` is bound to `thisArg`
     * and invoked with two argument; (value [, index|key, object]).
     *
     * **Note:** This method is loosely based on the
     * [structured clone algorithm](http://www.w3.org/TR/html5/infrastructure.html#internal-structured-cloning-algorithm).
     * The enumerable properties of `arguments` objects and objects created by
     * constructors other than `Object` are cloned to plain `Object` objects. An
     * empty object is returned for uncloneable values such as functions, DOM nodes,
     * Maps, Sets, and WeakMaps.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to deep clone.
     * @param {Function} [customizer] The function to customize cloning values.
     * @param {*} [thisArg] The `this` binding of `customizer`.
     * @returns {*} Returns the deep cloned value.
     * @example
     *
     * var users = [
     *   { 'user': 'barney' },
     *   { 'user': 'fred' }
     * ];
     *
     * var deep = _.cloneDeep(users);
     * deep[0] === users[0];
     * // => false
     *
     * // using a customizer callback
     * var el = _.cloneDeep(document.body, function(value) {
     *   if (_.isElement(value)) {
     *     return value.cloneNode(true);
     *   }
     * });
     *
     * el === document.body
     * // => false
     * el.nodeName
     * // => BODY
     * el.childNodes.length;
     * // => 20
     */
    function cloneDeep(value, customizer, thisArg) {
      return typeof customizer == 'function'
        ? baseClone(value, true, bindCallback(customizer, thisArg, 1))
        : baseClone(value, true);
    }

    /**
     * Checks if `value` is greater than `other`.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is greater than `other`, else `false`.
     * @example
     *
     * _.gt(3, 1);
     * // => true
     *
     * _.gt(3, 3);
     * // => false
     *
     * _.gt(1, 3);
     * // => false
     */
    function gt(value, other) {
      return value > other;
    }

    /**
     * Checks if `value` is greater than or equal to `other`.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is greater than or equal to `other`, else `false`.
     * @example
     *
     * _.gte(3, 1);
     * // => true
     *
     * _.gte(3, 3);
     * // => true
     *
     * _.gte(1, 3);
     * // => false
     */
    function gte(value, other) {
      return value >= other;
    }

    /**
     * Checks if `value` is classified as an `arguments` object.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
     * @example
     *
     * _.isArguments(function() { return arguments; }());
     * // => true
     *
     * _.isArguments([1, 2, 3]);
     * // => false
     */
    function isArguments(value) {
      return isObjectLike(value) && isArrayLike(value) &&
        hasOwnProperty.call(value, 'callee') && !propertyIsEnumerable.call(value, 'callee');
    }

    /**
     * Checks if `value` is classified as an `Array` object.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
     * @example
     *
     * _.isArray([1, 2, 3]);
     * // => true
     *
     * _.isArray(function() { return arguments; }());
     * // => false
     */
    var isArray = nativeIsArray || function(value) {
      return isObjectLike(value) && isLength(value.length) && objToString.call(value) == arrayTag;
    };

    /**
     * Checks if `value` is classified as a boolean primitive or object.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
     * @example
     *
     * _.isBoolean(false);
     * // => true
     *
     * _.isBoolean(null);
     * // => false
     */
    function isBoolean(value) {
      return value === true || value === false || (isObjectLike(value) && objToString.call(value) == boolTag);
    }

    /**
     * Checks if `value` is classified as a `Date` object.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
     * @example
     *
     * _.isDate(new Date);
     * // => true
     *
     * _.isDate('Mon April 23 2012');
     * // => false
     */
    function isDate(value) {
      return isObjectLike(value) && objToString.call(value) == dateTag;
    }

    /**
     * Checks if `value` is a DOM element.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a DOM element, else `false`.
     * @example
     *
     * _.isElement(document.body);
     * // => true
     *
     * _.isElement('<body>');
     * // => false
     */
    function isElement(value) {
      return !!value && value.nodeType === 1 && isObjectLike(value) && !isPlainObject(value);
    }

    /**
     * Checks if `value` is empty. A value is considered empty unless it is an
     * `arguments` object, array, string, or jQuery-like collection with a length
     * greater than `0` or an object with own enumerable properties.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {Array|Object|string} value The value to inspect.
     * @returns {boolean} Returns `true` if `value` is empty, else `false`.
     * @example
     *
     * _.isEmpty(null);
     * // => true
     *
     * _.isEmpty(true);
     * // => true
     *
     * _.isEmpty(1);
     * // => true
     *
     * _.isEmpty([1, 2, 3]);
     * // => false
     *
     * _.isEmpty({ 'a': 1 });
     * // => false
     */
    function isEmpty(value) {
      if (value == null) {
        return true;
      }
      if (isArrayLike(value) && (isArray(value) || isString(value) || isArguments(value) ||
          (isObjectLike(value) && isFunction(value.splice)))) {
        return !value.length;
      }
      return !keys(value).length;
    }

    /**
     * Performs a deep comparison between two values to determine if they are
     * equivalent. If `customizer` is provided it is invoked to compare values.
     * If `customizer` returns `undefined` comparisons are handled by the method
     * instead. The `customizer` is bound to `thisArg` and invoked with three
     * arguments: (value, other [, index|key]).
     *
     * **Note:** This method supports comparing arrays, booleans, `Date` objects,
     * numbers, `Object` objects, regexes, and strings. Objects are compared by
     * their own, not inherited, enumerable properties. Functions and DOM nodes
     * are **not** supported. Provide a customizer function to extend support
     * for comparing other values.
     *
     * @static
     * @memberOf _
     * @alias eq
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @param {Function} [customizer] The function to customize value comparisons.
     * @param {*} [thisArg] The `this` binding of `customizer`.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     * @example
     *
     * var object = { 'user': 'fred' };
     * var other = { 'user': 'fred' };
     *
     * object == other;
     * // => false
     *
     * _.isEqual(object, other);
     * // => true
     *
     * // using a customizer callback
     * var array = ['hello', 'goodbye'];
     * var other = ['hi', 'goodbye'];
     *
     * _.isEqual(array, other, function(value, other) {
     *   if (_.every([value, other], RegExp.prototype.test, /^h(?:i|ello)$/)) {
     *     return true;
     *   }
     * });
     * // => true
     */
    function isEqual(value, other, customizer, thisArg) {
      customizer = typeof customizer == 'function' ? bindCallback(customizer, thisArg, 3) : undefined;
      var result = customizer ? customizer(value, other) : undefined;
      return  result === undefined ? baseIsEqual(value, other, customizer) : !!result;
    }

    /**
     * Checks if `value` is an `Error`, `EvalError`, `RangeError`, `ReferenceError`,
     * `SyntaxError`, `TypeError`, or `URIError` object.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an error object, else `false`.
     * @example
     *
     * _.isError(new Error);
     * // => true
     *
     * _.isError(Error);
     * // => false
     */
    function isError(value) {
      return isObjectLike(value) && typeof value.message == 'string' && objToString.call(value) == errorTag;
    }

    /**
     * Checks if `value` is a finite primitive number.
     *
     * **Note:** This method is based on [`Number.isFinite`](http://ecma-international.org/ecma-262/6.0/#sec-number.isfinite).
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a finite number, else `false`.
     * @example
     *
     * _.isFinite(10);
     * // => true
     *
     * _.isFinite('10');
     * // => false
     *
     * _.isFinite(true);
     * // => false
     *
     * _.isFinite(Object(10));
     * // => false
     *
     * _.isFinite(Infinity);
     * // => false
     */
    function isFinite(value) {
      return typeof value == 'number' && nativeIsFinite(value);
    }

    /**
     * Checks if `value` is classified as a `Function` object.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
     * @example
     *
     * _.isFunction(_);
     * // => true
     *
     * _.isFunction(/abc/);
     * // => false
     */
    function isFunction(value) {
      // The use of `Object#toString` avoids issues with the `typeof` operator
      // in older versions of Chrome and Safari which return 'function' for regexes
      // and Safari 8 equivalents which return 'object' for typed array constructors.
      return isObject(value) && objToString.call(value) == funcTag;
    }

    /**
     * Checks if `value` is the [language type](https://es5.github.io/#x8) of `Object`.
     * (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an object, else `false`.
     * @example
     *
     * _.isObject({});
     * // => true
     *
     * _.isObject([1, 2, 3]);
     * // => true
     *
     * _.isObject(1);
     * // => false
     */
    function isObject(value) {
      // Avoid a V8 JIT bug in Chrome 19-20.
      // See https://code.google.com/p/v8/issues/detail?id=2291 for more details.
      var type = typeof value;
      return !!value && (type == 'object' || type == 'function');
    }

    /**
     * Performs a deep comparison between `object` and `source` to determine if
     * `object` contains equivalent property values. If `customizer` is provided
     * it is invoked to compare values. If `customizer` returns `undefined`
     * comparisons are handled by the method instead. The `customizer` is bound
     * to `thisArg` and invoked with three arguments: (value, other, index|key).
     *
     * **Note:** This method supports comparing properties of arrays, booleans,
     * `Date` objects, numbers, `Object` objects, regexes, and strings. Functions
     * and DOM nodes are **not** supported. Provide a customizer function to extend
     * support for comparing other values.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property values to match.
     * @param {Function} [customizer] The function to customize value comparisons.
     * @param {*} [thisArg] The `this` binding of `customizer`.
     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
     * @example
     *
     * var object = { 'user': 'fred', 'age': 40 };
     *
     * _.isMatch(object, { 'age': 40 });
     * // => true
     *
     * _.isMatch(object, { 'age': 36 });
     * // => false
     *
     * // using a customizer callback
     * var object = { 'greeting': 'hello' };
     * var source = { 'greeting': 'hi' };
     *
     * _.isMatch(object, source, function(value, other) {
     *   return _.every([value, other], RegExp.prototype.test, /^h(?:i|ello)$/) || undefined;
     * });
     * // => true
     */
    function isMatch(object, source, customizer, thisArg) {
      customizer = typeof customizer == 'function' ? bindCallback(customizer, thisArg, 3) : undefined;
      return baseIsMatch(object, getMatchData(source), customizer);
    }

    /**
     * Checks if `value` is `NaN`.
     *
     * **Note:** This method is not the same as [`isNaN`](https://es5.github.io/#x15.1.2.4)
     * which returns `true` for `undefined` and other non-numeric values.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
     * @example
     *
     * _.isNaN(NaN);
     * // => true
     *
     * _.isNaN(new Number(NaN));
     * // => true
     *
     * isNaN(undefined);
     * // => true
     *
     * _.isNaN(undefined);
     * // => false
     */
    function isNaN(value) {
      // An `NaN` primitive is the only value that is not equal to itself.
      // Perform the `toStringTag` check first to avoid errors with some host objects in IE.
      return isNumber(value) && value != +value;
    }

    /**
     * Checks if `value` is a native function.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a native function, else `false`.
     * @example
     *
     * _.isNative(Array.prototype.push);
     * // => true
     *
     * _.isNative(_);
     * // => false
     */
    function isNative(value) {
      if (value == null) {
        return false;
      }
      if (isFunction(value)) {
        return reIsNative.test(fnToString.call(value));
      }
      return isObjectLike(value) && reIsHostCtor.test(value);
    }

    /**
     * Checks if `value` is `null`.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is `null`, else `false`.
     * @example
     *
     * _.isNull(null);
     * // => true
     *
     * _.isNull(void 0);
     * // => false
     */
    function isNull(value) {
      return value === null;
    }

    /**
     * Checks if `value` is classified as a `Number` primitive or object.
     *
     * **Note:** To exclude `Infinity`, `-Infinity`, and `NaN`, which are classified
     * as numbers, use the `_.isFinite` method.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
     * @example
     *
     * _.isNumber(8.4);
     * // => true
     *
     * _.isNumber(NaN);
     * // => true
     *
     * _.isNumber('8.4');
     * // => false
     */
    function isNumber(value) {
      return typeof value == 'number' || (isObjectLike(value) && objToString.call(value) == numberTag);
    }

    /**
     * Checks if `value` is a plain object, that is, an object created by the
     * `Object` constructor or one with a `[[Prototype]]` of `null`.
     *
     * **Note:** This method assumes objects created by the `Object` constructor
     * have no inherited enumerable properties.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     * }
     *
     * _.isPlainObject(new Foo);
     * // => false
     *
     * _.isPlainObject([1, 2, 3]);
     * // => false
     *
     * _.isPlainObject({ 'x': 0, 'y': 0 });
     * // => true
     *
     * _.isPlainObject(Object.create(null));
     * // => true
     */
    function isPlainObject(value) {
      var Ctor;

      // Exit early for non `Object` objects.
      if (!(isObjectLike(value) && objToString.call(value) == objectTag && !isArguments(value)) ||
          (!hasOwnProperty.call(value, 'constructor') && (Ctor = value.constructor, typeof Ctor == 'function' && !(Ctor instanceof Ctor)))) {
        return false;
      }
      // IE < 9 iterates inherited properties before own properties. If the first
      // iterated property is an object's own property then there are no inherited
      // enumerable properties.
      var result;
      // In most environments an object's own properties are iterated before
      // its inherited properties. If the last iterated property is an object's
      // own property then there are no inherited enumerable properties.
      baseForIn(value, function(subValue, key) {
        result = key;
      });
      return result === undefined || hasOwnProperty.call(value, result);
    }

    /**
     * Checks if `value` is classified as a `RegExp` object.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
     * @example
     *
     * _.isRegExp(/abc/);
     * // => true
     *
     * _.isRegExp('/abc/');
     * // => false
     */
    function isRegExp(value) {
      return isObject(value) && objToString.call(value) == regexpTag;
    }

    /**
     * Checks if `value` is classified as a `String` primitive or object.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
     * @example
     *
     * _.isString('abc');
     * // => true
     *
     * _.isString(1);
     * // => false
     */
    function isString(value) {
      return typeof value == 'string' || (isObjectLike(value) && objToString.call(value) == stringTag);
    }

    /**
     * Checks if `value` is classified as a typed array.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
     * @example
     *
     * _.isTypedArray(new Uint8Array);
     * // => true
     *
     * _.isTypedArray([]);
     * // => false
     */
    function isTypedArray(value) {
      return isObjectLike(value) && isLength(value.length) && !!typedArrayTags[objToString.call(value)];
    }

    /**
     * Checks if `value` is `undefined`.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is `undefined`, else `false`.
     * @example
     *
     * _.isUndefined(void 0);
     * // => true
     *
     * _.isUndefined(null);
     * // => false
     */
    function isUndefined(value) {
      return value === undefined;
    }

    /**
     * Checks if `value` is less than `other`.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is less than `other`, else `false`.
     * @example
     *
     * _.lt(1, 3);
     * // => true
     *
     * _.lt(3, 3);
     * // => false
     *
     * _.lt(3, 1);
     * // => false
     */
    function lt(value, other) {
      return value < other;
    }

    /**
     * Checks if `value` is less than or equal to `other`.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is less than or equal to `other`, else `false`.
     * @example
     *
     * _.lte(1, 3);
     * // => true
     *
     * _.lte(3, 3);
     * // => true
     *
     * _.lte(3, 1);
     * // => false
     */
    function lte(value, other) {
      return value <= other;
    }

    /**
     * Converts `value` to an array.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {Array} Returns the converted array.
     * @example
     *
     * (function() {
     *   return _.toArray(arguments).slice(1);
     * }(1, 2, 3));
     * // => [2, 3]
     */
    function toArray(value) {
      var length = value ? getLength(value) : 0;
      if (!isLength(length)) {
        return values(value);
      }
      if (!length) {
        return [];
      }
      return arrayCopy(value);
    }

    /**
     * Converts `value` to a plain object flattening inherited enumerable
     * properties of `value` to own properties of the plain object.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {Object} Returns the converted plain object.
     * @example
     *
     * function Foo() {
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.assign({ 'a': 1 }, new Foo);
     * // => { 'a': 1, 'b': 2 }
     *
     * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));
     * // => { 'a': 1, 'b': 2, 'c': 3 }
     */
    function toPlainObject(value) {
      return baseCopy(value, keysIn(value));
    }

    /*------------------------------------------------------------------------*/

    /**
     * Recursively merges own enumerable properties of the source object(s), that
     * don't resolve to `undefined` into the destination object. Subsequent sources
     * overwrite property assignments of previous sources. If `customizer` is
     * provided it is invoked to produce the merged values of the destination and
     * source properties. If `customizer` returns `undefined` merging is handled
     * by the method instead. The `customizer` is bound to `thisArg` and invoked
     * with five arguments: (objectValue, sourceValue, key, object, source).
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @param {Function} [customizer] The function to customize assigned values.
     * @param {*} [thisArg] The `this` binding of `customizer`.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var users = {
     *   'data': [{ 'user': 'barney' }, { 'user': 'fred' }]
     * };
     *
     * var ages = {
     *   'data': [{ 'age': 36 }, { 'age': 40 }]
     * };
     *
     * _.merge(users, ages);
     * // => { 'data': [{ 'user': 'barney', 'age': 36 }, { 'user': 'fred', 'age': 40 }] }
     *
     * // using a customizer callback
     * var object = {
     *   'fruits': ['apple'],
     *   'vegetables': ['beet']
     * };
     *
     * var other = {
     *   'fruits': ['banana'],
     *   'vegetables': ['carrot']
     * };
     *
     * _.merge(object, other, function(a, b) {
     *   if (_.isArray(a)) {
     *     return a.concat(b);
     *   }
     * });
     * // => { 'fruits': ['apple', 'banana'], 'vegetables': ['beet', 'carrot'] }
     */
    var merge = createAssigner(baseMerge);

    /**
     * Assigns own enumerable properties of source object(s) to the destination
     * object. Subsequent sources overwrite property assignments of previous sources.
     * If `customizer` is provided it is invoked to produce the assigned values.
     * The `customizer` is bound to `thisArg` and invoked with five arguments:
     * (objectValue, sourceValue, key, object, source).
     *
     * **Note:** This method mutates `object` and is based on
     * [`Object.assign`](http://ecma-international.org/ecma-262/6.0/#sec-object.assign).
     *
     * @static
     * @memberOf _
     * @alias extend
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @param {Function} [customizer] The function to customize assigned values.
     * @param {*} [thisArg] The `this` binding of `customizer`.
     * @returns {Object} Returns `object`.
     * @example
     *
     * _.assign({ 'user': 'barney' }, { 'age': 40 }, { 'user': 'fred' });
     * // => { 'user': 'fred', 'age': 40 }
     *
     * // using a customizer callback
     * var defaults = _.partialRight(_.assign, function(value, other) {
     *   return _.isUndefined(value) ? other : value;
     * });
     *
     * defaults({ 'user': 'barney' }, { 'age': 36 }, { 'user': 'fred' });
     * // => { 'user': 'barney', 'age': 36 }
     */
    var assign = createAssigner(function(object, source, customizer) {
      return customizer
        ? assignWith(object, source, customizer)
        : baseAssign(object, source);
    });

    /**
     * Creates an object that inherits from the given `prototype` object. If a
     * `properties` object is provided its own enumerable properties are assigned
     * to the created object.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} prototype The object to inherit from.
     * @param {Object} [properties] The properties to assign to the object.
     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
     * @returns {Object} Returns the new object.
     * @example
     *
     * function Shape() {
     *   this.x = 0;
     *   this.y = 0;
     * }
     *
     * function Circle() {
     *   Shape.call(this);
     * }
     *
     * Circle.prototype = _.create(Shape.prototype, {
     *   'constructor': Circle
     * });
     *
     * var circle = new Circle;
     * circle instanceof Circle;
     * // => true
     *
     * circle instanceof Shape;
     * // => true
     */
    function create(prototype, properties, guard) {
      var result = baseCreate(prototype);
      if (guard && isIterateeCall(prototype, properties, guard)) {
        properties = undefined;
      }
      return properties ? baseAssign(result, properties) : result;
    }

    /**
     * Assigns own enumerable properties of source object(s) to the destination
     * object for all destination properties that resolve to `undefined`. Once a
     * property is set, additional values of the same property are ignored.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @example
     *
     * _.defaults({ 'user': 'barney' }, { 'age': 36 }, { 'user': 'fred' });
     * // => { 'user': 'barney', 'age': 36 }
     */
    var defaults = createDefaults(assign, assignDefaults);

    /**
     * This method is like `_.defaults` except that it recursively assigns
     * default properties.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @example
     *
     * _.defaultsDeep({ 'user': { 'name': 'barney' } }, { 'user': { 'name': 'fred', 'age': 36 } });
     * // => { 'user': { 'name': 'barney', 'age': 36 } }
     *
     */
    var defaultsDeep = createDefaults(merge, mergeDefaults);

    /**
     * This method is like `_.find` except that it returns the key of the first
     * element `predicate` returns truthy for instead of the element itself.
     *
     * If a property name is provided for `predicate` the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If a value is also provided for `thisArg` the created `_.matchesProperty`
     * style callback returns `true` for elements that have a matching property
     * value, else `false`.
     *
     * If an object is provided for `predicate` the created `_.matches` style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to search.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked
     *  per iteration.
     * @param {*} [thisArg] The `this` binding of `predicate`.
     * @returns {string|undefined} Returns the key of the matched element, else `undefined`.
     * @example
     *
     * var users = {
     *   'barney':  { 'age': 36, 'active': true },
     *   'fred':    { 'age': 40, 'active': false },
     *   'pebbles': { 'age': 1,  'active': true }
     * };
     *
     * _.findKey(users, function(chr) {
     *   return chr.age < 40;
     * });
     * // => 'barney' (iteration order is not guaranteed)
     *
     * // using the `_.matches` callback shorthand
     * _.findKey(users, { 'age': 1, 'active': true });
     * // => 'pebbles'
     *
     * // using the `_.matchesProperty` callback shorthand
     * _.findKey(users, 'active', false);
     * // => 'fred'
     *
     * // using the `_.property` callback shorthand
     * _.findKey(users, 'active');
     * // => 'barney'
     */
    var findKey = createFindKey(baseForOwn);

    /**
     * This method is like `_.findKey` except that it iterates over elements of
     * a collection in the opposite order.
     *
     * If a property name is provided for `predicate` the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If a value is also provided for `thisArg` the created `_.matchesProperty`
     * style callback returns `true` for elements that have a matching property
     * value, else `false`.
     *
     * If an object is provided for `predicate` the created `_.matches` style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to search.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked
     *  per iteration.
     * @param {*} [thisArg] The `this` binding of `predicate`.
     * @returns {string|undefined} Returns the key of the matched element, else `undefined`.
     * @example
     *
     * var users = {
     *   'barney':  { 'age': 36, 'active': true },
     *   'fred':    { 'age': 40, 'active': false },
     *   'pebbles': { 'age': 1,  'active': true }
     * };
     *
     * _.findLastKey(users, function(chr) {
     *   return chr.age < 40;
     * });
     * // => returns `pebbles` assuming `_.findKey` returns `barney`
     *
     * // using the `_.matches` callback shorthand
     * _.findLastKey(users, { 'age': 36, 'active': true });
     * // => 'barney'
     *
     * // using the `_.matchesProperty` callback shorthand
     * _.findLastKey(users, 'active', false);
     * // => 'fred'
     *
     * // using the `_.property` callback shorthand
     * _.findLastKey(users, 'active');
     * // => 'pebbles'
     */
    var findLastKey = createFindKey(baseForOwnRight);

    /**
     * Iterates over own and inherited enumerable properties of an object invoking
     * `iteratee` for each property. The `iteratee` is bound to `thisArg` and invoked
     * with three arguments: (value, key, object). Iteratee functions may exit
     * iteration early by explicitly returning `false`.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {Object} Returns `object`.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forIn(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => logs 'a', 'b', and 'c' (iteration order is not guaranteed)
     */
    var forIn = createForIn(baseFor);

    /**
     * This method is like `_.forIn` except that it iterates over properties of
     * `object` in the opposite order.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {Object} Returns `object`.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forInRight(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => logs 'c', 'b', and 'a' assuming `_.forIn ` logs 'a', 'b', and 'c'
     */
    var forInRight = createForIn(baseForRight);

    /**
     * Iterates over own enumerable properties of an object invoking `iteratee`
     * for each property. The `iteratee` is bound to `thisArg` and invoked with
     * three arguments: (value, key, object). Iteratee functions may exit iteration
     * early by explicitly returning `false`.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {Object} Returns `object`.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forOwn(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => logs 'a' and 'b' (iteration order is not guaranteed)
     */
    var forOwn = createForOwn(baseForOwn);

    /**
     * This method is like `_.forOwn` except that it iterates over properties of
     * `object` in the opposite order.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {Object} Returns `object`.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forOwnRight(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => logs 'b' and 'a' assuming `_.forOwn` logs 'a' and 'b'
     */
    var forOwnRight = createForOwn(baseForOwnRight);

    /**
     * Creates an array of function property names from all enumerable properties,
     * own and inherited, of `object`.
     *
     * @static
     * @memberOf _
     * @alias methods
     * @category Object
     * @param {Object} object The object to inspect.
     * @returns {Array} Returns the new array of property names.
     * @example
     *
     * _.functions(_);
     * // => ['after', 'ary', 'assign', ...]
     */
    function functions(object) {
      return baseFunctions(object, keysIn(object));
    }

    /**
     * Gets the property value at `path` of `object`. If the resolved value is
     * `undefined` the `defaultValue` is used in its place.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the property to get.
     * @param {*} [defaultValue] The value returned if the resolved value is `undefined`.
     * @returns {*} Returns the resolved value.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
     *
     * _.get(object, 'a[0].b.c');
     * // => 3
     *
     * _.get(object, ['a', '0', 'b', 'c']);
     * // => 3
     *
     * _.get(object, 'a.b.c', 'default');
     * // => 'default'
     */
    function get(object, path, defaultValue) {
      var result = object == null ? undefined : baseGet(object, toPath(path), path + '');
      return result === undefined ? defaultValue : result;
    }

    /**
     * Checks if `path` is a direct property.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path to check.
     * @returns {boolean} Returns `true` if `path` is a direct property, else `false`.
     * @example
     *
     * var object = { 'a': { 'b': { 'c': 3 } } };
     *
     * _.has(object, 'a');
     * // => true
     *
     * _.has(object, 'a.b.c');
     * // => true
     *
     * _.has(object, ['a', 'b', 'c']);
     * // => true
     */
    function has(object, path) {
      if (object == null) {
        return false;
      }
      var result = hasOwnProperty.call(object, path);
      if (!result && !isKey(path)) {
        path = toPath(path);
        object = path.length == 1 ? object : baseGet(object, baseSlice(path, 0, -1));
        if (object == null) {
          return false;
        }
        path = last(path);
        result = hasOwnProperty.call(object, path);
      }
      return result || (isLength(object.length) && isIndex(path, object.length) &&
        (isArray(object) || isArguments(object)));
    }

    /**
     * Creates an object composed of the inverted keys and values of `object`.
     * If `object` contains duplicate values, subsequent values overwrite property
     * assignments of previous values unless `multiValue` is `true`.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to invert.
     * @param {boolean} [multiValue] Allow multiple values per key.
     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
     * @returns {Object} Returns the new inverted object.
     * @example
     *
     * var object = { 'a': 1, 'b': 2, 'c': 1 };
     *
     * _.invert(object);
     * // => { '1': 'c', '2': 'b' }
     *
     * // with `multiValue`
     * _.invert(object, true);
     * // => { '1': ['a', 'c'], '2': ['b'] }
     */
    function invert(object, multiValue, guard) {
      if (guard && isIterateeCall(object, multiValue, guard)) {
        multiValue = undefined;
      }
      var index = -1,
          props = keys(object),
          length = props.length,
          result = {};

      while (++index < length) {
        var key = props[index],
            value = object[key];

        if (multiValue) {
          if (hasOwnProperty.call(result, value)) {
            result[value].push(key);
          } else {
            result[value] = [key];
          }
        }
        else {
          result[value] = key;
        }
      }
      return result;
    }

    /**
     * Creates an array of the own enumerable property names of `object`.
     *
     * **Note:** Non-object values are coerced to objects. See the
     * [ES spec](http://ecma-international.org/ecma-262/6.0/#sec-object.keys)
     * for more details.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.keys(new Foo);
     * // => ['a', 'b'] (iteration order is not guaranteed)
     *
     * _.keys('hi');
     * // => ['0', '1']
     */
    var keys = !nativeKeys ? shimKeys : function(object) {
      var Ctor = object == null ? undefined : object.constructor;
      if ((typeof Ctor == 'function' && Ctor.prototype === object) ||
          (typeof object != 'function' && isArrayLike(object))) {
        return shimKeys(object);
      }
      return isObject(object) ? nativeKeys(object) : [];
    };

    /**
     * Creates an array of the own and inherited enumerable property names of `object`.
     *
     * **Note:** Non-object values are coerced to objects.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.keysIn(new Foo);
     * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
     */
    function keysIn(object) {
      if (object == null) {
        return [];
      }
      if (!isObject(object)) {
        object = Object(object);
      }
      var length = object.length;
      length = (length && isLength(length) &&
        (isArray(object) || isArguments(object)) && length) || 0;

      var Ctor = object.constructor,
          index = -1,
          isProto = typeof Ctor == 'function' && Ctor.prototype === object,
          result = Array(length),
          skipIndexes = length > 0;

      while (++index < length) {
        result[index] = (index + '');
      }
      for (var key in object) {
        if (!(skipIndexes && isIndex(key, length)) &&
            !(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {
          result.push(key);
        }
      }
      return result;
    }

    /**
     * The opposite of `_.mapValues`; this method creates an object with the
     * same values as `object` and keys generated by running each own enumerable
     * property of `object` through `iteratee`.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function|Object|string} [iteratee=_.identity] The function invoked
     *  per iteration.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {Object} Returns the new mapped object.
     * @example
     *
     * _.mapKeys({ 'a': 1, 'b': 2 }, function(value, key) {
     *   return key + value;
     * });
     * // => { 'a1': 1, 'b2': 2 }
     */
    var mapKeys = createObjectMapper(true);

    /**
     * Creates an object with the same keys as `object` and values generated by
     * running each own enumerable property of `object` through `iteratee`. The
     * iteratee function is bound to `thisArg` and invoked with three arguments:
     * (value, key, object).
     *
     * If a property name is provided for `iteratee` the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If a value is also provided for `thisArg` the created `_.matchesProperty`
     * style callback returns `true` for elements that have a matching property
     * value, else `false`.
     *
     * If an object is provided for `iteratee` the created `_.matches` style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function|Object|string} [iteratee=_.identity] The function invoked
     *  per iteration.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {Object} Returns the new mapped object.
     * @example
     *
     * _.mapValues({ 'a': 1, 'b': 2 }, function(n) {
     *   return n * 3;
     * });
     * // => { 'a': 3, 'b': 6 }
     *
     * var users = {
     *   'fred':    { 'user': 'fred',    'age': 40 },
     *   'pebbles': { 'user': 'pebbles', 'age': 1 }
     * };
     *
     * // using the `_.property` callback shorthand
     * _.mapValues(users, 'age');
     * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
     */
    var mapValues = createObjectMapper();

    /**
     * The opposite of `_.pick`; this method creates an object composed of the
     * own and inherited enumerable properties of `object` that are not omitted.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The source object.
     * @param {Function|...(string|string[])} [predicate] The function invoked per
     *  iteration or property names to omit, specified as individual property
     *  names or arrays of property names.
     * @param {*} [thisArg] The `this` binding of `predicate`.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'user': 'fred', 'age': 40 };
     *
     * _.omit(object, 'age');
     * // => { 'user': 'fred' }
     *
     * _.omit(object, _.isNumber);
     * // => { 'user': 'fred' }
     */
    var omit = restParam(function(object, props) {
      if (object == null) {
        return {};
      }
      if (typeof props[0] != 'function') {
        var props = arrayMap(baseFlatten(props), String);
        return pickByArray(object, baseDifference(keysIn(object), props));
      }
      var predicate = bindCallback(props[0], props[1], 3);
      return pickByCallback(object, function(value, key, object) {
        return !predicate(value, key, object);
      });
    });

    /**
     * Creates a two dimensional array of the key-value pairs for `object`,
     * e.g. `[[key1, value1], [key2, value2]]`.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the new array of key-value pairs.
     * @example
     *
     * _.pairs({ 'barney': 36, 'fred': 40 });
     * // => [['barney', 36], ['fred', 40]] (iteration order is not guaranteed)
     */
    function pairs(object) {
      object = toObject(object);

      var index = -1,
          props = keys(object),
          length = props.length,
          result = Array(length);

      while (++index < length) {
        var key = props[index];
        result[index] = [key, object[key]];
      }
      return result;
    }

    /**
     * Creates an object composed of the picked `object` properties. Property
     * names may be specified as individual arguments or as arrays of property
     * names. If `predicate` is provided it is invoked for each property of `object`
     * picking the properties `predicate` returns truthy for. The predicate is
     * bound to `thisArg` and invoked with three arguments: (value, key, object).
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The source object.
     * @param {Function|...(string|string[])} [predicate] The function invoked per
     *  iteration or property names to pick, specified as individual property
     *  names or arrays of property names.
     * @param {*} [thisArg] The `this` binding of `predicate`.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'user': 'fred', 'age': 40 };
     *
     * _.pick(object, 'user');
     * // => { 'user': 'fred' }
     *
     * _.pick(object, _.isString);
     * // => { 'user': 'fred' }
     */
    var pick = restParam(function(object, props) {
      if (object == null) {
        return {};
      }
      return typeof props[0] == 'function'
        ? pickByCallback(object, bindCallback(props[0], props[1], 3))
        : pickByArray(object, baseFlatten(props));
    });

    /**
     * This method is like `_.get` except that if the resolved value is a function
     * it is invoked with the `this` binding of its parent object and its result
     * is returned.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the property to resolve.
     * @param {*} [defaultValue] The value returned if the resolved value is `undefined`.
     * @returns {*} Returns the resolved value.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c1': 3, 'c2': _.constant(4) } }] };
     *
     * _.result(object, 'a[0].b.c1');
     * // => 3
     *
     * _.result(object, 'a[0].b.c2');
     * // => 4
     *
     * _.result(object, 'a.b.c', 'default');
     * // => 'default'
     *
     * _.result(object, 'a.b.c', _.constant('default'));
     * // => 'default'
     */
    function result(object, path, defaultValue) {
      var result = object == null ? undefined : object[path];
      if (result === undefined) {
        if (object != null && !isKey(path, object)) {
          path = toPath(path);
          object = path.length == 1 ? object : baseGet(object, baseSlice(path, 0, -1));
          result = object == null ? undefined : object[last(path)];
        }
        result = result === undefined ? defaultValue : result;
      }
      return isFunction(result) ? result.call(object) : result;
    }

    /**
     * Sets the property value of `path` on `object`. If a portion of `path`
     * does not exist it is created.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to augment.
     * @param {Array|string} path The path of the property to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
     *
     * _.set(object, 'a[0].b.c', 4);
     * console.log(object.a[0].b.c);
     * // => 4
     *
     * _.set(object, 'x[0].y.z', 5);
     * console.log(object.x[0].y.z);
     * // => 5
     */
    function set(object, path, value) {
      if (object == null) {
        return object;
      }
      var pathKey = (path + '');
      path = (object[pathKey] != null || isKey(path, object)) ? [pathKey] : toPath(path);

      var index = -1,
          length = path.length,
          lastIndex = length - 1,
          nested = object;

      while (nested != null && ++index < length) {
        var key = path[index];
        if (isObject(nested)) {
          if (index == lastIndex) {
            nested[key] = value;
          } else if (nested[key] == null) {
            nested[key] = isIndex(path[index + 1]) ? [] : {};
          }
        }
        nested = nested[key];
      }
      return object;
    }

    /**
     * An alternative to `_.reduce`; this method transforms `object` to a new
     * `accumulator` object which is the result of running each of its own enumerable
     * properties through `iteratee`, with each invocation potentially mutating
     * the `accumulator` object. The `iteratee` is bound to `thisArg` and invoked
     * with four arguments: (accumulator, value, key, object). Iteratee functions
     * may exit iteration early by explicitly returning `false`.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Array|Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [accumulator] The custom accumulator value.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {*} Returns the accumulated value.
     * @example
     *
     * _.transform([2, 3, 4], function(result, n) {
     *   result.push(n *= n);
     *   return n % 2 == 0;
     * });
     * // => [4, 9]
     *
     * _.transform({ 'a': 1, 'b': 2 }, function(result, n, key) {
     *   result[key] = n * 3;
     * });
     * // => { 'a': 3, 'b': 6 }
     */
    function transform(object, iteratee, accumulator, thisArg) {
      var isArr = isArray(object) || isTypedArray(object);
      iteratee = getCallback(iteratee, thisArg, 4);

      if (accumulator == null) {
        if (isArr || isObject(object)) {
          var Ctor = object.constructor;
          if (isArr) {
            accumulator = isArray(object) ? new Ctor : [];
          } else {
            accumulator = baseCreate(isFunction(Ctor) ? Ctor.prototype : undefined);
          }
        } else {
          accumulator = {};
        }
      }
      (isArr ? arrayEach : baseForOwn)(object, function(value, index, object) {
        return iteratee(accumulator, value, index, object);
      });
      return accumulator;
    }

    /**
     * Creates an array of the own enumerable property values of `object`.
     *
     * **Note:** Non-object values are coerced to objects.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property values.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.values(new Foo);
     * // => [1, 2] (iteration order is not guaranteed)
     *
     * _.values('hi');
     * // => ['h', 'i']
     */
    function values(object) {
      return baseValues(object, keys(object));
    }

    /**
     * Creates an array of the own and inherited enumerable property values
     * of `object`.
     *
     * **Note:** Non-object values are coerced to objects.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property values.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.valuesIn(new Foo);
     * // => [1, 2, 3] (iteration order is not guaranteed)
     */
    function valuesIn(object) {
      return baseValues(object, keysIn(object));
    }

    /*------------------------------------------------------------------------*/

    /**
     * Checks if `n` is between `start` and up to but not including, `end`. If
     * `end` is not specified it is set to `start` with `start` then set to `0`.
     *
     * @static
     * @memberOf _
     * @category Number
     * @param {number} n The number to check.
     * @param {number} [start=0] The start of the range.
     * @param {number} end The end of the range.
     * @returns {boolean} Returns `true` if `n` is in the range, else `false`.
     * @example
     *
     * _.inRange(3, 2, 4);
     * // => true
     *
     * _.inRange(4, 8);
     * // => true
     *
     * _.inRange(4, 2);
     * // => false
     *
     * _.inRange(2, 2);
     * // => false
     *
     * _.inRange(1.2, 2);
     * // => true
     *
     * _.inRange(5.2, 4);
     * // => false
     */
    function inRange(value, start, end) {
      start = +start || 0;
      if (end === undefined) {
        end = start;
        start = 0;
      } else {
        end = +end || 0;
      }
      return value >= nativeMin(start, end) && value < nativeMax(start, end);
    }

    /**
     * Produces a random number between `min` and `max` (inclusive). If only one
     * argument is provided a number between `0` and the given number is returned.
     * If `floating` is `true`, or either `min` or `max` are floats, a floating-point
     * number is returned instead of an integer.
     *
     * @static
     * @memberOf _
     * @category Number
     * @param {number} [min=0] The minimum possible value.
     * @param {number} [max=1] The maximum possible value.
     * @param {boolean} [floating] Specify returning a floating-point number.
     * @returns {number} Returns the random number.
     * @example
     *
     * _.random(0, 5);
     * // => an integer between 0 and 5
     *
     * _.random(5);
     * // => also an integer between 0 and 5
     *
     * _.random(5, true);
     * // => a floating-point number between 0 and 5
     *
     * _.random(1.2, 5.2);
     * // => a floating-point number between 1.2 and 5.2
     */
    function random(min, max, floating) {
      if (floating && isIterateeCall(min, max, floating)) {
        max = floating = undefined;
      }
      var noMin = min == null,
          noMax = max == null;

      if (floating == null) {
        if (noMax && typeof min == 'boolean') {
          floating = min;
          min = 1;
        }
        else if (typeof max == 'boolean') {
          floating = max;
          noMax = true;
        }
      }
      if (noMin && noMax) {
        max = 1;
        noMax = false;
      }
      min = +min || 0;
      if (noMax) {
        max = min;
        min = 0;
      } else {
        max = +max || 0;
      }
      if (floating || min % 1 || max % 1) {
        var rand = nativeRandom();
        return nativeMin(min + (rand * (max - min + parseFloat('1e-' + ((rand + '').length - 1)))), max);
      }
      return baseRandom(min, max);
    }

    /*------------------------------------------------------------------------*/

    /**
     * Converts `string` to [camel case](https://en.wikipedia.org/wiki/CamelCase).
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the camel cased string.
     * @example
     *
     * _.camelCase('Foo Bar');
     * // => 'fooBar'
     *
     * _.camelCase('--foo-bar');
     * // => 'fooBar'
     *
     * _.camelCase('__foo_bar__');
     * // => 'fooBar'
     */
    var camelCase = createCompounder(function(result, word, index) {
      word = word.toLowerCase();
      return result + (index ? (word.charAt(0).toUpperCase() + word.slice(1)) : word);
    });

    /**
     * Capitalizes the first character of `string`.
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to capitalize.
     * @returns {string} Returns the capitalized string.
     * @example
     *
     * _.capitalize('fred');
     * // => 'Fred'
     */
    function capitalize(string) {
      string = baseToString(string);
      return string && (string.charAt(0).toUpperCase() + string.slice(1));
    }

    /**
     * Deburrs `string` by converting [latin-1 supplementary letters](https://en.wikipedia.org/wiki/Latin-1_Supplement_(Unicode_block)#Character_table)
     * to basic latin letters and removing [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks).
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to deburr.
     * @returns {string} Returns the deburred string.
     * @example
     *
     * _.deburr('déjà vu');
     * // => 'deja vu'
     */
    function deburr(string) {
      string = baseToString(string);
      return string && string.replace(reLatin1, deburrLetter).replace(reComboMark, '');
    }

    /**
     * Checks if `string` ends with the given target string.
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to search.
     * @param {string} [target] The string to search for.
     * @param {number} [position=string.length] The position to search from.
     * @returns {boolean} Returns `true` if `string` ends with `target`, else `false`.
     * @example
     *
     * _.endsWith('abc', 'c');
     * // => true
     *
     * _.endsWith('abc', 'b');
     * // => false
     *
     * _.endsWith('abc', 'b', 2);
     * // => true
     */
    function endsWith(string, target, position) {
      string = baseToString(string);
      target = (target + '');

      var length = string.length;
      position = position === undefined
        ? length
        : nativeMin(position < 0 ? 0 : (+position || 0), length);

      position -= target.length;
      return position >= 0 && string.indexOf(target, position) == position;
    }

    /**
     * Converts the characters "&", "<", ">", '"', "'", and "\`", in `string` to
     * their corresponding HTML entities.
     *
     * **Note:** No other characters are escaped. To escape additional characters
     * use a third-party library like [_he_](https://mths.be/he).
     *
     * Though the ">" character is escaped for symmetry, characters like
     * ">" and "/" don't need escaping in HTML and have no special meaning
     * unless they're part of a tag or unquoted attribute value.
     * See [Mathias Bynens's article](https://mathiasbynens.be/notes/ambiguous-ampersands)
     * (under "semi-related fun fact") for more details.
     *
     * Backticks are escaped because in Internet Explorer < 9, they can break out
     * of attribute values or HTML comments. See [#59](https://html5sec.org/#59),
     * [#102](https://html5sec.org/#102), [#108](https://html5sec.org/#108), and
     * [#133](https://html5sec.org/#133) of the [HTML5 Security Cheatsheet](https://html5sec.org/)
     * for more details.
     *
     * When working with HTML you should always [quote attribute values](http://wonko.com/post/html-escaping)
     * to reduce XSS vectors.
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to escape.
     * @returns {string} Returns the escaped string.
     * @example
     *
     * _.escape('fred, barney, & pebbles');
     * // => 'fred, barney, &amp; pebbles'
     */
    function escape(string) {
      // Reset `lastIndex` because in IE < 9 `String#replace` does not.
      string = baseToString(string);
      return (string && reHasUnescapedHtml.test(string))
        ? string.replace(reUnescapedHtml, escapeHtmlChar)
        : string;
    }

    /**
     * Escapes the `RegExp` special characters "\", "/", "^", "$", ".", "|", "?",
     * "*", "+", "(", ")", "[", "]", "{" and "}" in `string`.
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to escape.
     * @returns {string} Returns the escaped string.
     * @example
     *
     * _.escapeRegExp('[lodash](https://lodash.com/)');
     * // => '\[lodash\]\(https:\/\/lodash\.com\/\)'
     */
    function escapeRegExp(string) {
      string = baseToString(string);
      return (string && reHasRegExpChars.test(string))
        ? string.replace(reRegExpChars, escapeRegExpChar)
        : (string || '(?:)');
    }

    /**
     * Converts `string` to [kebab case](https://en.wikipedia.org/wiki/Letter_case#Special_case_styles).
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the kebab cased string.
     * @example
     *
     * _.kebabCase('Foo Bar');
     * // => 'foo-bar'
     *
     * _.kebabCase('fooBar');
     * // => 'foo-bar'
     *
     * _.kebabCase('__foo_bar__');
     * // => 'foo-bar'
     */
    var kebabCase = createCompounder(function(result, word, index) {
      return result + (index ? '-' : '') + word.toLowerCase();
    });

    /**
     * Pads `string` on the left and right sides if it's shorter than `length`.
     * Padding characters are truncated if they can't be evenly divided by `length`.
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to pad.
     * @param {number} [length=0] The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padded string.
     * @example
     *
     * _.pad('abc', 8);
     * // => '  abc   '
     *
     * _.pad('abc', 8, '_-');
     * // => '_-abc_-_'
     *
     * _.pad('abc', 3);
     * // => 'abc'
     */
    function pad(string, length, chars) {
      string = baseToString(string);
      length = +length;

      var strLength = string.length;
      if (strLength >= length || !nativeIsFinite(length)) {
        return string;
      }
      var mid = (length - strLength) / 2,
          leftLength = nativeFloor(mid),
          rightLength = nativeCeil(mid);

      chars = createPadding('', rightLength, chars);
      return chars.slice(0, leftLength) + string + chars;
    }

    /**
     * Pads `string` on the left side if it's shorter than `length`. Padding
     * characters are truncated if they exceed `length`.
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to pad.
     * @param {number} [length=0] The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padded string.
     * @example
     *
     * _.padLeft('abc', 6);
     * // => '   abc'
     *
     * _.padLeft('abc', 6, '_-');
     * // => '_-_abc'
     *
     * _.padLeft('abc', 3);
     * // => 'abc'
     */
    var padLeft = createPadDir();

    /**
     * Pads `string` on the right side if it's shorter than `length`. Padding
     * characters are truncated if they exceed `length`.
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to pad.
     * @param {number} [length=0] The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padded string.
     * @example
     *
     * _.padRight('abc', 6);
     * // => 'abc   '
     *
     * _.padRight('abc', 6, '_-');
     * // => 'abc_-_'
     *
     * _.padRight('abc', 3);
     * // => 'abc'
     */
    var padRight = createPadDir(true);

    /**
     * Converts `string` to an integer of the specified radix. If `radix` is
     * `undefined` or `0`, a `radix` of `10` is used unless `value` is a hexadecimal,
     * in which case a `radix` of `16` is used.
     *
     * **Note:** This method aligns with the [ES5 implementation](https://es5.github.io/#E)
     * of `parseInt`.
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} string The string to convert.
     * @param {number} [radix] The radix to interpret `value` by.
     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.parseInt('08');
     * // => 8
     *
     * _.map(['6', '08', '10'], _.parseInt);
     * // => [6, 8, 10]
     */
    function parseInt(string, radix, guard) {
      // Firefox < 21 and Opera < 15 follow ES3 for `parseInt`.
      // Chrome fails to trim leading <BOM> whitespace characters.
      // See https://code.google.com/p/v8/issues/detail?id=3109 for more details.
      if (guard ? isIterateeCall(string, radix, guard) : radix == null) {
        radix = 0;
      } else if (radix) {
        radix = +radix;
      }
      string = trim(string);
      return nativeParseInt(string, radix || (reHasHexPrefix.test(string) ? 16 : 10));
    }

    /**
     * Repeats the given string `n` times.
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to repeat.
     * @param {number} [n=0] The number of times to repeat the string.
     * @returns {string} Returns the repeated string.
     * @example
     *
     * _.repeat('*', 3);
     * // => '***'
     *
     * _.repeat('abc', 2);
     * // => 'abcabc'
     *
     * _.repeat('abc', 0);
     * // => ''
     */
    function repeat(string, n) {
      var result = '';
      string = baseToString(string);
      n = +n;
      if (n < 1 || !string || !nativeIsFinite(n)) {
        return result;
      }
      // Leverage the exponentiation by squaring algorithm for a faster repeat.
      // See https://en.wikipedia.org/wiki/Exponentiation_by_squaring for more details.
      do {
        if (n % 2) {
          result += string;
        }
        n = nativeFloor(n / 2);
        string += string;
      } while (n);

      return result;
    }

    /**
     * Converts `string` to [snake case](https://en.wikipedia.org/wiki/Snake_case).
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the snake cased string.
     * @example
     *
     * _.snakeCase('Foo Bar');
     * // => 'foo_bar'
     *
     * _.snakeCase('fooBar');
     * // => 'foo_bar'
     *
     * _.snakeCase('--foo-bar');
     * // => 'foo_bar'
     */
    var snakeCase = createCompounder(function(result, word, index) {
      return result + (index ? '_' : '') + word.toLowerCase();
    });

    /**
     * Converts `string` to [start case](https://en.wikipedia.org/wiki/Letter_case#Stylistic_or_specialised_usage).
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the start cased string.
     * @example
     *
     * _.startCase('--foo-bar');
     * // => 'Foo Bar'
     *
     * _.startCase('fooBar');
     * // => 'Foo Bar'
     *
     * _.startCase('__foo_bar__');
     * // => 'Foo Bar'
     */
    var startCase = createCompounder(function(result, word, index) {
      return result + (index ? ' ' : '') + (word.charAt(0).toUpperCase() + word.slice(1));
    });

    /**
     * Checks if `string` starts with the given target string.
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to search.
     * @param {string} [target] The string to search for.
     * @param {number} [position=0] The position to search from.
     * @returns {boolean} Returns `true` if `string` starts with `target`, else `false`.
     * @example
     *
     * _.startsWith('abc', 'a');
     * // => true
     *
     * _.startsWith('abc', 'b');
     * // => false
     *
     * _.startsWith('abc', 'b', 1);
     * // => true
     */
    function startsWith(string, target, position) {
      string = baseToString(string);
      position = position == null
        ? 0
        : nativeMin(position < 0 ? 0 : (+position || 0), string.length);

      return string.lastIndexOf(target, position) == position;
    }

    /**
     * Creates a compiled template function that can interpolate data properties
     * in "interpolate" delimiters, HTML-escape interpolated data properties in
     * "escape" delimiters, and execute JavaScript in "evaluate" delimiters. Data
     * properties may be accessed as free variables in the template. If a setting
     * object is provided it takes precedence over `_.templateSettings` values.
     *
     * **Note:** In the development build `_.template` utilizes
     * [sourceURLs](http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/#toc-sourceurl)
     * for easier debugging.
     *
     * For more information on precompiling templates see
     * [lodash's custom builds documentation](https://lodash.com/custom-builds).
     *
     * For more information on Chrome extension sandboxes see
     * [Chrome's extensions documentation](https://developer.chrome.com/extensions/sandboxingEval).
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The template string.
     * @param {Object} [options] The options object.
     * @param {RegExp} [options.escape] The HTML "escape" delimiter.
     * @param {RegExp} [options.evaluate] The "evaluate" delimiter.
     * @param {Object} [options.imports] An object to import into the template as free variables.
     * @param {RegExp} [options.interpolate] The "interpolate" delimiter.
     * @param {string} [options.sourceURL] The sourceURL of the template's compiled source.
     * @param {string} [options.variable] The data object variable name.
     * @param- {Object} [otherOptions] Enables the legacy `options` param signature.
     * @returns {Function} Returns the compiled template function.
     * @example
     *
     * // using the "interpolate" delimiter to create a compiled template
     * var compiled = _.template('hello <%= user %>!');
     * compiled({ 'user': 'fred' });
     * // => 'hello fred!'
     *
     * // using the HTML "escape" delimiter to escape data property values
     * var compiled = _.template('<b><%- value %></b>');
     * compiled({ 'value': '<script>' });
     * // => '<b>&lt;script&gt;</b>'
     *
     * // using the "evaluate" delimiter to execute JavaScript and generate HTML
     * var compiled = _.template('<% _.forEach(users, function(user) { %><li><%- user %></li><% }); %>');
     * compiled({ 'users': ['fred', 'barney'] });
     * // => '<li>fred</li><li>barney</li>'
     *
     * // using the internal `print` function in "evaluate" delimiters
     * var compiled = _.template('<% print("hello " + user); %>!');
     * compiled({ 'user': 'barney' });
     * // => 'hello barney!'
     *
     * // using the ES delimiter as an alternative to the default "interpolate" delimiter
     * var compiled = _.template('hello ${ user }!');
     * compiled({ 'user': 'pebbles' });
     * // => 'hello pebbles!'
     *
     * // using custom template delimiters
     * _.templateSettings.interpolate = /{{([\s\S]+?)}}/g;
     * var compiled = _.template('hello {{ user }}!');
     * compiled({ 'user': 'mustache' });
     * // => 'hello mustache!'
     *
     * // using backslashes to treat delimiters as plain text
     * var compiled = _.template('<%= "\\<%- value %\\>" %>');
     * compiled({ 'value': 'ignored' });
     * // => '<%- value %>'
     *
     * // using the `imports` option to import `jQuery` as `jq`
     * var text = '<% jq.each(users, function(user) { %><li><%- user %></li><% }); %>';
     * var compiled = _.template(text, { 'imports': { 'jq': jQuery } });
     * compiled({ 'users': ['fred', 'barney'] });
     * // => '<li>fred</li><li>barney</li>'
     *
     * // using the `sourceURL` option to specify a custom sourceURL for the template
     * var compiled = _.template('hello <%= user %>!', { 'sourceURL': '/basic/greeting.jst' });
     * compiled(data);
     * // => find the source of "greeting.jst" under the Sources tab or Resources panel of the web inspector
     *
     * // using the `variable` option to ensure a with-statement isn't used in the compiled template
     * var compiled = _.template('hi <%= data.user %>!', { 'variable': 'data' });
     * compiled.source;
     * // => function(data) {
     * //   var __t, __p = '';
     * //   __p += 'hi ' + ((__t = ( data.user )) == null ? '' : __t) + '!';
     * //   return __p;
     * // }
     *
     * // using the `source` property to inline compiled templates for meaningful
     * // line numbers in error messages and a stack trace
     * fs.writeFileSync(path.join(cwd, 'jst.js'), '\
     *   var JST = {\
     *     "main": ' + _.template(mainText).source + '\
     *   };\
     * ');
     */
    function template(string, options, otherOptions) {
      // Based on John Resig's `tmpl` implementation (http://ejohn.org/blog/javascript-micro-templating/)
      // and Laura Doktorova's doT.js (https://github.com/olado/doT).
      var settings = lodash.templateSettings;

      if (otherOptions && isIterateeCall(string, options, otherOptions)) {
        options = otherOptions = undefined;
      }
      string = baseToString(string);
      options = assignWith(baseAssign({}, otherOptions || options), settings, assignOwnDefaults);

      var imports = assignWith(baseAssign({}, options.imports), settings.imports, assignOwnDefaults),
          importsKeys = keys(imports),
          importsValues = baseValues(imports, importsKeys);

      var isEscaping,
          isEvaluating,
          index = 0,
          interpolate = options.interpolate || reNoMatch,
          source = "__p += '";

      // Compile the regexp to match each delimiter.
      var reDelimiters = RegExp(
        (options.escape || reNoMatch).source + '|' +
        interpolate.source + '|' +
        (interpolate === reInterpolate ? reEsTemplate : reNoMatch).source + '|' +
        (options.evaluate || reNoMatch).source + '|$'
      , 'g');

      // Use a sourceURL for easier debugging.
      var sourceURL = '//# sourceURL=' +
        ('sourceURL' in options
          ? options.sourceURL
          : ('lodash.templateSources[' + (++templateCounter) + ']')
        ) + '\n';

      string.replace(reDelimiters, function(match, escapeValue, interpolateValue, esTemplateValue, evaluateValue, offset) {
        interpolateValue || (interpolateValue = esTemplateValue);

        // Escape characters that can't be included in string literals.
        source += string.slice(index, offset).replace(reUnescapedString, escapeStringChar);

        // Replace delimiters with snippets.
        if (escapeValue) {
          isEscaping = true;
          source += "' +\n__e(" + escapeValue + ") +\n'";
        }
        if (evaluateValue) {
          isEvaluating = true;
          source += "';\n" + evaluateValue + ";\n__p += '";
        }
        if (interpolateValue) {
          source += "' +\n((__t = (" + interpolateValue + ")) == null ? '' : __t) +\n'";
        }
        index = offset + match.length;

        // The JS engine embedded in Adobe products requires returning the `match`
        // string in order to produce the correct `offset` value.
        return match;
      });

      source += "';\n";

      // If `variable` is not specified wrap a with-statement around the generated
      // code to add the data object to the top of the scope chain.
      var variable = options.variable;
      if (!variable) {
        source = 'with (obj) {\n' + source + '\n}\n';
      }
      // Cleanup code by stripping empty strings.
      source = (isEvaluating ? source.replace(reEmptyStringLeading, '') : source)
        .replace(reEmptyStringMiddle, '$1')
        .replace(reEmptyStringTrailing, '$1;');

      // Frame code as the function body.
      source = 'function(' + (variable || 'obj') + ') {\n' +
        (variable
          ? ''
          : 'obj || (obj = {});\n'
        ) +
        "var __t, __p = ''" +
        (isEscaping
           ? ', __e = _.escape'
           : ''
        ) +
        (isEvaluating
          ? ', __j = Array.prototype.join;\n' +
            "function print() { __p += __j.call(arguments, '') }\n"
          : ';\n'
        ) +
        source +
        'return __p\n}';

      var result = attempt(function() {
        return Function(importsKeys, sourceURL + 'return ' + source).apply(undefined, importsValues);
      });

      // Provide the compiled function's source by its `toString` method or
      // the `source` property as a convenience for inlining compiled templates.
      result.source = source;
      if (isError(result)) {
        throw result;
      }
      return result;
    }

    /**
     * Removes leading and trailing whitespace or specified characters from `string`.
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to trim.
     * @param {string} [chars=whitespace] The characters to trim.
     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
     * @returns {string} Returns the trimmed string.
     * @example
     *
     * _.trim('  abc  ');
     * // => 'abc'
     *
     * _.trim('-_-abc-_-', '_-');
     * // => 'abc'
     *
     * _.map(['  foo  ', '  bar  '], _.trim);
     * // => ['foo', 'bar']
     */
    function trim(string, chars, guard) {
      var value = string;
      string = baseToString(string);
      if (!string) {
        return string;
      }
      if (guard ? isIterateeCall(value, chars, guard) : chars == null) {
        return string.slice(trimmedLeftIndex(string), trimmedRightIndex(string) + 1);
      }
      chars = (chars + '');
      return string.slice(charsLeftIndex(string, chars), charsRightIndex(string, chars) + 1);
    }

    /**
     * Removes leading whitespace or specified characters from `string`.
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to trim.
     * @param {string} [chars=whitespace] The characters to trim.
     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
     * @returns {string} Returns the trimmed string.
     * @example
     *
     * _.trimLeft('  abc  ');
     * // => 'abc  '
     *
     * _.trimLeft('-_-abc-_-', '_-');
     * // => 'abc-_-'
     */
    function trimLeft(string, chars, guard) {
      var value = string;
      string = baseToString(string);
      if (!string) {
        return string;
      }
      if (guard ? isIterateeCall(value, chars, guard) : chars == null) {
        return string.slice(trimmedLeftIndex(string));
      }
      return string.slice(charsLeftIndex(string, (chars + '')));
    }

    /**
     * Removes trailing whitespace or specified characters from `string`.
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to trim.
     * @param {string} [chars=whitespace] The characters to trim.
     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
     * @returns {string} Returns the trimmed string.
     * @example
     *
     * _.trimRight('  abc  ');
     * // => '  abc'
     *
     * _.trimRight('-_-abc-_-', '_-');
     * // => '-_-abc'
     */
    function trimRight(string, chars, guard) {
      var value = string;
      string = baseToString(string);
      if (!string) {
        return string;
      }
      if (guard ? isIterateeCall(value, chars, guard) : chars == null) {
        return string.slice(0, trimmedRightIndex(string) + 1);
      }
      return string.slice(0, charsRightIndex(string, (chars + '')) + 1);
    }

    /**
     * Truncates `string` if it's longer than the given maximum string length.
     * The last characters of the truncated string are replaced with the omission
     * string which defaults to "...".
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to truncate.
     * @param {Object|number} [options] The options object or maximum string length.
     * @param {number} [options.length=30] The maximum string length.
     * @param {string} [options.omission='...'] The string to indicate text is omitted.
     * @param {RegExp|string} [options.separator] The separator pattern to truncate to.
     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
     * @returns {string} Returns the truncated string.
     * @example
     *
     * _.trunc('hi-diddly-ho there, neighborino');
     * // => 'hi-diddly-ho there, neighbo...'
     *
     * _.trunc('hi-diddly-ho there, neighborino', 24);
     * // => 'hi-diddly-ho there, n...'
     *
     * _.trunc('hi-diddly-ho there, neighborino', {
     *   'length': 24,
     *   'separator': ' '
     * });
     * // => 'hi-diddly-ho there,...'
     *
     * _.trunc('hi-diddly-ho there, neighborino', {
     *   'length': 24,
     *   'separator': /,? +/
     * });
     * // => 'hi-diddly-ho there...'
     *
     * _.trunc('hi-diddly-ho there, neighborino', {
     *   'omission': ' [...]'
     * });
     * // => 'hi-diddly-ho there, neig [...]'
     */
    function trunc(string, options, guard) {
      if (guard && isIterateeCall(string, options, guard)) {
        options = undefined;
      }
      var length = DEFAULT_TRUNC_LENGTH,
          omission = DEFAULT_TRUNC_OMISSION;

      if (options != null) {
        if (isObject(options)) {
          var separator = 'separator' in options ? options.separator : separator;
          length = 'length' in options ? (+options.length || 0) : length;
          omission = 'omission' in options ? baseToString(options.omission) : omission;
        } else {
          length = +options || 0;
        }
      }
      string = baseToString(string);
      if (length >= string.length) {
        return string;
      }
      var end = length - omission.length;
      if (end < 1) {
        return omission;
      }
      var result = string.slice(0, end);
      if (separator == null) {
        return result + omission;
      }
      if (isRegExp(separator)) {
        if (string.slice(end).search(separator)) {
          var match,
              newEnd,
              substring = string.slice(0, end);

          if (!separator.global) {
            separator = RegExp(separator.source, (reFlags.exec(separator) || '') + 'g');
          }
          separator.lastIndex = 0;
          while ((match = separator.exec(substring))) {
            newEnd = match.index;
          }
          result = result.slice(0, newEnd == null ? end : newEnd);
        }
      } else if (string.indexOf(separator, end) != end) {
        var index = result.lastIndexOf(separator);
        if (index > -1) {
          result = result.slice(0, index);
        }
      }
      return result + omission;
    }

    /**
     * The inverse of `_.escape`; this method converts the HTML entities
     * `&amp;`, `&lt;`, `&gt;`, `&quot;`, `&#39;`, and `&#96;` in `string` to their
     * corresponding characters.
     *
     * **Note:** No other HTML entities are unescaped. To unescape additional HTML
     * entities use a third-party library like [_he_](https://mths.be/he).
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to unescape.
     * @returns {string} Returns the unescaped string.
     * @example
     *
     * _.unescape('fred, barney, &amp; pebbles');
     * // => 'fred, barney, & pebbles'
     */
    function unescape(string) {
      string = baseToString(string);
      return (string && reHasEscapedHtml.test(string))
        ? string.replace(reEscapedHtml, unescapeHtmlChar)
        : string;
    }

    /**
     * Splits `string` into an array of its words.
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to inspect.
     * @param {RegExp|string} [pattern] The pattern to match words.
     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
     * @returns {Array} Returns the words of `string`.
     * @example
     *
     * _.words('fred, barney, & pebbles');
     * // => ['fred', 'barney', 'pebbles']
     *
     * _.words('fred, barney, & pebbles', /[^, ]+/g);
     * // => ['fred', 'barney', '&', 'pebbles']
     */
    function words(string, pattern, guard) {
      if (guard && isIterateeCall(string, pattern, guard)) {
        pattern = undefined;
      }
      string = baseToString(string);
      return string.match(pattern || reWords) || [];
    }

    /*------------------------------------------------------------------------*/

    /**
     * Attempts to invoke `func`, returning either the result or the caught error
     * object. Any additional arguments are provided to `func` when it is invoked.
     *
     * @static
     * @memberOf _
     * @category Utility
     * @param {Function} func The function to attempt.
     * @returns {*} Returns the `func` result or error object.
     * @example
     *
     * // avoid throwing errors for invalid selectors
     * var elements = _.attempt(function(selector) {
     *   return document.querySelectorAll(selector);
     * }, '>_>');
     *
     * if (_.isError(elements)) {
     *   elements = [];
     * }
     */
    var attempt = restParam(function(func, args) {
      try {
        return func.apply(undefined, args);
      } catch(e) {
        return isError(e) ? e : new Error(e);
      }
    });

    /**
     * Creates a function that invokes `func` with the `this` binding of `thisArg`
     * and arguments of the created function. If `func` is a property name the
     * created callback returns the property value for a given element. If `func`
     * is an object the created callback returns `true` for elements that contain
     * the equivalent object properties, otherwise it returns `false`.
     *
     * @static
     * @memberOf _
     * @alias iteratee
     * @category Utility
     * @param {*} [func=_.identity] The value to convert to a callback.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
     * @returns {Function} Returns the callback.
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36 },
     *   { 'user': 'fred',   'age': 40 }
     * ];
     *
     * // wrap to create custom callback shorthands
     * _.callback = _.wrap(_.callback, function(callback, func, thisArg) {
     *   var match = /^(.+?)__([gl]t)(.+)$/.exec(func);
     *   if (!match) {
     *     return callback(func, thisArg);
     *   }
     *   return function(object) {
     *     return match[2] == 'gt'
     *       ? object[match[1]] > match[3]
     *       : object[match[1]] < match[3];
     *   };
     * });
     *
     * _.filter(users, 'age__gt36');
     * // => [{ 'user': 'fred', 'age': 40 }]
     */
    function callback(func, thisArg, guard) {
      if (guard && isIterateeCall(func, thisArg, guard)) {
        thisArg = undefined;
      }
      return isObjectLike(func)
        ? matches(func)
        : baseCallback(func, thisArg);
    }

    /**
     * Creates a function that returns `value`.
     *
     * @static
     * @memberOf _
     * @category Utility
     * @param {*} value The value to return from the new function.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var object = { 'user': 'fred' };
     * var getter = _.constant(object);
     *
     * getter() === object;
     * // => true
     */
    function constant(value) {
      return function() {
        return value;
      };
    }

    /**
     * This method returns the first argument provided to it.
     *
     * @static
     * @memberOf _
     * @category Utility
     * @param {*} value Any value.
     * @returns {*} Returns `value`.
     * @example
     *
     * var object = { 'user': 'fred' };
     *
     * _.identity(object) === object;
     * // => true
     */
    function identity(value) {
      return value;
    }

    /**
     * Creates a function that performs a deep comparison between a given object
     * and `source`, returning `true` if the given object has equivalent property
     * values, else `false`.
     *
     * **Note:** This method supports comparing arrays, booleans, `Date` objects,
     * numbers, `Object` objects, regexes, and strings. Objects are compared by
     * their own, not inherited, enumerable properties. For comparing a single
     * own or inherited property value see `_.matchesProperty`.
     *
     * @static
     * @memberOf _
     * @category Utility
     * @param {Object} source The object of property values to match.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': true },
     *   { 'user': 'fred',   'age': 40, 'active': false }
     * ];
     *
     * _.filter(users, _.matches({ 'age': 40, 'active': false }));
     * // => [{ 'user': 'fred', 'age': 40, 'active': false }]
     */
    function matches(source) {
      return baseMatches(baseClone(source, true));
    }

    /**
     * Creates a function that compares the property value of `path` on a given
     * object to `value`.
     *
     * **Note:** This method supports comparing arrays, booleans, `Date` objects,
     * numbers, `Object` objects, regexes, and strings. Objects are compared by
     * their own, not inherited, enumerable properties.
     *
     * @static
     * @memberOf _
     * @category Utility
     * @param {Array|string} path The path of the property to get.
     * @param {*} srcValue The value to match.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var users = [
     *   { 'user': 'barney' },
     *   { 'user': 'fred' }
     * ];
     *
     * _.find(users, _.matchesProperty('user', 'fred'));
     * // => { 'user': 'fred' }
     */
    function matchesProperty(path, srcValue) {
      return baseMatchesProperty(path, baseClone(srcValue, true));
    }

    /**
     * Creates a function that invokes the method at `path` on a given object.
     * Any additional arguments are provided to the invoked method.
     *
     * @static
     * @memberOf _
     * @category Utility
     * @param {Array|string} path The path of the method to invoke.
     * @param {...*} [args] The arguments to invoke the method with.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var objects = [
     *   { 'a': { 'b': { 'c': _.constant(2) } } },
     *   { 'a': { 'b': { 'c': _.constant(1) } } }
     * ];
     *
     * _.map(objects, _.method('a.b.c'));
     * // => [2, 1]
     *
     * _.invoke(_.sortBy(objects, _.method(['a', 'b', 'c'])), 'a.b.c');
     * // => [1, 2]
     */
    var method = restParam(function(path, args) {
      return function(object) {
        return invokePath(object, path, args);
      };
    });

    /**
     * The opposite of `_.method`; this method creates a function that invokes
     * the method at a given path on `object`. Any additional arguments are
     * provided to the invoked method.
     *
     * @static
     * @memberOf _
     * @category Utility
     * @param {Object} object The object to query.
     * @param {...*} [args] The arguments to invoke the method with.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var array = _.times(3, _.constant),
     *     object = { 'a': array, 'b': array, 'c': array };
     *
     * _.map(['a[2]', 'c[0]'], _.methodOf(object));
     * // => [2, 0]
     *
     * _.map([['a', '2'], ['c', '0']], _.methodOf(object));
     * // => [2, 0]
     */
    var methodOf = restParam(function(object, args) {
      return function(path) {
        return invokePath(object, path, args);
      };
    });

    /**
     * Adds all own enumerable function properties of a source object to the
     * destination object. If `object` is a function then methods are added to
     * its prototype as well.
     *
     * **Note:** Use `_.runInContext` to create a pristine `lodash` function to
     * avoid conflicts caused by modifying the original.
     *
     * @static
     * @memberOf _
     * @category Utility
     * @param {Function|Object} [object=lodash] The destination object.
     * @param {Object} source The object of functions to add.
     * @param {Object} [options] The options object.
     * @param {boolean} [options.chain=true] Specify whether the functions added
     *  are chainable.
     * @returns {Function|Object} Returns `object`.
     * @example
     *
     * function vowels(string) {
     *   return _.filter(string, function(v) {
     *     return /[aeiou]/i.test(v);
     *   });
     * }
     *
     * _.mixin({ 'vowels': vowels });
     * _.vowels('fred');
     * // => ['e']
     *
     * _('fred').vowels().value();
     * // => ['e']
     *
     * _.mixin({ 'vowels': vowels }, { 'chain': false });
     * _('fred').vowels();
     * // => ['e']
     */
    function mixin(object, source, options) {
      if (options == null) {
        var isObj = isObject(source),
            props = isObj ? keys(source) : undefined,
            methodNames = (props && props.length) ? baseFunctions(source, props) : undefined;

        if (!(methodNames ? methodNames.length : isObj)) {
          methodNames = false;
          options = source;
          source = object;
          object = this;
        }
      }
      if (!methodNames) {
        methodNames = baseFunctions(source, keys(source));
      }
      var chain = true,
          index = -1,
          isFunc = isFunction(object),
          length = methodNames.length;

      if (options === false) {
        chain = false;
      } else if (isObject(options) && 'chain' in options) {
        chain = options.chain;
      }
      while (++index < length) {
        var methodName = methodNames[index],
            func = source[methodName];

        object[methodName] = func;
        if (isFunc) {
          object.prototype[methodName] = (function(func) {
            return function() {
              var chainAll = this.__chain__;
              if (chain || chainAll) {
                var result = object(this.__wrapped__),
                    actions = result.__actions__ = arrayCopy(this.__actions__);

                actions.push({ 'func': func, 'args': arguments, 'thisArg': object });
                result.__chain__ = chainAll;
                return result;
              }
              return func.apply(object, arrayPush([this.value()], arguments));
            };
          }(func));
        }
      }
      return object;
    }

    /**
     * Reverts the `_` variable to its previous value and returns a reference to
     * the `lodash` function.
     *
     * @static
     * @memberOf _
     * @category Utility
     * @returns {Function} Returns the `lodash` function.
     * @example
     *
     * var lodash = _.noConflict();
     */
    function noConflict() {
      root._ = oldDash;
      return this;
    }

    /**
     * A no-operation function that returns `undefined` regardless of the
     * arguments it receives.
     *
     * @static
     * @memberOf _
     * @category Utility
     * @example
     *
     * var object = { 'user': 'fred' };
     *
     * _.noop(object) === undefined;
     * // => true
     */
    function noop() {
      // No operation performed.
    }

    /**
     * Creates a function that returns the property value at `path` on a
     * given object.
     *
     * @static
     * @memberOf _
     * @category Utility
     * @param {Array|string} path The path of the property to get.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var objects = [
     *   { 'a': { 'b': { 'c': 2 } } },
     *   { 'a': { 'b': { 'c': 1 } } }
     * ];
     *
     * _.map(objects, _.property('a.b.c'));
     * // => [2, 1]
     *
     * _.pluck(_.sortBy(objects, _.property(['a', 'b', 'c'])), 'a.b.c');
     * // => [1, 2]
     */
    function property(path) {
      return isKey(path) ? baseProperty(path) : basePropertyDeep(path);
    }

    /**
     * The opposite of `_.property`; this method creates a function that returns
     * the property value at a given path on `object`.
     *
     * @static
     * @memberOf _
     * @category Utility
     * @param {Object} object The object to query.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var array = [0, 1, 2],
     *     object = { 'a': array, 'b': array, 'c': array };
     *
     * _.map(['a[2]', 'c[0]'], _.propertyOf(object));
     * // => [2, 0]
     *
     * _.map([['a', '2'], ['c', '0']], _.propertyOf(object));
     * // => [2, 0]
     */
    function propertyOf(object) {
      return function(path) {
        return baseGet(object, toPath(path), path + '');
      };
    }

    /**
     * Creates an array of numbers (positive and/or negative) progressing from
     * `start` up to, but not including, `end`. If `end` is not specified it is
     * set to `start` with `start` then set to `0`. If `end` is less than `start`
     * a zero-length range is created unless a negative `step` is specified.
     *
     * @static
     * @memberOf _
     * @category Utility
     * @param {number} [start=0] The start of the range.
     * @param {number} end The end of the range.
     * @param {number} [step=1] The value to increment or decrement by.
     * @returns {Array} Returns the new array of numbers.
     * @example
     *
     * _.range(4);
     * // => [0, 1, 2, 3]
     *
     * _.range(1, 5);
     * // => [1, 2, 3, 4]
     *
     * _.range(0, 20, 5);
     * // => [0, 5, 10, 15]
     *
     * _.range(0, -4, -1);
     * // => [0, -1, -2, -3]
     *
     * _.range(1, 4, 0);
     * // => [1, 1, 1]
     *
     * _.range(0);
     * // => []
     */
    function range(start, end, step) {
      if (step && isIterateeCall(start, end, step)) {
        end = step = undefined;
      }
      start = +start || 0;
      step = step == null ? 1 : (+step || 0);

      if (end == null) {
        end = start;
        start = 0;
      } else {
        end = +end || 0;
      }
      // Use `Array(length)` so engines like Chakra and V8 avoid slower modes.
      // See https://youtu.be/XAqIpGU8ZZk#t=17m25s for more details.
      var index = -1,
          length = nativeMax(nativeCeil((end - start) / (step || 1)), 0),
          result = Array(length);

      while (++index < length) {
        result[index] = start;
        start += step;
      }
      return result;
    }

    /**
     * Invokes the iteratee function `n` times, returning an array of the results
     * of each invocation. The `iteratee` is bound to `thisArg` and invoked with
     * one argument; (index).
     *
     * @static
     * @memberOf _
     * @category Utility
     * @param {number} n The number of times to invoke `iteratee`.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {Array} Returns the array of results.
     * @example
     *
     * var diceRolls = _.times(3, _.partial(_.random, 1, 6, false));
     * // => [3, 6, 4]
     *
     * _.times(3, function(n) {
     *   mage.castSpell(n);
     * });
     * // => invokes `mage.castSpell(n)` three times with `n` of `0`, `1`, and `2`
     *
     * _.times(3, function(n) {
     *   this.cast(n);
     * }, mage);
     * // => also invokes `mage.castSpell(n)` three times
     */
    function times(n, iteratee, thisArg) {
      n = nativeFloor(n);

      // Exit early to avoid a JSC JIT bug in Safari 8
      // where `Array(0)` is treated as `Array(1)`.
      if (n < 1 || !nativeIsFinite(n)) {
        return [];
      }
      var index = -1,
          result = Array(nativeMin(n, MAX_ARRAY_LENGTH));

      iteratee = bindCallback(iteratee, thisArg, 1);
      while (++index < n) {
        if (index < MAX_ARRAY_LENGTH) {
          result[index] = iteratee(index);
        } else {
          iteratee(index);
        }
      }
      return result;
    }

    /**
     * Generates a unique ID. If `prefix` is provided the ID is appended to it.
     *
     * @static
     * @memberOf _
     * @category Utility
     * @param {string} [prefix] The value to prefix the ID with.
     * @returns {string} Returns the unique ID.
     * @example
     *
     * _.uniqueId('contact_');
     * // => 'contact_104'
     *
     * _.uniqueId();
     * // => '105'
     */
    function uniqueId(prefix) {
      var id = ++idCounter;
      return baseToString(prefix) + id;
    }

    /*------------------------------------------------------------------------*/

    /**
     * Adds two numbers.
     *
     * @static
     * @memberOf _
     * @category Math
     * @param {number} augend The first number to add.
     * @param {number} addend The second number to add.
     * @returns {number} Returns the sum.
     * @example
     *
     * _.add(6, 4);
     * // => 10
     */
    function add(augend, addend) {
      return (+augend || 0) + (+addend || 0);
    }

    /**
     * Calculates `n` rounded up to `precision`.
     *
     * @static
     * @memberOf _
     * @category Math
     * @param {number} n The number to round up.
     * @param {number} [precision=0] The precision to round up to.
     * @returns {number} Returns the rounded up number.
     * @example
     *
     * _.ceil(4.006);
     * // => 5
     *
     * _.ceil(6.004, 2);
     * // => 6.01
     *
     * _.ceil(6040, -2);
     * // => 6100
     */
    var ceil = createRound('ceil');

    /**
     * Calculates `n` rounded down to `precision`.
     *
     * @static
     * @memberOf _
     * @category Math
     * @param {number} n The number to round down.
     * @param {number} [precision=0] The precision to round down to.
     * @returns {number} Returns the rounded down number.
     * @example
     *
     * _.floor(4.006);
     * // => 4
     *
     * _.floor(0.046, 2);
     * // => 0.04
     *
     * _.floor(4060, -2);
     * // => 4000
     */
    var floor = createRound('floor');

    /**
     * Gets the maximum value of `collection`. If `collection` is empty or falsey
     * `-Infinity` is returned. If an iteratee function is provided it is invoked
     * for each value in `collection` to generate the criterion by which the value
     * is ranked. The `iteratee` is bound to `thisArg` and invoked with three
     * arguments: (value, index, collection).
     *
     * If a property name is provided for `iteratee` the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If a value is also provided for `thisArg` the created `_.matchesProperty`
     * style callback returns `true` for elements that have a matching property
     * value, else `false`.
     *
     * If an object is provided for `iteratee` the created `_.matches` style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @category Math
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|Object|string} [iteratee] The function invoked per iteration.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {*} Returns the maximum value.
     * @example
     *
     * _.max([4, 2, 8, 6]);
     * // => 8
     *
     * _.max([]);
     * // => -Infinity
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36 },
     *   { 'user': 'fred',   'age': 40 }
     * ];
     *
     * _.max(users, function(chr) {
     *   return chr.age;
     * });
     * // => { 'user': 'fred', 'age': 40 }
     *
     * // using the `_.property` callback shorthand
     * _.max(users, 'age');
     * // => { 'user': 'fred', 'age': 40 }
     */
    var max = createExtremum(gt, NEGATIVE_INFINITY);

    /**
     * Gets the minimum value of `collection`. If `collection` is empty or falsey
     * `Infinity` is returned. If an iteratee function is provided it is invoked
     * for each value in `collection` to generate the criterion by which the value
     * is ranked. The `iteratee` is bound to `thisArg` and invoked with three
     * arguments: (value, index, collection).
     *
     * If a property name is provided for `iteratee` the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If a value is also provided for `thisArg` the created `_.matchesProperty`
     * style callback returns `true` for elements that have a matching property
     * value, else `false`.
     *
     * If an object is provided for `iteratee` the created `_.matches` style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @category Math
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|Object|string} [iteratee] The function invoked per iteration.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {*} Returns the minimum value.
     * @example
     *
     * _.min([4, 2, 8, 6]);
     * // => 2
     *
     * _.min([]);
     * // => Infinity
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36 },
     *   { 'user': 'fred',   'age': 40 }
     * ];
     *
     * _.min(users, function(chr) {
     *   return chr.age;
     * });
     * // => { 'user': 'barney', 'age': 36 }
     *
     * // using the `_.property` callback shorthand
     * _.min(users, 'age');
     * // => { 'user': 'barney', 'age': 36 }
     */
    var min = createExtremum(lt, POSITIVE_INFINITY);

    /**
     * Calculates `n` rounded to `precision`.
     *
     * @static
     * @memberOf _
     * @category Math
     * @param {number} n The number to round.
     * @param {number} [precision=0] The precision to round to.
     * @returns {number} Returns the rounded number.
     * @example
     *
     * _.round(4.006);
     * // => 4
     *
     * _.round(4.006, 2);
     * // => 4.01
     *
     * _.round(4060, -2);
     * // => 4100
     */
    var round = createRound('round');

    /**
     * Gets the sum of the values in `collection`.
     *
     * @static
     * @memberOf _
     * @category Math
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|Object|string} [iteratee] The function invoked per iteration.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {number} Returns the sum.
     * @example
     *
     * _.sum([4, 6]);
     * // => 10
     *
     * _.sum({ 'a': 4, 'b': 6 });
     * // => 10
     *
     * var objects = [
     *   { 'n': 4 },
     *   { 'n': 6 }
     * ];
     *
     * _.sum(objects, function(object) {
     *   return object.n;
     * });
     * // => 10
     *
     * // using the `_.property` callback shorthand
     * _.sum(objects, 'n');
     * // => 10
     */
    function sum(collection, iteratee, thisArg) {
      if (thisArg && isIterateeCall(collection, iteratee, thisArg)) {
        iteratee = undefined;
      }
      iteratee = getCallback(iteratee, thisArg, 3);
      return iteratee.length == 1
        ? arraySum(isArray(collection) ? collection : toIterable(collection), iteratee)
        : baseSum(collection, iteratee);
    }

    /*------------------------------------------------------------------------*/

    // Ensure wrappers are instances of `baseLodash`.
    lodash.prototype = baseLodash.prototype;

    LodashWrapper.prototype = baseCreate(baseLodash.prototype);
    LodashWrapper.prototype.constructor = LodashWrapper;

    LazyWrapper.prototype = baseCreate(baseLodash.prototype);
    LazyWrapper.prototype.constructor = LazyWrapper;

    // Add functions to the `Map` cache.
    MapCache.prototype['delete'] = mapDelete;
    MapCache.prototype.get = mapGet;
    MapCache.prototype.has = mapHas;
    MapCache.prototype.set = mapSet;

    // Add functions to the `Set` cache.
    SetCache.prototype.push = cachePush;

    // Assign cache to `_.memoize`.
    memoize.Cache = MapCache;

    // Add functions that return wrapped values when chaining.
    lodash.after = after;
    lodash.ary = ary;
    lodash.assign = assign;
    lodash.at = at;
    lodash.before = before;
    lodash.bind = bind;
    lodash.bindAll = bindAll;
    lodash.bindKey = bindKey;
    lodash.callback = callback;
    lodash.chain = chain;
    lodash.chunk = chunk;
    lodash.compact = compact;
    lodash.constant = constant;
    lodash.countBy = countBy;
    lodash.create = create;
    lodash.curry = curry;
    lodash.curryRight = curryRight;
    lodash.debounce = debounce;
    lodash.defaults = defaults;
    lodash.defaultsDeep = defaultsDeep;
    lodash.defer = defer;
    lodash.delay = delay;
    lodash.difference = difference;
    lodash.drop = drop;
    lodash.dropRight = dropRight;
    lodash.dropRightWhile = dropRightWhile;
    lodash.dropWhile = dropWhile;
    lodash.fill = fill;
    lodash.filter = filter;
    lodash.flatten = flatten;
    lodash.flattenDeep = flattenDeep;
    lodash.flow = flow;
    lodash.flowRight = flowRight;
    lodash.forEach = forEach;
    lodash.forEachRight = forEachRight;
    lodash.forIn = forIn;
    lodash.forInRight = forInRight;
    lodash.forOwn = forOwn;
    lodash.forOwnRight = forOwnRight;
    lodash.functions = functions;
    lodash.groupBy = groupBy;
    lodash.indexBy = indexBy;
    lodash.initial = initial;
    lodash.intersection = intersection;
    lodash.invert = invert;
    lodash.invoke = invoke;
    lodash.keys = keys;
    lodash.keysIn = keysIn;
    lodash.map = map;
    lodash.mapKeys = mapKeys;
    lodash.mapValues = mapValues;
    lodash.matches = matches;
    lodash.matchesProperty = matchesProperty;
    lodash.memoize = memoize;
    lodash.merge = merge;
    lodash.method = method;
    lodash.methodOf = methodOf;
    lodash.mixin = mixin;
    lodash.modArgs = modArgs;
    lodash.negate = negate;
    lodash.omit = omit;
    lodash.once = once;
    lodash.pairs = pairs;
    lodash.partial = partial;
    lodash.partialRight = partialRight;
    lodash.partition = partition;
    lodash.pick = pick;
    lodash.pluck = pluck;
    lodash.property = property;
    lodash.propertyOf = propertyOf;
    lodash.pull = pull;
    lodash.pullAt = pullAt;
    lodash.range = range;
    lodash.rearg = rearg;
    lodash.reject = reject;
    lodash.remove = remove;
    lodash.rest = rest;
    lodash.restParam = restParam;
    lodash.set = set;
    lodash.shuffle = shuffle;
    lodash.slice = slice;
    lodash.sortBy = sortBy;
    lodash.sortByAll = sortByAll;
    lodash.sortByOrder = sortByOrder;
    lodash.spread = spread;
    lodash.take = take;
    lodash.takeRight = takeRight;
    lodash.takeRightWhile = takeRightWhile;
    lodash.takeWhile = takeWhile;
    lodash.tap = tap;
    lodash.throttle = throttle;
    lodash.thru = thru;
    lodash.times = times;
    lodash.toArray = toArray;
    lodash.toPlainObject = toPlainObject;
    lodash.transform = transform;
    lodash.union = union;
    lodash.uniq = uniq;
    lodash.unzip = unzip;
    lodash.unzipWith = unzipWith;
    lodash.values = values;
    lodash.valuesIn = valuesIn;
    lodash.where = where;
    lodash.without = without;
    lodash.wrap = wrap;
    lodash.xor = xor;
    lodash.zip = zip;
    lodash.zipObject = zipObject;
    lodash.zipWith = zipWith;

    // Add aliases.
    lodash.backflow = flowRight;
    lodash.collect = map;
    lodash.compose = flowRight;
    lodash.each = forEach;
    lodash.eachRight = forEachRight;
    lodash.extend = assign;
    lodash.iteratee = callback;
    lodash.methods = functions;
    lodash.object = zipObject;
    lodash.select = filter;
    lodash.tail = rest;
    lodash.unique = uniq;

    // Add functions to `lodash.prototype`.
    mixin(lodash, lodash);

    /*------------------------------------------------------------------------*/

    // Add functions that return unwrapped values when chaining.
    lodash.add = add;
    lodash.attempt = attempt;
    lodash.camelCase = camelCase;
    lodash.capitalize = capitalize;
    lodash.ceil = ceil;
    lodash.clone = clone;
    lodash.cloneDeep = cloneDeep;
    lodash.deburr = deburr;
    lodash.endsWith = endsWith;
    lodash.escape = escape;
    lodash.escapeRegExp = escapeRegExp;
    lodash.every = every;
    lodash.find = find;
    lodash.findIndex = findIndex;
    lodash.findKey = findKey;
    lodash.findLast = findLast;
    lodash.findLastIndex = findLastIndex;
    lodash.findLastKey = findLastKey;
    lodash.findWhere = findWhere;
    lodash.first = first;
    lodash.floor = floor;
    lodash.get = get;
    lodash.gt = gt;
    lodash.gte = gte;
    lodash.has = has;
    lodash.identity = identity;
    lodash.includes = includes;
    lodash.indexOf = indexOf;
    lodash.inRange = inRange;
    lodash.isArguments = isArguments;
    lodash.isArray = isArray;
    lodash.isBoolean = isBoolean;
    lodash.isDate = isDate;
    lodash.isElement = isElement;
    lodash.isEmpty = isEmpty;
    lodash.isEqual = isEqual;
    lodash.isError = isError;
    lodash.isFinite = isFinite;
    lodash.isFunction = isFunction;
    lodash.isMatch = isMatch;
    lodash.isNaN = isNaN;
    lodash.isNative = isNative;
    lodash.isNull = isNull;
    lodash.isNumber = isNumber;
    lodash.isObject = isObject;
    lodash.isPlainObject = isPlainObject;
    lodash.isRegExp = isRegExp;
    lodash.isString = isString;
    lodash.isTypedArray = isTypedArray;
    lodash.isUndefined = isUndefined;
    lodash.kebabCase = kebabCase;
    lodash.last = last;
    lodash.lastIndexOf = lastIndexOf;
    lodash.lt = lt;
    lodash.lte = lte;
    lodash.max = max;
    lodash.min = min;
    lodash.noConflict = noConflict;
    lodash.noop = noop;
    lodash.now = now;
    lodash.pad = pad;
    lodash.padLeft = padLeft;
    lodash.padRight = padRight;
    lodash.parseInt = parseInt;
    lodash.random = random;
    lodash.reduce = reduce;
    lodash.reduceRight = reduceRight;
    lodash.repeat = repeat;
    lodash.result = result;
    lodash.round = round;
    lodash.runInContext = runInContext;
    lodash.size = size;
    lodash.snakeCase = snakeCase;
    lodash.some = some;
    lodash.sortedIndex = sortedIndex;
    lodash.sortedLastIndex = sortedLastIndex;
    lodash.startCase = startCase;
    lodash.startsWith = startsWith;
    lodash.sum = sum;
    lodash.template = template;
    lodash.trim = trim;
    lodash.trimLeft = trimLeft;
    lodash.trimRight = trimRight;
    lodash.trunc = trunc;
    lodash.unescape = unescape;
    lodash.uniqueId = uniqueId;
    lodash.words = words;

    // Add aliases.
    lodash.all = every;
    lodash.any = some;
    lodash.contains = includes;
    lodash.eq = isEqual;
    lodash.detect = find;
    lodash.foldl = reduce;
    lodash.foldr = reduceRight;
    lodash.head = first;
    lodash.include = includes;
    lodash.inject = reduce;

    mixin(lodash, (function() {
      var source = {};
      baseForOwn(lodash, function(func, methodName) {
        if (!lodash.prototype[methodName]) {
          source[methodName] = func;
        }
      });
      return source;
    }()), false);

    /*------------------------------------------------------------------------*/

    // Add functions capable of returning wrapped and unwrapped values when chaining.
    lodash.sample = sample;

    lodash.prototype.sample = function(n) {
      if (!this.__chain__ && n == null) {
        return sample(this.value());
      }
      return this.thru(function(value) {
        return sample(value, n);
      });
    };

    /*------------------------------------------------------------------------*/

    /**
     * The semantic version number.
     *
     * @static
     * @memberOf _
     * @type string
     */
    lodash.VERSION = VERSION;

    // Assign default placeholders.
    arrayEach(['bind', 'bindKey', 'curry', 'curryRight', 'partial', 'partialRight'], function(methodName) {
      lodash[methodName].placeholder = lodash;
    });

    // Add `LazyWrapper` methods for `_.drop` and `_.take` variants.
    arrayEach(['drop', 'take'], function(methodName, index) {
      LazyWrapper.prototype[methodName] = function(n) {
        var filtered = this.__filtered__;
        if (filtered && !index) {
          return new LazyWrapper(this);
        }
        n = n == null ? 1 : nativeMax(nativeFloor(n) || 0, 0);

        var result = this.clone();
        if (filtered) {
          result.__takeCount__ = nativeMin(result.__takeCount__, n);
        } else {
          result.__views__.push({ 'size': n, 'type': methodName + (result.__dir__ < 0 ? 'Right' : '') });
        }
        return result;
      };

      LazyWrapper.prototype[methodName + 'Right'] = function(n) {
        return this.reverse()[methodName](n).reverse();
      };
    });

    // Add `LazyWrapper` methods that accept an `iteratee` value.
    arrayEach(['filter', 'map', 'takeWhile'], function(methodName, index) {
      var type = index + 1,
          isFilter = type != LAZY_MAP_FLAG;

      LazyWrapper.prototype[methodName] = function(iteratee, thisArg) {
        var result = this.clone();
        result.__iteratees__.push({ 'iteratee': getCallback(iteratee, thisArg, 1), 'type': type });
        result.__filtered__ = result.__filtered__ || isFilter;
        return result;
      };
    });

    // Add `LazyWrapper` methods for `_.first` and `_.last`.
    arrayEach(['first', 'last'], function(methodName, index) {
      var takeName = 'take' + (index ? 'Right' : '');

      LazyWrapper.prototype[methodName] = function() {
        return this[takeName](1).value()[0];
      };
    });

    // Add `LazyWrapper` methods for `_.initial` and `_.rest`.
    arrayEach(['initial', 'rest'], function(methodName, index) {
      var dropName = 'drop' + (index ? '' : 'Right');

      LazyWrapper.prototype[methodName] = function() {
        return this.__filtered__ ? new LazyWrapper(this) : this[dropName](1);
      };
    });

    // Add `LazyWrapper` methods for `_.pluck` and `_.where`.
    arrayEach(['pluck', 'where'], function(methodName, index) {
      var operationName = index ? 'filter' : 'map',
          createCallback = index ? baseMatches : property;

      LazyWrapper.prototype[methodName] = function(value) {
        return this[operationName](createCallback(value));
      };
    });

    LazyWrapper.prototype.compact = function() {
      return this.filter(identity);
    };

    LazyWrapper.prototype.reject = function(predicate, thisArg) {
      predicate = getCallback(predicate, thisArg, 1);
      return this.filter(function(value) {
        return !predicate(value);
      });
    };

    LazyWrapper.prototype.slice = function(start, end) {
      start = start == null ? 0 : (+start || 0);

      var result = this;
      if (result.__filtered__ && (start > 0 || end < 0)) {
        return new LazyWrapper(result);
      }
      if (start < 0) {
        result = result.takeRight(-start);
      } else if (start) {
        result = result.drop(start);
      }
      if (end !== undefined) {
        end = (+end || 0);
        result = end < 0 ? result.dropRight(-end) : result.take(end - start);
      }
      return result;
    };

    LazyWrapper.prototype.takeRightWhile = function(predicate, thisArg) {
      return this.reverse().takeWhile(predicate, thisArg).reverse();
    };

    LazyWrapper.prototype.toArray = function() {
      return this.take(POSITIVE_INFINITY);
    };

    // Add `LazyWrapper` methods to `lodash.prototype`.
    baseForOwn(LazyWrapper.prototype, function(func, methodName) {
      var checkIteratee = /^(?:filter|map|reject)|While$/.test(methodName),
          retUnwrapped = /^(?:first|last)$/.test(methodName),
          lodashFunc = lodash[retUnwrapped ? ('take' + (methodName == 'last' ? 'Right' : '')) : methodName];

      if (!lodashFunc) {
        return;
      }
      lodash.prototype[methodName] = function() {
        var args = retUnwrapped ? [1] : arguments,
            chainAll = this.__chain__,
            value = this.__wrapped__,
            isHybrid = !!this.__actions__.length,
            isLazy = value instanceof LazyWrapper,
            iteratee = args[0],
            useLazy = isLazy || isArray(value);

        if (useLazy && checkIteratee && typeof iteratee == 'function' && iteratee.length != 1) {
          // Avoid lazy use if the iteratee has a "length" value other than `1`.
          isLazy = useLazy = false;
        }
        var interceptor = function(value) {
          return (retUnwrapped && chainAll)
            ? lodashFunc(value, 1)[0]
            : lodashFunc.apply(undefined, arrayPush([value], args));
        };

        var action = { 'func': thru, 'args': [interceptor], 'thisArg': undefined },
            onlyLazy = isLazy && !isHybrid;

        if (retUnwrapped && !chainAll) {
          if (onlyLazy) {
            value = value.clone();
            value.__actions__.push(action);
            return func.call(value);
          }
          return lodashFunc.call(undefined, this.value())[0];
        }
        if (!retUnwrapped && useLazy) {
          value = onlyLazy ? value : new LazyWrapper(this);
          var result = func.apply(value, args);
          result.__actions__.push(action);
          return new LodashWrapper(result, chainAll);
        }
        return this.thru(interceptor);
      };
    });

    // Add `Array` and `String` methods to `lodash.prototype`.
    arrayEach(['join', 'pop', 'push', 'replace', 'shift', 'sort', 'splice', 'split', 'unshift'], function(methodName) {
      var func = (/^(?:replace|split)$/.test(methodName) ? stringProto : arrayProto)[methodName],
          chainName = /^(?:push|sort|unshift)$/.test(methodName) ? 'tap' : 'thru',
          retUnwrapped = /^(?:join|pop|replace|shift)$/.test(methodName);

      lodash.prototype[methodName] = function() {
        var args = arguments;
        if (retUnwrapped && !this.__chain__) {
          return func.apply(this.value(), args);
        }
        return this[chainName](function(value) {
          return func.apply(value, args);
        });
      };
    });

    // Map minified function names to their real names.
    baseForOwn(LazyWrapper.prototype, function(func, methodName) {
      var lodashFunc = lodash[methodName];
      if (lodashFunc) {
        var key = lodashFunc.name,
            names = realNames[key] || (realNames[key] = []);

        names.push({ 'name': methodName, 'func': lodashFunc });
      }
    });

    realNames[createHybridWrapper(undefined, BIND_KEY_FLAG).name] = [{ 'name': 'wrapper', 'func': undefined }];

    // Add functions to the lazy wrapper.
    LazyWrapper.prototype.clone = lazyClone;
    LazyWrapper.prototype.reverse = lazyReverse;
    LazyWrapper.prototype.value = lazyValue;

    // Add chaining functions to the `lodash` wrapper.
    lodash.prototype.chain = wrapperChain;
    lodash.prototype.commit = wrapperCommit;
    lodash.prototype.concat = wrapperConcat;
    lodash.prototype.plant = wrapperPlant;
    lodash.prototype.reverse = wrapperReverse;
    lodash.prototype.toString = wrapperToString;
    lodash.prototype.run = lodash.prototype.toJSON = lodash.prototype.valueOf = lodash.prototype.value = wrapperValue;

    // Add function aliases to the `lodash` wrapper.
    lodash.prototype.collect = lodash.prototype.map;
    lodash.prototype.head = lodash.prototype.first;
    lodash.prototype.select = lodash.prototype.filter;
    lodash.prototype.tail = lodash.prototype.rest;

    return lodash;
  }

  /*--------------------------------------------------------------------------*/

  // Export lodash.
  var _ = runInContext();

  // Some AMD build optimizers like r.js check for condition patterns like the following:
  if (typeof define == 'function' && typeof define.amd == 'object' && define.amd) {
    // Expose lodash to the global object when an AMD loader is present to avoid
    // errors in cases where lodash is loaded by a script tag and not intended
    // as an AMD module. See http://requirejs.org/docs/errors.html#mismatch for
    // more details.
    root._ = _;

    // Define as an anonymous module so, through path mapping, it can be
    // referenced as the "underscore" module.
    define(function() {
      return _;
    });
  }
  // Check for `exports` after `define` in case a build optimizer adds an `exports` object.
  else if (freeExports && freeModule) {
    // Export for Node.js or RingoJS.
    if (moduleExports) {
      (freeModule.exports = _)._ = _;
    }
    // Export for Rhino with CommonJS support.
    else {
      freeExports._ = _;
    }
  }
  else {
    // Export for a browser or Rhino.
    root._ = _;
  }
}.call(this));

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{}],2:[function(require,module,exports){
(function (global){
(function(f){if(typeof exports==="object"&&typeof module!=="undefined"){module.exports=f()}else if(typeof define==="function"&&define.amd){define([],f)}else{var g;if(typeof window!=="undefined"){g=window}else if(typeof global!=="undefined"){g=global}else if(typeof self!=="undefined"){g=self}else{g=this}g.mggpPlayer = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
"use strict";

//CDN TEST 1
var MggpPlayer = module.exports = function () {

    var player = {};

    var _vendors = [];
    var _plugins = [];
    var _observer = new Observer();
    var _contentVendor = null;
    var _updatePlayerTimer = null;
    var _data = {};
    var _methods = [
        'play',
        'pause',
        'togglePlayPause',
        'seekTo',
        'mute',
        'unMute',
        'setVolume',
        'setQuality',
        'setAudioTrack',
        'setSubtitles'
    ];

    player.on = player.addEventListener = _observer.on;
    player.off = player.removeEventListener = _observer.off;
    player.emit = player.dispatchEvent = _observer.emit;

    player.init = function (pID, pContainer, pConfig, pModules) {
        player.id = pID;
        player.parentContainer = pContainer;
        player.config = pConfig;

        player.use(pModules);

        if(player.config['singleVideoInstance'] == true) {
            var videoInstances = [];
            videoInstances.push(createVideoInstances('ad:vendor:video', document.getElementById('mggp-ad-container')));
            videoInstances.push(createVideoInstances('player:video'));
            player.registerProperty('videoInstances', null, true);
            player.set('videoInstances', videoInstances);
        }

        player.emit('player:ready');
    };

    player.use = function (modules) {
        modules.forEach(function (module) {
            if (module.hasOwnProperty('default')) module = module['default'];
            if (module.hasOwnProperty('mimeTypes')) {
                _vendors.push(module);
            } else {
                _plugins.push(new module(player, player.config));
            }
        });
    };

    _methods.forEach(function (methodName) {
        player[methodName] = function () {
            if (_contentVendor && _contentVendor[methodName]) {
                _contentVendor[methodName].apply(_contentVendor, arguments);
            }
        }
    });

    player.canPlay = function (pExtension) {
        return player.getVendor(pExtension) != null;
    };

    player.load = function (pSrc, pVideoInfo, pParams) {
        player.utils.log("MggpPlayer.load():");
        player.set('vendorOptions', pParams || {});
        player.set('src', pSrc || null);
        player.set('videoInfo', pVideoInfo || null);

        if (!_updatePlayerTimer) {
            player.utils.log("MggpPlayer.load:Create timer");
            _updatePlayerTimer = setInterval(onGlobalUpdate, player.config && player.config.hasOwnProperty('timeInterval') ? player.config['timeInterval'] : 1000 / 3);
        }

        _plugins.forEach(function (plugin) {
            if (typeof plugin.load === 'function') {
                plugin.load(pSrc, pVideoInfo, pParams);
            }
        });

        var prerollNeedShowed = player.get('preroll') || false;
        if (prerollNeedShowed == true) {
            player.emit('ads:load');
            return;
        }

        var errorType, errorCode, errorMessage;


        //process null src error
        if (!pSrc && !pVideoInfo.src) {
            errorType = AddonError.errorTypes.INTERNAL_ERROR;
            errorCode = AddonError.errorCodes[errorType].SRC_IS_NOT_FOUND;
            errorMessage = AddonError.errorMessages[errorCode];
            new AddonError(player, errorType, errorCode, errorMessage, true);
            return;
        }

        var ext = player.utils.getExtension(pSrc || pVideoInfo.src);

        if (!player.canPlay(ext)) {
            // player.utils.log("MggpPlayer.load: Vendor from " + ext + " not found!");

            errorType = AddonError.errorTypes.PLAYBACK_ERROR;
            errorCode = AddonError.errorCodes[errorType].MEDIA_FILE_IS_NOT_SUPPORTED;
            errorMessage = AddonError.errorMessages[errorCode];
            new AddonError(player, errorType, errorCode, errorMessage, true);
            return;
        }

        if (_contentVendor && _contentVendor.constructor.mimeTypes.indexOf(ext) == -1) {
            _contentVendor.stop();
            _contentVendor = null;
        }

        if (!_contentVendor) {
            var vendor = player.getVendor(ext);
            if (vendor) {
                _contentVendor = new vendor(player, player.config);
            } else {
                // player.emit('player:error', {message: 'Vendor not found from ' + ext});
                errorType = AddonError.errorTypes.PLAYBACK_ERROR;
                errorCode = AddonError.errorCodes[errorType].MEDIA_FILE_IS_NOT_SUPPORTED;
                errorMessage = AddonError.errorMessages[errorCode];
                new AddonError(player, errorType, errorCode, errorMessage, true);
                return;
            }
        }

        _contentVendor.load(pSrc, pVideoInfo, pParams);
    };

    player.showAnotherAd = function (url, adType) {
        if (!_updatePlayerTimer) {
            player.utils.log("MggpPlayer.showAnotherAd:Create timer");
            _updatePlayerTimer = setInterval(onGlobalUpdate, player.config && player.config.hasOwnProperty('timeInterval') ? player.config['timeInterval'] : 1000 / 3);
        }
        player.emit('ad:showAnotherAd', {'url': url, 'type': adType});
    };

    player.get = function (pName) {
        if (!_data.hasOwnProperty(pName)) {
            player.utils.log('MggpPlayer:get: Property ' + pName + ' not found');
            return null;
        }

        return _data[pName].value;
    };

    player.set = function (pName, pValue) {
        if (!_data[pName]) {
            player.registerProperty(pName);
        }

        if (_data[pName] && _data[pName].value != pValue) {
            _data[pName].value = pValue;
            player.emit('property:' + pName, pValue);
        }
    };

    player.registerProperty = function (pName, pDefaultValue, pNotResetable) {
        if (_data.hasOwnProperty(pName)) {
            player.utils.log('MggpPlayer:registerProperty: Property ' + pName + ' already registered');
            return;
        }
        _data[pName] = {};
        _data[pName].resetable = pNotResetable !== true;
        _data[pName].value = _data[pName]['default'] = pDefaultValue;

    };

    player.reset = function () {
        for (var name in _data) {
            if (_data[name].resetable) {
                _data[name].value = _data[name]['default'];
            }
        }
    };

    player.stop = function () {
        player.emit('player:stop');

        window.clearInterval(_updatePlayerTimer);

        if (_contentVendor) {
            _contentVendor.stop();
            _contentVendor = null;
        }

        player.reset();

        _updatePlayerTimer = null;
    };

    player.dispose = function () {
        player.stop();

        _plugins.forEach(function (plugin) {
            plugin.dispose();
        });

        _observer.dispose();

        _vendors = null;
        _plugins = null;
        _observer = null;
        _contentVendor = null;
        _updatePlayerTimer = null;
        _data = null;

    };

    player.getVendor = function (pExtension) {
        if(pExtension=='mp4' && _contentVendor && player.config['maxVendorInstances'] == 1)
            return null;

        if (_vendors.length == 1) return _vendors[0];

        var vendor = null;

        for (var i = 0; i < _vendors.length; i++) {
            if (_vendors[i] && _vendors[i].mimeTypes.indexOf(pExtension) >= 0 && _vendors[i].canPlay(pExtension, player.config)) {
                if (!vendor || _vendors[i]['priority'] < vendor['priority']) {
                    vendor = _vendors[i];
                }
            }
        }

        return vendor;
    };

    player.getPlayableElement = function() {
        var elem = null;
        if (_contentVendor) {
            elem = _contentVendor.getPlayableElement();
        }
        return elem;
    };

    player.utils = {};
    // player.utils.getExtension = function (pUrl) {
    //     var result = "";
    //     var basename = String(pUrl).split(/[\\/]/).pop();
    //     var pos = basename.lastIndexOf(".");
    //     if (basename && pos >= 1) {
    //         var getParamsPos = basename.indexOf('?');
    //         if (getParamsPos != -1) {
    //             result = basename.slice(pos + 1, getParamsPos);
    //         } else {
    //             result = basename.slice(pos + 1);
    //         }
    //     }
    //     return result;
    // };
    player.utils.getExtension = function (pURL) {
        var result = '';
        var getPos = pURL.lastIndexOf('?');
        if (getPos != -1) {
            pURL = pURL.slice(0, getPos);
        }
        var dotPos = pURL.lastIndexOf('.');
        if (dotPos != -1) {
            result = pURL.slice(dotPos + 1);
        }
        return result;
    };


    player.utils.merge = function (obj1, obj2) {
        obj1 = Object.create(obj1);
        for (var name in obj2) {
            if (obj2.hasOwnProperty(name)) {
                obj1[name] = obj2[name];
            }
        }
        return obj1;
    };

    player.utils.log = function (params) {
        if (player.config && player.config.hasOwnProperty('debug') && player.config['debug'] === true) {
            var date = new Date();
            console.log(
                date.getHours()
                + ":"
                + date.getMinutes()
                + ":"
                + date.getSeconds()
                + ":"
                + date.getMilliseconds()
                + ' -> ', params);
        }
    };

    var onGlobalUpdate = function () {
        player.emit('player:timeUpdate');
    };

    var createVideoInstances = function(pName, pContainer) {
        var video = document.createElement('video');

        pContainer ? pContainer.appendChild(video) : player.parentContainer.appendChild(video);

        video.className = pName;
        video.style.position = 'absolute';
        player.registerProperty(pName, video, true);

        return video;
    };

    player.registerProperty('volume', 60, true);
    player.registerProperty('position', 0);
    player.registerProperty('duration', 0);
    player.registerProperty('state', -1);
    player.registerProperty('loadedFraction', 0);
    player.registerProperty('muted', false, true);

    player.registerProperty('videoInfo', {}, true);
    player.registerProperty('src', null);
    player.registerProperty('vendorOptions', {});
    player.registerProperty('advertisement', false);

    player.registerProperty('quality', -1);
    player.registerProperty('qualityList', [], true);
    player.registerProperty('audioTrack', 0);
    player.registerProperty('audioTrackList', [], true);
    player.registerProperty('subtitles', "off");
    player.registerProperty('subtitlesList', [], true);

    player.on('property:state', function(pEvent) {
        if(pEvent.data == 0) { // Ended
            var postrollNeedShowed = player.get('postroll') || false;
            if (postrollNeedShowed == true) {

                if (_contentVendor) {
                    _contentVendor.stop();
                    _contentVendor = null;
                }

                player.emit('ad:playerEnded');
            } else {
                player.emit('player:completed');
            }
        }
    });

    return player;
};

var Observer = function () {
    var self = this;
    self.listeners = {};

    var emitted = false;
    var needToDelete = [];
    var needToEmit = [];
    var emptyCallback = function () {
    };

    this.dispose = function () {
        self.listeners = null;

        needToDelete = null;
        needToEmit = null;
    };

    this.on = function (evt, callback) {

        if (!self.listeners.hasOwnProperty(evt)) {
            self.listeners[evt] = [];
        } else {
            if (self.listeners[evt].indexOf(callback) >= 0) {
                return;
            }
        }

        self.listeners[evt].push(callback);

    };

    this.off = function (evt, callback) {

        if (self.listeners.hasOwnProperty(evt)) {
            var i, length;

            for (i = 0, length = self.listeners[evt].length; i < length; i += 1) {

                if (self.listeners[evt][i] === callback) {

                    if (emitted) {
                        self.listeners[evt][i] = emptyCallback;
                        needToDelete.push(evt);
                    } else {
                        self.listeners[evt].splice(i, 1);
                        if (self.listeners[evt].length == 0) {
                            delete self.listeners[evt];
                        }
                    }
                }
            }
        }
    };

    this.emit = function (pEventName, pData) {
        if (!pEventName || pEventName == 'undefined') return;

        if (emitted) {
            needToEmit.push({evt: pEventName, data: pData});
            return;
        }

        emitted = true;
        var i;

        if (self.listeners.hasOwnProperty(pEventName)) {

            for (i = 0; i < self.listeners[pEventName].length; i++) {
                self.listeners[pEventName][i]({name: pEventName, data: pData});
            }
        }

        if (self.listeners.hasOwnProperty(pEventName.slice(0, pEventName.lastIndexOf(':')) + ":*")) {
            var namespaceGroup = pEventName.slice(0, pEventName.lastIndexOf(':')) + ":*";

            for (i = 0; i < self.listeners[namespaceGroup].length; i++) {
                self.listeners[namespaceGroup][i]({name: pEventName, data: pData});
            }
        }

        emitted = false;
        
        while (needToDelete.length > 0) {
            var deleteTask = needToDelete.shift();
            self.off(deleteTask, emptyCallback);
        }

        if (needToEmit.length > 0) {
            var emitTask = needToEmit.shift();
            self.emit(emitTask.evt, emitTask.data);
        }

    };

    this.isExist = function (pEventName, pCallback) {
        var result = false;
        if (typeof pCallback === 'function') {
            result = self.listeners[pEventName] && self.listeners[pEventName].indexOf != -1;
        } else {
            result = self.listeners[pEventName] && self.listeners.length > 0;
        }
        return result;
    }
};

/**
 * Player addon error
 * @class
 * @augments Error
 */

var AddonError = MggpPlayer.AddonError = function AddonError(pPlayer, pType, pCode, pMessage, pFatal) {
    var date = new Date();
    var message = date.getHours() + ":" + date.getMinutes() + ":" + date.getSeconds()
        + ":" + date.getMilliseconds() + ' -> ' +
        pType + '->' + pCode + '->' + pMessage;
    if (pFatal) {
        console.error(message);
    } else {
        console.warn(message);
    }

    if(!pPlayer) {
        return;
    }
    pPlayer.emit('mediaError', {
        name:this.constructor.name,
        type:pType,
        code:pCode,
        message:pMessage || 'Player Addon Error',
        fatal:pFatal || false
    });
};
AddonError.prototype = Object.create(Error.prototype);
AddonError.prototype.constructor = AddonError;
AddonError.errorTypes = {
    NETWORK_ERROR: 'networkError',
    PLAYBACK_ERROR: 'playbackError',
    INTERNAL_ERROR: 'internalError',
    PARSING_ERROR: 'parsingError'
};
AddonError.errorCodes = {
    'networkError': {
        PLAYLIST_LOADING_ERROR: 'playlistLoadingError',
        CHUNKLIST_LOADING_ERROR: 'chunklistLoadingError',
        CHUNK_LOADING_ERROR: 'chunkLoadingError',
        KEY_LOADING_ERROR: 'keyLoadingError',
        MEDIA_FILE_LOADING_ERROR: 'mediaFileLoadingError',
        FILE_LOADING_ERROR: 'fileLoadingError'
    },
    'playbackError': {
        MEDIA_FILE_IS_NOT_SUPPORTED: 'mediaFileIsNotSupported',
        PARSING_ERROR: 'parsingError',
        DECODING_ERROR: 'decodingError',
        LEVEL_SWITCH_ERROR: 'levelSwitchError'
    },
    'internalError': {
        SRC_IS_NOT_FOUND: 'srcIsNotFound',
        CANNOT_INJECT_PLAYABLE_ELEMENT: 'cannotInjectPlayableElement',
        BUFFER_APPEND_ERROR: 'bufferAppendError'
    },
    'parsingError': {
        PARSING_ERROR: 'parsingError'
    }
};
AddonError.errorMessages = {
    'playlistLoadingError': 'Cannot load playlist from url: ',
    'chunklistLoadingError': 'Cannot load chunklist from url: ',
    'chunkLoadingError': 'Cannot load chunk from url: ',
    'mediaFileLoadingError': 'Cannot load media file from url: ',
    'fileLoadingError': 'Cannot load file from url: ',
    'mediaFileIsNotSupported': 'Unable to play file. Format is not supported. Url: ',
    'parsingError': 'Error on playlist or chunklist parsing. Url: ',
    'decodingError': 'Error on video decoding. Url: ',
    'levelSwitchError': 'Error while trying to switch level',
    'srcIsNotFound': 'Src field is undefined or it is an empty string',
    'cannotInjectPlayableElement': 'Cannot inject playable element in DOM',
    'bufferAppendError': 'Cannot append data to source buffer',
    'cannotParse': 'Cannot parse data from url:'
};


/**
 *
 * @type {MggpPlayer.Plugin}
 */
var MggpPlugin = MggpPlayer.Plugin = function (pPlayer, pConfig) {
    this.config = pConfig || {};
    this.player = pPlayer || {};
    this.container = this.player.parentContainer || document.body;
    this.namespace = 'plugin:';
};

MggpPlugin.prototype.dispose = function () {

};

MggpPlugin.prototype.emit = function (pEventName, pData) {
    if (this.player.emit) {
        this.player.emit(this.namespace + pEventName, pData);
    }
};

MggpPlugin.prototype.log = function (pMessage) {
    this.player.utils ? this.player.utils.log(pMessage) : console.log(pMessage);
};

/**
 *
 * @param pPlayer
 * @param pConfig
 * @constructor
 */
var MggpVendor = MggpPlayer.Vendor = function (pPlayer, pConfig) {
    this.DEFAULT_NAMESPACE = 'player:';

    this.config = pConfig || {};
    this.player = pPlayer || {};
    this.container = this.player.parentContainer || document.body;
    this.namespace = this.DEFAULT_NAMESPACE;

    this.STREAM_ERROR = 'STREAM_ERROR';
};

MggpVendor.prototype.canPlay = function (pType) {
    return true;
};

MggpVendor.prototype.setQuality = function (pBitrate) {
    this.emit('qualityNeedChange', pBitrate);
};

MggpVendor.prototype.setAudioTrack = function (pIndex) {
    this.emit('audioTackNeedChange', pIndex);
};

MggpVendor.prototype.setSubtitles = function (pLang) {
    this.emit('subtitlesNeedChange', pLang);
};

MggpVendor.prototype.emit = function (pEventName, pData) {
    if (this.player) {
        this.player.emit(this.namespace + pEventName, pData);
    }
};

MggpVendor.prototype.set = function (pPropertyName, pValue) {
    if (this.player) {
        this.player.set(this.namespace != this.DEFAULT_NAMESPACE ? this.namespace + pPropertyName : pPropertyName, pValue);
    }
};

MggpVendor.prototype.get = function (pPropertyName) {
    return this.player && this.player.get ? this.player.get(this.namespace != this.DEFAULT_NAMESPACE ? this.namespace + pPropertyName : pPropertyName) : null;
};

MggpVendor.prototype.checkOptions = function (pOptions) {
    if (pOptions.hasOwnProperty('container')) {
        this.container = pOptions['container'];
    }

    if (pOptions.hasOwnProperty('namespace')) {
        this.namespace = pOptions['namespace'];

        if (this.player && this.namespace != this.DEFAULT_NAMESPACE) {
            this.player.registerProperty(this.namespace + 'volume', 60, true);
            this.player.registerProperty(this.namespace + 'position', 0);
            this.player.registerProperty(this.namespace + 'duration', 0);
            this.player.registerProperty(this.namespace + 'state', -1);
            this.player.registerProperty(this.namespace + 'loadedFraction', 0);
            this.player.registerProperty(this.namespace + 'muted', false, true);
        }
    }

    if (pOptions.hasOwnProperty('defaultAudioTrack')) {
        var audioTrack = parseInt(pOptions['defaultAudioTrack']);
        if (isNaN(audioTrack)) audioTrack = String(pOptions['defaultAudioTrack']);
        delete pOptions['defaultAudioTrack'];
        this.setAudioTrack(audioTrack);

        return false;
    }

    if (pOptions.hasOwnProperty('defaultQuality')) {
        var quality = parseInt(pOptions['defaultQuality']);
        delete pOptions['defaultQuality'];
        if (quality != 0) {
            this.setQuality(quality);
            return false;
        }
    }

    if (pOptions.hasOwnProperty('defaultSubtitles')) {
        this.setSubtitles(pOptions['defaultSubtitles']);
        delete pOptions['defaultSubtitles'];
    }

    return true;
};

MggpVendor.prototype.log = function (pMessage) {
    this.player && this.player.utils ? this.player.utils.log(pMessage) : console.log(pMessage);
};

MggpVendor.prototype.getPlayableElement = function() {
    return null;
};
},{}]},{},[1])(1)
});
}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{}],3:[function(require,module,exports){
/**
 * Created by User on 18/02/2016.
 */
var AdConsts = {
	//ad types
	AFTER_PAUSE_ROLL: 'afterpauseroll',
	OVERLAY: 'overlay',
	PAUSE_ROLL: 'pauseroll',
	POSTROLL: 'postroll',
	PREROLL: 'preroll',
	MIDROLL: 'midroll',
	START_SCREEN: 'startscreen',

	//ad time units
	PERCENT: 'PERCENT',
	SECONDS: 'SECONDS',

	//Miscellaneous constants
	GOOGLE_IN_VAST: 'googleInVast',
	ALLOW_BLOCK: 'Allowblock',

	//Play states
	STATE_PLAY: 'PLAY',
	STATE_PAUSE: 'PAUSE',
	STATE_RESUME: 'RESUME',
	STATE_COMPLETE: 'COMPLETE',

	//block's events
	BLOCK_STARTED: 'ad:block:started',
	BLOCK_STARTING_NEW_ELEMENT: 'ad:block:startingNewElement',
	BLOCK_ENDED: 'ad:block:ended',

	//element's events
	MEMBER_READY_TO_SHOW: 'ad:blockMember:readyToShow',
	MEMBER_ERROR: 'ad:blockMember:error',
	MEMBER_COMPLETE: 'ad:blockMember:complete',

	//playlist's events
	PLAYLIST_READY: 'ad:playlist:ready',
	PLAYLIST_ERROR: 'ad:playlist:error',

	//model's events
	MODEL_READY: 'ad:model:ready',
	MODEL_PLAYLIST_IS_EMPTY: 'ad:model:playlistError',
	MODEL_PLAYLIST_LOADING_ERROR: 'ad:model:playlistLoadingError',
	MODEL_PLAYLIST_PARSING_ERROR: 'ad:model:playlistParsingError',

	//element's events
	ELEMENT_CREATING_SUCCESS: 'ad:element:creatingSuccess',
	ELEMENT_CREATING_FAIL: 'ad:element:creatingFail',

	//vendor's events
	VENDOR_STATE_CHANGE: 'ad:vendor:stateChange',
	VENDOR_MEDIA_ERROR: 'ad:vendor:mediaError',
	VENDOR_ERROR: 'ad:vendor:error',
	VENDOR_EVENT_PROPERTY_POSITION: 'property:ad:vendor:position',

	//player's events
	PLAYER_EVENT_PROPERTY_VIDEO_INFO: 'property:videoInfo',
	PLAYER_EVENT_PROPERTY_POSITION: 'property:position',
	PLAYER_EVENT_STATE_CHANGE: 'player:stateChange',
	PLAYER_EVENT_STOP: 'player:stop',
	PLAYER_EVENT_MEDIA_BEFORE_COMPLETE: 'player:mediaBeforeComplete',

	//player's states (and vendors too)
	PLAYER_STATE_ENDED: 0,
	PLAYER_STATE_PLAYING: 1,
	PLAYER_STATE_PAUSED: 2,
	PLAYER_STATE_BUFFERING: 3,

	//Global ad plugin events
	AD_PLAYLIST_LOADING_COMPLETE: 'ad:external:playlistLoadingComplete',
	AD_PLAYLIST_LOADING_ERROR: 'ad:external:playlistLoadingError',
	AD_MEMBER_STARTED_PLAYING: 'ad:external:memberStartedPlaying',
	AD_NOBANNER: 'ad:external:nobanner',
	AD_XML_LOADING_TIMEOUT: 'ad:external:xmlLoadingTimeout',
	AD_MEDIA_LOADING_TIMEOUT: 'ad:external:mediaLoadingTimeout',
	AD_DUPLICATE_MEDIA: 'ad:external:duplicateMedia',
	AD_VAST_DATA: 'ad:external:vastData',
	AD_BLOCK_STARTED: 'ad:external:blockStarted',
	AD_MEMBER_STARTED_LOADING_NEW_URL: 'ad:external:startedLoadingNewURL',
	AD_XML_LOADING_TIME: 'ad:external:xmlLoadingTime',
	AD_CLOSING_ON_RUNNING_AD: 'ad:external:closingOnRunningAd',
	AD_VAST_EVENT: 'ad:external:vastEvent',
	AD_VAST_XML_INVALID: 'ad:external:vastXMLInvalid',
	AD_MEDIA_BEGINS_LOADING: 'ad:external:mediaBeginsLoading',
	AD_COMPLETE: 'ad:external:adComplete',
	AD_XML_LOADING_ERROR: 'ad:external:xmlLoadingError',
	AD_MEDIAFILE_VENDOR_ERROR: 'ad:external:mediaFileVendorError',
	AD_CANNOT_DISPLAY_MEDIAFILE: 'ad:external:cannotDisplayMediafile',
	AD_WILL_START_IN: 'ad:external:adWillStartIn',
	AD_GOOGLE_IN_VAST: 'ad:external:googleInVast',

	//Input external common events
	AD_SHOW_ANOTHER_AD: 'ad:showAnotherAd',

	//External events for ad
	AD_SKIN_VOLUME_CHANGED: 'ad:skin:volumeChanged',
	AD_SKIN_MUTE_CHANGED: 'ad:skin:muteChanged',
	AD_SKIN_RESUME: 'ad:skin:resume',
	AD_SKIN_PAUSE: 'ad:skin:pause',
	AD_SKIN_CLICK_ON_BG: 'ad:skin:clickOnBg',
	AD_SKIN_CLICK_ON_MESSAGE: 'ad:skin:clickOnMessage',
	AD_SKIN_SKIP_BUTTON: 'ad:skin:skipButton',
	AD_SKIN_SKIP_MESSAGE: 'ad:skin:skipMessage',

	//this event plugin expects, when need to show postroll with videoState = COMPLETE on smartTVs
	AD_PLAYER_ENDED: 'ad:playerEnded',

	//Other internal events
	MEDIAFILE_TIMEOUT: 'ad:internal:mediafileTimeout',
	MEDIAFILE_VENDOR_ERROR: 'ad:internal:mediaFileVendorError',
	NOBANNER: 'ad:internal:nobanner',
	XML_TIMEOUT: 'ad:internal:xmlTimeout',
	XML_LOADED: 'ad:internal:xmlLoaded',
	XML_LOADING_ERROR: 'ad:internal:xmlLoadingError',
	XML_PARSING_ERROR: 'ad:internal:xmlParsingError',
	BLOCK_STARTED_DE_FACTO: 'ad:internal:blockStarted',
	MEMBER_STARTED_DE_FACTO: 'ad:internal:memberStarted',
	MEMBER_BEGIN_LOADING: 'ad:internal:memberBeginLoading',
	DUPLICATE_MEDIAFILE: 'ad:internal:duplicateMediaFile',
	PAGE_CLOSING: 'ad:internal:pageClosing',
	VAST_EVENT: 'ad:internal:vastEvent',
	XML_INVALID: 'ad:internal:xmlInvalid',
	MEDIA_BEGINS_LOADING: 'ad:internal:mediaBeginsLoading',
	CANNOT_FIND_VENDOR: 'ad:internal:cannotFindVendor',
	
	//different constants
	DEVICE_TYPE: 'web',
	PROTOCOL: 'http:',
	APP_VERSION: ''
};
/**
 * Created by User on 17/02/2016.
 */
var Plugin = require('mggp-player').Plugin;
var AddonError = require('mggp-player').AddonError;

function MggpPluginAd(player, options){
	Plugin.apply(this, arguments);

	this.dispose = function() {
		_model.dispose();
		_customAdType = null;
		_prevPlayerState = -1;
		Observer.off([AdConsts.BLOCK_STARTED, AdConsts.BLOCK_STARTING_NEW_ELEMENT, AdConsts.BLOCK_ENDED], _onBlockListener);
		Observer.off([AdConsts.AD_SKIN_VOLUME_CHANGED, AdConsts.AD_SKIN_MUTE_CHANGED, AdConsts.AD_SKIN_RESUME, AdConsts.AD_SKIN_PAUSE,
					AdConsts.AD_SKIN_CLICK_ON_BG, AdConsts.AD_SKIN_CLICK_ON_MESSAGE, AdConsts.AD_SKIN_SKIP_BUTTON, AdConsts.AD_SKIN_SKIP_MESSAGE],
			_onSkinEvent);
		Observer.off([AdConsts.MODEL_READY, AdConsts.MODEL_PLAYLIST_IS_EMPTY, AdConsts.MODEL_PLAYLIST_LOADING_ERROR,
			AdConsts.MODEL_PLAYLIST_PARSING_ERROR], _onModelEvent);
		Observer.off(AdConsts.AD_SHOW_ANOTHER_AD, onShowAnotherAd);
		Observer.off(AdConsts.AD_PLAYER_ENDED, _onPlayerEnded);
		// _player.off(AdConsts.PLAYER_EVENT_PROPERTY_VIDEO_INFO, _onPlayerEvent);
		_player.off(AdConsts.PLAYER_EVENT_PROPERTY_POSITION, _onPlayerEvent);
		_player.off(AdConsts.PLAYER_EVENT_STATE_CHANGE, _onPlayerEvent);
		_player.off(AdConsts.PLAYER_EVENT_STOP, _onPlayerEvent);
		_player.off(AdConsts.PLAYER_EVENT_MEDIA_BEFORE_COMPLETE, _onPlayerEvent);
		window.removeEventListener('unload', _onUnload);
		_player.set('ad:showing', false);
		_player.set('ad:timeLabels', null);
		_player.set('postroll', false);
		_config = null;
		if (_currentMember) {
			// _completeCurrentMember();
			_stopCurrentBlock();
		}
	};

	this.load = function(src, videoInfo, params) {
		if (!videoInfo || (_config
				&& (_config.video_id === videoInfo.video_id || _config.src === videoInfo.src))) {
			return;
		}
		_config = videoInfo;
		_prevPlayerState = -1;
		if (_currentMember) {
			// _completeCurrentMember();
			_stopCurrentBlock();
		}
		_player.set('postroll', false);
		if (_model) {
			_model.playlist.dispose();
			_customAdType = null;
		} else {
			_model = new AdModel();
		}

		_player.set('ad:timeLabels', null);
		if(!_config.advert_data &&  !_config.advert_url)	 {
			_player.set('preroll', false);
			return;
		} else {
			_player.set('preroll', true);
		}

		_model.beginProcessAd(_config.advert_data, _config.advert_url);
	};

	//PRIVATES
	var onShowAnotherAd = function(event) {
		if (!event.data) {
			return;
		}
		var url = event.data.url,
			type = event.data.type;
		if (_currentMember) {
			// _completeCurrentMember();
			_stopCurrentBlock();
		}
		if (_model) {
			_model.playlist.dispose();
		} else {
			_model = new AdModel();
		}
		_player.set('postroll', false);
		_customAdType = type;
		_model.beginProcessAd(null, url);
	};

	var _onPlayerEvent = function(event) {
		var currentTime, duration, state;
		switch (event.name) {
			// case AdConsts.PLAYER_EVENT_MEDIA_BEFORE_COMPLETE:
			case AdConsts.PLAYER_EVENT_STOP:
				if (_currentMember) {
					// _completeCurrentMember();
					_stopCurrentBlock();
				}
				if (_model) {
					_model.playlist.dispose();
				}
				_player.set('postroll', false);
				_player.set('ad:showing', false);
				_player.set('ad:timeLabels', null);
				_config = null;
				break;

			case AdConsts.PLAYER_EVENT_PROPERTY_POSITION:
				currentTime = _player.get('position');
				duration = _player.get('duration');
				var playerState = _player.get('state');
				state = playerState === AdConsts.PLAYER_STATE_PLAYING ? AdConsts.STATE_PLAY :
					playerState === AdConsts.PLAYER_STATE_PAUSED ? AdConsts.STATE_PAUSE : null;
				if (state) {
					_run(state, currentTime, duration);
				}
				if (_currentMember && !_currentMember.linear && duration - currentTime <= 5) {
					_stopCurrentBlock();
				}

				break;

			case AdConsts.PLAYER_EVENT_STATE_CHANGE:
				if (!_model.playlist.currentBlock
						&& (event.data == AdConsts.PLAYER_STATE_PLAYING || event.data == AdConsts.PLAYER_STATE_PAUSED)) {
					currentTime = _player.get('position');
					duration = _player.get('duration');
					if (event.data == AdConsts.PLAYER_STATE_PLAYING && _prevPlayerState == AdConsts.PLAYER_STATE_PAUSED) {
						state = AdConsts.STATE_RESUME;
					} else if (event.data == AdConsts.PLAYER_STATE_PAUSED && _prevPlayerState == AdConsts.PLAYER_STATE_PLAYING) {
						state = AdConsts.STATE_PAUSE;
					}
					if (state) {
						_run(state, currentTime, duration);
					}
					_prevPlayerState = event.data;
				}
				break;
		}
	};

	var _onSkinEvent = function(event) {
		if (!_vendor) {
			return;
		}
		switch (event.name) {
			case AdConsts.AD_SKIN_VOLUME_CHANGED:
				_vendor.setVolume(event.data);
				_player.set('volume', event.data);
				_player.setVolume(event.data);
				if (event.data > 0) {
					_player.set('muted', false);
					_player.unMute();
				}
				break;
			case AdConsts.AD_SKIN_MUTE_CHANGED:
				if (event.data === true) {
					_vendor.mute();
					_player.set('volume', 0);
					_player.mute();
					if (_currentMember) {
						_currentMember.track('mute');
					}
				} else if (event.data === false) {
					_vendor.unMute();
					_player.set('volume', _player.get('ad:vendor:volume'));
					_player.unMute();
					if (_currentMember) {
						_currentMember.track('unmute');
					}
				}
				_player.set('muted', event.data);
				break;
			case AdConsts.AD_SKIN_RESUME:
				if (_player.get('ad:vendor:state') !== 1) {
					_vendor.play();
					if (_currentMember) {
						_currentMember.track('resume');
					}
				}
				break;
			case AdConsts.AD_SKIN_PAUSE:
				if (_player.get('ad:vendor:state') !== 2) {
					_vendor.pause();
					if (_currentMember) {
						_currentMember.track('pause');
					}
				}
				break;
			case AdConsts.AD_SKIN_CLICK_ON_BG:
				if (_player.get('ad:vendor:state') !== 2) {
					_vendor.pause();
				}
				if (_currentMember) {
					_currentMember.track('click');
					_currentMember.track('pause');
				}
				if (player.config && player.config.deviceType === 'tv') {
					// _completeCurrentMember();
					_stopCurrentBlock();
				}
				break;
			case AdConsts.AD_SKIN_CLICK_ON_MESSAGE:
				if (_player.get('ad:vendor:state') !== 2) {
					_vendor.pause();
				}
				if (_currentMember) {
					_currentMember.track('click2');
					_currentMember.track('pause'); 
				}
				if (player.config && player.config.deviceType === 'tv') {
					// _completeCurrentMember();
					_stopCurrentBlock();
				}
				break;
			case AdConsts.AD_SKIN_SKIP_MESSAGE:
				if (_currentMember) {
					_currentMember.track('skip');
				}
				_completeCurrentMember();
				break;
			case AdConsts.AD_SKIN_SKIP_BUTTON:
				if (_currentMember) {
					_currentMember.track('skip2');
				}
				_completeCurrentMember();
				break;
		}
	};

	var _run = function(state, currentTime, duration) {
		_model.run(state, currentTime, duration);
	};

	var _beginLoadMainContent = function() {
		_player.set('preroll', false);
		_player.load(_player.get('src'), _player.get('videoInfo'), _player.get('vendorOptions'));
	};

	var _onModelEvent = function(event) {
		switch (event.name) {
			case AdConsts.MODEL_READY:
				Observer.on([AdConsts.BLOCK_STARTED, AdConsts.BLOCK_STARTING_NEW_ELEMENT, AdConsts.BLOCK_ENDED], _onBlockListener);

				var postrollBlocks = _model.playlist.getBlockByType(AdConsts.POSTROLL);
				for (var i = 0, l = postrollBlocks.length; i < l; ++i) {
					if (postrollBlocks[i] && postrollBlocks[i].videoState == AdConsts.STATE_COMPLETE) {
						_player.set('postroll', true);
						break;
					}
				}

				if (_customAdType) {
					if (_customAdType == AdConsts.START_SCREEN) {
						_model.playlist.run(AdConsts.STATE_PLAY, 0, 1, AdConsts.START_SCREEN);
					}
					break;
				}

				_processAdTimeLabels();
				if (_model.hasPreroll) {
					_run(AdConsts.STATE_PLAY, 0, 1);
				} else {
					_beginLoadMainContent();
				}
				break;
			case AdConsts.MODEL_PLAYLIST_IS_EMPTY:
			case AdConsts.MODEL_PLAYLIST_LOADING_ERROR:
			case AdConsts.MODEL_PLAYLIST_PARSING_ERROR:
				_beginLoadMainContent();
				break;
		}
	};

	var _onBlockListener = function(event) {
		switch (event.name) {
			case AdConsts.BLOCK_STARTED:
				_blockStartedDefactoFired = false;
				break;

			case AdConsts.BLOCK_STARTING_NEW_ELEMENT:
				// if (!_model) {
				// 	_player.emit('kibana:warning', {"message": '_onBlockListener: model is null'});
				// } else if (!_model.playlist) {
				// 	_player.emit('kibana:warning', {"message": '_onBlockListener: playlist is null'});
				// } else if (!_model.playlist.currentBlock) {
				// 	_player.emit('kibana:warning', {"message": '_onBlockListener: currentBlock is null'});
				// } else if (!_model.playlist.currentBlock.currentMember) {
				// 	_player.emit('kibana:warning', {"message": '_onBlockListener: currentMember is null'});
				// }

				if (_model && _model.playlist && _model.playlist.currentBlock && _model.playlist.currentBlock.currentMember) {
					_currentMember = _model.playlist.currentBlock.currentMember;
					var extension = _currentMember.mediaFileExtension;
					if (_currentMember.element && _currentMember.element.vastData && _currentMember.element.vastData.mediaFile) {
						var mediaFile = _currentMember.element.vastData.mediaFile;
						if (mediaFile.length > 0) {
							mediaFile = mediaFile[0];
							if (mediaFile.apiFramework == 'VPAID' && extension != 'js') {
								extension = 'vpaid';
							}
						}
					}

					var vendorClass = _player.getVendor(extension);
					if (vendorClass) {
						_vendor = new vendorClass(_player, {});
						Observer.on([AdConsts.VENDOR_STATE_CHANGE, AdConsts.VENDOR_MEDIA_ERROR, AdConsts.VENDOR_ERROR, AdConsts.VENDOR_EVENT_PROPERTY_POSITION], _onVendorEvent);
						var options = _createOptions(_currentMember);
						_player.set('ad:showing', true);
						_player.set('ad:vendor:volume', _player.get('muted') ? 0 : _player.get('volume'));
						_player.set('ad:vendor:muted', false);

						if (_currentMember.element && _currentMember.element.vastDocument) {
							_currentMember.element.vastDocument.sendReadyEvents();
						}
						
						_vendor.load(_currentMember.mediaFileUrl, null, options);
						if (_contentTimeoutID != null) {
							clearTimeout(_contentTimeoutID);
						}
						Observer.emit(AdConsts.MEDIA_BEGINS_LOADING);

						_contentTimeoutID = setTimeout(_onContentTimeout, 15000);
					} else {
						if (AddonError) {
							var errorType = AddonError.errorTypes.PLAYBACK_ERROR;
							var errorCode = AddonError.errorCodes[errorType].MEDIA_FILE_IS_NOT_SUPPORTED;
							var errorMessage = AddonError.errorMessages[errorCode] + url;
							new AddonError(Observer.getObserverInstance(), errorType, errorCode, errorMessage);
						}

						Observer.emit(AdConsts.CANNOT_FIND_VENDOR);
						VAST3ErrorTracker.track(VAST3ErrorCodes.PLAYER_CANNOT_DISPLAY);
						var url = _currentMember.mediaFileUrl;
						_completeCurrentMember(true, 'cannot find vendor');
					}
				}
				break;

			case AdConsts.BLOCK_ENDED:
				if (event.data) {

					if (event.data.type === AdConsts.PREROLL && _model && _model.playlist && !_model.playlist.disposed) {
						_beginLoadMainContent();
					} else if (event.data.type === AdConsts.START_SCREEN) {
						//do nothing
					} else if (event.data.linear && event.data.type != AdConsts.PAUSE_ROLL && event.data.videoState != AdConsts.STATE_COMPLETE) {
						_player.play();
					} else if (event.data.videoState == AdConsts.STATE_COMPLETE) {
						_player.emit('player:completed');
					}
				}
				_player.set('ad:showing', false);
				break;
		}
	};

	var _onVendorEvent = function(event) {
		switch (event.name) {
			case AdConsts.VENDOR_STATE_CHANGE:
				var state = _player.get('ad:vendor:state');
				switch (state) {
					case AdConsts.PLAYER_STATE_PLAYING:
						if (_contentTimeoutID) {
							clearTimeout(_contentTimeoutID);
							_contentTimeoutID = null;
							
							if (_currentMember && _currentMember.element && _currentMember.element.vastDocument) {
								_currentMember.element.vastDocument.sendStartEvent();
							}
							
							if (!_blockStartedDefactoFired) {
								Observer.emit(AdConsts.BLOCK_STARTED_DE_FACTO, _currentMember);
								_blockStartedDefactoFired = true; 
							}
							Observer.emit(AdConsts.MEMBER_STARTED_DE_FACTO, _currentMember);
							if (_currentMember && _currentMember.linear) {
								_player.pause();
							}
						}
						break;
					case AdConsts.PLAYER_STATE_ENDED:
						//Logger.log('ad:vendor:state -> ended');
						_completeCurrentMember();
						break;
					case AdConsts.PLAYER_STATE_BUFFERING:
						if (_currentMember && _currentMember.element && _currentMember.element.vastDocument) {
							_currentMember.element.vastDocument.sendStartEvent();
						}
						break;
				}
				break;
			case AdConsts.VENDOR_EVENT_PROPERTY_POSITION:
				if (_currentMember) {
					var position = Math.round(_player.get('ad:vendor:position'));
					var duration = Math.round(_player.get('ad:vendor:duration'));
					_currentMember.track('onTime', [position, duration]);
				}
				break;
			case AdConsts.VENDOR_MEDIA_ERROR:
			case AdConsts.VENDOR_ERROR:
				if (_contentTimeoutID) {
					clearTimeout(_contentTimeoutID);
				}
				VAST3ErrorTracker.track(VAST3ErrorCodes.COUDNT_DISPLAY_MEDIAFILE);
				Observer.emit(AdConsts.MEDIAFILE_VENDOR_ERROR);
				_completeCurrentMember(true, 'vendor error');
				break;
		}
	};

	var _onPlayerEnded = function(event) {
		_model.playlist.run(AdConsts.STATE_COMPLETE, 0, 0, AdConsts.POSTROLL);
	};

	var _completeCurrentMember = function(isError, reason) {
		Observer.off([AdConsts.VENDOR_STATE_CHANGE, AdConsts.VENDOR_MEDIA_ERROR, AdConsts.VENDOR_ERROR, AdConsts.VENDOR_EVENT_PROPERTY_POSITION], _onVendorEvent);
		//we don't know, container in view had created or had not created, we must 100% remove it from DOM
		_view.removeCurrentContainer();

		var name = '';
		try {
			if (isError) {
				name = _vendor.__proto__.constructor.name;
			}
		} catch (error) {
 
		}

		if (_vendor) {
			_vendor.stop();
			_vendor = null;
		}

		if (isError && _currentMember) {
			// Observer.emit('kibana:warning', {
			// 	"message": reason + '; ' + name,
			// 	"type": 'testEvent',
			// 	'code': 'vastError',
			// 	'appVersion': AdConsts.APP_VERSION
			// });

			_currentMember.failed = true;
			if (_currentMember.element && _currentMember.element.vastDocument) {
				_currentMember.element.vastDocument.error();
			}
		}
		_model.currentMemberCompleted();
		_currentMember = null;
	};
	
	var _stopCurrentBlock = function() {
		Observer.off([AdConsts.VENDOR_STATE_CHANGE, AdConsts.VENDOR_MEDIA_ERROR, AdConsts.VENDOR_ERROR, AdConsts.VENDOR_EVENT_PROPERTY_POSITION], _onVendorEvent);
		_view.removeCurrentContainer();
		if (_vendor) {
			_vendor.stop();
			_vendor = null;
		}
		if (_model) {
			_model.stopCurrentBlock();
		}
		_currentMember = null;
	};

	var _onContentTimeout = function() {
		_contentTimeoutID = null;
		Observer.emit(AdConsts.MEDIAFILE_TIMEOUT, _currentMember);
		VAST3ErrorTracker.track(VAST3ErrorCodes.MEDIAFILE_URI_TIMEOUT);
		_completeCurrentMember(true, 'timeout');
	};

	var _onUnload = function(event) {
		Observer.emit(AdConsts.PAGE_CLOSING);
	};

	var _createOptions = function(member) {
		var options = {namespace: 'ad:vendor:', autoplay: true};
		var extension = member.mediaFileExtension;
		
		if (extension === 'ima') {
			options.container = _view.createIMAContainer();
		} else {
			if (!member.linear) {
				options.container = _view.createOverlayContainer(member);
			} else {
				options.container = _view.parentContainer;
			}
			if (['jpg', 'jpeg', 'gif', 'png', 'html', 'htm'].indexOf(extension) != -1) {
				options.duration = _currentMember.vastDataDuration || 10;
			} else if (['swf', 'vpaid'].indexOf(extension) != -1) {
				options.vastDocument = _currentMember.element.vastDocument;
			} else if (extension == 'js') {
				if (_currentMember.element.vastDocument.vastData['adparameters'] && _currentMember.element.vastDocument.vastData['adparameters'].length > 0) {
					options.adParameters = _currentMember.element.vastDocument.vastData['adparameters'][0];
				}
				options.vastDocument = _currentMember.element.vastDocument;
				options.container = _view.parentContainer;
			}
		}
		return options;
	};

	var _processAdTimeLabels = function() {
		var duration = _player.get('duration');
		if (duration == 0) {
			_player.on('property:duration', createAdTimeLabels);
		} else {
			createAdTimeLabels();
		}

		function createAdTimeLabels() {
			if (duration == 0) {
				duration = _player.get('duration');
			}
			var timeLabels = [];
			var blocks = _model.playlist.blocks;
			if (blocks) {
				for (var i = 0, l = blocks.length; i < l; ++i) {
					if (blocks[i].type === AdConsts.OVERLAY || blocks[i].type === AdConsts.MIDROLL || blocks[i].type === AdConsts.POSTROLL) {
						timeLabels.push({
							'type': blocks[i].type,
							'time': getStartTime(blocks[i])
						});
					}
				}
			}
			_player.set('ad:timeLabels', timeLabels);
		}

		function getStartTime(member) {
			var result = -1;
			if (member) {
				if (member.timeUnit === AdConsts.PERCENT) {
					result = duration * member.timeStart / 100;
				} else  if (member.timeUnit === AdConsts.SECONDS) {
					result = member.timeStart;
				}
			}
			return result;
		}
	};


	var _vendor = null;
	var _prevPlayerState = -1;
	var _contentTimeoutID = null;
	var _currentMember = null;
	var _blockStartedDefactoFired = false;
	var _model = null;
	var _config = null;
	var _customAdType = null;

	var _player = player;
	var _options = options;

	var parentContainer;
	if (options && options.adContainer) {
		parentContainer = options.adContainer;
	} else {
		parentContainer = player.parentContainer;
	}
	var _view = new View(parentContainer);
	if (player) {
		Logger.initialize(player.utils.log);
		AdURLModificator.initialize(player.config.href);

		Observer.initialize(player);
		Observer.on([AdConsts.MODEL_READY, AdConsts.MODEL_PLAYLIST_IS_EMPTY, AdConsts.MODEL_PLAYLIST_LOADING_ERROR,
			AdConsts.MODEL_PLAYLIST_PARSING_ERROR], _onModelEvent);
		Observer.on([AdConsts.AD_SKIN_VOLUME_CHANGED, AdConsts.AD_SKIN_MUTE_CHANGED, AdConsts.AD_SKIN_RESUME, AdConsts.AD_SKIN_PAUSE,
				AdConsts.AD_SKIN_CLICK_ON_BG, AdConsts.AD_SKIN_CLICK_ON_MESSAGE, AdConsts.AD_SKIN_SKIP_BUTTON, AdConsts.AD_SKIN_SKIP_MESSAGE],
			_onSkinEvent);
		Observer.on(AdConsts.AD_SHOW_ANOTHER_AD, onShowAnotherAd);
		Observer.on(AdConsts.AD_PLAYER_ENDED, _onPlayerEnded);

		player.on(AdConsts.PLAYER_EVENT_PROPERTY_VIDEO_INFO, _onPlayerEvent);
		player.on(AdConsts.PLAYER_EVENT_PROPERTY_POSITION, _onPlayerEvent);
		player.on(AdConsts.PLAYER_EVENT_STATE_CHANGE, _onPlayerEvent);
		player.on(AdConsts.PLAYER_EVENT_STOP, _onPlayerEvent);
		player.on(AdConsts.PLAYER_EVENT_MEDIA_BEFORE_COMPLETE, _onPlayerEvent);
		
		AdConsts.DEVICE_TYPE = player.config.deviceType;
		AdConsts.PROTOCOL = player.config.protocol;
		AdConsts.APP_VERSION= player.config.appVersion;

	}
	window.addEventListener('unload', _onUnload, false);

	_player.set('ad:showing', false);

}
MggpPluginAd.prototype.constructor = MggpPluginAd;
module.exports = MggpPluginAd;

/**
 * Created by User on 18/02/2016.
 */

function AdElementFactory() {

}
AdElementFactory.createElement = function(url) {
	var element;
	if (Utils.isURLisIMA(url)) {
		element = new IMAElement(url);
	} else if (Utils.isStringWithData(url)) {
		element = new AdElement(url)
	}
	return element;
};
AdElementFactory.prototype.constructor = AdElementFactory;
/**
 * Created by User on 18/02/2016.
 */

function AdModel() {
	var self = this;
	var _advertDataUsed = false;
	var _advertData = null;
	var _advertURL = null;
	var _playlist = new Playlist();
	var _externalEventsDispatcher = new ExternalEventsDispatcher(_playlist);

	this.dispose = function() {
		_playlist.dispose();
		_externalEventsDispatcher.dispose();
	};

	this.beginProcessAd = function(advertData, advertURL) {
		_advertData = advertData;
		_advertURL = advertURL;
		if (typeof _advertData === 'string') {
			try {
				_advertData = JSON.parse(_advertData);
			} catch (error) {
				_advertData = null;
			}
		}
		if (_advertData) {
			_processJSONPlaylist(_advertData);
		} else if (_advertURL) {
			_advertDataUsed = true;
			_loadPlaylist(_advertURL);
		} else {
			Observer.emit(AdConsts.MODEL_PLAYLIST_LOADING_ERROR);
		}
	};

	this.run = function(state, currentTime, duration) {
		_playlist.run(state, currentTime, duration);
	};

	this.currentMemberCompleted = function() {
		_playlist.currentMemberCompleted();
	};
	
	this.stopCurrentBlock = function() {
		_playlist.stopCurrentBlock();
	};

	var _loadPlaylist = function(url) {
		if (Utils.isStringWithData(url)) {
			var loader = new Loader();
			loader.load(url, Loader.RESPONSE_TYPE_JSON,
				function(event) { //on success
					if (loader.response) {
						var response = loader.response;
						if (typeof response === 'string') {
							try {
								response = JSON.parse(response);
							} catch (error) {
								Observer.emit(AdConsts.MODEL_PLAYLIST_PARSING_ERROR);
							}
						}
						_processJSONPlaylist(response);
					} else {
						Observer.emit(AdConsts.MODEL_PLAYLIST_IS_EMPTY);
					}
				}, onError, onError, 10000);

			function onError (event) {
				Observer.emit(AdConsts.MODEL_PLAYLIST_LOADING_ERROR);
			}
		}
	};

	var _processJSONPlaylist = function(jsonData) {
		Observer.on([AdConsts.PLAYLIST_READY, AdConsts.PLAYLIST_ERROR], _onPlaylistEvent);
		_playlist.processPlaylistData(jsonData);
	};

	var _onPlaylistEvent = function(event) {
		switch (event.name) {
			case AdConsts.PLAYLIST_READY:
				Observer.emit(AdConsts.MODEL_READY);
				break;
			case AdConsts.PLAYLIST_ERROR:
				if (!_advertDataUsed) {
					_advertDataUsed = true;
					_loadPlaylist(_advertURL);
				} else {
					Observer.emit(AdConsts.MODEL_PLAYLIST_PARSING_ERROR);
				}
				break;
		}
		Observer.off([AdConsts.PLAYLIST_READY, AdConsts.PLAYLIST_ERROR], _onPlaylistEvent);
	};

	Object.defineProperties(this, {
		'playlist': {
			enumerable: true,
			configurable: false,
			get: function () {
				return _playlist;
			}
		},
		'hasPreroll': {
			enumerable: true,
			configurable: false,
			get: function () {
				return _playlist.hasPreroll;
			}
		}
	});
}
AdModel.prototype.constructor = AdModel;

/**
 * Created by User on 18/02/2016.
 */

function Block(videoState, type, timeStart, timeEnd, timeUnit, timeout) {
	var self = this;
	var _members = [];
	var _type = type;
	var _videoState = videoState;
	var _timeStart = timeStart;
	var _timeEnd = timeEnd;
	var _timeUnit = timeUnit;
	var _timeout = timeout;
	var _repeatInterval = void 0;
	var _memberIndex = 0;
	var _linear = type != AdConsts.OVERLAY;
	var _errorMembersCount = 0;
	var _countdownTimerID = null;
	var _countdownTimerPaused = false;
	var _passedSeconds = 0;
	var _zeroAllowBlockIndex = -1;
	var _showed = false;
	var _repeatIntervalTimeoutID = null;
	var _blockIsStopping = false;

	var _currentMember = null;

	this.dispose = function () {
		Observer.off([AdConsts.MEMBER_ERROR, AdConsts.MEMBER_READY_TO_SHOW, AdConsts.MEMBER_COMPLETE], _memberListener);
		if (_currentMember) {
			_memberListener({name: AdConsts.MEMBER_COMPLETE, data: _currentMember});
		}

		_zeroAllowBlockIndex = -1;
		_showed = false;
		_currentMember = null;
		_countdownTimerID = null;
		_passedSeconds = 0;
		_blockIsStopping = false;
		if (_repeatIntervalTimeoutID) {
			clearTimeout(_repeatIntervalTimeoutID);
		}
		if (_countdownTimerID) {
			clearInterval(_countdownTimerID);
			_countdownTimerID = null;
			Observer.off('property:state', onPlayerStateChange);
		}
		if (_members) {
			for (var i = 0; i < _members.length; ++i) {
				_members[i].dispose();
			}
			_members.length = 0;
			_members = null;
		}
	};

	var _sortFunction = function (a, b) {
		if (a.priority > b.priority) {
			return 1;
		}
		if (a.priority < b.priority) {
			return -1;
		}
		return 0;
	};

	this.addAdPlaylistElement = function (element) {
		_members.push(element);
		_members.sort(_sortFunction);
		_timeout = _members[0].timeout;
		_videoState = _members[0].videoState;
		_timeUnit = _members[0].timeUnit;
		_repeatInterval = _members[0].repeatInterval;
	};

	this.show = function () {
		_zeroAllowBlockIndex = -1;
		Observer.on([AdConsts.MEMBER_ERROR, AdConsts.MEMBER_READY_TO_SHOW, AdConsts.MEMBER_COMPLETE], _memberListener);
		if (_memberIndex == 0) {
			_errorMembersCount = 0;
			Observer.emit(AdConsts.BLOCK_STARTED, self);
		}
		_currentMember = _members[_memberIndex++];
		if (_currentMember) {
			_blockIsStopping = false;
			_currentMember.show();
		}
	};

	this.currentMemberCompleted = function () {
		if (_currentMember) {
			_currentMember.completed();
		}
	};

	this.stopBlock = function () {
		_blockIsStopping = true;
		self.currentMemberCompleted();
	};

	this.getMemberNumber = function (member) {
		var result = -1;
		var failedMembersCount = 0;
		var i, l;
		for (i = 0, l = _members.length; i < l; ++i) {
			if (member == _members[i]) {
				result = i + 1 - failedMembersCount; //'+ 1' -- counting starts from 1 not 0.
				break;
			} else if (_members[i].failed) {
				++failedMembersCount;
			}
		}
		return result;
	};

	this.getMembersCount = function (member) {
		var result = 0;
		if (_zeroAllowBlockIndex != -1) {
			result = _zeroAllowBlockIndex + 1;
		} else {
			result = self.membersCount - _errorMembersCount;
		}
		return result;
	};

	var _memberListener = function (event) {
		if (!_currentMember) {
			_endBlock();
			return;
		}
		switch (event.name) {
			case AdConsts.MEMBER_READY_TO_SHOW:
				if (!(_currentMember.element instanceof IMAElement)) {
					_linear = _currentMember.linear;
				}
				var allowBlockArray = _currentMember.getExtensionValue(AdConsts.ALLOW_BLOCK);
				var allowBlock = true;
				try {
					if (Array.isArray(allowBlockArray) && allowBlockArray.length > 0) {
						for (var i = 0, l = allowBlockArray.length; i < l; ++i) {
							allowBlock &= parseInt(allowBlockArray[i]);
						}
						allowBlock = !!allowBlock;
					} else if (typeof allowBlockArray === 'string') {
						allowBlock = parseInt(allowBlockArray) == 1;
					} else {
						allowBlock = true;
					}
				} catch (error) {
					allowBlock = true;
				}
				if (!allowBlock) {
					_zeroAllowBlockIndex = _members.indexOf(event.data);
				}

				if ((_type == AdConsts.MIDROLL || _type == AdConsts.POSTROLL) && !_countdownTimerID && videoState != AdConsts.STATE_COMPLETE
					&& self.getMemberNumber(_currentMember) == 1) {
					registerCountdownTimer();
					_onCountdownTimer();
				} else if (_type == AdConsts.OVERLAY && _currentMember.element.vastData
					&& typeof _currentMember.element.vastData.mediaFile[0].type === 'string'
					&& _currentMember.element.vastData.mediaFile[0].type.indexOf('video') != -1) {
					_memberListener({name: AdConsts.MEMBER_ERROR, data: _currentMember});
				} else {
					Observer.emit(AdConsts.BLOCK_STARTING_NEW_ELEMENT, self);
				}
				break;
			case AdConsts.MEMBER_COMPLETE:
			case AdConsts.MEMBER_ERROR:
				if (_countdownTimerID) {
					clearInterval(_countdownTimerID);
					_countdownTimerID = null;
				}
				if (event.type == AdConsts.MEMBER_ERROR) {
					_currentMember.failed = true;
				}
				_currentMember = null;

				if (event.name == AdConsts.MEMBER_ERROR) {
					++_errorMembersCount;
				}
				if (!_blockIsStopping && _memberIndex < _members.length && _memberIndex != _zeroAllowBlockIndex + 1) {
					//if this is second member in block, we don't need to again run timer
					//so this is not pretty fine hook, but it works
					if (_type == AdConsts.MIDROLL || _type == AdConsts.POSTROLL) {
						_countdownTimerID = 1
					}
					self.show();
					if (_countdownTimerID) {
						_countdownTimerID = null;
					}
				} else {
					_endBlock();
				}
				break;
		}
	};

	var _endBlock = function () {
		if (_type != AdConsts.PAUSE_ROLL && _type != AdConsts.AFTER_PAUSE_ROLL) {
			if (_repeatInterval > 0) {
				if (_repeatIntervalTimeoutID) {
					clearTimeout(_repeatIntervalTimeoutID);
				}
				_repeatIntervalTimeoutID = setTimeout(onRepeatIntervalTimeout, _repeatInterval);
			}
			_showed = true;
		}
		_memberIndex = 0;
		Observer.off([AdConsts.MEMBER_ERROR, AdConsts.MEMBER_READY_TO_SHOW, AdConsts.MEMBER_COMPLETE], _memberListener);
		Observer.emit(AdConsts.BLOCK_ENDED, self);
	};

	var _onCountdownTimer = function () {
		var deltaSeconds = Block.SECONDS_TO_START - _passedSeconds++;
		if (deltaSeconds > 0) {
			Observer.emit(AdConsts.AD_WILL_START_IN, deltaSeconds);
		} else {
			Observer.off('property:state', onPlayerStateChange);
			clearInterval(_countdownTimerID);
			_countdownTimerID = null;
			_passedSeconds = 0;
			Observer.emit(AdConsts.BLOCK_STARTING_NEW_ELEMENT, self);
		}
	};

	function onRepeatIntervalTimeout() {
		_showed = false;
	}

	function registerCountdownTimer() {
		_countdownTimerID = setInterval(_onCountdownTimer, 1000);
		Observer.on('property:state', onPlayerStateChange);
	}

	function onPlayerStateChange(event) {
		if (event.data != AdConsts.PLAYER_STATE_PLAYING) {
			if (_countdownTimerID) {
				clearInterval(_countdownTimerID);
				_countdownTimerPaused = true;
			}
		} else {
			if (_countdownTimerPaused && _currentMember) {
				_countdownTimerPaused = false;
				_countdownTimerID = setInterval(_onCountdownTimer, 1000);
			}
		}
	}

	Object.defineProperties(this, {
		'currentMember': {
			enumerable: true,
			configurable: true,
			get: function () {
				return _currentMember;
			}
		},
		'errorInBlock': {
			enumerable: true,
			configurable: true,
			get: function () {
				return _errorMembersCount >= _members.length;
			}
		},

		'type': {
			enumerable: true,
			configurable: true,
			get: function () {
				return _type;
			}
		},
		'videoState': {
			enumerable: true,
			configurable: true,
			get: function () {
				return _videoState;
			}
		},
		'linear': {
			enumerable: true,
			configurable: true,
			get: function () {
				return _linear;
			}
		},
		'timeStart': {
			enumerable: true,
			configurable: true,
			get: function () {
				return _timeStart;
			}
		},
		'timeEnd': {
			enumerable: true,
			configurable: true,
			get: function () {
				return _timeEnd;
			}
		},
		'timeUnit': {
			enumerable: true,
			configurable: true,
			get: function () {
				return _timeUnit;
			}
		},
		'timeout': {
			enumerable: true,
			configurable: true,
			get: function () {
				return _timeout;
			}
		},
		'currentIndex': {
			enumerable: true,
			configurable: true,
			get: function () {
				return _memberIndex - 1;
			}
		},
		'membersCount': {
			enumerable: true,
			configurable: true,
			get: function () {
				return _members.length;
			}
		},
		'members': {
			enumerable: true,
			configurable: true,
			get: function () {
				return _members;
			}
		},
		'showed': {
			enumerable: true,
			configurable: true,
			get: function () {
				return _showed;
			}
		}
	});
}
Block.prototype.constructor = Block;
Block.SECONDS_TO_START = 5;

/**
 * Created by User on 17/02/2016.
 */

function BlockMember(timeStart, timeEnd, videoState, timeout, timeUnit, priority, type, urls, repeatInterval, minPauseDuration) {
	this.timeStart = timeStart || -1;
	this.timeEnd = timeEnd || -1;
	this.videoState = videoState || null;
	this.timeout = timeout || -1;
	this.timeUnit = timeUnit || null;
	this.priority = priority || -1;
	this.type = type || null;
	this.urls = urls || null;
	this.minPauseDuration = minPauseDuration || null;
	this.repeatinterval = repeatInterval || -1;

	//'true' if this member in some reason hasn't showed
	this.failed = false;

	var self = this;
	var _urlIndex = 0;
	var _adElement = null;
	var _analyticsTag = null;


	this.dispose = function() {
		Observer.off([AdConsts.ELEMENT_CREATING_SUCCESS, AdConsts.ELEMENT_CREATING_FAIL, AdConsts.GOOGLE_IN_VAST], _onAdElementEvent);
		_adElement = null;
	};

	this.show = function() {
		_createAndLoadElement(self.urls[_urlIndex].url, self.urls[_urlIndex].analytics_tag);
	};

	this.completed = function() {
		Observer.emit(AdConsts.MEMBER_COMPLETE, self);
	};

	this.track = function(eventName, params) {
		if (_adElement instanceof AdElement) {
			_adElement.track.call(_adElement, eventName, params);
		}
	};

	this.getExtensionValue = function(key) {
		var result = null;
		if (_adElement && _adElement.vastData && key in _adElement.vastData) {
			result = _adElement.vastData[key];
		}
		return result;
	};

	var _createAndLoadElement = function(url, analyticsTag) {
		_analyticsTag = analyticsTag;
		Observer.on([AdConsts.ELEMENT_CREATING_SUCCESS, AdConsts.ELEMENT_CREATING_FAIL, AdConsts.GOOGLE_IN_VAST], _onAdElementEvent);

		url = AdURLModificator.getInstance().modifyURL(url);

		_adElement = AdElementFactory.createElement(url);
		if (_adElement) {
			_adElement.load();
			Observer.emit(AdConsts.MEMBER_BEGIN_LOADING, self);
		} else {
			_onAdElementEvent({name: AdConsts.ELEMENT_CREATING_FAIL, data:{message: 'AdFactory cannot create element', url: url}});
		}
	};

	var _onAdElementEvent = function(event) {
		switch (event.name) {
			case AdConsts.ELEMENT_CREATING_SUCCESS:
				Observer.off([AdConsts.ELEMENT_CREATING_SUCCESS, AdConsts.ELEMENT_CREATING_FAIL, AdConsts.GOOGLE_IN_VAST], _onAdElementEvent);
				Observer.emit(AdConsts.MEMBER_READY_TO_SHOW, self);
				break;
			case AdConsts.ELEMENT_CREATING_FAIL:
				_analyticsTag = null;
				if (_urlIndex < self.urls.length - 1) {
					++_urlIndex;
					_createAndLoadElement(self.urls[_urlIndex].url, self.urls[_urlIndex].analytics_tag);
				} else {
					_urlIndex = 0;
					self.failed = true;
					Observer.off([AdConsts.ELEMENT_CREATING_SUCCESS, AdConsts.ELEMENT_CREATING_FAIL, AdConsts.GOOGLE_IN_VAST], _onAdElementEvent);
					Observer.emit(AdConsts.MEMBER_ERROR, self);
				}
				break;
			case AdConsts.GOOGLE_IN_VAST:
				_adElement = new IMAElement(event.data);
				_adElement.load();
				break;
		}
	};

	Object.defineProperties(this, {
		'mediaFileExtension': {
			enumerable: true,
			configurable: true,
			get: function () {
				var result = null;
				if (_adElement && _adElement.vastData && _adElement.vastData.mediaFile && _adElement.vastData.mediaFile.length > 0) {
					if (_adElement instanceof IMAElement) {
						result = 'ima';
					} else {
						var name = _adElement.vastData.mediaFile[0].url;
						var paramIndex = name.lastIndexOf('?');
						if (paramIndex != -1) {
							name = name.substring(0, paramIndex);
						}
						result = name.slice(name.lastIndexOf('.') + 1);
					}
				}
				return result;
			}
		},
		'mediaFileUrl': {
			enumerable: true,
			configurable: true,
			get: function() {
				var result = null;
				if (_adElement && _adElement.vastData && _adElement.vastData.mediaFile && _adElement.vastData.mediaFile.length > 0) {
					result = _adElement.vastData.mediaFile[0].url;
				} else if (_adElement instanceof IMAElement) {
					result = _adElement.url;
				}
				return result;
			}
		},
		'mediaFileName': {
			enumerable: true,
			configurable: true,
			get: function() {
				var result = null;
				if (_adElement && _adElement.vastData && _adElement.vastData.mediaFile && _adElement.vastData.mediaFile.length > 0) {
					var name = _adElement.vastData.mediaFile[0].url;
					var index = name.lastIndexOf('?');
					if (index != -1) {
						name = name.substring(0, index);
					}
					index = name.lastIndexOf('/');
					if (index != -1) {
						name = name.slice(index + 1);
					}
					result = name;
				}
				return result;
			}
		},
		'mediaFileDimensions': {
			enumerable: true,
			configurable: true,
			get: function() {
				var dims = {};
				if (_adElement && _adElement.vastData && _adElement.vastData.mediaFile && _adElement.vastData.mediaFile.length > 0) {
					dims.width = _adElement.vastData.mediaFile[0].width;
					dims.height = _adElement.vastData.mediaFile[0].height;
				}
				return dims;
			}
		},
		'loadedXMLURL': {
			enumerable: true,
			configurable: true,
			get: function() {
				if (_adElement) {
					return self.urls[_urlIndex];
				}
				return null;
			}
		},
		'vastDataDuration': {
			enumerable: true,
			configurable: true,
			get: function() {
				var result = 0;
				if (_adElement && _adElement.vastData && _adElement.vastData.duration && _adElement.vastData.duration.length > 0) {
					result = _adElement.vastData.duration[0];
				} else if (_adElement && _adElement.vastData && _adElement.vastData.mediaFile && _adElement.vastData.mediaFile.length > 0) {
					if (_adElement.vastData.mediaFile[0].duration) {
						result = _adElement.vastData.mediaFile[0].duration;
					}
				}
				return result;
			}
		},
		'linear': {
			enumerable: true,
			configurable: true,
			get: function() {
				var result = null;
				if (_adElement) {
					result = _adElement.linear;
				}
				return result;
			}
		},
		'element': {
			enumerable: true,
			configurable: true,
			get: function() {
				return _adElement;
			}
		},
		'analyticsTag': {
			enumerable: true,
			configurable: true,
			get: function() {
				return _analyticsTag;
			}
		}
	});
}
BlockMember.prototype.constructor = BlockMember;

/**
 * Created by User on 02/03/2016.
 */

function ExternalEventsDispatcher(playlist) {
	var self = this;
	var _playlist = playlist;

	this.dispose = function() {
		_playlist = null;
		Observer.off(_events, _onEvent);
	};

	var _onEvent = function(event) {
		var member, count, number, data;
		member = _playlist.currentBlock ? _playlist.currentBlock.currentMember : null;
		if (member) {
			count = _playlist.getMembersCount(member);
			number = _playlist.getMemberNumber(member);
			data = {'count': count, 'number': number, 'type': member.type, 'mediaURL': member.mediaFileUrl,
				'xmlURL': member.loadedXMLURL, linear: member.linear, 'analyticsTag': member.analyticsTag,
				'elementURL': null, 'vastData': null};
			if (member.element) {
				data.elementURL = member.element.url;
				data.vastData = member.element.vastData;
			}
		} else {
			data = {};
			if (_playlist.currentBlock) {
				data.type = _playlist.currentBlock.type;
				data.linear = _playlist.currentBlock.linear;
			}
		}
		switch (event.name) {
			case AdConsts.PLAYLIST_READY:
				Observer.emit(AdConsts.AD_PLAYLIST_LOADING_COMPLETE, data);
				break;
			case AdConsts.PLAYLIST_ERROR:
				Observer.emit(AdConsts.AD_PLAYLIST_LOADING_ERROR, data);
				break;
			case AdConsts.MEMBER_STARTED_DE_FACTO:
				Observer.emit(AdConsts.AD_MEMBER_STARTED_PLAYING, data);
				break;
			case AdConsts.MEMBER_BEGIN_LOADING:
				Observer.emit(AdConsts.AD_MEMBER_STARTED_LOADING_NEW_URL, data);
				break;
			case AdConsts.MEDIAFILE_TIMEOUT:
				Observer.emit(AdConsts.AD_MEDIA_LOADING_TIMEOUT, data);
				break;
			case AdConsts.XML_TIMEOUT:
				Observer.emit(AdConsts.AD_XML_LOADING_TIMEOUT, data);
				break;
			case AdConsts.NOBANNER:
				Observer.emit(AdConsts.AD_NOBANNER, data);
				break;
			case AdConsts.DUPLICATE_MEDIAFILE:
				Observer.emit(AdConsts.AD_DUPLICATE_MEDIA, data);
				break;
			case AdConsts.ELEMENT_CREATING_SUCCESS:
				if (event.data && event.data.vastData) {
					data.vastData = event.data.vastData;
					Observer.emit(AdConsts.AD_VAST_DATA, data);
				}
				break;
			case AdConsts.XML_LOADED:
				data.loadingTime = event.data;
				Observer.emit(AdConsts.AD_XML_LOADING_TIME, data);
				break;
			case AdConsts.BLOCK_STARTED:
				var block = _playlist.currentBlock;
				if (block && block.extended === false) {
					Observer.emit(AdConsts.AD_BLOCK_STARTED, data);
				}
				break;
			case AdConsts.PAGE_CLOSING:
				if (member) {
					Observer.emit(AdConsts.AD_CLOSING_ON_RUNNING_AD, data);
				}
				break;
			case AdConsts.VAST_EVENT:
				data.vastEvent = event.data;
				Observer.emit(AdConsts.AD_VAST_EVENT, data);
				break;
			case AdConsts.XML_INVALID:
				Observer.emit(AdConsts.AD_VAST_XML_INVALID, data);
				break;
			case AdConsts.MEDIA_BEGINS_LOADING:
				Observer.emit(AdConsts.AD_MEDIA_BEGINS_LOADING, data);
				break;
			case AdConsts.BLOCK_ENDED:
				Observer.emit(AdConsts.AD_COMPLETE, data);
				break;
			case AdConsts.XML_LOADING_ERROR:
				Observer.emit(AdConsts.AD_XML_LOADING_ERROR, data);
				break;
			case AdConsts.XML_PARSING_ERROR:
				Observer.emit(AdConsts.AD_VAST_XML_INVALID, data);
				break;
			case AdConsts.MEDIAFILE_VENDOR_ERROR:
				Observer.emit(AdConsts.AD_MEDIAFILE_VENDOR_ERROR, data);
				break;
			case AdConsts.CANNOT_FIND_VENDOR:
				Observer.emit(AdConsts.AD_CANNOT_DISPLAY_MEDIAFILE, data);
				break;
			case AdConsts.GOOGLE_IN_VAST:
				Observer.emit(AdConsts.AD_GOOGLE_IN_VAST, data);
				break;
		}
	};

	var _events = [
		AdConsts.PLAYLIST_READY,
		AdConsts.PLAYLIST_ERROR,
		AdConsts.MEDIAFILE_TIMEOUT,
		AdConsts.XML_TIMEOUT,
		//AdConsts.BLOCK_STARTED_DE_FACTO,
		AdConsts.NOBANNER,
		AdConsts.DUPLICATE_MEDIAFILE,
		AdConsts.ELEMENT_CREATING_SUCCESS,
		AdConsts.MEMBER_STARTED_DE_FACTO,
		AdConsts.XML_LOADED,
		AdConsts.MEMBER_BEGIN_LOADING,
		AdConsts.BLOCK_STARTED,
		AdConsts.PAGE_CLOSING,
		AdConsts.VAST_EVENT,
		AdConsts.XML_INVALID,
		AdConsts.MEDIA_BEGINS_LOADING,
		AdConsts.BLOCK_ENDED,
		AdConsts.XML_LOADING_ERROR,
		AdConsts.XML_PARSING_ERROR,
		AdConsts.MEDIAFILE_VENDOR_ERROR,
		AdConsts.CANNOT_FIND_VENDOR,
		AdConsts.GOOGLE_IN_VAST
	];
	Observer.on(_events, _onEvent);
}
ExternalEventsDispatcher.prototype.constructor = ExternalEventsDispatcher;

/**
 * Created by User on 17/02/2016.
 */

function Playlist() {
	var _blocks = [];
	var _currentBlock = null;
	var _lastCompleteTime = null;
	var _pauseStartTimestamp = 0;
	var _disposed = false;

	this.dispose = function() {
		Observer.off([AdConsts.BLOCK_STARTED, AdConsts.BLOCK_ENDED], _onBlockEvent);
		for (var i = 0, l = _blocks.length; i < l; ++i) {
			_blocks[i].dispose();
		}
		_blocks = [];
		_currentBlock = null;
		_lastCompleteTime = null;
		_disposed = true;
	};

	this.processPlaylistData = function(data) {
		_disposed = false;
		if (data) {
			var adlist = null;
			if (data['Adlist']) {
				adlist = data['Adlist'];
			} else if (data['result'] === 'ok' && data['data']) {
				adlist = data['data'];
			} else {
				Observer.emit(AdConsts.PLAYLIST_ERROR);
			}
			if (adlist) {
				_parsePlaylist(adlist);
				Observer.emit(AdConsts.PLAYLIST_READY);
			}
		} else {
			Observer.emit(AdConsts.PLAYLIST_ERROR);
		}
	};

	this.run = function(state, currentTime, duration, customType) {
		//skip if ad already running
		if (_currentBlock) {
			return;
		}
		if (state === AdConsts.STATE_PAUSE) {
			//getTime in milliseconds, convert it to seconds
			_pauseStartTimestamp = new Date().getTime() / 1000;
		}
		var block;
		var blockStartTime, blockEndTime;
		for (var i = 0, l = _blocks.length; i < l; ++i) {
			block = _blocks[i];
			if (state !== block.videoState) {
				continue;
			}
			if (customType && customType !== block.type) {
				continue;
			}
			if (block.timeUnit === AdConsts.PERCENT) {
				blockStartTime = block.timeStart * duration / 100;
				blockEndTime = block.timeEnd * duration / 100;
			} else {
				blockStartTime = block.timeStart;
				blockEndTime = block.timeEnd;
			}
			if ((block.type == AdConsts.MIDROLL || block.type == AdConsts.POSTROLL) && state != AdConsts.STATE_COMPLETE) {
				if (blockStartTime > Block.SECONDS_TO_START) {
					blockStartTime -= Block.SECONDS_TO_START;
				}
			}
			if (blockStartTime <= currentTime && blockEndTime >= currentTime && !block.showed) {
				if (block.type === AdConsts.AFTER_PAUSE_ROLL) {
					var timestamp = new Date().getTime() / 1000;
					if (block.minPauseDuration > 0 && (timestamp - _pauseStartTimestamp) < block.minPauseDuration) {
						break;
					}
				}
				if (!_needToDropBlockByTimeout(block)) {
					_currentBlock = block;
					Observer.on([AdConsts.BLOCK_STARTED, AdConsts.BLOCK_ENDED], _onBlockEvent);
					block.show();
				}
				break;
			} else if (state == AdConsts.STATE_COMPLETE && block.type == AdConsts.POSTROLL) {
				_currentBlock = block;
				Observer.on([AdConsts.BLOCK_STARTED, AdConsts.BLOCK_ENDED], _onBlockEvent);
				block.show();
			}
		}
	};

	this.currentMemberCompleted = function() {
		if (_currentBlock) {
			_currentBlock.currentMemberCompleted();
		}
	};
	
	this.stopCurrentBlock = function() {
		if (_currentBlock) {
			_currentBlock.stopBlock();
		}
	};

	this.getMembersCount = function(member) {
		var result = 0;
		for (var i = 0, l = _blocks.length; i < l; ++i) {
			if (_blocks[i].type == member.type && _blocks[i].timeStart == member.timeStart) {
				result = _blocks[i].getMembersCount(member);
				break;
			}
		}
		return result;
	};

	this.getMemberNumber = function(member) {
		var result = -1;
		for (var i = 0, l = _blocks.length; i < l; ++i) {
			if (_blocks[i].type == member.type && _blocks[i].timeStart == member.timeStart) {
				result = _blocks[i].getMemberNumber(member);
				break;
			}
		}
		return result;
	};
	
	this.getBlockByType = function(blockType) {
		var result = [];
		for (var i = 0, l = _blocks.length; i < l; ++i) {
			if (_blocks[i].type === blockType) {
				result.push(_blocks[i]);
			}
		}
		return result;
	};

	var _parsePlaylist = function(playlistArray) {
		var blockMember, j, k, foundValidBlock;
		for (var i = 0, l = playlistArray.length; i < l; ++i) {
			blockMember = _processMember(playlistArray[i]);
			foundValidBlock = false;
			for (j = 0, k = _blocks.length; j < k; ++j) {
				if (isValidMember(_blocks[j], blockMember)) {
					_blocks[j].addAdPlaylistElement(blockMember);
					foundValidBlock = true;
					break;
				}
			}
			if (!foundValidBlock) {
				_blocks.push(new Block(
						blockMember.videoState, blockMember.type,
						blockMember.timeStart, blockMember.timeEnd,
						blockMember.timeUnit, blockMember.timeout
					));
				_blocks[_blocks.length - 1].addAdPlaylistElement(blockMember)
			}
		}
	};

	var _needToDropBlockByTimeout = function(block) {
		var result = true,
			nowDateTime = new Date().getTime();
		if (block.timeout == 0) {
			result = false;
		} else if (block.type == AdConsts.OVERLAY || block.type == AdConsts.PAUSE_ROLL) {
			result = false;
		} else if (!_lastCompleteTime) {
			result = false;
		} else if (nowDateTime - _lastCompleteTime.getTime() > block.timeout * 1000) {
			result = false;
		}
		return result;
	};

	var _onBlockEvent = function(event) {
		switch (event.name) {
			case AdConsts.BLOCK_STARTED:
				break;
			case AdConsts.BLOCK_ENDED:
				Observer.off([AdConsts.BLOCK_STARTED, AdConsts.BLOCK_ENDED], _onBlockEvent);
				if (!_currentBlock.errorInBlock) {
					_lastCompleteTime = new Date();
				}
				_currentBlock = null;
		}
	};

	function isValidMember(block, member) {
		return  block.type == member.type && block.timeStart == member.timeStart
			&& block.timeEnd == member.timeEnd && block.videoState == member.videoState
			&& block.timeUnit == member.timeUnit;
	}

	Object.defineProperties(this, {
		'blocks': {
			enumerable: true,
			configurable: true,
			get: function() {
				return _blocks;
			}
		},
		'currentBlock': {
			enumerable: true,
			configurable: true,
			get: function() {
				return _currentBlock;
			}
		},
		'hasPreroll': {
			enumerable: true,
			configurable: true,
			get: function() {
				var result = false;
				for (var i = 0, l = _blocks.length; i < l; ++i) {
					if (_blocks[i].type == AdConsts.PREROLL) {
						result = _blocks[i].membersCount > 0 && _blocks[i].timeStart == 0;
						break;
					}
				}
				return result;
			}
		},
		'disposed': {
		enumerable: true,
			configurable: false,
			get: function () {
			return _disposed;
		}
	}
	});

	var _processMember = function(memberData) {
		var member = new BlockMember();
		member.timeStart = parseInt(memberData['time_start']);
		member.timeEnd = parseInt(memberData['time_end']);
		member.timeUnit = memberData['time_unit'] || AdConsts.SECONDS;
		member.videoState = memberData['video_state'];
		member.priority = parseInt(memberData['priority']);
		member.timeout = parseInt(memberData['timeout']);
		member.type = memberData['type'];
		member.urls = memberData['urls'];
		member.minPauseDuration = memberData['min_pause_duration'];
		member.repeatinterval = memberData['repeat_interval'];
		return member;
	}

}
Playlist.prototype.constructor = Playlist;

/**
 * Created by User on 03/03/2016.
 */

function View(parentContainer) {
	var _parentContainer = parentContainer;
	var _currentContainer = null;

	this.createOverlayContainer = function(member) {
		var container = document.createElement('div');
		container.id = 'ad:overlay';
		var overlayDims = member.mediaFileDimensions;
		var width = 0,
			height = 0;
		try {
			width = parseInt(overlayDims.width);
			height = parseInt(overlayDims.height);
		} catch (error) {
			console.warn('Bad overlay\'s dimensions parsing in mggp-plugin-ad::View.createOverlayContainer');
		}
		if (width) {
			container.style.width = overlayDims.width + 'px';
		}
		if (height) {
			container.style.height = overlayDims.height + 'px';
		}

		_parentContainer.appendChild(container);
		_currentContainer = container;
		return container;
	};

	this.createIMAContainer = function() {
		_currentContainer = document.createElement('div');
		_currentContainer.id = 'ad:imaContainer';
		_currentContainer.style.width = '100%';
		_currentContainer.style.height = '100%';
		_parentContainer.appendChild(_currentContainer);
		return _currentContainer;
	};

	this.removeCurrentContainer = function() {
		if (_currentContainer && _currentContainer.parentNode) {
			_currentContainer.parentNode.removeChild(_currentContainer);
		}
	};

	Object.defineProperty(this, 'parentContainer', {
		enumerable: true,
		get: function() {
			return _parentContainer;
		}
	});
}
View.prototype.constructor = View;

/**
 * Created by User on 08/09/2016.
 */
function AdURLModificator(refferer) {
	var _dl;
	var _refferer = refferer;
	var _this = this;

	this.modifyURL = function (url) {
		if (!url) {
			return;
		}
		if (url.indexOf('.xml') == -1) {
			url = url.substr(url.indexOf('http'));
		}

		if (url.indexOf('ads.adfox.ru') != -1 || url.indexOf('adv.gpm-digital.com') != -1) {
			url = checkPuids(url);
		}

		if (url.indexOf('ad.mail.ru') != -1) {
			url = checkPuidsRB(url);
		}

		if (url.indexOf('bs-meta.yandex.ru') != -1) {
			url = _this.replaceEventURL(url).url;
		}
		return url;
	};

	this.replaceEventURL = function (url) {
		if (!url) {
			return;
		}

		var afReferrer;
		try {
			afReferrer = getAfReferrer();
		} catch (error) {}

		url = url.replace('![rnd]', getRandom());
		url = url.replace('[TIMESTAMP]', new Date().getTime());
		url = url.replace('[RANDOM]', getRandom());
		url = url.replace('[CACHEBUSTING]', getRandom());
		if (_refferer) {
			url = url.replace('[REFERER]', _refferer);
		}
		if (_refferer || afReferrer) {
			url = url.replace('[REFERERER]', afReferrer != 'undefined' ? afReferrer : _refferer);
		}

		url = url.replace('{random}', getRandom());
		if (_refferer) {
			url = url.replace('{referer}', _refferer);
		}
		if (_refferer || afReferrer) {
			url = url.replace('{rereferer}', afReferrer != 'undefined' ? afReferrer : _refferer);
		}

		if ((url.indexOf('ads.adfox.ru') != -1 || url.indexOf('adv.gpm-digital.com') != -1)) {
			var eventDL = getParameterByName('dl', url);

			if (eventDL == '' && _dl && _dl != '') {
				url = url + '&dl=' + _dl;
			}
		}

		return url;
	};


	function checkPuids(url) {

		if (!isFullScreen()) {
			url += '&puid39=1';
			url += '&puid10=1';
		} else {
			url += '&puid39=0';
			url += '&puid10=0';
		}

		if (getParameterByName('dl', url)) {
			_dl = getParameterByName('dl', url);
		}


		/*pt - Флаг URI содержит время на стороне пользователя
		 По умолчанию рекомендуется передавать:pt=b
		 т.к. только в этом случае у Adfox будет возможность обрабатывать время пользователя.
		 pd - Число, только день месяца пользователя. (от 1 до 31)
		 pw - Число, только недели пользователя ( 1 – понедельник, 2 – вторник, 3 – среда, 4 – четверг, 5 – пятница, 6 – суббота, 7 – воскресенье)
		 pv - Число, только час пользователя (от 0 до 24)*/

		var date = new Date();
		url += '&pt=b';
		url += '&pd=' + date.getDate();
		url += '&pw=' + date.getDay();
		url += '&pv=' + date.getHours();

		var puid42 = getParameterByName('puid42');
		if (puid42 == '') {
			var regExp = /&puid42=/g;
			if (url.search(regExp) != -1) {
				url = url.replace(/&puid42=/g, '');
			}
		}

		var videoWidth, videoHeight;
		var playerContainer = document.getElementById('playerContainer');

		if (playerContainer) {
			if (playerContainer.offsetWidth / playerContainer.offsetHeight > 16 / 9) {
				videoHeight = playerContainer.offsetHeight;
				videoWidth = videoHeight * (16 / 9);
			} else {
				videoWidth = playerContainer.offsetWidth;
				videoHeight = videoWidth / (16 / 9);
			}
		}
		var playerResolution = 4;

		/*puid9– Размер плеера (5 -Менее 400х225, 0 - от 400х225 до 639х359, 1- от 640х360 до 959х539, 2 - от 960х540 до 1279х719, 3 - 1280х720 и более, 4 - не известно,)*/
		if (videoWidth < 400 && videoHeight < 225) {
			playerResolution = 5;
		} else if ((videoWidth >= 400 && videoHeight >= 225) && (videoWidth < 639 && videoHeight < 359)) {
			playerResolution = 0;
		} else if ((videoWidth >= 640 && videoHeight >= 360) && (videoWidth < 959 && videoHeight < 539)) {
			playerResolution = 1;
		} else if ((videoWidth >= 960 && videoHeight >= 540) && (videoWidth < 1279 && videoHeight < 719)) {
			playerResolution = 2;
		} else if (videoWidth >= 1280 && videoHeight >= 720) {
			playerResolution = 3;
		}

		if (puid42 == "") {
			url += '&puid42=' + playerResolution;
		}

		var puid9 = getParameterByName('puid9', url);
		if (puid9 == '') {
			url += '&puid9=' + playerResolution;
		}

		var eid2 = getParameterByName('eid2', url);
		var vclicksID = 'flash';
		var check;

		try {
			check = readVClicks();
		} catch(error) {}

		if (check) {
			vclicksID = check;
			if (url.indexOf('eid2') != -1) {
				url = url.replace('eid2=' + eid2, 'eid2=vc' + vclicksID);
			} else {
				url += '&eid2=vc' + vclicksID;
			}
		}

		return url;
	}

	function checkPuidsRB(url) {
		if (getParameterByName('dl', url)) {
			_dl = getParameterByName('dl', url);
		}

		var videoWidth, videoHeight;
		var playerContainer = document.getElementById('playerContainer');

		if (playerContainer) {
			if (playerContainer.offsetWidth / playerContainer.offsetHeight > 16 / 9) {
				videoHeight = playerContainer.offsetHeight;
				videoWidth = videoHeight * (16 / 9);
			} else {
				videoWidth = playerContainer.offsetWidth;
				videoHeight = videoWidth / (16 / 9);
			}
		}
		var playerResolution = 4;

		/*puid9– Размер плеера (5 -Менее 400х225, 0 - от 400х225 до 639х359, 1- от 640х360 до 959х539, 2 - от 960х540 до 1279х719, 3 - 1280х720 и более, 4 - не известно,)*/
		if (videoWidth < 400 && videoHeight < 225) {
			playerResolution = 5;
		} else if ((videoWidth >= 400 && videoHeight >= 225) && (videoWidth < 639 && videoHeight < 359)) {
			playerResolution = 0;
		} else if ((videoWidth >= 640 && videoHeight >= 360) && (videoWidth < 959 && videoHeight < 539)) {
			playerResolution = 1;
		} else if ((videoWidth >= 960 && videoHeight >= 540) && (videoWidth < 1279 && videoHeight < 719)) {
			playerResolution = 2;
		} else if (videoWidth >= 1280 && videoHeight >= 720) {
			playerResolution = 3;
		}

		if (url.indexOf('puid10') != -1) {
			if (getParameterByName('puid10', url) == '') {
				url = url.replace(/puid10=/, 'puid10=' + playerResolution);
			}
		} else {
			url += '&puid10=' + playerResolution;
		}

		var puid11 = isFullScreen() ? 0 : 1;
		if (url.indexOf('puid11') != -1) {
			if (getParameterByName('puid11', url) == "") {
				url = url.replace(/puid11=/, 'puid11=' + puid11);
			}
		} else {
			url += '&puid11=' + puid11;
		}

		var eid2 = getParameterByName('eid2', url);
		var vclicksID = 'flash';

		var check;
		try {
			check = readVClicks();
		} catch (error) {}

		if (check) {
			vclicksID = check;
			if (url.indexOf('eid2') != -1) {
				url = url.replace('eid2=' + eid2, 'eid2=vc' + vclicksID);
			} else {
				url += '&eid2=vc' + vclicksID;
			}
		}

		return url;
	}

	function getParameterByName(name, url) {
		name = name.replace(/[\[]/,"\\\[").replace(/[\]]/,"\\\]");
		var regexS = "[\\?&]"+name+"=([^&#]*)";
		var regex = new RegExp( regexS );
		var results = regex.exec(url);
		if( results == null )
			return "";
		else
			return results[1];
	}

	function isFullScreen() {
		return document.fullscreenElement || document.msFullscreenElement || document.mozFullScreenElement || document.webkitFullscreenElement;
	}

	function getRandom() {
		var rnd = Math.random();
		rnd = Math.floor(rnd * 100000000000);
		rnd = rnd < 0 ? -rnd : rnd;
		return rnd;
	}
}

AdURLModificator._instance = null;
AdURLModificator.initialize = function(refferer) {
	AdURLModificator._instance = new AdURLModificator(refferer);
};
AdURLModificator.getInstance = function() {
	if (AdURLModificator._instance) {
		return AdURLModificator._instance;
	}
	throw new Error('AdURLModificator not initialized. Call AdURLModificator.initialize(refferer)');
};

/**
 * Created by User on 18/02/2016.
 */
function Loader() {
	var self = this;
	var loader;

	this.destroy = function() {
		self.abort();
		loader = null;
	};

	this.abort = function() {
		if (loader && loader.readyState !== 4) {
			self.stats.aborted = true;
			loader.abort();
		}
		if (self.timeoutHandle) {
			window.clearTimeout(self.timeoutHandle);
		}
	};

	this.load = function(url, responseType, onSuccess, onError, onTimeout, timeout, useCredentials) {
		if (AdConsts.DEVICE_TYPE !== 'tv') {
			if (AdConsts.PROTOCOL === 'https:') {
				url = url.replace(/http[s]?:/, '');
			}
		}
		self.url = url;
		self.responseType = responseType || Loader.RESPONSE_TYPE_TEXT;
		self.onSuccess = onSuccess;
		self.onTimeout = onTimeout || null;
		self.onError = onError;
		self.timeout = timeout;
		self.useCredentials = useCredentials || false;
		self.maxRetry = 0;
		self._response = null;
		if (timeout) {
			self.timeoutHandle = window.setTimeout(_loadTimeout, timeout);
		}
		self.stats = {trequest: new Date(), retry: 0};
		_loadInternal();
	};

	Object.defineProperty(this, 'response', {
		enumerable: true,
		get: function() {
			return self._response;
		}
	});

	var _loadInternal = function() {
		var xhr = loader = new XMLHttpRequest();
		xhr.onload =  _loadSuccess;
		xhr.onerror = _loadError;
		xhr.onprogress = _loadProgress;
		xhr.open('GET', self.url, true);
		try {
			xhr.responseType = self.responseType;
		} catch (error) {}
		try {
			if (self.useCredentials) {
				xhr.withCredentials = true;
			}
		} catch (error) {}
		self.stats.tfirst = null;
		self.stats.loaded = 0;
		try {
			xhr.send();
		} catch (error) {
			if (self.onError) {
				self.onError(error);
			}
		}
	};

	var _loadSuccess = function(event) {
		if (self.timeoutHandle) {
			window.clearTimeout(self.timeoutHandle);
		}
		if (event.target.status == 200) {
			self.stats.tload = new Date();
			self._response = event.currentTarget.response;
			if (self.onSuccess) {
				self.onSuccess(event, self.stats);
			}
			//errors begin from 400
		} else if (event.target.status >= 400) {
			_loadError(event);
		}
	};

	var _loadError = function(event) {
		if (self.maxRetry === -1 || self.stats.retry < self.maxRetry) {
			self.destroy();
			if (self.timeoutHandle) {
				window.clearTimeout(self.timeoutHandle);
			}
			window.setTimeout(_loadInternal, self.retryDelay);
			// exponential backoff
			self.retryDelay = Math.min(2 * self.retryDelay, 64000);
			self.stats.retry++;
		} else {
			if (self.timeoutHandle) {
				window.clearTimeout(self.timeoutHandle);
			}
			if (self.onError) {
				self.onError(event, self.stats);
			}

			var errorType = AddonError.errorTypes.NETWORK_ERROR;
			var errorCode = AddonError.errorCodes[errorType].FILE_LOADING_ERROR;
			var errorMessage = AddonError.errorMessages[errorCode] + self.url;

			new AddonError(Observer.getObserverInstance(), errorType, errorCode, errorMessage);
		}
	};

	var _loadTimeout = function(event) {
		self.timeoutHandle = null;
		self.abort();
		if (self.onTimeout) {
			self.onTimeout(event, self.stats);
		}
	};

	var _loadProgress = function(event) {
		var stats = self.stats;
		if (stats.tfirst === null) {
			stats.tfirst = new Date();
		}
		stats.loaded = event.loaded;
		if (self.onProgress) {
			self.onProgress(event, stats);
		}
	};

}
Loader.prototype.constructor = Loader;

Loader.RESPONSE_TYPE_JSON = 'json';
Loader.RESPONSE_TYPE_TEXT = 'text';
Loader.RESPONSE_TYPE_DOCUMENT = 'document';
Loader.RESPONSE_TYPE_BLOB = 'blob';
Loader.RESPONSE_TYPE_ARRAYBUFFER = 'arraybuffer';

/**
 * Created by User on 22/02/2016.
 */
function Logger() {

}

Logger.log = function(message) {
	if (Logger._logCallback) {
		Logger._logCallback(message);
	}
};

Logger.initialize = function(logCallback) {
	if (typeof logCallback === 'function') {
		Logger._logCallback = logCallback;
	}
};

Logger._logCallback = null;

/**
 * Created by User on 17/02/2016.
 */

function Observer() {

}
Observer.initialize = function(observer) {
	if (observer) {
		Observer._observer = observer;
		Observer._initialized = true;
	}
};

Observer.emit = function(eventType, params) {
	if (Observer._initialized) {
		Observer._observer.emit(eventType, params);
	}
};

Observer.on = function(eventType, callback) {
	if (Observer._initialized) {
		if (Array.isArray(eventType)) {
			Observer._onEventsFromArray(eventType, callback);
		} else {
			Observer._observer.on(eventType, callback);
		}
	}
};

Observer.off = function(eventType, callback) {
	if (Observer._initialized) {
		if (Array.isArray(eventType)) {
			Observer._offEventsFromArray(eventType, callback);
		} else {
			Observer._observer.off(eventType, callback);
		}
	}
};

Observer.getObserverInstance = function() {
	return Observer._observer;
};

Observer._onEventsFromArray = function(eventTypes, callback) {
	for (var i = 0, l = eventTypes.length; i < l; ++i) {
		Observer.on(eventTypes[i], callback);
	}
};

Observer._offEventsFromArray = function(eventTypes, callback) {
	for (var i = 0, l = eventTypes.length; i < l; ++i) {
		Observer.off(eventTypes[i], callback);
	}
};

Observer._initialized = false;
Observer._observer = null;


/**
 * Created by User on 18/02/2016.
 */

function Utils() {

}
Utils.isStringWithData = function(string) {
	return string && typeof string === 'string' && string.length > 0;
};

Utils.isURLisIMA = function(url) {
	return url ? url.indexOf('g.doubleclick') != -1 : false;
};

/**
 * Created by User on 18/04/2016.
 */
var VAST3ErrorCodes = {
	/** XML parsing error **/
	XML_PARSING_ERROR: 100,

	/** VAST schema validation error **/
	VAST_VALIDATION_ERROR: 101,

	/** VAST version of response not supported. **/
	VAST_NOT_SUPPORTED: 102,

	/** Trafficking error. Video player received an Ad type that it was not expecting and/or cannot 
	 display **/
	PLAYER_CANNOT_DISPLAY: 200,

	/** Video player expecting different linearity **/
	EXPECTING_DIFFERENT_LINEARITY: 201,

	/** Video player expecting different duration. **/
	EXPECTING_DIFFERENT_DURATION: 202,

	/** Video player expecting different size. **/
	EXPECTING_DIFFERENT_SIZE: 203,

	/** General Wrapper error. **/
	GENERAL_WRAPPER_ERROR: 300,

	/** Timeout of VAST URI provided in Wrapper element, or of VAST URI provided in a subsequent 
	 Wrapper element. (URI was either unavailable or reached a timeout as defined by the video 
	 player.) **/
	VAST_TAG_URI_TIMEOUT: 301,

	/** Wrapper limit reached, as defined by the video player. Too many Wrapper responses have 
	 been received with no InLine response.  **/
	WRAPPER_LIMIT_REACHED: 302,

	/** No Ads VAST response after one or more Wrappers.  **/
	NO_VAST_IN_WRAPPERS: 303,

	/** General Linear error. Video player is unable to display the Linear Ad. **/
	UNABLE_TO_DISPLAY_LINEAR_AD: 400,

	/** File not found. Unable to find Linear/MediaFile from URI. **/
	MEDIAFILE_URI_404: 401,

	/** Timeout of MediaFile URI. **/
	MEDIAFILE_URI_TIMEOUT: 402,

	/** Couldn’t find MediaFile that is supported by this video player, based on the attributes of the 
	 MediaFile element. **/
	COUDNT_FIND_SUPPORTED_MEDIAFILE: 403,

	/** Problem displaying MediaFile. Video player found a MediaFile with supported type but 
	 couldn’t display it. MediaFile may include: unsupported codecs, different MIME type than 
	 MediaFile@type, unsupported delivery method, etc. **/
	COUDNT_DISPLAY_MEDIAFILE: 405,

	/** General NonLinearAds error. **/
	GENERAL_NONLINEAR_ADS_ERROR: 500,

	/** Unable to display NonLinear Ad because creative dimensions do not align with creative 
	 display area (i.e. creative dimension too large). **/
	NONLINEAR_CREATIVE_TOO_LARGE: 501,

	/** Unable to fetch NonLinearAds/NonLinear resource **/
	UNABLE_TO_FETCH_NONLINEAR_ADS: 502,

	/** Couldn’t find NonLinear resource with supported type. **/
	COUDNT_FIND_SUPPORTED_NONLINEAR_RESOURCE: 503,

	/** General CompanionAds error. **/
	GENERAL_COMPANION_AD: 600,

	/** Unable to display Companion because creative dimensions do not fit within Companion
	 display area (i.e., no available space). **/
	NO_AVAILABLE_SPACE_FOR_COMPANION_ADS: 601,

	/** Unable to display Required Companion. **/
	UNABLE_TO_DISPLAY_COMPANION: 602,

	/** Unable to fetch CompanionAds/Companion resource **/
	UNABLE_TO_FETCH_COMPANION: 603,

	/** Couldn’t find Companion resource with supported type **/
	COUDNT_FIND_SUPPORTED_COMPANION_RESOURCE_TYPE: 604,

	/** Undefined Error. **/
	UNDEFINED_ERROR: 900,

	/** General VPAID error **/
	GENERAL_VPAID_ERROR: 901
};
/**
 * Created by User on 18/04/2016.
 */
function VAST3ErrorTracker() {

};

VAST3ErrorTracker.initialize = function(urls) {
	VAST3ErrorTracker._errorURLs = urls;
};

VAST3ErrorTracker.track = function(code) {
	if (VAST3ErrorTracker._errorURLs && VAST3ErrorTracker._errorURLs.length) {
		var url, loader;
		for (var i = 0, l = VAST3ErrorTracker._errorURLs.length; i < l; ++i) {
			url = VAST3ErrorTracker._errorURLs[i];
			while (url.indexOf('[ERRORCODE]') != -1) {
				url = url.replace('[ERRORCODE]', code);
			}
			if (Utils.isStringWithData(url)) {
				// loader = new Loader();
				// loader.load(url);
				var img = document.createElement('img');
				img.src = url;
			}
		}
	}
};

VAST3ErrorTracker.reset = function() {
	VAST3ErrorTracker._errorURLs = null;
};

VAST3ErrorTracker._errorURLs = null;
/**
 * Created by User on 18/02/2016.
 */
function AdElement(url) {
	AdElementBase.apply(this, arguments);
	this._vastDocument = null;
	var self = this;

	this.load = function() {
		self._vastDocument = new VastDocument();


		// self._url = 'http://10.10.14.85:3012/html5_player/plugins/mggp-plugin-ad/dev/vast_2.xml';


		self._vastDocument.getMedia(self._url, _onVastDocumentCallback);
	};

	this.track = function(eventName, params) {
		if (self._vastDocument && typeof self._vastDocument[eventName] === 'function') {
			//make array from params for calling function by 'apply'
			if (!Array.isArray(params)) {
				params = [params];
			}
			self._vastDocument[eventName].apply(self._vastDocument, params);
		}
	};


	Object.defineProperties(this, {
		'trackingData': {
			enumerable: true,
			configurable: true,
			get: function() {
				var result = null;
				if (self._vastDocument) {
					if (self._vastDocument.isLinear) {
						result = self._vastDocument.trackingData
					} else {
						result = self._vastDocument.trackingDataNonLinear;
					}
				}
				return result;
			}
		},
		'vastData': {
			enumerable: true,
			configurable: true,
			get: function() {
				var result = null;
				if (self._vastDocument) {
					result = self._vastDocument.vastData;
				}
				return result;
			}
		},
		'linear': {
			enumerable: true,
			configurable: true,
			get: function () {
				return self._vastDocument ? self._vastDocument.isLinear : null;
			}
		},
		'vastDocument': {
			enumerable: true,
			configurable: true,
			get: function() {
				return self._vastDocument;
			}
		}
	});

	var _onVastDocumentCallback = function(response) {
		if (response.isError === false) {
			Observer.emit(AdConsts.ELEMENT_CREATING_SUCCESS, self);
		} else if (response.isError === true) {
			if (response.error && response.error.length > 0) {
				for (var i = 0, l = response.error.length; i < l; ++i) {
					if (Utils.isStringWithData(response.error[i])) {
						try {
							document.createElement('img').src = response.error[i];
						} catch (error) {}
					}
				}
			}
			Observer.emit(AdConsts.ELEMENT_CREATING_FAIL, self);
		} else if (AdConsts.GOOGLE_IN_VAST in response) {
			Observer.emit(AdConsts.GOOGLE_IN_VAST, response[AdConsts.GOOGLE_IN_VAST]);
		}
	}

}
AdElement.prototype.constructor = AdElement;
//module.export = AdElement;
















/**
 * Created by User on 18/02/2016.
 */

function AdElementBase(url) {
	var self = this;
	this._url = url;

	this.dispose = function() {};

	this.load = function() {};

	this.track = function() {};

	Object.defineProperties(this, {
		'url': {
			enumerable: true,
			configurable: true,
			get: function () {
				return self._url;
			},
			set: function (url) {
				self._url = url;
			}
		},
		'trackingData': {
			writable: false,
			enumerable: true,
			configurable: true,
			value: null
		},
		'vastData': {
			writable: false,
			enumerable: true,
			configurable: true,
			value: null
		},
		'linear': {
			writable: false,
			enumerable: true,
			configurable: true,
			value: null
		}
	});
}

AdElementBase.prototype.constructor = AdElementBase;

//module.export = AdElementBase;
/**
 * Created by User on 04/03/2016.
 */

function IMAElement(url) {
	// url = 'https://pubads.g.doubleclick.net/gampad/ads?sz=640x480&iu=/124319096/external/single_ad_samples&ciu_szs=300x250&impl=s&gdfp_req=1&env=vp&output=vast&unviewed_position_start=1&cust_params=deployment%3Ddevsite%26sample_ct%3Dlinear&correlator=';

	AdElementBase.apply(this, arguments);

	var vastData = {
		mediaFile: [{
			url: url,
			type: ''
		}],
		controls: [0]
	};
	var isLinear = null;
	var self = this;

	this.load = function() {
		Observer.on('ad:vendor:imaIsLinear', onIsLinear);
		Observer.on('ad:vendor:mediaError', onVendorMediaError);
		Observer.emit(AdConsts.ELEMENT_CREATING_SUCCESS, self);
	};

	function onIsLinear(event) {
		Observer.off('ad:vendor:imaIsLinear', onIsLinear);
		Observer.off('ad:vendor:mediaError', onVendorMediaError);
		isLinear = event.data;
	}

	function onVendorMediaError(event) {
		Observer.off('ad:vendor:imaIsLinear', onIsLinear);
		Observer.off('ad:vendor:mediaError', onVendorMediaError);
	}

	Object.defineProperties(this, {
		'trackingData': {
			enumerable: true,
			configurable: true,
			get: function() {
				var result = null;
				if (self._vastDocument) {
					if (self._vastDocument.isLinear) {
						result = self._vastDocument.trackingData
					} else {
						result = self._vastDocument.trackingDataNonLinear;
					}
				}
				return result;
			}
		},
		'vastData': {
			enumerable: true,
			configurable: true,
			get: function() {
				return vastData;
			}
		},
		'linear': {
			enumerable: true,
			configurable: true,
			get: function () {
				return isLinear
			}
		}
	});
}
IMAElement.prototype.constructor = IMAElement;

/**
 * Created by User on 18/02/2016.
 */

function VastDocument() {
	this.ERROR = "error";
	this.NOBANNER = "nobanner";
	this.COMPLETE = "complete";
	this.LOADING = "loading";

	this.currentType = null;
	this.currentURL = null;
	this.showed = false;
	this.currentState = null;
	this.prevState = null;
	this.lastStatus = null;
	this.isLinear = true;

	this.trackingData = {};
	this.trackingDataNonLinear = {};
	this.vastData = {};

	this.callback = null;

	this.logging = false;

	this.logElement = null;
	var spaceRegExr = /^\s+|\s+$/gm;

	var self = this;
	var wrapperIsLoading = false;

	this.getMedia = function (url, callback, currentType) {

		self.currentURL = url;
		self.currentType = currentType || '';
		self.callback = callback;

		self.trackingData = {};
		self.trackingDataNonLinear = {};
		self.vastData = {};
		self.isLinear = true;

		self.trackStarted = false;
		self.trackFirstQuartile = false;
		self.trackMidpoint = false;
		self.trackThirdQuertile = false;
		self.trackEnd = false;

		return _load(url);
	};

	var _status = function (pDescription) {
		self.lastStatus = {
			isError: self.currentState == self.ERROR || self.currentState == self.NOBANNER,
			state: self.currentState,
			prevState: self.prevState,
			message: pDescription,
			vastDocument: self
		};
		if (self.lastStatus.isError) {
			self.lastStatus['error'] = self.trackingData['error'];
		}

		if (self.logging) {
			(console._log(self.lastStatus));
		}

		return self.lastStatus;
	};

	var _setState = function (pNewState) {
		if (pNewState != self.currentState) {
			self.prevState = self.currentState;
			self.currentState = pNewState;
		}
	};

	var _load = function (pUrl) {
		VAST3ErrorTracker.reset();
		_setState(self.LOADING);
		_status('Load ' + self.currentType + ' from ' + self.currentURL);
		self.showed = true;

		var loader = new Loader();
		loader.load(pUrl, Loader.RESPONSE_TYPE_DOCUMENT,
			function (event, stats) { //success callback
				_log('loader success: ' + pUrl);
				_onXmlLoaded(event.currentTarget.responseXML, stats.tload.getTime() - stats.trequest.getTime());
			}, function (event) {
				_log('loader error: ' + pUrl);
				Observer.emit(AdConsts.XML_LOADING_ERROR);
				_onXMLLoadedError(event);
			}, function (event) {
				if (wrapperIsLoading) {
					VAST3ErrorTracker.track(VAST3ErrorCodes.VAST_TAG_URI_TIMEOUT);
				}
				Observer.emit(AdConsts.XML_TIMEOUT);
				_onXMLLoadedError(event);
			}, 10000, true);


		return self.lastStatus;
	};

	var _onXMLLoadedError = function (err) {
		_close();
		_setState(self.ERROR);
		if (typeof self.callback === 'function') {
			if (err) {
				self.callback(_status('Error loading xml. Status: ' + err.status + ' ' + err.statusText));
			} else {
				self.callback(_status('Timeout on loading xml'));
			}
		}
	};

	var _onXmlLoaded = function (pXML, loadingTime) {
		var st = null;

		Observer.emit(AdConsts.XML_LOADED, loadingTime);
		try {
			if (pXML.firstChild.nodeName == 'nobanner') {
				_log('vast: nobanner');
				_setState(self.NOBANNER);
				st = _status(self.NOBANNER);
				_close();
				Observer.emit(AdConsts.NOBANNER);
			} else if (pXML.firstChild.nodeName != 'VAST') {
				_log('vast: 0');
				_setState(self.ERROR);
				st = _status('VAST tag not found!');
				_close();
				Observer.emit(AdConsts.XML_INVALID);
				if (wrapperIsLoading) {
					VAST3ErrorTracker.track(VAST3ErrorCodes.NO_VAST_IN_WRAPPERS);
				}
			}

			for (var i = 0, length = pXML.childNodes.length; i < length; i++) {
				_processNode(pXML.childNodes[i]);
			}

		} catch (err) {
			_close();
			_setState(self.ERROR);
			st = _status(err);
			Observer.emit(AdConsts.XML_PARSING_ERROR);
		}

		if (st != null) {
			if (typeof self.callback === 'function') {
				self.callback(st);
				return;
			}
		}

		if (self.vastData.vastadtaguri) {
			var wrapperURL = self.vastData.vastadtaguri[0];
			self.vastData.vastadtaguri = null;
			wrapperIsLoading = true;
			if (Utils.isURLisIMA(wrapperURL)) {
				if (typeof self.callback === 'function') {
					var data = {};
					data[AdConsts.GOOGLE_IN_VAST] = wrapperURL;
					self.callback(data);
				}
			} else {
				_load(wrapperURL);
			}
			return;
		} else {
			wrapperIsLoading = false;
		}

		if (self.trackingData['error']) {
			VAST3ErrorTracker.initialize(self.trackingData['error']);
		}

		if (self.vastData.mediaFile && self.vastData.mediaFile.length) {
			st = _validateDataFromPlayer();
		} else {
			_setState(self.ERROR);
			st = _status('Media file is null');
			_close();
		}

		if (typeof self.callback == 'function') {
			self.callback(st)
		}
	};

	var _validateDataFromPlayer = function () {
		var i, len, isClickable = false, ref;

		_setState(self.COMPLETE);
		var result = _status('Received video ' + self.vastData.mediaFile[0].url);

		result.isClickable = false;
		result.clickURL = null;

		if (self.vastData.mediaFile[0].duration) {
			result.duration = self.vastData.mediaFile[0].duration;
		} else if (self.vastData.duration) {
			result.duration = self.vastData.duration[0];
		} else {
			result.duration = 30;
		}
		result.skipTime = self.vastData.skipTime ? self.vastData.skipTime[0] : 0;
		result.skipTime2 = self.vastData.skipTime2 ? self.vastData.skipTime2[0] : 0;
		result.mediaFile = self.vastData.mediaFile ? self.vastData.mediaFile[0] : '';
		result.linkText = self.vastData.linkTxt ? self.vastData.linkTxt[0] : '';

		if (self.vastData['isClickable']) {
			ref = self.vastData['isClickable'];

			for (i = 0, len = ref.length; i < len; i++) {
				if (ref[i] && isClickable === false) {
					isClickable = true;
				}
			}
		}

		if (isClickable) {
			if (self.vastData['clickthrough']) {
				result.isClickable = true;
				result.clickURL = self.vastData['clickthrough'][0];
			}
			if (self.vastData['nonlinearclickthrough']) {
				result.isClickable = true;
				result.clickURL = self.vastData['nonlinearclickthrough'][0];
			}
		}

		return result;
	};

	var _processNode = function (pNode) {

		_parseNode(pNode);
		for (var i = 0; i < pNode.childNodes.length; i++) {
			_processNode(pNode.childNodes[i]);
		}
	};

	var _parseNode = function (pNode) {
		if (!pNode.localName) {
			return;
		}

		var text = pNode.textContent.replace(spaceRegExr, '');
		var name = pNode.localName.toLowerCase();
		if (name == 'ad') {
			var id = pNode.getAttribute('id');
			_processData(name, id)
		} else if (name == 'adtitle') {
			_processData(name, text);
		} else if (name == 'adsystem') {
			_processData(name, text);
		} else if (name == 'vastadtaguri') {
			_processData(name, text);
		} else if (name == 'tracking' || name == 'clicktracking') {
			var type = pNode.parentNode.parentNode.nodeName;
			type == 'NonLinearAds' ? _processTrackingNonLinear(pNode) : _processTracking(pNode);
		} else if (name == 'duration') {
			_processData(name, _getSeconds(text));
		} else if (name == 'clickthrough') {
			_processData(name, text);
		} else if (name == 'nonlinearclickthrough') {
			_processData(name, text);
		} else if (name == 'extension') {
			_processExtensions(pNode);
		} else if (name == 'impression') {
			if (!self.trackingData['impression']) {
				self.trackingData['impression'] = [];
			}
			if (!self.trackingDataNonLinear['impression']) {
				self.trackingDataNonLinear['impression'] = [];
			}
			self.trackingData['impression'].push(text);
			self.trackingDataNonLinear['impression'].push(text);
		} else if (name == 'mediafile') {
			_processMedia(pNode);
		} else if (name == 'nonlinearads') {
			_processNonLinerMedia(pNode);
		} else if (name == 'error') {
			if (!self.trackingData['error']) {
				self.trackingData['error'] = [];
			}
			if (!self.trackingDataNonLinear['error']) {
				self.trackingDataNonLinear['error'] = [];
			}
			self.trackingData['error'].push(text);
			self.trackingDataNonLinear['error'].push(text);
		} else if (name == 'adparameters') {
			_processData(name, text);
		}
	};

	var _processMedia = function (pMedia) {
		var mediaAttributes = pMedia.attributes;
		var processingObject = {};
		for (var i = 0; i < mediaAttributes.length; i++) {
			processingObject[mediaAttributes[i].localName] = mediaAttributes[i].value;
		}
		processingObject['url'] = pMedia.textContent.replace(spaceRegExr, '');

		if (AdConsts.DEVICE_TYPE !== 'tv') {
			if (AdConsts.PROTOCOL === 'https:') {
				processingObject['url'] = processingObject['url'].replace(/http[s]?:/, '');
			}
		}

		_processData('mediaFile', processingObject);
	};

	var _processNonLinerMedia = function (pNode) {
		var mediaDuration, mediaFile, mediaFileAttributes, mediaFileAttributes2, mediaHeight, mediaScalable, mediaType, mediaUrl, mediaWidth;

		mediaFile = pNode.getElementsByTagName('StaticResource')[0];
		if (!mediaFile) {
			return;
		}
		self.isLinear = false;
		mediaUrl = mediaFile.textContent.replace(spaceRegExr, '');

		mediaFileAttributes = mediaFile.attributes;
		var length, i;
		for (i = 0, length = mediaFileAttributes.length; i < length; i++) {
			switch (mediaFileAttributes[i].nodeName) {
				case 'creativeType':
					mediaType = mediaFileAttributes[i].nodeValue;
					break;
			}
		}

		mediaFileAttributes2 = pNode.getElementsByTagName('NonLinear')[0].attributes;
		for (i = 0, length = mediaFileAttributes2.length; i < length; i++) {
			switch (mediaFileAttributes2[i].nodeName) {
				case 'width':
					mediaWidth = mediaFileAttributes2[i].nodeValue;
					break;
				case 'height':
					mediaHeight = mediaFileAttributes2[i].nodeValue;
					break;
				case 'scalable':
					mediaScalable = mediaFileAttributes2[i].nodeValue;
					break;
				case 'minSuggestedDuration':
					var temp = mediaFileAttributes2[i].nodeValue.split(':');
					mediaDuration = (+temp[0]) * 60 * 60 + (+temp[1]) * 60 + (+temp[2]);
					break;
			}
		}

		_processData('mediaFile', {
			url: mediaUrl,
			type: mediaType,
			duration: mediaDuration,
			width: mediaWidth,
			height: mediaHeight,
			scalable: mediaScalable
		});
	};

	var _processData = function (pKey, pData) {
		if (!self.vastData[pKey]) {
			self.vastData[pKey] = [];
		}
		self.vastData[pKey].push(pData);
	};

	var _processTracking = function (pTracking) {
		var eventType, savedData;
		if (pTracking.nodeName == 'ClickTracking') {
			eventType = "clicktracking";
		} else {
		    eventType = pTracking.attributes[0].value;
		}

		var text = pTracking.textContent.replace(spaceRegExr, '');
		if (eventType == 'progress' && pTracking.attributes[1] && pTracking.attributes[1].name == 'offset') {
			savedData = {offset: pTracking.attributes[1].value, url: text};
		} else {
			savedData = text;
		}
		if (!self.trackingData[eventType]) {
			self.trackingData[eventType] = [];
		}
		self.trackingData[eventType].push(savedData);
	};

	var _processTrackingNonLinear = function (pTracking) {
		var eventType, savedData;
		if (pTracking.nodeName == 'ClickTracking') {
			eventType = "clicktracking";
		} else {
			eventType = pTracking.attributes[0].value;
		}

		var text = pTracking.textContent.replace(spaceRegExr, '');
		if (eventType == 'progress' && pTracking.attributes[1] && pTracking.attributes[1].name == 'offset') {
			savedData = {offset: pTracking.attributes[1].value, url: text};
		} else {
			savedData = text;
		}
		if (!self.trackingDataNonLinear[eventType]) {
			self.trackingDataNonLinear[eventType] = [];
		}
		self.trackingDataNonLinear[eventType].push(savedData);
	};

	var _processExtensions = function (pExtension) {
		if (pExtension.attributes.length == 0 || !pExtension.attributes[0].value) {
			return;
		}
		var extensionName = pExtension.attributes[0].value;
		var text = pExtension.textContent.replace(spaceRegExr, '');

		if (extensionName == 'skipAd' || extensionName == 'addClick') {
			_processTracking(pExtension);
			return;
		}

		if (!self.vastData[extensionName]) {
			self.vastData[extensionName] = [];
		}
		var value;

		if (extensionName == 'startTime' || extensionName == 'skipTime' || extensionName == 'skipTime2') {
			value = _getSeconds(text);
		} else if (extensionName == 'isClickable') {
			value = parseInt(text);
		} else if (extensionName == 'linkTxt') {
			if (text.indexOf('#') != -1 ) {
				value = _convertASCIItoString(text);
			} else if (text.indexOf('%') != -1) {
				value = decodeURI(text);
				value = value.charAt(0).toUpperCase() + value.substr(1);
			} else {
				value = text;
			}
		} else {
			value = text;
		}

		self.vastData[extensionName].push(value);
	};

	var _convertASCIItoString = function (pASCII) {
		pASCII = pASCII.replace(/&amp;/g, '');
		var spaces = pASCII.split(' ', 10);
		var result = '';

		for (var space = 0; space < spaces.length; space++) {
			var chars = spaces[space].split('#', 100);
			for (var charNumber = 0; charNumber < chars.length; charNumber++) {
				if (chars[charNumber] === '&') {
					continue;
				}
				if (charNumber == 1 && space == 0) {
					result += String.fromCharCode(parseInt(chars[charNumber])).toUpperCase();
				} else {
					result += String.fromCharCode(parseInt(chars[charNumber]));
				}
			}

			if (space < spaces.length - 1) {
				result += ' ';
			}
		}

		return result;
	};

	var _getSeconds = function (pTime) { // convert 01:12:22 or 06:15 to seconds
		var values = pTime.split(':', 3);
		if (values.length == 3) {
			return parseInt(values[0]) * 3600 + parseInt(values[1]) * 60 + parseInt(values[2]);
		} else {
			return parseInt(values[0]) * 60 + parseInt(values[1]);
		}
	};

	var _close = function () {
		//this.currentURL  = null;
		// this.currentType = null;
		self.trackingData = {};
		self.vastData = {};
		self.showed = false;
	};

	var _log = function (message) {
		Logger.log(message);
		if (self.logElement) {
			document.getElementById(self.logElement).style.display = 'block';
			document.getElementById(self.logElement).innerHTML += message + '\r\n';
		}
	};

	var _sendTrackingEvent = function (pType, isManyTimesEvent) {
		try {
			if (self.trackingData[pType] || self.trackingDataNonLinear[pType]) {
				Observer.emit(AdConsts.VAST_EVENT, pType);
				var tData = self.isLinear ? self.trackingData : self.trackingDataNonLinear;

				for (var i = 0; i < tData[pType].length; i++) {
					_log('adt_' + pType);
					var url = AdURLModificator.getInstance().replaceEventURL(tData[pType][i].replace(/amp;/g, ''));

					var img = document.createElement('img');
					img.src = url;
				}
			}
		} catch (err) {
			// do nothing
		}

		if (!isManyTimesEvent && tData && tData[pType]) {
			tData[pType] = null;
		}
	};

	 var _sendClickThroughEvent = function() {
		 try {
			 if (self.vastData) {
				 var i, url, img;
				 if (self.isLinear && self.vastData['clickthrough'] && self.vastData['clickthrough'].length > 0) {
					 Observer.emit(AdConsts.VAST_EVENT, 'clickthrough');
					 for (i = 0; i < self.vastData['clickthrough'].length; ++i) {
						 _log('adt_clickthrough');
						 url = AdURLModificator.getInstance().replaceEventURL(self.vastData['clickthrough'][i].replace(/amp;/g, ''));

						 img = document.createElement('img');
						 img.src = url;
					 }
				 } else if (!self.isLinear && self.vastData['nonlinearclickthrough'] && self.vastData['nonlinearclickthrough'].length > 0) {
					 //yes, we combine these clicks in one clickthrough VAST_EVENT event
					 Observer.emit(AdConsts.VAST_EVENT, 'clickthrough');
					 for (i = 0; i < self.vastData['nonlinearclickthrough'].length; ++i) {
						 _log('adt_nonlinearclickthrough');
						 url = AdURLModificator.getInstance().replaceEventURL(self.vastData['nonlinearclickthrough'][i].replace(/amp;/g, ''));

						 img = document.createElement('img');
						 img.src = url;
					 }
				 }
			 }
		 } catch (error) {}
	 };

	this.sendReadyEvents = function() {
		_sendTrackingEvent('impression');
		_sendTrackingEvent('creativeView');
	};
	
	this.sendStartEvent = function() {
		if (!self.trackStarted) {
			_sendTrackingEvent('start');
			self.trackStarted = true;
		}
	};

	this.onTime = function (position, duration) {

		if (!self.showed) {
			return;
		}
		
		if (!self.trackFirstQuartile && position == Math.round(duration * 25 / 100)) {
			_sendTrackingEvent('firstQuartile');
			self.trackFirstQuartile = true;
		}

		if (!self.trackMidpoint && position == Math.round(duration * 50 / 100)) {
			_sendTrackingEvent('midpoint');
			self.trackMidpoint = true;
		}

		if (!self.trackThirdQuertile && position == Math.round(duration * 75 / 100)) {
			_sendTrackingEvent('thirdQuartile');
			self.trackThirdQuertile = false;
		}

		if (!self.trackEnd && position == Math.round(duration * 99 / 100)) {
			_sendTrackingEvent('complete');
			self.trackEnd = true;
		}

		var progressObj = self.isLinear ? self.trackingData['progress'] : self.trackingDataNonLinear['progress'];
		if (progressObj && progressObj.length > 0 ) {
			var time;
			for (var i = 0, l = progressObj.length; i < l; ++i) {
				time = _getSeconds(progressObj[i].offset);
				if (time == position && progressObj[i].url) {
					progressObj[i].url = AdURLModificator.getInstance().replaceEventURL(progressObj[i].url);

					var img = document.createElement('img');
					img.src = progressObj[i].url;
				}
			}
		}

	};

	function onImgEvent(event) {
		event.currentTarget.removeEventListener('load', onImgEvent);
		event.currentTarget.removeEventListener('error', onImgEvent);
		if (event.currentTarget.parentNode) {
			event.currentTarget.parentNode.removeChild(event.currentTarget);
		}
	}

	this.click = function () {
		_sendTrackingEvent('clicktracking', true);
		_sendClickThroughEvent();
	};

	this.click2 = function () {
		_sendTrackingEvent('addClick', true);
		_sendTrackingEvent('clicktracking', true);
		_sendClickThroughEvent();
	};

	this.mute = function () {
		_sendTrackingEvent('mute', true);
	};

	this.unmute = function () {
		_sendTrackingEvent('unmute', true);
	};

	this.pause = function () {
		_sendTrackingEvent('pause', true);
	};

	this.resume = function () {
		_sendTrackingEvent('resume', true);
	};

	this.skip = function () {
		_sendTrackingEvent('skipAd');
		_sendTrackingEvent('closeLinear');
	};

	this.skip2 = function () {
		_sendTrackingEvent('close');
		_sendTrackingEvent('closeLinear');
	};

	this.error = function () {
		_sendTrackingEvent('error');
	};

	//vpaid events
	this.close = function () {
		self.skip2();
	};

	this.collapse = function () {
		_sendTrackingEvent('collapse', true);
	};

	this.creativeView = function () {
		_sendTrackingEvent('creativeView');
	};

	this.fullscreen = function () {
		_sendTrackingEvent('fullscreen', true);
	};

	this.expand = function () {
		_sendTrackingEvent('expand', true);
	};

	this.impression = function () {
		_sendTrackingEvent('impression');
	};

	this.start = function () {
		_sendTrackingEvent('start');
	};

	this.stop = function () {
		_sendTrackingEvent('stop');
	};

	this.acceptInvitation = function () {
		_sendTrackingEvent('acceptInvitation', true);
	};

	this.firstQuartile = function () {
		_sendTrackingEvent('firstQuartile');
	};

	this.midpoint = function () {
		_sendTrackingEvent('midpoint');
	};

	this.thirdQuartile = function () {
		_sendTrackingEvent('thirdQuartile');
	};

	this.complete = function () {
		_sendTrackingEvent('complete');
	};
}
VastDocument.prototype.constructor = VastDocument;


//Tue Jan 10 2017 19:13:25 GMT+0200 (EET)

},{"mggp-player":2}],4:[function(require,module,exports){
(function (global){
(function(f){if(typeof exports==="object"&&typeof module!=="undefined"){module.exports=f()}else if(typeof define==="function"&&define.amd){define([],f)}else{var g;if(typeof window!=="undefined"){g=window}else if(typeof global!=="undefined"){g=global}else if(typeof self!=="undefined"){g=self}else{g=this}g.mggpPluginAudio = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
var Plugin=require("mggp-player").Plugin,MggpPluginAudio=function(){Plugin.apply(this,arguments);var o=this,n=o.player,e=null,t=[],i=0,g=!1,a=!1;this.dispose=function(){o.log("MggpPluginAudio.dispose()"),P(!1),n=null,e=null,t=null};var r=function(){o.log("MggpPluginAudio.onPlayerStop()"),g=!0,a=!1,P(!1),n.on("property:videoInfo",l),e=null,t=[]},u=function(o){a||1!=o.data||(a=!0)},l=function(r){o.log("MggpPluginAudio.onVideoInfoChange()"),e=r.data||{},i=0,t=e.audio_tracks||[],n.set("audioTrackList",t),g&&(g=!1,P(!0)),a||n.set("audioTrack",y())},d=function(e){o.log("MggpPluginAudio.onSrcChange("+e.data+")"),n.off("property:src",d);n.get("vendorOptions")},p=function(n){if(o.log("MggpPluginAudio.changeByName("+n+")"),t.length>0){for(var e=0;e<t.length;e++)if(t[e].lang==n)return void s({data:t[e].index});s({data:i})}else s({data:i})},f=function(){o.log("MggpPluginAudio.onQualityNeedChange()"),n.on("property:src",d)},s=function(g){if(o.log("MggpPluginAudio.onAudioTrackNeedChange("+g.data+")"),"string"==typeof g.data)return void p(g.data);var a=parseInt(g.data)||0,r=y();if(a!=r){for(var u=0;u<t.length;u++){var l=t[u];if(l.index==a){i=a;var d=n.get("vendorOptions")||{};d.startSeconds=d.startSeconds||n.get("position");var f=n.get("src")||e.src;return n.load(v(f,a),n.get("videoInfo"),d),void n.set("audioTrack",a)}}c()}else c()},c=function(){o.log("MggpPluginAudio.loadDefault()"),n.load(n.get("src"),n.get("videoInfo"),n.get("vendorOptions"))},y=function(){var o=n.get("src")||e.src;if(o&&o.indexOf("/a/")!=-1)for(var t=o.split("/"),i=0;i<t.length;i++)if("a"==t[i]&&t[i+1])return parseInt(t[i+1]);return 0},v=function(n,e){return n&&n.indexOf("/a/")!=-1?n.replace("/a/"+y(),"/a/"+e):(o.log("MggpPluginAudio.loadDefault("+n+")"),n)},P=function(e){o.log("MggpPluginAudio.tooggleEvents("+e+")"),e?(n.on("property:videoInfo",l),n.on("property:state",u),n.on("player:audioTackNeedChange",s),n.on("player:qualityNeedChange",f),n.on("player:stop",r)):(n.off("property:videoInfo:",l),n.off("player:qualityNeedChange",f),n.off("player:audioTackNeedChange",s),n.off("player:stop",r))};P(!0)};MggpPluginAudio.prototype=Object.create(Plugin.prototype),MggpPluginAudio.prototype.constructor=MggpPluginAudio,module.exports=MggpPluginAudio;
},{"mggp-player":"mggp-player"}]},{},[1])(1)
});
}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"mggp-player":2}],5:[function(require,module,exports){
(function (global){
(function(f){if(typeof exports==="object"&&typeof module!=="undefined"){module.exports=f()}else if(typeof define==="function"&&define.amd){define([],f)}else{var g;if(typeof window!=="undefined"){g=window}else if(typeof global!=="undefined"){g=global}else if(typeof self!=="undefined"){g=self}else{g=this}g.mggpPluginGoogleAnalyticsTv = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
"use strict";function _classCallCheck(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function _possibleConstructorReturn(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}function _inherits(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}Object.defineProperty(exports,"__esModule",{value:!0});var _createClass=function(){function t(t,e){for(var a=0;a<e.length;a++){var n=e[a];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}return function(e,a,n){return a&&t(e.prototype,a),n&&t(e,n),e}}(),_mggpPlayer=require("mggp-player");window._gaq=window._gaq||null;var MggpPluginGoogleAnalyticsTv=function(t){function e(t,a){_classCallCheck(this,e);var n=_possibleConstructorReturn(this,(e.__proto__||Object.getPrototypeOf(e)).call(this,t,a));return n.namespace="ga:",n._timeTrackInterval=null,n._timeTrackDelay=1e3,n._playedSeconds=0,n._isStarted=!1,n._bindPlayer(),n._bindAdt(),n}return _inherits(e,t),_createClass(e,[{key:"_bindPlayer",value:function(){var t=this,e=this.player;e.on("property:videoInfo",function(){t._isStarted=!1,t._playedSeconds=0}),e.on("player:stateChange",function(e){switch(e.data){case 1:t._isStarted||(t._isStarted=!0,t._trackPlayer("playstart"));break;case 3:t._isStarted&&t._trackPlayer("buffering")}}),this._timeTrackInterval=setInterval(function(){1===e.get("state")&&(t._playedSeconds++,t._playedSeconds>=60&&(t._playedSeconds=0,t._trackPlayer("playtime")))},this._timeTrackDelay)}},{key:"_bindAdt",value:function(){var t=this;this.config.advertising!==!1&&(this.player.on("ad:external:startedLoadingNewURL",function(e){t._trackAdt("askAdt",e.data.xmlURL,e.data.type)}),this.player.on("ad:external:vastEvent",function(e){t._trackAdt("adt_"+e.data.vastEvent,window.location.href,e.data.type)}),this.player.on("ad:external:nobanner",function(e){t._trackAdt("nobanner",e.data.mediaURL,e.data.type)}),this.player.on("ad:external:vastXMLInvalid",function(e){t._trackAdt("vastDocumentNull",e.data.xmlURL,e.data.type)}),this.player.on("ad:external:blockStarted",function(e){t._trackAdt("askRollblock",e.data.type,"")}),this.player.on("ad:external:mediaBeginLoading",function(e){t._trackAdt("load",e.data.mediaURL,e.data.type)}),this.player.on("ad:external:mediaLoadingTimeout",function(e){t._trackAdt("timeOut",e.data.xmlURL,e.data.type)}),this.player.on("ad:external:xmlLoadingTimeout",function(e){t._trackAdt("xmlTimeout",e.data.xmlURL,10)}),this.player.on("ad:external:closingOnRunningAd",function(e){t._trackAdt("forceSkip",e.data.xmlURL,e.data.type)}))}},{key:"_trackPlayer",value:function(t,e,a){var n=this.player.get("videoInfo"),i=this.config?this.config.lang:null,r=this.player.get("quality")==-1?"Auto":this.player.get("quality");e||(e=i+"/"+n.video_id),a||(a=r),this._push.apply(this,["_trackEvent",t,e,a])}},{key:"_trackAdt",value:function(t,e,a){this._push.apply(this,["_trackEvent",t,e,a])}},{key:"_push",value:function(t){this.player.utils.log("MggpPluginGA.push(): "+(arguments.length<=1?void 0:arguments[1])+", "+(arguments.length<=2?void 0:arguments[2])+", "+(arguments.length<=3?void 0:arguments[3])),this.config&&this.config.sendGAPlayerTrackEvent&&"function"==typeof this.config.sendGAPlayerTrackEvent&&this.config.sendGAPlayerTrackEvent(arguments.length<=1?void 0:arguments[1],arguments.length<=2?void 0:arguments[2],arguments.length<=3?void 0:arguments[3])}},{key:"dispose",value:function(){clearInterval(this._timeTrackInterval)}}]),e}(_mggpPlayer.Plugin);exports["default"]=MggpPluginGoogleAnalyticsTv;
},{"mggp-player":"mggp-player"}]},{},[1])(1)
});
}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"mggp-player":2}],6:[function(require,module,exports){
(function (global){
(function(f){if(typeof exports==="object"&&typeof module!=="undefined"){module.exports=f()}else if(typeof define==="function"&&define.amd){define([],f)}else{var g;if(typeof window!=="undefined"){g=window}else if(typeof global!=="undefined"){g=global}else if(typeof self!=="undefined"){g=self}else{g=this}g.mggpPluginQuality = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
"use strict";var Plugin=require("mggp-player").Plugin,MggpPluginQuality=function(){Plugin.apply(this,arguments);var t=this,e=t.player,n=null,r=[],i=!1,o=!1,a=null;this.dispose=function(){f(!1),e=null,n=null,r=[]};var u=function(){i=!0,f(!1),e.on("property:videoInfo",s),e.on("player:qualityNeedChange",c),n=null,r=null},s=function(t){if(n=t.data,r=n.bitrates||[],0==r.length&&i)return void e.set("qualityList",[]);i&&(i=!1,f(!0)),n.src.indexOf("m3u8")!=-1&&("tv"==e.config.deviceType?1!=n.is_tv&&1!=n.is_live||(h(n.src),o=!0):(h(n.src),o=!0));for(var a=!0,u=!1,s=0,l=r.length;s<l;++s)0===r[s].index?a=!1:1===r[s].index&&(u=!0);if(a&&u)for(s=0,l=r.length;s<l;++s)try{r[s].index=parseInt(r[s].index)-1}catch(c){}p(r)},l=function(){e.get("videoInfo")&&e.get("videoInfo")==n||p([])},c=function(t){if(o)return void(a=t);for(var n=e.get("qualityList"),r=0;r<n.length;r++){var i=n[r];if(i.bitrate==parseInt(t.data)){if(e.set("quality",i.bitrate),"function"==typeof i.src)return void i.src(i);var u=e.get("vendorOptions")||{};u.quality=i.index,u.startSeconds=u.startSeconds||e.get("position");var s=e.get("videoInfo");s.is_tv&&(u.startSeconds=0),u.hasOwnProperty("defaultAudioTrack")||0==e.get("audioTrack")||(u.defaultAudioTrack=e.get("audioTrack"));var l=i.src||e.get("src");return 1==e.get("chromecast")&&(l+=".cast"),e.load(l,e.get("videoInfo"),u),void(a=null)}}e.load(e.get("src"),e.get("videoInfo"),e.get("vendorOptions")),a=null},f=function(t){t?(e.on("property:src",l),e.on("property:videoInfo",s),e.on("player:qualityNeedChange",c),e.on("player:stop",u)):(e.off("property:src",l),e.off("property:videoInfo:",s),e.off("player:qualityNeedChange",c),e.off("player:stop",u))},p=function(r){var i=[];r.forEach(function(t){g(i,t.index,t.name,t.bitrate,t.src)}),r.length>1?g(i,-1,t.config.i18nMgg&&"function"==typeof t.config.i18nMgg?t.config.i18nMgg("auto_quality"):"Auto",-1,n&&n.src?n.src:e.get("src")):r[0]&&e.set("quality",r[0].bitrate),e.set("qualityList",y(i)),a&&c(a)},g=function(t,e,n,r,i){isNaN(e)||!n||isNaN(r)||t.push({index:e,name:n,bitrate:r,src:i})},d=function(t){var e=t.bitrate/1e3;return e>300&&e<700?240:e>=700&&e<950?320:e>=950&&e<1350?v(360,404):e>=1350&&e<1550?480:e>=1550&&e<3500?v(576,720):e>=3500?1080:e},v=function(t,e){r.forEach(function(n){return n.bitrate==t||n.bitrate==e?n.bitrate:0})},y=function(t){for(var e=[],n=t.length-1;n>=0;n--)e.push(t[n]);return e},h=function(t){m(t,b,I)},b=function(t){if(!i){for(var e,n=[],r="#EXT-X-STREAM-INF:",a="#EXT-X-MEDIA:TYPE=AUDIO",u=t.split(r),s=!1,l=0;l<u.length;l++){var c=u[l];if(c.indexOf(a)!==-1)s=!0;else{var f=c.indexOf("http");if(f>0){var p={};if(s){if(window.Blob&&window.URL&&"function"==typeof window.URL.createObjectURL){e=u[0]+r+c;try{var g=new Blob([e],{type:"application/x-mpegURL"});p.src=URL.createObjectURL(g)+".m3u8"}catch(d){p.src=c.substr(f,c.indexOf("m3u8")-f+4)}}}else p.src=c.substr(f,c.indexOf("m3u8")-f+4);for(var v=c.substr(0,c.indexOf("http")).split(","),y=0;y<v.length;y++){var h=v[y],b=h.split("=");"BANDWIDTH"==b[0]&&(p.bitrate=parseInt(b[1])),"NAME"==b[0]&&(p.name=parseInt(b[1].replace('"',"")))}n.push(p)}}}o=!1,n.sort(function(t,e){return t.name-e.name}),x({data:{levels:n}})}},x=function(e){var i=[];r.forEach(function(r){for(var o=0;o<e.data.levels.length;o++){var a=e.data.levels[o],u=a.name?a.name:d(a);u==r.bitrate&&(r.index=o,r.src=a.src||n.src||t.player.get("src"),i.push(r))}}),p(i)},I=function(){a&&c(event),o=!1,a=null,c(-1)},m=function(t,e,n){try{var r=new XMLHttpRequest;r.open("GET",t,!0),r.onreadystatechange=function(){4==r.readyState&&(200==r.status?e(r.responseText):n("Error loading "+t))},r.send(null)}catch(i){n("Error loading "+t)}};f(!0)};MggpPluginQuality.prototype=Object.create(Plugin.prototype),MggpPluginQuality.prototype.constructor=MggpPluginQuality,module.exports=MggpPluginQuality;
},{"mggp-player":"mggp-player"}]},{},[1])(1)
});
}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"mggp-player":2}],7:[function(require,module,exports){
(function (global){
(function(f){if(typeof exports==="object"&&typeof module!=="undefined"){module.exports=f()}else if(typeof define==="function"&&define.amd){define([],f)}else{var g;if(typeof window!=="undefined"){g=window}else if(typeof global!=="undefined"){g=global}else if(typeof self!=="undefined"){g=self}else{g=this}g.mggpPluginSubtitles = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
var Plugin=require("mggp-player").Plugin,MggpPluginSubtitles=function(){Plugin.apply(this,arguments);var t="off",e=this,n=e.player,i=null,l=!1,u=e.config.defaultSubtitles||t,g=null,o=[],s={},r=null,a=null;this.dispose=function(){e.log("MggpPluginSubtitles.dispose()"),h(!1),l&&v(!1),n=null,i=null,s=null,g=null,r=null};var p=function(g){e.log("MggpPluginSubtitles.onVideoInfoChange()"),i=g.data;var s=i.hasOwnProperty("subtitles")?i.subtitles:[];if(s)return o=[],o.push({lang_original:e.config.i18nMgg&&"function"==typeof e.config.i18nMgg?e.config.i18nMgg("subtitles_off"):t,display_name:e.config.i18nMgg&&"function"==typeof e.config.i18nMgg?e.config.i18nMgg("subtitles_off"):t,lang:t,index:-1}),s.forEach(function(t){"srt"==t.type&&o.push(t)}),n.set("subtitlesList",o),1==o.length?void v(!1):void(o.length&&u!=t&&!l?d({data:u}):v(!1))},d=function(n){e.log("MggpPluginSubtitles.onSubtitlesNeedChange("+n.data+")");var i=n.data;return i==t?void v(!1):i==u?void e.log("MggpPluginSubtitles.onSubtitlesNeedChange(): needed == current, do nothing"):void o.forEach(function(t){if(t.lang==i)return S(),void M(t)})},f=function(){e.log("MggpPluginSubtitles.onMediaSeekEnd()"),l&&(r=null,a="",n.set("subtitlesTextChange",a))},b=function(t){var e=t.data||0;return r&&r.startTime<=e&&r.endTime>=e&&r.text!=a?(a=r.text,void n.set("subtitlesTextChange",a)):r&&r.startTime>e&&""!=a?(a="",void n.set("subtitlesTextChange",a)):(r&&r.endTime<e&&(r=c(e,r),a="",n.set("subtitlesTextChange",a)),void(r||(r=c(e))))},c=function(t,e){if(e){var n=parseInt(e.id);return s[n+1]?s[n+1]:null}for(var i in s)if(s[i].startTime<=t&&s[i].endTime>t)return s[i];return null},h=function(t){e.log("MggpPluginSubtitles.tooggleEvents("+t+")"),t?(n.on("property:videoInfo",p),n.on("player:mediaSeekEnd",f),n.on("player:subtitlesNeedChange",d)):(n.off("property:videoInfo:",p),n.off("player:mediaSeekEnd",f),n.off("player:subtitlesNeedChange",d))},v=function(t){e.log("MggpPluginSubtitles.setEnable("+t+")"),t?(l=!0,n.on("property:position",b)):l&&(S(),l=!1,n.off("property:position",b)),n.set("subtitles",u)},S=function(){e.log("MggpPluginSubtitles.resetCurrentSubtitles()"),n.set("subtitlesTextChange",""),s={},u=t,r=null},M=function(t){e.log("MggpPluginSubtitles.load("+t+")");var n=new XMLHttpRequest;n.open("GET",t.url,!0),n.send(),n.onreadystatechange=function(){if(4==this.readyState){if(200!=this.status)return void e.log("MggpPluginSubtitles.load : "+(this.status?this.statusText:t.url+" load failed"));var n=y(this.responseText);n&&(u=t.lang,g=t,s=n,v(!0))}}},y=function(t){e.log("MggpPluginSubtitles.parseSrt()");var n=t.replace(/\r/g,""),i=/(\d+)\n(\d{2}:\d{2}:\d{2},\d{3}) --> (\d{2}:\d{2}:\d{2},\d{3})/g;n=n.split(i),n.shift();for(var l,u={},g=0;g<n.length;g+=4)l=n[g].trim(),u[l]={id:l,startTime:P(n[g+1].trim()),endTime:P(n[g+2].trim()),text:n[g+3].trim()};return u},P=function(t){var e=t.replace(",",".").split(":");return 3600*parseInt(e[0])+60*parseInt(e[1])+Number(e[2])};h(!0)};MggpPluginSubtitles.prototype=Object.create(Plugin.prototype),MggpPluginSubtitles.prototype.constructor=MggpPluginSubtitles,module.exports=MggpPluginSubtitles;
},{"mggp-player":"mggp-player"}]},{},[1])(1)
});
}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"mggp-player":2}],8:[function(require,module,exports){
var Plugin = require('mggp-player').Plugin;

/**
 * @class MggpPluginThumbnails
 */
var MggpPluginThumbnails = function () {
	Plugin.apply(this, arguments);

	var self = this;
	var THUMBNAILS_RELOAD_TIME = 10000;
	var THUMBLIST_NAME = 'thumblist.m3u8';

	var _player = self.player;
	var _videoInfo = null;
	var _enable = false;
	var _lines = [];
	var _imgWidth = 0;
	var _imgHeight = 0;
	var _currentOffset = 0;
	var _currentLine = null;
	var _currentSrc = null;
	var _reloadingDvrThumbsInterval = null;
	var _thumblistParser = null;
	var _lastSrc = '';

	this.dispose = function () {
		_thumblistParser = null;
		_lastSrc = '';
	};

	this.load = function (src, videoInfo, options) {
		if (src) {
			_lastSrc = src;
		} else if (videoInfo && videoInfo.src) {
			_lastSrc = videoInfo.src;
		} else {
			_lastSrc = '';
		}

		if (isDvrChannel() && !_reloadingDvrThumbsInterval) {
			reset();
			setEnable(false);

			if (_lastSrc.indexOf('meta') !== -1) {
				_player.on('player:hls:manifestParsed', onManifestParsed);
			} else {
				var currentChannel = self.player.get('epg:currentChannel');
				if (currentChannel.currentProgram) {
					_lastSrc = addTimestampInURL(currentChannel.currentProgram.startTimestamp, _lastSrc);
				}
				startThumblistLoading();
			}

		}
	};

	var reset = function () {
		_videoInfo = null;
		_enable = false;
		_lines = [];
		_imgWidth = 0;
		_imgHeight = 0;
		_currentOffset = 0;
		_currentLine = null;
		_currentSrc = null;
		if (_reloadingDvrThumbsInterval) {
			window.clearInterval(_reloadingDvrThumbsInterval);
			_reloadingDvrThumbsInterval = null;
		}
	};

	var setEnable = function (pEnable) {
		if (pEnable) {
			_player.on('property:thumbnailsTime', onThumbnailsTimeChange);
			_enable = true;
		} else {
			_player.off('property:thumbnailsTime', onThumbnailsTimeChange);
			_enable = false;
		}
	};

	var onVideoInfoChange = function (event) {
		reset();
		setEnable(false);
		if (event.data) {
			_videoInfo = event.data;
		}
		if (!_videoInfo) {
			return;
		}

		if (_videoInfo['preview_images']) {
			load(_videoInfo['preview_images']['thumbsline_xml'], onXmlLoaded);
		}
	};

	var onThumbnailsTimeChange = function (event) {
		if (!_currentLine) {
			_currentLine = getLineFromTime(event.data);
		}

		if (!_currentLine) {
			_player.set('thumbnails', {src: '', offset: 0, width: 0, height: 0});
			return;
		}

		var time = event.data;

		if (_currentLine) {
			var position = -1;

			for (var i = 0; i < _currentLine.times.length; i++) {
				if (_currentLine.times[i] > time && (_currentLine.times[i - 1] && _currentLine.times[i - 1] < time)) {
					position = i;
					changeImage(_currentLine.src, i * (-_imgWidth));
					break;
				}
			}

			if (position == -1) {
				_currentLine = null;
			}
			return;
		}
	};

	var changeImage = function (pSrc, pOffset) {
		if (_currentSrc == pSrc && pOffset == _currentOffset) {
			return;
		}

		_currentSrc = pSrc;
		_currentOffset = pOffset;

		_player.set('thumbnails', {src: _currentSrc, offset: _currentOffset, width: _imgWidth, height: _imgHeight});
	};

	var onXmlLoaded = function (pXml) {
		if (!pXml) {
			return;
		}

		var info = pXml.getElementsByTagName("thumbsline")[0];
		_imgWidth = info.getAttribute('thwidth');
		_imgHeight = info.getAttribute('thheight');

		var lines = pXml.getElementsByTagName('line');
		for (var i = 0; i < lines.length; i++) {
			var line = lines[i];
			var id = line.getAttribute('id');
			_lines[id] = {
				id: id,
				//getElementsByTagName("line")[i].childNodes[0].nodeValue.split(",");
				times: convertTime(line.childNodes[0].nodeValue.split(",")),
				src: getSrcFromId(id)
			};

		}
		if (_lines.length == 0) {
			return;
		}

		setEnable(true);
	};

	var convertTime = function (pArr) {
		for (var i = 0; i < pArr.length; i++) {
			pArr[i] = parseInt(pArr[i]);
		}
		return pArr;
	};

	var getSrcFromId = function (pId) {
		var thumbslineList = _videoInfo && _videoInfo['preview_images'] ? _videoInfo['preview_images']['thumbsline_list'] : [];
		for (var i = 0; i < thumbslineList.length; i++) {

			var lineId = thumbslineList[i].id || thumbslineList[i].line;
			if (parseInt(lineId) == parseInt(pId)) {
				return thumbslineList[i].url;
			}
		}
		return null;
	};

	var getLineFromTime = function (pTime) {
		for (var i = 0; i < _lines.length; i++) {
			if (_lines[i]) {
				var times = _lines[i].times;
				if (times[0] <= pTime && times[times.length - 1] >= pTime) {
					return _lines[i];
				}
			}
		}

		return null;
	};

	var load = function (pUrl, pCallback) {
		var xhr = new XMLHttpRequest();
		xhr.open('GET', pUrl, true);
		xhr.send();

		xhr.onreadystatechange = function () {
			if (this.readyState != 4) {
				return;
			}

			if (this.status != 200) {
				self.log('MggpPluginThumbnails.load : ' + (this.status ? this.statusText : pUrl + ' load failed'));
				return;
			}

			pCallback(pUrl.indexOf('m3u8') !== -1 ? this.responseText : this.responseXML);
		}
	};

	var tooggleEvents = function (pOn) {

		if (pOn) {
			_player.on('property:videoInfo', onVideoInfoChange);
			_player.on('player:stop', reset);
		} else {
			_player.off('property:videoInfo:', onVideoInfoChange);
			_player.off('player:stop', reset);

		}
	};

	tooggleEvents(true);

	function onManifestParsed(event) {
		_player.off('player:hls:manifestParsed', onManifestParsed);
		if (event.data && event.data.levels && event.data.levels.length > 0) {
			var urls = event.data.levels[0].url;
			if (urls && urls.length > 0) {
				_lastSrc = urls[0];

				if (self.player.get('dvrchannel:channelState') !== 'catchup') {
					var currentChannel = self.player.get('epg:currentChannel');
					if (currentChannel.currentProgram) {
						_lastSrc = addTimestampInURL(currentChannel.currentProgram.startTimestamp, _lastSrc);
					}
				}
				startThumblistLoading();
			}
		}
	}

	function startThumblistLoading() {
		if (_lastSrc.indexOf('/vs/') !== -1) {
			_reloadingDvrThumbsInterval = window.setInterval(loadDvrThumblist, THUMBNAILS_RELOAD_TIME);
			loadDvrThumblist();
		} else if (_lastSrc.indexOf('/vo/') !== -1) {
			loadDvrThumblist();
		}
	}

	function loadDvrThumblist() {
		var lastSlash = _lastSrc.lastIndexOf('/');
		var url;
		if (lastSlash > 0) {
			url = _lastSrc.substring(0, lastSlash + 1) + THUMBLIST_NAME;
		}
		if (url) {
			load(url, onDvrThumblistLoad);
		}
	}
	
	function onDvrThumblistLoad(data) {
		if (!_thumblistParser) {
			_thumblistParser = new ThumbnailsPlaylistParser();
		}
		var thumblines = _thumblistParser.parse(data);
		if (thumblines.length > 0) {
			_imgWidth = thumblines[0].width;
			_imgHeight = thumblines[0].height;
			var times = getTimesFromDvrThumblist(thumblines);
			for (var i = 0, l = thumblines.length; i < l; ++i) {
				_lines[i] = {
					id: i,
					src: thumblines[i].url,
					times: times[i]
				}
			}
			setEnable(true);
		}
	}

	function getTimesFromDvrThumblist(thumblines) {
		var result = null;
		// var lastThumblineTime = 0;
		var delta;
		if (thumblines && thumblines.length > 0) {
			result = [];
			for (var i = 0, l = thumblines.length; i < l; ++i) {
				result[i] = [];
				delta = (thumblines[i].finish - thumblines[i].start) / thumblines[i].count;
				//needs for initialization of first elements
				// if (i > 0) {
				// 	lastThumblineTime = result[i - 1][result[i - 1].length - 1] + delta;
				// }
				for (var j = 0, k = thumblines[i].count; j < k; ++j) {
					result[i][j] = thumblines[i].start + j * delta;
				}
			}
		}
		return result;
	}

	function isDvrUrl(url) {
		return url.indexOf('/vs/') !== -1 || url.indexOf('/vo/') !== -1
	}

	function isDvrChannel() {
		var currentChannel = self.player.get('epg:currentChannel');
		return currentChannel && currentChannel.type === 'dvrChannel' ? true : false;
	}

	function addTimestampInURL(timestamp, url) {
		var idxSlash, idxReg;
		var reg = /\/vs\/\d+/;
		idxReg = url.search(reg);
		if (idxReg == -1) {
			idxSlash = url.lastIndexOf("/type.live");
			url = url.substring(0, idxSlash) + "/vs/" + timestamp.toString() + url.substring(idxSlash);
		} else {
			url = url.replace(reg, "/vs/" + timestamp.toString());
		}
		return url;
	}
};

MggpPluginThumbnails.prototype = Object.create(Plugin.prototype);
MggpPluginThumbnails.prototype.constructor = MggpPluginThumbnails;

module.exports = MggpPluginThumbnails;

/**
 * Created by User on 04/11/2016.
 */
function ThumbnailsPlaylistParser() {
	var HEADER = "#EXTM3U";
	var MEDIA = "#EXT-X-MEDIA:";
	var TYPE = "TYPE=";
	var THUMBLINE = "THUMBLINE=";
	var START = "START=";
	var FINISH = "FINISH=";
	var IMAGE_COUNT = "IMGCOUNT=";
	var IMAGE_HEIGHT = "IMGHEIGHT=";
	var IMAGE_WIDTH = "IMGWIDTH=";
	var PROPERTY_DIVIDER = ",";
	
	this.parse = function (data) {
		var thumblines = [];
		if (data.indexOf(HEADER) != -1 && data.indexOf(MEDIA) != -1) {
			var lines = data.split("\n");
			var line, url;
			
			//we suppose that first line should be header #EXTM3U
			for (var i = 1, l = lines.length; i < l; ++i) {
				line = lines[i];
				if (line.indexOf(MEDIA) != -1) {
					url = ++i < l ? lines[i] : null;
					thumblines.push(parseMedia(line, url));
				}
			}
		}
		return thumblines;
	};
	
	function parseMedia(line, url) {
		line = line.substr(MEDIA.length);
		var thumbsLine;
		var properties = line.split(PROPERTY_DIVIDER);
		var start, finish, count, height, width, prop;
		for (var i = 0, l = properties.length; i < l; ++i) {
			prop = properties[i];
			if (prop.indexOf(START) != -1) {
				start = parseInt(prop.substr(START.length));
			} else if (prop.indexOf(FINISH) != -1) {
				finish = parseInt(prop.substr(FINISH.length));
			} else if (prop.indexOf(IMAGE_COUNT) != -1) {
				count = parseInt(prop.substr(IMAGE_COUNT.length));
			} else if (prop.indexOf(IMAGE_WIDTH) != -1) {
				width = parseInt(prop.substr(IMAGE_WIDTH.length));
			} else if (prop.indexOf(IMAGE_HEIGHT) != -1) {
				height = parseInt(prop.substr(IMAGE_HEIGHT.length));
			}
		}
		thumbsLine = {};
		thumbsLine.start = start;
		thumbsLine.finish = finish;
		thumbsLine.count = count;
		thumbsLine.height = height;
		thumbsLine.width = width;
		thumbsLine.url = url;
		return thumbsLine;
	}
}


//Fri Dec 23 2016 15:08:00 GMT+0200 (EET)

},{"mggp-player":2}],9:[function(require,module,exports){
(function (global){
(function(f){if(typeof exports==="object"&&typeof module!=="undefined"){module.exports=f()}else if(typeof define==="function"&&define.amd){define([],f)}else{var g;if(typeof window!=="undefined"){g=window}else if(typeof global!=="undefined"){g=global}else if(typeof self!=="undefined"){g=self}else{g=this}g.mggpPluginWss = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _mggpPlayer = require('mggp-player');

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * @class MggpPluginWss
 */
var MggpPluginWss = function (_Plugin) {
	_inherits(MggpPluginWss, _Plugin);

	/**
  *
  */
	function MggpPluginWss() {
		var _ref;

		for (var _len = arguments.length, params = Array(_len), _key = 0; _key < _len; _key++) {
			params[_key] = arguments[_key];
		}

		_classCallCheck(this, MggpPluginWss);

		//IE fix
		var _this = _possibleConstructorReturn(this, (_ref = MggpPluginWss.__proto__ || Object.getPrototypeOf(MggpPluginWss)).call.apply(_ref, [this].concat(params)));

		if (!_this.config && !_this.player) {
			_this.player = arguments[0];
			_this.config = arguments[1];
		}

		/*if (!this.config.deviceID) {
  	this.player.utils.log("MggpPluginWss: diviceID is not define");
  	return;
  }*/

		_this.session = null;
		_this.interval = null;
		_this.channel_id = null;
		_this.last_state = null;
		_this.watch_time = 0;
		_this.last_position = 0;
		_this.video_ended_sent = false;
		_this.last_timestamp = 0;
		_this.needToSendInit = false;
		_this.url = null;

		_this.player.on('property:videoInfo', function (event) {
			_this._onVideoInfo(event);
		});

		_this.player.on('property:state', function (event) {

			var state = event.data;

			if (state == 1) {
				if (_this.needToSendInit) {
					_this.needToSendInit = false;
					_this.startSession(_this.url, function (session) {
						_this.session = session;
						_this.interval = setInterval(function () {

							if (!_this.session) {
								clearInterval(_this.interval);
								return;
							}

							var newTimestamp = Math.floor(new Date().getTime() / 1000);
							if (_this.player.get('state') === 1) {
								if (_this.last_timestamp) {
									_this.watch_time += newTimestamp - _this.last_timestamp;
								}
								if (_this.watch_time >= _this.session.call_interval) {
									_this.trackAction('play');
									_this.watch_time = 0;
								}
							}
							_this.last_timestamp = newTimestamp;
						}, 100);
					});
				} else {
					_this.trackAction('start');
					_this.watch_time = 0;
				}
			} else if (state != 0) {
				if (_this.last_state == 1) {
					_this.trackAction('stop');
				}
			} else if (state === 0) {
				_this._processStopEvent();
			}

			_this.last_state = state;
		});

		_this.player.on('property:position', function (event) {
			if (event.data > 0) {
				_this.last_position = event.data;
			}
		});

		_this.player.on('player:stop', function (event) {
			_this._processStopEvent();
		});
		return _this;
	}

	_createClass(MggpPluginWss, [{
		key: '_processStopEvent',
		value: function _processStopEvent() {
			if (!this.video_ended_sent) {
				this.video_ended_sent = true;
				this.trackAction('stop');
				clearInterval(this.interval);
				this.session = null;

				this._resetPlugin();
			}
		}
	}, {
		key: '_resetPlugin',
		value: function _resetPlugin() {
			this.video_ended_sent = false;
			this.session = null;
			this.last_state = null;
			this.watch_time = 0;
			this.last_position = 0;
			this.last_timestamp = 0;
			this.needToSendInit = true;
		}

		/**
   * Handle initialization of new video
   * @param  {Object} event
   */

	}, {
		key: '_onVideoInfo',
		value: function _onVideoInfo(event) {
			var info = event.data;

			if (this.session && !this.video_ended_sent) {
				this.trackAction('stop');
			}
			this.url = null;
			this._resetPlugin();

			if (!info || !info.start_session_url) {
				return;
			}
			if (info.is_tv) {
				this.channel_id = info.video_id;
			}

			var url = info.start_session_url.indexOf('%user_id%') !== -1 ? info.start_session_url.replace('%user_id%', this.config.deviceID || '') : info.start_session_url;

			var params = {};

			if (this.config.deviceOS) {
				params.d_os = this.config.deviceOS;
			}
			if (this.channel_id) {
				params.d_channel_id = this.channel_id;
			}
			if (this.config.deviceType) {
				params.d_type = this.config.deviceType;
				try {
					if (this.config.device && this.config.device.device && (this.config.device.device.type === 'mobile' || this.config.device.device.type === 'tablet')) {
						params.d_type = this.config.deviceType + 'mobile';
					}
				} catch (error) {}
			}
			if (this.config.deviceModel) {
				params.d_model = this.config.deviceModel;
			}
			if (this.config.version) {
				params.d_app_version = this.config.version;
			}

			url += url.indexOf('?') === -1 ? '?' : '&';
			url += Object.keys(params).map(function (key) {
				return key + '=' + params[key];
			}).join('&');

			this.url = url;

			clearInterval(this.interval);

			this.log('MggpPluginWss._onVideoInfo():InitURL=' + url + ', OS=' + params.d_os + ", Channel=" + params.d_channel_id + ', Type=' + params.d_type + ', Model=' + params.d_model + ', Version=' + params.d_app_version);
		}

		/**
   * Send track event
   * @param  {string} action action type
   */

	}, {
		key: 'trackAction',
		value: function trackAction(action) {
			this.log('MggpPluginWss.trackAction(): ' + action);
			if (!this.session || !this.session[action]) {
				return;
			}

			var videoInfo = this.player.get('videoInfo');

			var data = {};
			if (videoInfo && videoInfo.is_live) {
				data.v_timeline = 0;
			} else {
				data.v_timeline = Math.round(this.last_position);
			}

			var url = this.session[action];
			url += url.indexOf('?') === -1 ? '?' : '&';
			url += Object.keys(data).map(function (key) {
				return key + '=' + data[key];
			}).join('&');

			if (!url) {
				url = '';
			}

			var xhr = new XMLHttpRequest();
			xhr.open('GET', url, true);
			xhr.send();
		}

		/**
   * Start WSS session
   * @param  {string}   url      session URL
   * @param  {Function} callback
   */

	}, {
		key: 'startSession',
		value: function startSession(url, callback) {
			var _this2 = this;

			if (!url) {
				url = '';
			}

			this.log('MggpPluginWss.startSession()');
			var xhr = new XMLHttpRequest();
			xhr.open('GET', url, true);
			var self = this;
			xhr.onreadystatechange = function () {
				if (xhr.readyState === 4 && xhr.status === 200) {
					var res = null;

					try {
						res = JSON.parse(xhr.responseText);
					} catch (e) {
						var errorType = _mggpPlayer.AddonError.errorTypes.PARSING_ERROR;
						var errorCode = _mggpPlayer.AddonError.errorCodes[errorType].PARSING_ERROR;
						var errorMessage = _mggpPlayer.AddonError.errorMessages['cannotParse'] + url;

						return new _mggpPlayer.AddonError(_this2.player, errorType, errorCode, errorMessage, false);
					}

					if (res.result === 'ERROR') {
						return _this2.log('MggpPluginWss.trackAction():' + res.message);
					}

					if (res.result === 'OK') {
						return callback(res.data);
					}

					_this2._error('Invalid response');
				}
			};
			xhr.send();
		}
	}]);

	return MggpPluginWss;
}(_mggpPlayer.Plugin);

exports['default'] = MggpPluginWss;

},{"mggp-player":"mggp-player"}]},{},[1])(1)
});
}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"mggp-player":2}],10:[function(require,module,exports){
/**
 * Created by User on 06/04/2016.
 */
'use strict'

var MggpVendor = require('mggp-player').Vendor;
var AddonError = require('mggp-player').AddonError;

function MggpVendorImg(player, config) {
	MggpVendor.apply(this, arguments);

	var self = this;

	var _src = null;
	var _options = null;
	var _currentTime = 0;
	var _image = null;
	var _playing = false;
	var _prevTime = -1;
	var _duration = 0;
	var _beforeCompleteFired = false;
	var _autoPlay = true;
	var _imgLoaded = false;

	this.emit('vendorCreate');
	this.player.utils.log('MggpVendorImg created');


	this.dispose = function() {
		_toggleListeners(false);
		var parentNode = _image ? _image.parentNode : null;
		if (parentNode) {
			parentNode.removeChild(_image);
		}
		_src = null;
		_options = null;
		_currentTime = 0;
		_image = null;
		_playing = false;
		_imgLoaded = false;
		_prevTime = -1;
		_duration = 0;
		_beforeCompleteFired = false;
		_autoPlay = true;
		self.namespase = null;
		self.config = null;

		self.emit('vendorDestroy');
		self.player.utils.log('MggpVendorImg.dispose');
	};

	this.load = function(src, videoInfo, options) {
		_currentTime = 0;
		_playing = false;
		_imgLoaded = false;
		_prevTime = -1;
		_duration = 0;
		_autoPlay = true;
		_beforeCompleteFired = false;

		if (options) {
			_options = options;
			self.checkOptions(options);
			if (options.duration) {
				_duration = options.duration;
				self.set('duration', _duration);
			}
			if ('autoplay' in options && options['autoplay'] === false) {
				_autoPlay = false;
			}
		}
		if (src) {
			_src = src;
		}
		_setState(-1);
		_createIMGTag();
		_setState(3);
		_image.src = _src;
	};

	this.play = function() {
		if (!_playing && _imgLoaded) {
			_prevTime = new Date().getTime() / 1000;
			_playing = true;
			_setState(1);
		}
	};

	this.pause = function() {
		if (_playing) {
			_playing = false;
			_setState(2);
		}
	};

	this.stop = function() {
		self.dispose();
	};

	this.togglePlayPause = function() {
		if (_playing) {
			self.pause();
		} else {
			self.play();
		}
	};

	this.seekTo = function(time) {
		self.emit('mediaSeekStart');
		if (time > _duration) {
			time = _duration;
		} else if (time < 0) {
			time = 0;
		}
		_currentTime = time;
		self.emit('mediaSeekEnd');
	};

	this.setVolume = function(volume) {
		self.set('volume', volume);
	};

	this.mute = function() {
		self.set('muted', true);
	};

	this.unMute = function() {
		self.set('muted', false);
	};

	this.getPlayableElement = function() {
		return _image;
	};


	//privates
	var _setState = function(newState) {
		self.set('state', newState);
		self.emit('stateChange', newState);
	};

	var _createIMGTag = function() {
		if (!_image) {
			_image = document.createElement('img');
			_image.className = self.namespace + 'img' + ' vendor';
			if (_options.width) {
				_image.style.width = self.options.width;
			}
			if (_options.height) {
				_image.style.height = self.options.height;
			}
			// _image.style.position = 'absolute';
			_image.style.visibility = 'hidden';


			var style = getComputedStyle(self.container);
			if (parseInt(style.width)) {
				_image.style.width = '100%';
			}
			if (parseInt(style.height)) {
				_image.style.height = '100%';
			}

			self.container.appendChild(_image);
			_toggleListeners(true);
		}
	};

	var _toggleListeners = function(toggleOn) {
		if (toggleOn) {
			self.player.on('player:timeUpdate', _onTimeUpdate);
			if(_image) {
				_image.addEventListener('error',_onImgEvent, false);
				_image.addEventListener('load', _onImgEvent, false);
			}

		} else {
			self.player.off('player:timeUpdate', _onTimeUpdate);
			if(_image) {
				_image.removeEventListener('error', _onImgEvent, false);
				_image.removeEventListener('load', _onImgEvent, false);
			}

		}
	};

	var _onTimeUpdate = function(event) {
		if (_playing) {
			var nowTime = new Date().getTime() / 1000;
			_currentTime += nowTime - _prevTime;
			_prevTime = nowTime;
			self.set('position', _currentTime);

			if (_duration - _currentTime < 1 && !_beforeCompleteFired) {
				_beforeCompleteFired = true;
				self.emit("mediaBeforeComplete");
			}

			if (_currentTime >= _duration) {
				_currentTime = _duration;
				_setState(0);
				_toggleListeners(false);
			}
		}
	};

	var _onImgEvent = function(event) {
		switch (event.type) {
			case 'error':
				self.emit('mediaError');
				_setState(5);

				if (AddonError) {
					var errorType, errorCode, errorMessage;
					errorType = AddonError.errorTypes.NETWORK_ERROR;
					errorCode = AddonError.errorCodes[errorType].MEDIA_FILE_LOADING_ERROR;
					var src = _image ? _image.src : '';
					errorMessage = AddonError.errorMessages[errorCode] + ' ' + src;
					new AddonError(self.player, errorType, errorCode, errorMessage, true);
				}

				break;
			case 'load':
				_imgLoaded = true;
				_image.style.visibility = 'visible';
				self.emit('mediaCanPlay');
				self.emit('loadedFraction', 1);
				if (_autoPlay) {
					self.play()
				} else {
					_setState(5);
				}
				break;
		}
	}
}

MggpVendorImg.prototype = Object.create(MggpVendor.prototype);
MggpVendorImg.prototype.constructor = MggpVendorImg;

MggpVendorImg.mimeTypes = ['gif', 'jpeg', 'png', 'jpg'];
MggpVendorImg.priority = 0;

MggpVendorImg.canPlay = function(type) {
	return MggpVendorImg.mimeTypes.indexOf(type) != -1;
};

module.exports = MggpVendorImg;
},{"mggp-player":2}],11:[function(require,module,exports){
/**
 * Created by User on 29/06/2016.
 */
"use strict";

var MggpVendor = require('mggp-player').Vendor;

function MggpVendorMRAIDTV(pPlayer, pConfig) {
    MggpVendor.apply(this, arguments);

    var self = this;
    var iframe = null;
    setState(-1);


    this.dispose = function () {
        toggleListeners(false);
        if (iframe && iframe.parentNode) {
            iframe.parentNode.removeChild(iframe);
        }
        delete window.mraidIframeLoaded;
    };

    this.load = function (src, videoInfo, options) {
        this.checkOptions(options);
        createIframe();
        toggleListeners(true);
        iframe.src = src;
    };

    this.play = function () {

    };

    this.pause = function () {

    };

    this.stop = function () {
        self.dispose();
        setState(0);
    };

    this.togglePlayPause = function () {

    };

    this.seekTo = function (seconds) {

    };

    this.setVolume = function (pVolume) {

    };

    this.mute = function() {

    };

    this.unMute = function() {

    };

    this.getPlayableElement = function() {
        return iframe;
    };

    function createIframe() {
        iframe = document.createElement('iframe');
        iframe.style.border = 'none';
        iframe.frameborder = '0';
        iframe.scrolling = 'no';
        iframe.style.position = 'absolute';
        iframe.style.overflow = 'hidden';
        iframe.style.width = '100%';
        iframe.style.height = '100%';
        iframe.id = 'mggMRAIDTVIframe';
        self.container.appendChild(iframe);
    }

    function setState(pNewState) {
        self.set('state', pNewState);
        self.emit('stateChange', pNewState);
    }

    function toggleListeners(subscribe) {
        if (iframe) {
            if (subscribe) {
                iframe.addEventListener('load', onIframeEvent, false);
                window.addEventListener('message', onIframeEvent, false);
            } else {
                iframe.removeEventListener('load', onIframeEvent, false);
                window.removeEventListener('message', onIframeEvent, false);
            }
        }
    }

    function onIframeEvent(event) {
        switch (event.type) {
            case 'load':
                iframe.contentWindow.postMessage('loaded', '*');
                setState(1);
                break;

            case 'message':
                // var origin = getOrigin();
                // var eventOrigin = event.origin || event.originalEvent.origin;
                // if (eventOrigin == origin && typeof event.data === 'string') {
                    if (event.data == 'needToClose') {
                        self.stop();
                    }
                // }
                break;
        }
    }

    function getOrigin() {
        if (window.location.origin) {
            return window.location.origin;
        } else {
            return window.location.protocol + "//" +
                window.location.hostname +
                (window.location.port ? ':' + window.location.port : '');
        }
    }

    self.log('MggpVendorMRAIDTV:Created!');
}

MggpVendorMRAIDTV.prototype = Object.create(MggpVendor.prototype);
MggpVendorMRAIDTV.prototype.constructor = MggpVendorMRAIDTV;

MggpVendorMRAIDTV.mimeTypes = ["html"];
MggpVendorMRAIDTV.priority = 0;

MggpVendorMRAIDTV.canPlay = function(type) {
    return MggpVendorMRAIDTV.mimeTypes.indexOf(type) != -1;
};

module.exports = MggpVendorMRAIDTV;


//Fri Dec 16 2016 16:42:28 GMT+0200 (EET)

},{"mggp-player":2}],12:[function(require,module,exports){
'use strict';
var helpFunctions = require('core/lib/helpFunctions');
var envConfig = require('config/prod.js');

var config = {
  app: {
    version: '3.1.01',
    lang: 'ru',
    firstTimeUser: false
  },
  api: {
    version: 'v1',
    url: 'https://api.megogo.net',
    timeout: 30000,
    type: 'json',
    keys: {}
  },
  payments: {
    hostUrl: 'https://cards.megogo.net/iframe/tv?version=1'
  },
  logs: {
    ajaxErrorLogUrl: 'http://log.cnt.re:7080/log/smarttv_ajax',
    streamErrorLogUrl: 'http://log.cnt.re:7080/log/smarttv_stream',
    debugLogUrl: 'http://log.cnt.re:7080/log/smarttv_debug',
    statLogUrl: 'http://log.cnt.re:7080/log/smarttv_stat',
    bufferingLogUrl: 'http://log.cnt.re:7080/log/player_warnings',
    messageLogUrl: 'http://log.cnt.re:7080/log/smarttv_message',
    auraHomePage: 'file:///home/web/services.html'
  },
  deviceInfo: {
    vendor: '',
    deviceID: '',
    isWebos: false,
    isTizen16: false,
    hasStorage: false,
    name: '',
    firmware: '',
    serialNumber: '',
    support3d: false,
    supportUHD: false,
    supportHDR: false,
    supportWebSocket: false,
    deviceMacAddress: '',
    noAdKey: false,
    platformName: '',
    chipset: '',
    networkType: ''
  },
  animation: {
    animated: 0,
    duration: {
      speed0: 0,
      speed1: 0.1,
      speed2: 0.2,
      speed3: 0.3,
      speed4: 0.4,
      speed5: 0.5
    }
  },
  player: {
    defaultBitrate: 720,
    seekOffset: 60
  },
  itemTypes: {
    ITEM_CAROUSEL: 0,
    ITEM_FILM_LIST: 1,
    ITEM_CAT_LIST: 2,
    ITEM_TV_LIST: 3
  },
  sliderTypes: ['object', 'feature', 'url'],
  metrics: {
    720: {
      // screen base dimension
      height: 720,
      width: 1280,

      // safe zone margins
      availTop: 30,
      availBottom: 30,
      availRight: 40,
      availLeft: 40,
      // project-specific vars
      mainListPerLine: 5,
      searchListPerLine: 7,
      modalListLength: 6,
      itemsPerLine: 7,
      itemsPerLinePremiere: 4,
      commentMoveStep: 100,
      mainSliderImgSrcV1: 'image_1350x510',
      mainSliderImgSrcV2: 'image_900x340',
      mainListImgSrcV1: 'small',
      mainListImgSrcV2: 'big',
      aboutActorImgSrcV1: 'image_240x240',
      aboutActorImgSrcV2: 'image_360x360',
      tvIconSrcV1: '88x88',
      tvIconSrcV2: '40x40'
    }
  },
  languages: {
    "ru": "Русский",
    "ua": "Українська",
    "en": "English",
    "by": "Беларуская",
    "lv": "Latviešu",
    "lt": "Lietuvių",
    "ee": "Eesti",
    "cz": "Česky",
    "sk": "Slovenčina"
  },
  languages_popup: [
    {'id': 'ru', 'title': 'Русский'},
    {'id': 'ua', 'title': 'Українська'},
    {'id': 'en', 'title': 'English'},
    {'id': 'by', 'title': 'Беларуская'},
    {'id': 'lv', 'title': 'Latviešu'},
    {'id': 'lt', 'title': 'Lietuvių'},
    {'id': 'ee', 'title': 'Eesti'},
    {'id': 'cz', 'title': 'Česky'},
    {'id': 'sk', 'title': 'Slovenčina'}
  ],
  langs_supported: {
    "1": "ru",
    "2": "ua",
    "3": "en",
    "4": "by",
    "5": "lv",
    "6": "lt",
    "7": "ee",
    "8": "cz",
    "9": "sk"
  },
  keyboard_lang: {
    "ru": {id: "RUS", title: 'Русский'},
    "ua": {id: "UKR", title: 'Українська'},
    "en": {id: "ENG", title: 'English'},
    "by": {id: "BYX", title: 'Беларуская'},
    "lv": {id: "LAT", title: 'Latviešu'},
    "lt": {id: "LIT", title: 'Lietuvių'},
    "ee": {id: "EST", title: 'Eesti'},
    "cz": {id: "CZE", title: 'Česky'},
    "sk": {id: "SLO", title: 'Slovenčina'}
  },
  langs_overrride: {
    "uk": "ua",
    "cs": "cz",
    "az": "ru",
    "hy": "ru",
    "kk": "ru",
    "ky": "ru",
    "ro": "ru",
    "tg": "ru",
    "tk": "ru",
    "uz": "ru",
    "ka": "ru"
  },
  keys: {

    /* @if VENDOR=='toshiba' */
    toshiba: {
      public_key: '_toshiba_j7',
      private_key: '08d75ade57'
    },
    /* @endif */

    /* @if VENDOR=='panasonic' */
    panasonic: {
      public_key: '_panasonictv_j7',
      private_key: 'd0474efdaf'
    },
    /* @endif */


    /* @if VENDOR=='smart' */
    smart: {
      public_key: '_smarttv_beta',
      private_key: 'cb42131cfa'
    },
    /* @endif */
    /* @if VENDOR=='sony_ps' */
    sony_ps: {
      public_key: '_sony_ps_beta',
      private_key: '8550665327'
    },
    /* @endif */
    /* @if VENDOR=='netrange' */
    netrange: {
      public_key: '_netrange',
      private_key: '98eb93a3656c3b2d'
    },
    /* @endif */
    /* @if VENDOR=='oppo' */
    oppo: {
      public_key: '_oppodigital_j3',
      private_key: 'b72af86cae'
    },
    /* @endif */
    /* @if VENDOR=='foxxum' */
    foxxum: {
      public_key: '_foxxum_j5',
      private_key: '0c27f2a40d'
    },
    /* @endif */
    /* @if VENDOR=='tcl' */
    tcl: {
      public_key: '_tcl_tv_j4',
      private_key: 'ff8824cb04'
    },
    /* @endif */
    /* @if VENDOR=='aura' */
    aura: {
      public_key: '_aura_j4',
      private_key: 'd1fadc94fd'
    }
    /* @endif */
  },
  parentalControlTimer: -1,

  menuRoutePage: {
    tv: 'pageSubscription',
    premieres: 'pagePremiere',
    movies: 'pageMovies',
    tv_channels: 'pageTvChannels',
    collections: 'pageMoviesCollection',
    movies_subscription: 'pageSubscriptionMovies',
    main: 'pageMain',
    cartoons: 'pageCartoons',
    series: 'pageSeries'
  },
  noAdLGModels: ['EA970', 'EA980', 'LA620', 'LA621', 'LA640', 'LA641', 'LA644',
    'LA645', 'LA660', 'LA662', 'LA667', 'LA669', 'LA690',
    'LA691', 'LA710', 'LA740', 'LA741', 'LA790', 'LA860',
    'LA868', 'LA965', 'LA970', 'LB490', 'LB491', 'LB498',
    'LB570', 'LB572', 'LB580', 'LB582', 'LB588', 'LN460',
    'LN467', 'LN570', 'LN575', 'LN577', 'LN613', 'LN655',
    'PB660', 'PH470', 'PH670', 'PH670', 'UB820', 'UB830'],
  lang: {
    // turn on/off localization support
    active: true,

    // list of languages to generate localization files for
    languages: ['ru', 'ua', 'en', 'by', 'lv', 'lt', 'ee', 'cz', 'sk'],

    // Specifies the encoding of the input files.
    // This option is needed only if some untranslated message strings or their corresponding comments
    // contain non-ASCII characters.
    // @flag --from-code=name
    fromCode: 'UTF-8',

    // Place comment blocks starting with tag and preceding keyword lines in the output file.
    // Without a tag, the option means to put all comment blocks preceding keyword lines in the output file.
    // Note that comment blocks supposed to be extracted must be adjacent to keyword lines.
    // @flag --add-comments[=tag]
    addComments: 'gettext',

    // Write the .po file using indented style.
    // @flag --indent
    indent: false,

    // Write "#: filename:line" lines.
    // @flag --no-location
    noLocation: true,

    // Do not break long message lines.
    // Message lines whose width exceeds the output page width will not be split into several lines.
    // Only file reference lines which are wider than the output page width will be split.
    // @flag --no-wrap
    noWrap: true,

    // Generate sorted output.
    // Note that using this option makes it much harder for the translator to understand each message’s context.
    // @flag --sort-output
    sortOutput: true,

    // Sort output by file location.
    // @flag --sort-by-file
    sortByFile: false,

    // Increase verbosity level.
    // @flag --verbose
    verbose: false
  }

};

module.exports = window.mainConfigMgg = helpFunctions.deepObjectExtend(config, envConfig);

},{"config/prod.js":13,"core/lib/helpFunctions":34}],13:[function(require,module,exports){
module.exports = {};

},{}],14:[function(require,module,exports){
var TweenLite = require('./lib/TweenLite.js');
var CSSPlugin = require('./lib/plugins/CSSPlugin.js');
var Tween = require('core/lib/tween.js');

var useTweenLite = 1;

var availableProperties = ['width', 'height', 'marginTop', 'left', 'right', 'top', 'opacity'];

var TweenAnimation = new Tween();

module.exports = function(target, duration, vars, tweenVars, forsed) {
   if (!mainConfigMgg.animation.animated && !forsed) {
    duration = 0;
  }

  if (useTweenLite && duration && TweenLite) {
    return TweenLite.to(target, duration, vars);
  } else {

    var duration = duration * 1000;
    var from = 0;
    var to = 0;

    var setProp = {
      prop: null,
      set: function(value) {
        target.style[setProp.prop] = value + 'px';
      }
    };

    for (var p in vars) {
      if (availableProperties.indexOf(p) !== -1) {
        setProp.prop = p;//need refactor
        from = target.style[p] ? parseInt(target.style[p]) : 0;
        to = vars[p];
      } else {

      }
      if (p === 'duration') {
        duration = vars[p];
      }
      if (p === 'ease') {

      }
    }

    if(!duration) {
      target.style[setProp.prop] = to + 'px';
      return;
    }


    //console.log(target, setProp.set, from, to, duration, TweenAnimation.Linear.easeNone);
    TweenAnimation.init(target, setProp.set, from, to, duration, TweenAnimation.Linear.easeNone);
    TweenAnimation.start();
  }
};

},{"./lib/TweenLite.js":33,"./lib/plugins/CSSPlugin.js":36,"core/lib/tween.js":39}],15:[function(require,module,exports){
/**
 * @module core/api
 * @author Dmitriy Bubra <dbubra@gmail.com>
 * @license GNU GENERAL PUBLIC LICENSE Version 3
 */

var request = require('core/request'),
  md5 = require('core/lib/md5'),
  app = require('core/app'),
  Promise = require('core/promise'),
  helpFunctions = require('core/lib/helpFunctions'),
  statInfoService = require('core/tools/statInfoService'),
  ErrorBlock = require('widgets/popup/popup-error'),
  Loader = require('widgets/loader'),
  query_url, error_counter;

var api = module.exports = {};

var query_urls = {
  'premiere': 'premieres',
  'collections': 'collections',
  'videoCollection': 'video/collection',
  'video': 'video',
  'userTvod': 'user/tvod',
  'userFavorite': 'user/favorites',
  'userHistory': 'user/history',
  'userFavoritesTv': 'user/favorites/tv',
  'userFavoritesTvByIds': 'user/favorite/tv/filter',
  'userFavoritesByIds': 'user/favorite/filter',
  'userFavoriteAdd': 'user/favorite/add',
  'userFavoriteDelete': 'user/favorite/delete',
  'userFavoriteAddTv': 'user/favorite/tv/add',
  'userFavoriteTvDelete': 'user/favorite/tv/delete',
  'userHistoryDelete': 'user/history/delete',
  'userLoyaltyBalance': 'user/loyalty/balance',
  'userIP': 'user/ip',
  'featuredGroup': 'featured/group',
  'configurationMenu': 'configuration/menu',
  'subscriptionInfo': 'subscription/info',
  'configuration': 'configuration',
  'user': 'user',
  'configurationInterface': 'configuration/interface',
  'time': 'epg/time',
  'tvExtended': 'tv/extended',
  'slider': 'slider',
  'redeem': '',
  'paymentPromoCode': 'payments/code',
  'paymentRedeem': 'payments/code/subscription',
  'stream': 'stream',
  'virtualStream': 'stream/virtual',
  'pcNotificationShown': 'user/parental_controls/notification_shown/set',
  'addVote': 'vote/add',
  'tvChannels': 'tv/channels',
  'subscription': 'subscription',
  'search': 'search',
  'epg': 'epg',
  'videoReviews': 'comment/list',
  'videoInfo': 'video/info',
  'videoEpisodes': 'video/episodes',
  'people': 'people',
  'createMobileOrder': 'payments/mobile/create',
  'checkMobileOrder': 'payments/mobile/check',
  'paymentsSubscriptionRenewAdd': 'subscription/renew/add',
  'paymentsSubscriptionRenewCancel': 'subscription/renew/cancel',
  'videoFilters': 'video/filters',
  'premieresFilters': 'premieres/filters',
  'appadvert': 'appadvert'
};

/**
 * generate url
 * @method getUrl
 * @param  {[type]} path    [description]
 * @param  {[type]} params  [description]
 * @param  {[type]} options [description]
 * @return {String, Object} url, options
 */
api.getUrl = function (path, params, options) {
  var url = [mainConfigMgg.api.url, mainConfigMgg.api.version, path].join('/');

  if (typeof options !== 'object') {
    options = {};
  }

  if (mainConfigMgg.api.type) {
    options.type = mainConfigMgg.api.type;
  }

  if (mainConfigMgg.api.timeout) {
    options.timeout = mainConfigMgg.api.timeout;
  }

  if (typeof params === 'object') {
    if (!params.lang) {
      params.lang = mainConfigMgg.app.lang;
    }

    params.did = mainConfigMgg.deviceInfo.deviceID;

    params.sign = '';

    for (var key in params) {
      if (params[key] && 'sign' !== key) {
        params.sign += (key + '=' + params[key])
      }
    }

    params.sign += mainConfigMgg.api.keys.privateKey;
    params.sign = md5(params.sign) + mainConfigMgg.api.keys.publicKey;
    if (options.method && options.method.toLowerCase() == 'post') {
      options.data = request.encode(params);
      options.headers = {'Content-Type': 'application/x-www-form-urlencoded'}
    } else {
      url += '?' + request.encode(params);
    }
  }
  return {url: url, options: options}
};

/**
 * [request description]
 * @method request
 * @param  {[type]} path    [description]
 * @param  {[type]} params  [description]
 * @param  {[type]} options [description]
 * @return {[type]} [description]
 */
api.request = function (path, params, options) {
  var url = api.getUrl(path, params, options);
  return request.ajax(url.url, url.options);
};

['GET', 'POST'].forEach(function (method) {
  api[method.toLowerCase()] = function (url, params, options) {
    if (typeof options !== 'object') {
      options = {};
    }
    options.method = method;
    return api.request(url, params, options);
  };
});

api.load = function (urlId, params, config) {
  params = params || {};
  query_url = query_urls[urlId];
  if (!query_url) {

    return new Promise(function (resolve, reject) {

      reject('you use not exist url!');
    });
  }
  return new Promise(function (resolve, reject) {
    api.get(query_urls[urlId], params, {
      onerror: function (error) {
        var errorText = i18nMgg('error_try_later') + '<br>' + error.text + ' ' + query_urls[urlId];
        var errorButtonText = i18nMgg('close');
        var jsonErrorResp = JSON.parse(error.response);
        if(jsonErrorResp && jsonErrorResp.result == 'error'){
          errorText = jsonErrorResp.message;
          errorButtonText = i18nMgg('back');

        }
        ErrorBlock.show({
          backLable: false,
          text: errorText,
          buttons: [
            {
              text: errorButtonText
            }
          ]
        });
        statInfoService.sendAJAXErrorLog(error.errorURL, query_urls[urlId], error.status, error.statusText, error.text, error.type, error.response);
        reject(error);
      },
      onload: function (res) {
        if (res.data) {
          if (config && config.setToStorageKey) {
            app.dataStorage[config.setToStorageKey] = res.data;
          }
          resolve(res.data);
        } else if (res.result == 'ok') {
          resolve(res);
        } else {

          // Should not get here, cause all AJAX errors are already handled  in api.get,
          // but left here just in case ))

          ErrorBlock.show({
            backLable: false,
            text: i18nMgg('error_try_later'),
            buttons: [
              {
                text: i18nMgg('close')
              }
            ]
          });
          statInfoService.sendAJAXErrorLog( 'api/get/onload', query_urls[urlId], 515, 'check your code', 'strange error in last if', '', '');
          resolve(res);
        }
      }
    });
  });
};

api.loadBaseData = function () {
  var results = [];
  return new Promise(function (resolve, reject) {
    return api.load('user', {}, {setToStorageKey: 'user'})
      .then(function (data) {
        results.push({user: data});
        return api.load('configurationInterface', {}, {setToStorageKey: 'configurationInterface'})
      })
      .then(function (data) {
        results.push({configurationInterface: data});
        return api.load('subscriptionInfo', {}, {setToStorageKey: 'subscriptionInfo'});
      })
      .then(function (data) {
        results.push({subscriptionInfo: data});
        return api.load('time', {}, {setToStorageKey: 'time'});
      })
      .then(function (data) {
        results.push({time: data});
        return api.load('configuration', {}, {setToStorageKey: 'configuration'});
      })
      .then(function (data) {
        results.push({configuration: data});
        return api.load('configurationMenu', {place: 'smarttv_side_test'}, {setToStorageKey: 'configurationMenu'})
      })
      .then(function (data) {
        results.push({configurationMenu: data});
        return api.load('configurationMenu', {place: 'smarttv_main_test'}, {setToStorageKey: 'configurationMainMenu'})
      })
      .then(function (data) {
        results.push({'configurationMainMenu': data});
        return api.PC_Check();
      })
      .then(function (data) {
        results.push({'pc_info': data});
        statInfoService.sendStatLog();
        resolve(results);
      })
      .catchError(function (error) {
        ErrorBlock.hide();
        ErrorBlock.show({
          backLable: false,
          text: i18nMgg('error_try_later') + '<br>' + i18nMgg('error_sent'),
          buttons: [
            {
              text: i18nMgg('exit_app_button'), callback: function () {
              helpFunctions.deviceExit();
            }
            }
          ]
        });

      })
  });
};

api.loadUserPersonalData = function () {
  return new Promise(function (resolve, reject) {
    return api.load('user', {}, {setToStorageKey: 'user'})
      .then(function (data) {
        return api.load('subscriptionInfo', {}, {setToStorageKey: 'subscriptionInfo'});
      })
      .then(function (data) {
        return api.load('configurationMenu', {place: 'smarttv_side_test'}, {setToStorageKey: 'configurationMenu'})
      })
      .then(function (data) {
        return api.load('configurationMenu', {place: 'smarttv_main_test'}, {setToStorageKey: 'configurationMainMenu'})
      })
      .then(function (data) {
        return api.PC_Check();
      })
      .then(function (data) {
        resolve(data);
      })
      .catchError(function (error) {
        reject('error in loadBaseData')
      })
  });
};

api.PC_Check = function (params) {
  params = params || {};
  return new Promise(function (resolve, reject) {
    error_counter = 0;
    var httpGet = function () {
      api.get('user/parental_controls', params, {
        onerror: function (error) {
          if (error_counter < 3) {
            error_counter++;
            httpGet();
          } else {
            reject(error);
          }
        },
        onload: function (res) {
          app.dataStorage.pc_info = res.data;
          resolve(res.data);
        }
      });
    };
    httpGet();
  });
}


api.PC_Save = function (params) {
  params = params || {};
  return new Promise(function (resolve, reject) {
    error_counter = 0;
    var httpPOST = function () {
      api.post('user/parental_controls/edit', params, {
        onerror: function (error) {
          if (error_counter < 3) {
            error_counter++;
            httpPOST();
          } else {
            reject(error);
          }
        },
        onload: function (res) {
          resolve(res.data);
        }
      });
    };
    httpPOST();
  });
};

api.PC_Remove = function (params) {
  params = params || {};
  return new Promise(function (resolve, reject) {
    error_counter = 0;
    var httpPOST = function () {
      api.post('user/parental_controls/remove', params, {
        onerror: function (error) {
          if (error_counter < 3) {
            error_counter++;
            httpPOST();
          } else {
            reject(error);
          }
        },
        onload: function (res) {
          resolve(res.data);
        }
      });
    };
    httpPOST();
  });
};


api.authCode = function (params) {
  params = params || {};
  return new Promise(function (resolve, reject) {
    error_counter = 0;
    var httpGet = function () {
      api.get('device', params, {
        onerror: function (error) {
          if (error_counter < 3) {
            error_counter++;
            httpGet();
          } else {
            reject(error);
          }
        },
        onload: function (res) {
          resolve(res.data);
        }
      });
    };
    httpGet();
  });
};


api.userLogOut = function (params) {
  params = params || {};
  return new Promise(function (resolve, reject) {
    error_counter = 0;
    var httpGet = function () {
      api.get('auth/logout', params, {
        onerror: function (error) {
          if (error_counter < 3) {
            error_counter++;
            httpGet();
          } else {
            reject(error);
          }
        },
        onload: function (res) {
          resolve(res.data);
        }
      });
    };
    httpGet();
  });
};

},{"core/app":16,"core/lib/helpFunctions":34,"core/lib/md5":35,"core/promise":43,"core/request":44,"core/tools/statInfoService":53,"widgets/loader":149,"widgets/popup/popup-error":153}],16:[function(require,module,exports){
/**
 * @module core/app
 * @license GNU GENERAL PUBLIC LICENSE Version 3
 */

'use strict';

var Model = require('./model'),
  router = require('./router'),
  colorButtonsHandle = require('core/tools/colorButtonsHandle'),
  keys = require('vendor/aura/keys'),
  arrowsWidget = require('widgets/mouse-arrows'),
  keyCodes = {}, mouse_wheel_delta, mouse_wheel_custom_event,
  app, key, keydown_pressed, custom_keydown_event;
  var globalLastMouseMove = 0, globalLastMouseWheel = 0, isServe = false;

require('./shims');


/**
 * @instance
 * @type {Model}
 */
app = new Model({

  lastPressedTime: 0,
  /**
   * Enable logging and debugging flag set by debug module at runtime.
   *
   * @type {boolean}
   */
  debug: false,

  /**
   * True if executed on the STB device, set by debug module at runtime.
   *
   * @type {boolean}
   */
  host: true,

  /**
   * Screen geometry and margins.
   *
   * @type {Object}
   * @property {number} height Total screen height
   * @property {number} width Total screen width
   * @property {number} availTop top safe zone margin
   * @property {number} availRight right safe zone margin
   * @property {number} availBottom bottom safe zone margin
   * @property {number} availLeft left safe zone margin
   * @property {number} availHeight safe zone height
   * @property {number} availWidth safe zone width
   */
  screen: null,

  /**
   * Timestamps data.
   *
   * @type {Object}
   * @property {number} init application initialization time (right now)
   * @property {number} load document onload event
   * @property {number} done onload event sent and processed
   */
  time: {
    init: +new Date(),
    load: 0,
    done: 0,
  },
  /**
   * App load indicator. become true when all queries complete
   */
  loaded: false,
});

/**
 * Set crops, total, content size and link the corresponding CSS file.
 *
 * @param {Object} metrics screen params specific to resolution
 *
 * @return {boolean} operation status
 */
app.setScreen = function(metrics) {
  var linkCSS;

  if (metrics) {
    // calculate and extend
    metrics.availHeight = metrics.height - (metrics.availTop + metrics.availBottom);
    metrics.availWidth = metrics.width - (metrics.availLeft + metrics.availRight);

    // set max browser window size
    window.moveTo(0, 0);
    window.resizeTo(metrics.width, metrics.height);

    // provide global access
    this.data.metrics = metrics;

    return true;
  }

  // nothing has applied
  return false;
};

// define events constants

// extract key codes
for (key in keys) {
  if (key === 'volumeUp' || key === 'volumeDown') {
    continue;
  }

  // no need to save key names
  keyCodes[keys[key]] = true;
}

app.defaultEvents = {
  /**
   * The load event is fired when a resource and its dependent resources have finished loading.
   *
   * Control flow:
   *   1. Global handler.
   *   2. Each page handler.
   *   3. Application DONE event.
   *
   * @see https:// developer.mozilla.org/en-US/docs/Web/Reference/Events/load
   *
   * @param {Event} event generated object with event data
   */
  load: function(event) { //CHECK MAYBE THIS EVENT DONT WORK
    // var path;

    // time mark
    app.data.time.load = event.timeStamp;

    // global handler
    // there are some listeners
    if (app.events[event.type]) {
      // notify listeners
      app.emit(event.type, event);
    }

    // local handler on each page
    router.pages.forEach(function forEachPages(page) {
      // there are some listeners
      if (!page.events) {
      }

      if (page.events[event.type]) {
        // notify listeners
        page.emit(event.type, event);
      }
    });

    // time mark
    app.data.time.done = +new Date();

    // everything is ready
    // and there are some listeners
    if (app.events['done']) {
      // notify listeners
      app.emit('done', event);
    }
  },

  /**
   * The unload event is fired when the document or a child resource is being unloaded.
   *
   * Control flow:
   *   1. Each page handler.
   *   2. Global handler.
   *
   * @see https:// developer.mozilla.org/en-US/docs/Web/Reference/Events/unload
   *
   * @param {Event} event generated object with event data
   */
  unload: function(event) {
    // global handler
    // there are some listeners
    if (app.events[event.type]) {
      // notify listeners
      app.emit(event.type, event);
    }

    // local handler on each page
    router.pages.forEach(function forEachPages(page) {
      // there are some listeners
      if (page.events[event.type]) {
        // notify listeners
        page.emit(event.type, event);
      }
    });
  },

  /**
   * The error event is fired when a resource failed to load.
   *
   * @see https:// developer.mozilla.org/en-US/docs/Web/Reference/Events/error
   *
   * @param {Event} event generated object with event data
   */
  error: function(event) {

  },

  /**
   * The keydown event is fired when a key is pressed down.
   * Set event.stop to true in order to prevent bubbling.
   *
   * Control flow:
   *   1. Current active component on the active page.
   *   2. Current active page itself.
   *   3. Application.
   *
   * @see https:// developer.mozilla.org/en-US/docs/Web/Reference/Events/keydown
   *
   * @param {Event} event generated object with event data
   */
  keyup: function(event) {
    keydown_pressed = false;
  },
  keydown: function(event) {
/*@TODO has problem with aura
    var currTime = new Date().getTime();
    if (keydown_pressed) {
      if (this.lastPressedTime) {
        if ((currTime - this.lastPressedTime) < 300) {
          //return;
        }
      }
    }
 keydown_pressed = true;

 this.lastPressedTime = currTime;
*/


    var page = router.current,
      activeComponent;

    // filter phantoms
    if (event.keyCode === 0) {
      return;
    }

    //for testing BACK_BUTTON in LG
    custom_keydown_event = {keyCode: event.keyCode, event: event}; // event.keyCode = 'some_val' not work, event object - readonly
    if (event.keyCode === keys.HID_BACK) {
      custom_keydown_event.keyCode = keys.RETURN;
    }

    // page.activeComponent can be set to null in event handles
    activeComponent = page.activeComponent;

    // current component handler
    if (activeComponent && activeComponent !== page) {
      // component is available and not page itself
      if (activeComponent.events[event.type]) {
        // there are some listeners
        activeComponent.emit(event.type, custom_keydown_event);
      }

      // bubbling
      if (!event.stop &&
        activeComponent.propagate &&
        activeComponent.parent &&
        activeComponent.parent.events[event.type]
      ) {
        activeComponent.parent.emit(event.type, custom_keydown_event);
      }
    }

    // page handler
    if (!event.stop) {
      // not prevented
      if (page.events[event.type]) {
        // there are some listeners
        page.emit(event.type, custom_keydown_event);
      }

      // global app handler
      if (!event.stop) {
        // not prevented
        if (app.events[event.type]) {
          // there are some listeners
          app.emit(event.type, custom_keydown_event);
        }
      }
      if (event.keyCode === keys.RED) {
        colorButtonsHandle.pressRed();
      }
    }

    // suppress non-printable keys in stb device (not in your browser)
    if (app.data.host && keyCodes[event.keyCode]) {
      event.preventDefault();
    }
    //@TODO for testing mrc arrow
    if(arrowsWidget.activated) {
      if(arrowsWidget.activeArrow) {
        arrowsWidget.activeArrow.emit('mouseout');
      }
      arrowsWidget.hideArrows();
    }

    if(router.current && router.current.leftMenu) {
      if(router.current.leftMenu.hoverMenu) {
        router.current.leftMenu.container.emit('mouseout');
      }
      /*else if(router.current.leftMenu.hoverBackLable) {
       router.current.leftMenu.backLable.emit('mouseout');
       }*/
    }
  },

  /**
   * The keypress event is fired when press a printable character.
   * Delivers the event only to activeComponent at active page.
   *
   * @see https:// developer.mozilla.org/en-US/docs/Web/Reference/Events/keypress
   *
   * @param {Event} event generated object with event data
   * @param {string} event.char entered character
   */
  keypress: function(event) {
    var page = router.current;

    // current component handler
    if (page.activeComponent && page.activeComponent !== page) {
      // component is available and not page itself
      if (page.activeComponent.events[event.type]) {
        // there are some listeners
        page.activeComponent.emit(event.type, event);
      }
    }
  },

  /**
   * The click event is fired when a pointing device button (usually a mouse button) is pressed and released on a single element.
   *
   * @see https:// developer.mozilla.org/en-US/docs/Web/Reference/Events/click
   *
   * @param {Event} event generated object with event data
   */
  click: function(event) {

  },


  /**
   * The wheel event is fired when a wheel button of a pointing device (usually a mouse) is rotated.
   *
   * @see https:// developer.mozilla.org/en-US/docs/Web/Reference/Events/wheel
   *
   * @param {Event} event generated object with event data
   */
  mousewheel: function(event) {
    mouseWheelCallback(event);
  },
  DOMMouseScroll: function(event) {
    mouseWheelCallback(event);
  },
  mousemove :function(event) {
    if(!arrowsWidget.disabled) {
      if (Date.now() - globalLastMouseMove >= 500) {
        arrowsWidget.showArrows();
        globalLastMouseMove = Date.now();
        arrowsWidget.mouse_used = true;
      }
    }
  }
};

function mouseWheelCallback(event) {

  if(isServe){
     if (Date.now() - globalLastMouseWheel >= 100) {
     globalLastMouseWheel = Date.now();
     } else {
     return;
     }
  }



  mouse_wheel_delta = -1 * Math.max(-1, Math.min(1, (event.wheelDelta || -event.detail)));
  mouse_wheel_custom_event = {deltaY: mouse_wheel_delta};

  var page = router.current;
  // current component handler
  if (page.activeComponent && page.activeComponent !== page) {
    // component is available and not page itself
    if (page.activeComponent.events['mousewheel']) {
      // there are some listeners
      page.activeComponent.emit('mousewheel', mouse_wheel_custom_event);
    }
  }

  /*
  // page handler
  if (!mouse_wheel_custom_event.stop) {
    // not prevented
    if (page.events[event.type]) {
      // there are some listeners
      page.emit(event.type, event);
    }
  }*/

  if(arrowsWidget.widgetArrowsUpdate) {
    arrowsWidget.widgetArrowsUpdate();
  }
  else if(router.current.arrowsUpdate) {
    router.current.arrowsUpdate();
  }
}

// apply events
for (key in app.defaultEvents) {
  window.addEventListener(key, app.defaultEvents[key], false);
}

// public
module.exports = app;

},{"./model":40,"./router":45,"./shims":46,"core/tools/colorButtonsHandle":48,"vendor/aura/keys":133,"widgets/mouse-arrows":152}],17:[function(require,module,exports){
/**
 * @module core/collection
 * @author Stanislav Kalashnik <sk@infomir.eu>
 * @license GNU GENERAL PUBLIC LICENSE Version 3
 */
'use strict';

var Emitter = require('./emitter');

/**
 * Base collection implementation
 *
 * @constructor
 *
 * @param {Model[]} [data=[]] init model list
 */
function Collection(data) {
  var model, i;

  // parent constructor call
  Emitter.call(this);

  /**
   * list of all stored data
   * @private
   */
  this.data = [];

  /**
   * hash table of all model ids
   * @private
   */
  this.ids = {};

  // extract ids
  for (i = 0; i < this.data.length; i++) {
    model = this.data[i];
    this.ids[model.id || model.data[model.idName]] = model;
  }

  // apply list of items
  if (data) {
    this.data = data;
  }

  // public attributes
  // this.model = Model;
  // this.url = null;
  // which of data fields is primary
  // this.idName = 'id';
}

// inheritance
Collection.prototype = Object.create(Emitter.prototype);
Collection.prototype.constructor = Collection;

/**
 * Remove all models from the collection event.
 *
 * @event module:core/collection~Collection#clear
 *
 * @type {Object}
 * @property {Model[]} data old model list
 */

/**
 * Remove all models from the collection.
 *
 * @return {boolean} operation status
 *
 * @fires module:core/collection~Collection#clear
 */
Collection.prototype.clear = function() {
  var data, i;

  // is there any data?
  if (this.data.length > 0) {
    // clone the model list
    data = this.data.slice();

    // remove all associated handlers
    for (i = 0; i < this.data.length; i++) {
      this.remove(this.data[0]);
    }

    // reset
    this.data = [];
    this.ids = {};

    // notify listeners
    this.emit('clear', {
      data: data,
    });

    this.emit('change', {
      data: this.data,
    });

    return true;
  }

  return false;
};

/**
 * Set collection data event.
 *
 * @event module:core/collection~Collection#init
 *
 * @type {Object}
 * @property {Model[]} data new model list
 */

/**
 * Clear and fill the collection with the given list of models.
 *
 * @param {Model[]} data model list
 * @return {boolean} operation status
 *
 * @fires module:core/collection~Collection#clear
 * @fires module:core/collection~Collection#init
 */
Collection.prototype.init = function(data) {
  var i, model;

  if (Array.isArray(data)) {
    // reset data
    this.clear();

    // apply list
    this.data = data;

    // extract ids
    for (i = 0; i < data.length; i++) {
      model = data[i];
      this.ids[model.id || model.data[model.idName]] = model;
    }

    // notify listeners
    this.emit('init', {
      data: data,
    });

    this.emit('change', {
      data: this.data,
    });

    return true;
  }

  return false;
};

/**
 * Append the given model to the collection event.
 *
 * @event module:core/collection~Collection#add
 *
 * @type {Object}
 * @property {Model} item new model object
 * @property {number} index model position in the list
 */

/**
 * Append the given model to the collection.
 *
 * @param {Model} model object to add
 *
 * @fires module:core/collection~Collection#add
 */
Collection.prototype.add = function(model) {
  // data
  this.ids[model.id || model.data[model.idName]] = model;
  this.data.push(model);

  // notify listeners
  this.emit('add', {
    item: model,
    index: this.data.length - 1,
  });

  this.emit('change', {
    data: this.data,
  });
};

/**
 * Insert the given model to some place in the collection
 *
 * @param {Model} model model object
 * @param {number} index model position in the list
 *
 * @fires module:core/collection~Collection#add
 */
Collection.prototype.insert = function(model, index) {
  // data
  this.ids[model.id || model.data[model.idName]] = model;
  this.data.splice(index, 0, model);

  // notify listeners
  this.emit('add', {
    item: model,
    index: index,
  });

  this.emit('change', {
    data: this.data,
  });
};

/**
 * Remove the given model from the collection event.
 *
 * @event module:core/collection~Collection#remove
 *
 * @type {Object}
 * @property {Model} item removed model object
 * @property {number} index model position in the list
 */

/**
 * Delete the given model from the collection.
 *
 * @param {Model} model object to remove
 *
 * @fires module:core/collection~Collection#remove
 */
Collection.prototype.remove = function(model) {
  var index = this.data.indexOf(model);

  if (index > -1) {
    model.removeAllListeners();
    this.data.splice(index, 1);
    delete this.ids[model.id || model.data[model.idName]];
    this.emit('remove', {
      item: model,
      index: index,
    });
  }
};

/**
 * Check if the given object is present in the collection.
 *
 * @param {Model} item model to look for
 * @return {boolean} search status
 */
Collection.prototype.has = function(item) {
  return this.data.indexOf(item) >= 0;
};

/**
 * Get a model by the given index in the collection.
 *
 * @param {number} index model position in the list
 * @return {Model|null} model or null if fail to find
 */
Collection.prototype.at = function(index) {
  return this.data[index] || null;
};

/**
 * Get a model by its id.
 *
 * @param {String|Number} id unique identifier
 * @return {Model|null} model or null if fail to find
 */
Collection.prototype.get = function(id) {
  return this.ids[id] || null;
};

// extending with base methods
['filter', 'forEach', 'every', 'map', 'some'].forEach(function forEachMethods(name) {
  Collection.prototype[name] = function methodWrapper() {
    return Array.prototype[name].apply(this.data, arguments);
  };
});

/**
 * Apply the custom sort method for all models in the collection event.
 *
 * @event module:core/collection~Collection#sort
 */

/**
 * Apply the custom sort method for all models in the collection.
 *
 * @param {function} comparator custom callback to provide sorting algorithm
 *
 * @fires module:core/collection~Collection#sort
 */
Collection.prototype.sort = function(comparator) {
  // valid method
  if (comparator && typeof comparator === 'function') {
    this.data.sort(comparator);
    this.emit('sort');
  }
};

// /**
// * Collect models from a server
// */
// Collection.prototype.fetch = function () {
// 	var self = this, i;
// 	if ( this.model && this.url ) {
// 		// collect data
// 		io.ajax(this.url, {
// 			// request params
// 			method   : 'get',
// 			onload   : function ( data ) {
// 				data = self.parse(data);
// 				// create models from response and add
// 				if ( Array.isArray(data) && self.model ) {
// 					for ( i = 0; i < data.length; i++ ) {
// 						// create a model from received data
// 						self.add(new (self.model)(data[i]));
// 					}
// 				}
// 				self.emit('fetch', true);
// 			},
// 			// error handlers
// 			onerror  : this.fetchFailure,
// 			ontimeout: this.fetchFailure
// 		});
// 	}
// };
//
//
// /**
// * Error handler while model data fetch
// */
// Collection.prototype.fetchFailure = function () {
// 	this.emit('fetch', false);
// };
//
//
// /**
// * Convert received data from a server to a model list
// * @param {string} response
// * @return {Array}
// */
// Collection.prototype.parse = function ( response ) {
// 	var data = [];
// 	try {
// 		data = JSON.parse(response).data;
// 	} catch ( e ) {
// 		console.log(e);
// 	}
// 	return data;
// };

Object.defineProperty(Collection.prototype, 'length', {
  get: function() {
    return this.data.length;
  },
});

// public
module.exports = Collection;

},{"./emitter":32}],18:[function(require,module,exports){
/**
 * @module core/component
 * @author Stanislav Kalashnik <sk@infomir.eu>
 * @license GNU GENERAL PUBLIC LICENSE Version 3
 */

'use strict';

var Emitter = require('./emitter'),
  router = require('./router'),
  keys = require('vendor/aura/keys'),
  counter = 0;

/**
 * Base component implementation.
 *
 * Visual element that can handle sub-components.
 * Each component has a DOM element container $node with a set of classes:
 * "component" and some specific component class names depending on the hierarchy, for example "page".
 * Each component has a unique ID given either from $node.id or from data.id. If not given will generate automatically.
 *
 * @constructor
 * @extends Emitter
 *
 * @param {Object} [config={}] init parameters
 * @param {Element} [config.id] component unique identifier (generated if not set)
 * @param {string} [config.className] space-separated list of classes for "className" property of this.$node
 * @param {Element} [config.$node] DOM element/fragment to be a component outer container
 * @param {Element} [config.$body] DOM element/fragment to be a component inner container (by default is the same as $node)
 * @param {Component} [config.parent] link to the parent component which has this component as a child
 * @param {Array.<Component>} [config.children=[]] list of components in this component
 * @param {Object.<string, function>} [config.events={}] list of event callbacks
 * @param {boolean} [config.visible=true] component initial visibility state flag
 * @param {boolean} [config.focusable=true] component can accept focus or not
 * @param {boolean} [config.propagate=false] allow to emit events to the parent component
 *
 * @fires module:core/component~Component#click
 *
 * @example
 * var component = new Component({
 *     $node: document.getElementById(id),
 *     className: 'bootstrap responsive',
 *     events: {
 *         click: function () { ... }
 *     }
 * });
 * component.add( ... );
 * component.focus();
 */
function Component(config) {
  // current execution context
  var self = this,
    name;

  // sanitize
  config = config || {};

  /**
   * Component visibility state flag.
   *
   * @readonly
   * @type {boolean}
   */
  this.visible = true;

  /**
   * Component can accept focus or not.
   *
   * @type {boolean}
   */
  this.focusable = true;

  /**
   * DOM outer handle.
   *
   * @type {Element}
   */
  this.$node = null;

  /**
   * DOM inner handle.
   * In simple cases is the same as $node.
   *
   * @type {Element}
   */
  this.$body = null;

  /**
   * Link to the parent component which has this component as a child.
   *
   * @type {Component}
   */
  this.parent = null;

  /**
   * List of all children components.
   *
   * @type {Component[]}
   */
  this.children = [];

  /**
   * allow to emit events to the parent component
   *
   * @readonly
   * @type {boolean}
   */
  this.propagate = !!config.propagate;

  this.append_to_body = false;

  this.keys = null;

  /**
   * Component focus state flag.
   *
   * @readonly
   * @type {boolean}
   */
  this.focused = false;

  /**
   * Component hard_focus state flag. If true then no one other component can be in focus
   * must be set and remove manually
   * @type {boolean}
   */
  this.hard_focus = false;

    // parent constructor call
  Emitter.call(this, config.data);

  if (config.$node instanceof HTMLElement) {
    this.$node = config.$node;
  } else if (typeof config.$node === 'string') {
    this.$node = document.getElementById(config.$node);
  } else {
    this.$node = document.createElement('div');
  }

  if(config.$body && config.$body.parentNode === null) {
    this.$node.appendChild(config.$body);
  }
  // inner handle - the same as outer handler in case nothing is given
  this.$body = config.$body || this.$node;

  if(this.$node && config.append_to_body) {
    this.append_to_body = true;
    document.getElementsByTagName('body')[0].appendChild(this.$node);
  }

  // set CSS class names
  if (this.$node.className.length > 0) {
    this.$node.className += ' ';
  }

  this.$node.className += 'component ' + (config.className || '');

  // apply component id if given, generate otherwise
  this.id = config.id || this.$node.id || 'cid' + counter++;

  // apply hierarchy
  if (config.parent) {
    // add to parent component
    config.parent.add(this);
  }

  // apply given visibility
  if (config.visible === false) {
    // default state is visible
    this.hide();
  }

  // apply focus handling method
  if (config.focusable === false) {
    // can't accept focus
    this.focusable = false;
  }

  // a descendant defined own events
  if (this.defaultEvents) {
    // sanitize
    config.events = config.events || {};

    for (name in this.defaultEvents) {
      // overwrite default events with user-defined
      config.events[name] = config.events[name] || this.defaultEvents[name];
    }
  }

  // apply given events
  if (config.events) {
    // apply
    this.addListeners(config.events);
  }

  // map keys
  if (config.keys) {
    this.keys = config.keys;
    this.addListener('keydown', function (event) {
      for (var key in config.keys) {
        if (keys[key] === event.keyCode) {
          if (typeof config.keys[key] === 'function') {
            config.keys[key].call(this, event);
          }
          break;
        }
      }
    });
  }

  // apply the given children components
  if (config.children) {
    // apply
    this.add.apply(this, config.children);
  }

  // component activation by mouse
  this.$node.addEventListener('click', function (event) {
    // left mouse button
    if (event.button === 0) {
      // activate if possible
      //self.focus();

      // there are some listeners
      if (self.events['click']) {
        /**
         * Mouse click event.
         *
         * @event module:core/component~Component#click
         *
         * @type {Object}
         * @property {Event} event click event data
         */
        self.emit('click', {
          event: event,
        });
      }
    }

    event.stopPropagation();
  }, false);
}

// inheritance
Component.prototype = Object.create(Emitter.prototype);
Component.prototype.constructor = Component;

/**
 * List of all default event callbacks.
 *
 * @type {Object.<string, function>}
 */
Component.prototype.defaultEvents = null;

/**
 * Add a new component as a child.
 *
 * @param {...Component} [child] variable number of elements to append
 *
 * @files Component#add
 *
 * @example
 * panel.add(
 *     new Button( ... ),
 *     new Button( ... )
 * );
 */
Component.prototype.add = function (child) {
  var i;

  // walk through all the given elements
  for (i = 0; i < arguments.length; i++) {
    child = arguments[i];
    // apply
    this.children.push(child);
    child.parent = this;

    // correct DOM parent/child connection if necessary
    if (child.$node && child.$node.parentNode === null) {
      this.$body.appendChild(child.$node);
    }

    // there are some listeners
    if (this.events['add']) {
      /**
       * A child component is added.
       *
       * @event module:core/component~Component#add
       *
       * @type {Object}
       * @property {Component} child new component added
       */
      this.emit('add', {
        item: child,
      });
    }
  }
};

/**
 * Delete this component and clear all associated events.
 *
 * @fires module:core/component~Component#remove
 */
Component.prototype.remove = function () {
  // really inserted somewhere
  if (this.parent) {
    // active at the moment
    if (router.current.activeComponent === this) {
      this.blur();
      this.parent.focus();
    }

    this.parent.children.splice(this.parent.children.indexOf(this), 1);
  }

  // remove all children
  this.children.forEach(function (child) {
    child.remove();
  });

  this.removeAllListeners();
  this.$node.parentNode.removeChild(this.$node);
  // there are some listeners
  if (this.events['remove']) {
    /**
     * Delete this component.
     *
     * @event module:core/component~Component#remove
     */
    this.emit('remove');
  }
};

Component.prototype.clear = function () {
  // remove all children

  for(var i = this.children.length-1; i>=0; i--){
    this.children[i].remove();
  }

  //this.removeAllListeners();
  //this.$node.parentNode.removeChild(this.$node);

  // there are some listeners
  if (this.events['remove']) {
    /**
     * Delete this component.
     *
     * @event module:core/component~Component#remove
     */
    this.emit('remove');
  }
};

/**
 * Activate the component.
 * Notify the owner-page and apply CSS class.
 *
 * @param {Object} [data] custom data which passed into handlers
 *
 * @return {boolean} operation status
 *
 * @fires module:core/component~Component#focus
 */
Component.prototype.focus = function (data) {
  var activePage = router.current,
    activeItem = activePage && activePage.activeComponent;

  // this is a visual component on a page
  // not already focused and can accept focus
  if(this.focusable && this === activeItem) {
    activeItem.$node.classList.add('focus');
  }
  if (this.focusable && this !== activeItem) {
    //for testing hard_focus
    if(activeItem && activeItem.hard_focus) {
      return false;
    }

    // notify the current active component
    if (activeItem) {
      activeItem.blur();
    }

    /* eslint consistent-this: 0 */

    // apply
    activeItem = this;
    if(activePage) {
      activePage.activeComponent = activeItem;
    }
    activeItem.$node.classList.add('focus');
    this.focused = true;

    // there are some listeners
    if (activeItem.events['focus']) {
      /**
       * Make this component focused.
       *
       * @event module:core/component~Component#focus
       */
      activeItem.emit('focus', data);
    }

    return true;
  }

  // nothing was done
  return false;
};

/**
 * Remove focus.
 * Change page.activeComponent and notify subscribers.
 *
 * @return {boolean} operation status
 *
 * @fires module:core/component~Component#blur
 */
Component.prototype.blur = function () {
  if(!router.current) return;
  var activePage = router.current,
    activeItem = activePage.activeComponent;

  // apply visuals anyway
  this.$node.classList.remove('focus');
  this.focused = false;
  // this is the active component
  if (this === activeItem) {
    activePage.activeComponent = null;

    // there are some listeners
    if (this.events['blur']) {
      /**
       * Remove focus from this component.
       *
       * @event module:core/component~Component#blur
       */
      this.emit('blur');
    }

    return true;
  }

  // nothing was done
  return false;
};

/**
 * Make the component visible and notify subscribers.
 *
 * @param {Object} data custom data which passed into handlers
 *
 * @return {boolean} operation status
 *
 * @fires module:core/component~Component#show
 */
Component.prototype.show = function (data) {
  // is it hidden
  if (!this.visible) {
    // correct style
    this.$node.classList.remove('hidden');

    // flag
    this.visible = true;

    // there are some listeners
    if (this.events['show']) {
      /**
       * Make the component visible.
       *
       * @event module:core/component~Component#show
       */
      this.emit('show', data);
    }

    return true;
  }

  // nothing was done
  return this;
};

/**
 * Make the component hidden and notify subscribers.
 *
 * @return {boolean} operation status
 *
 * @fires module:core/component~Component#hide
 */
Component.prototype.hide = function (data) {
  // is it visible
  if (this.visible) {
    // correct style
    if(this.$node && this.$node.classList) {
      this.$node.classList.add('hidden');
    } else {
      this.$node.className += ' hidden';
    }

    // flag
    this.visible = false;

    if(!data){
        // there are some listeners
        if (this.events['hide']) {
            /**
             * Make the component hidden.
             *
             * @event module:core/component~Component#hide
             */
            this.emit('hide');
        }
    }
    return true;
  }

  // nothing was done
  return true;
};

Component.prototype.toggle = function(show){
  if (arguments.length > 0) {
    if (show) {
      this.show();
    } else {
      this.hide();
    }
  } else {
    if(this.visible){
      this.hide();
    }else{
      this.show();
    }
  }
};

Component.prototype.transparent = function (state) {

  if (state) {
    this.$node.classList.add('transparent');
  } else {
    this.$node.classList.remove('transparent');
  }

  // nothing was done
  return true;
};

Component.prototype.addClass = function (className) {
  if(!this.$node.classList.contains(className)) {
    this.$node.classList.add(className);
  }

  // nothing was done
  return true;
};

Component.prototype.removeClass = function (className) {

  if(this.$node.classList.contains(className)) {
    this.$node.classList.remove(className);
  }

  // nothing was done
  return true;
};

// public
module.exports = Component;

},{"./emitter":32,"./router":45,"vendor/aura/keys":133}],19:[function(require,module,exports){
/**
 * @module core/components/button
 * @author Stanislav Kalashnik <sk@infomir.eu>
 * @license GNU GENERAL PUBLIC LICENSE Version 3
 */

'use strict';

var Component = require('../component'),
  keys = require('vendor/aura/keys');

/**
 * Base button implementation.
 *
 * Has global options:
 *     Button.prototype.clickDuration - time to apply "click" class, does not apply if 0
 *
 * @constructor
 * @extends Component
 *
 * @param {Object} [config={}] init parameters (all inherited from the parent)
 * @param {string} [config.value] button caption text (generated if not set)
 * @param {string} [config.icon] button icon name
 *
 * @example
 * var Button = require('stb/ui/button'),
 *     btnSimple, btnIcon, btnDetached;
 *
 * btnSimple = new Button({
 *     $node: document.getElementById('btnSimple'),
 *     value: 'Simple button'
 * });
 *
 * btnIcon = new Button({
 *     $node: document.getElementById('btnIcon'),
 *     icon: 'menu'
 *     value: 'Button with icon'
 * });
 *
 * btnDetached = new Button({
 *     value: 'Button not added to the page',
 *     className: 'wide'
 * });
 */
function Button(config) {
  // current execution context
   var self = this;

  // sanitize
  config = config || {};

  // set default className if classList property empty or undefined
  config.className = 'button ' + (config.className || '');

  // parent constructor call
  Component.call(this, config);

  this.altID = 0;

 /* this.mouseover = function (event) {
    console.log('MouseOver in Button UI');
    if (self.events['mouseover']) {

      // notify listeners
      self.emit('mouseover', {
        $item: this,
        event: event,
      });
    }
  },

  this.addListener('mouseover', self.mouseover);

*/

  if (self.events['mouseover']) {
    this.$node.addEventListener('mouseover', function(event) {
      // notify listeners
      self.emit('mouseover', {
        $item: this,
        event: event
      });

    }, false);
  }

  // optional dom
  if (config.icon) {
    // insert icon
    this.$icon = this.$body.appendChild(document.createElement('div'));
    this.$icon.className = 'icon ' + config.icon;
  }

  // insert caption placeholder
  this.$text = this.$body.appendChild(document.createElement('div'));
  this.$text.classList.add('text');

  if (config.value) {
    // fill it
    this.$text.textContent = config.value;
  }
}

// inheritance
Button.prototype = Object.create(Component.prototype);
Button.prototype.constructor = Button;

// time to apply "click" class, does not apply if 0
Button.prototype.clickDuration = 200;

Button.prototype.setValue = function(title) {
    this.$text.textContent = title || '';
};

Button.prototype.setNewID = function(altID) {
    this.altID = altID || 0;
};

/**
 * List of all default event callbacks.
 *
 * @type {Object.<string, function>}
 */
Button.prototype.defaultEvents = {
  /**
   * Default method to handle mouse click events.
   */
  click: function () {
    // current execution context
    var self = this;

    var $curr = [];
    for (var n in this.$node.classList){
      $curr.push(this.$node.classList[n]);
    }

    if($curr.indexOf('click') == -1){
      this.$node.classList.add('click');
    }else{
      this.$node.classList.remove('click');
    }


    //setTimeout(function () {
    //  self.$node.classList.remove('click');
    //}, this.clickDuration);

  },

  /**
   * Default method to handle keyboard keydown events.
   *
   * @param {Event} event generated event
   */
  keydown: function (event) {
    if (event.keyCode === keys.ENTER) {
      // emulate click
      // there are some listeners
      if (this.events['click']) {
        /**
         * Mouse click event emulation.
         *
         * @event module:core/components/button~Button#click
         *
         * @type {Object}
         * @property {Event} event click event data
         */
        this.emit('click', {
          event: event
        });
      }
    }
  },
  mouseover: function(event){
//    if(this.events['focus']){
      this.focus();
//    }
  }
};

// public
module.exports = Button;

},{"../component":18,"vendor/aura/keys":133}],20:[function(require,module,exports){
/**
 * @module core/components/check.box
 * @author Stanislav Kalashnik <sk@infomir.eu>
 * @license GNU GENERAL PUBLIC LICENSE Version 3
 */

'use strict';

var Component = require('../component'),
  keys = require('vendor/aura/keys'),
  groups = {}; // set of groups with linked components

/**
 * Base check box implementation.
 *
 * @constructor
 * @extends Component
 *
 * @param {Object} [config={}] init parameters (all inherited from the parent)
 * @param {boolean} [config.value=false] initial state
 * @param {string} [config.group] group name to work synchronously with other checkboxes
 *
 * @example
 * var CheckBox = require('core/components/check.box'),
 *     checkBox = new CheckBox({
 *         value: true,
 *         group: 'lang'
 *     });
 */
function CheckBox(config) {
  // sanitize
  config = config || {};

  var self = this;


  // set default className if classList property empty or undefined
  config.className = 'checkBox ' + (config.className || '');

  // state
  this.value = !!config.value;

  // correct init styles
  if (this.value) {
    config.className += ' checked';
  }

  // parent constructor call
  Component.call(this, config);

  if (this.events['mouseover']) {
    this.$node.addEventListener('mouseover', function(event) {
      // notify listeners
      self.emit('mouseover', {
        $item: this,
        event: event
      });

    }, false);
  }

  // group name to work synchronously with other checkboxes
  this.group = null;

  // apply hierarchy
  if (config.group) {
    // save
    this.group = config.group;

    // fill groups data
    if (groups[config.group] === undefined) {
      groups[config.group] = [this];
    } else {
      groups[config.group].push(this);
    }
  }
}

// inheritance
CheckBox.prototype = Object.create(Component.prototype);
CheckBox.prototype.constructor = CheckBox;

/**
 * List of all default event callbacks.
 *
 * @type {Object.<string, function>}
 */
CheckBox.prototype.defaultEvents = {
  /**
   * Default method to handle mouse click events.
   */
  click: function() {
    // invert state
    this.set(!this.value);
  },

  /**
   * Default method to handle keyboard keydown events.
   *
   * @param {Event} event generated event
   */
  keydown: function(event) {
    // emulate click
    if (event.keyCode === keys.ENTER) {
      this.set(!this.value);
    }
  },
  mouseover: function(event){
    this.focus();
  }
};

/**
 * Set the given state.
 * Does nothing in case the value is already as necessary.
 *
 * @param {boolean} value new value to set
 * @return {boolean} operation status
 *
 * @fires module:"core/components/check.box~CheckBox#change"
 */
CheckBox.prototype.set = function(value) {
  var i, l;

  if (this.value !== value) {
    // going to be turned on and assigned to some group
    if (!this.value && this.group !== null) {
      // unset all checkboxes in this group
      for (i = 0, l = groups[this.group].length; i < l; i++) {
        groups[this.group][i].set(false);
      }
    }

    // set new value
    this.value = !this.value;

    // set visible changes
    this.$node.classList.toggle('checked');

    // there are some listeners
    if (this.events['change']) {
      /**
       * Update progress value.
       *
       * @event module:core/components/check.box~CheckBox#change
       *
       * @type {Object}
       * @property {boolean} value current check state
       */
      this.emit('change', {
        value: this.value,
      });
    }

    return true;
  }

  // nothing was done
  return false;
};


CheckBox.prototype.setText = function(text) {
  if(this.spanText) {
    this.$node.removeChild(this.spanText);
  }
  this.spanText = document.createElement('span');
  this.spanText.classList.add('label-text');
  this.spanText.innerHTML = text;
  this.$node.appendChild(this.spanText);
};



// public
module.exports = CheckBox;

},{"../component":18,"vendor/aura/keys":133}],21:[function(require,module,exports){
/**
 * @module core/components/grid
 * @author Stanislav Kalashnik <sk@infomir.eu>
 * @license GNU GENERAL PUBLIC LICENSE Version 3
 */

'use strict';

var Component = require('../component'),
  keys = require('vendor/aura/keys'),
  dom = require('core/dom');

/**
 * Mouse click event.
 *
 * @event module:core/components/grid~Grid#click:item
 *
 * @type {Object}
 * @property {Element} $item clicked HTML item
 * @property {Event} event click event data
 */

/**
 * Base grid/table implementation.
 *
 * For navigation map implementation and tests see {@link https:// gist.github.com/DarkPark/8c0c2926bfa234043ed1}.
 *
 * Each data cell can be either a primitive value or an object with these fields:
 *
 *  Name    | Description
 * ---------|-------------
 *  value   | actual cell value to render
 *  colSpan | amount of cells to merge horizontally
 *  rowSpan | amount of cells to merge vertically
 *  mark    | is it necessary or not to render this cell as marked
 *  focus   | is it necessary or not to render this cell as focused
 *  disable | is it necessary or not to set this cell as disabled
 *
 * @constructor
 * @extends Component
 *
 * @param {Object}   [config={}] init parameters (all inherited from the parent)
 * @param {Array[]}  [config.data=[]] component data to visualize
 * @param {function} [config.render] method to build each grid cell content
 * @param {function} [config.navigate] method to move focus according to pressed keys
 * @param {boolean}  [config.cycleX=true] allow or not to jump to the opposite side of line when there is nowhere to go next
 * @param {boolean}  [config.cycleY=true] allow or not to jump to the opposite side of column when there is nowhere to go next
 *
 * @fires module:core/components/grid~Grid#click:item
 *
 * @example
 * var Grid = require('stb/ui/grid'),
 *     grid = new Grid({
 *         data: [
 *             [1,   2,  3, {value: '4;8;12;16', focus: true, rowSpan: 4}],
 *             [5,   6,  7],
 *             [9,  10, 11],
 *             [13, 14, {value: 15, disable: true}]
 *         ],
 *         render: function ( $item, data ) {
 *             $item.innerHTML = '<div>' + (data.value) + '</div>';
 *         },
 *         cycleX: false
 *     });
 */
function Grid(config) {
  // current execution context
  // var self = this;

  // sanitize
  config = config || {};

  /**
   * List of DOM elements representing the component cells.
   * Necessary for navigation calculations.
   *
   * @type {Element[][]}
   */
  this.map = [];

  /**
   * Link to the currently focused DOM element.
   *
   * @type {Element}
   */
  this.$focusItem = null;

  /**
   * Component data to visualize.
   *
   * @type {Array[]}
   */
  this.data = [];

  /**
   * Allow or not to jump to the opposite side of line when there is nowhere to go next.
   *
   * @type {boolean}
   */
  this.cycleX = true;

  /**
   * Allow or not to jump to the opposite side of column when there is nowhere to go next.
   *
   * @type {boolean}
   */
  this.cycleY = true;

  /**
   * Current navigation map horizontal position.
   *
   * @type {number}
   */
  this.focusX = 0;

  this.$active_row = null;

  /**
   * Current navigation map vertical position.
   *
   * @type {number}
   */
  this.focusY = 0;

  this.viewSize = null;

  // set default className if classList property empty or undefined
  config.className = 'grid ' + (config.className || '');

  // parent constructor call
  Component.call(this, config);

  // component setup
  this.init(config);
}

// inheritance
Grid.prototype = Object.create(Component.prototype);
Grid.prototype.constructor = Grid;

/**
 * Fill the given cell with data.
 * $item.data can contain the old data (from the previous render).
 *
 * @param {Element} $item item DOM link
 * @param {*} data associated with this item data
 */
Grid.prototype.renderItemDefault = function($item, data) {
  $item.textContent = data.value;
};

/**
 * Method to build each grid cell content.
 * Can be redefined to provide custom rendering.
 *
 * @type {function}
 */
Grid.prototype.renderItem = Grid.prototype.renderItemDefault;

/**
 * List of all default event callbacks.
 *
 * @type {Object.<string, function>}
 */
Grid.prototype.defaultEvents = {
  /**
   * Default method to handle mouse wheel events.
   *
   * @param {Event} event generated event
   */
  mousewheel: function(event) {
    // scrolling by Y axis
    if (event.deltaY) {
      this.move(event.deltaY > 0 ? keys.DOWN : keys.UP, 'mousewheel');
    }
    /*
    // scrolling by X axis
    if (event.deltaY) {
      this.move(event.deltaY > 0 ? keys.LEFT : keys.RIGHT);
    }*/
  },

  /**
   * Default method to handle keyboard keydown events.
   *
   * @param {Event} event generated event
   */
  keydown: function(event) {
    switch (event.keyCode) {
      case keys.UP:
      case keys.DOWN:
      case keys.RIGHT:
      case keys.LEFT:

        // cursor move only on arrow keys
        this.move(event.keyCode);
        break;
      case keys.ENTER:

        // there are some listeners
        if (this.events['click:item']) {
          // notify listeners
          this.emit('click:item', {
            $item: this.$focusItem,
            event: event,
          });
        }

        break;
    }
  },
};



/**
 * Make all the data items identical.
 * Wrap to objects if necessary and add missing properties.
 *
 * @param {Array[]} data user 2-dimensional array
 * @return {Array[]} reworked incoming data
 */
function normalize(data) {
  var i, j, item;

  // rows
  for (i = 0; i < data.length; i++) {
    // cols
    for (j = 0; j < data[i].length; j++) {
      // cell value
      item = data[i][j];

      // primitive value
      if (typeof item !== 'object') {
        // wrap with defaults
        item = data[i][j] = {
          value: data[i][j],
          colSpan: 1,
          rowSpan: 1,
        };
      } else {
        // always at least one row/col
        item.colSpan = item.colSpan || 1;
        item.rowSpan = item.rowSpan || 1;
      }
    }
  }

  return data;
}

/**
 * Fill the given rectangle area with value.
 *
 * @param {Array[]} map link to navigation map
 * @param {number} x current horizontal position
 * @param {number} y current vertical position
 * @param {number} dX amount of horizontal cell to fill
 * @param {number} dY amount of vertical cell to fill
 * @param {*} value filling data
 */
function fill(map, x, y, dX, dY, value, startY) {
  var i, j;

  var startYVal = startY || 0;

  // rows
  for (i = y; i < y + dY; i++) {
    // expand map rows
    if (map.length < i + 1) {
      map.push([]);
    }

    // compensate long columns from previous rows
    while (map[i][x] !== undefined) {
      x++;
    }

    // cols
    for (j = x; j < x + dX; j++) {
      // expand map row cols
      if (map[i].length < j + 1) {
        map[i].push();
      }

      // fill
      map[i][j] = value;

      // apply coordinates for future mouse clicks
      if (value.x === undefined) {
        value.x = j;
      }

      if (value.y === undefined) {
        value.y = i + startYVal;
      }
    }
  }
}

/**
 * Create a navigation map from incoming data.
 *
 * @param {Array[]} data user 2-dimensional array of objects
 * @param Number startY use in addData method for lazy load
 * @return {Array[]} navigation map
 */
function map(data, startY) {
  var result = [],
    i, j, item;

  // rows
  for (i = 0; i < data.length; i++) {
    // cols
    for (j = 0; j < data[i].length; j++) {
      // cell value
      item = data[i][j];
      // process a cell
      fill(result, j, i, item.colSpan, item.rowSpan, item.$item, startY);

      // clear redundant info
      delete item.$item;
    }
  }

  return result;
}

/**
 * Init or re-init of the component inner structures and HTML.
 *
 * @param {Object} config init parameters (subset of constructor config params)
 */
Grid.prototype.init = function(config) {
  var self = this,
    draw = false,
    i, j,
    $row, $item, $focusItem,
    itemData;
  this.$focusItem = null;

  // apply cycle behaviour
  if (config.cycleX !== undefined) {
    this.cycleX = config.cycleX;
  }

  if (config.cycleY !== undefined) {
    this.cycleY = config.cycleY;
  }

  if(config.newClassName) {
    this.$body.className = 'component grid '+ config.newClassName;
  }

  // apply data
  if (config.data) {
    // new data is different
    if (this.data !== config.data) {
      // apply
      this.data = config.data;

      // need to redraw table
      draw = true;
    }
  }

  // custom render method
  if (config.render) {
    // new render is different
    if (this.renderItem !== config.render) {
      // apply
      this.renderItem = config.render;

      // need to redraw table
      draw = true;
    }
  }

  if (config.viewSize) {
    this.viewSize = config.viewSize;
  }

  if (!draw) {
    // do not redraw table
    return;
  }

  // export pointer to inner table
  this.$table = dom.tag('div', {className: 'table'});

  // prepare user data
  this.data = applyData(this.data, this);

  // navigation map filling
  this.map = map(this.data);

  // clear all table
  this.$body.textContent = null;

  // everything is ready
  this.$body.appendChild(this.$table);

  // apply focus
  if ($focusItem) {
    // focus item was given in data
    this.focusItem($focusItem);
  } else if(this.map.length) {
    // just the first cell
    this.focusItem(this.map[0][0]);
  }
};

/**
 * Move focus to the given direction.
 *
 * @param {number} direction arrow key code
 *
 * @fires module:core/components/grid~Grid#cycle
 * @fires module:core/components/grid~Grid#overflow
 */
Grid.prototype.move = function(direction, type) {
  var x = this.focusX,
    y = this.focusY,
    move = true,
    overflow = false,
    cycle = false;

  // shift till full stop
  if(!this.map.length) return;

  while (move) {
    // arrow keys
    switch (direction) {
      case keys.UP:
        if (y > 0) {
          // can go one step up
          y--;
          if(this.viewSize) {
            var prev_node = this.$node.children[0].children[y - 1];

            if(prev_node) {
              prev_node.classList.remove('hidden');
            }

            var next_node = this.$node.children[0].children[y + 2];

            if(next_node) {
              next_node.classList.add('hidden');
            }
          }
        } else {
          if (this.cycleY) {
            // jump to the last row
            y = this.map.length - 1;
            cycle = true;
          } else {
            // grid edge
            overflow = true;
          }
        }

        break;

      case keys.DOWN:
        if (y < this.map.length - 1) {
          // can go one step down

          y++;
          if(this.viewSize) {
            var prev_node = this.$node.children[0].children[y - 2];

            if(prev_node) {
              prev_node.classList.add('hidden');
            }

            var next_node = this.$node.children[0].children[y + 1];

            if(next_node) {
              next_node.classList.remove('hidden');
            }
          }
        } else {
          if (this.cycleY) {
            // jump to the first row
            y = 0;
            cycle = true;
          } else {
            // grid edge
            overflow = true;
          }
        }

        break;

      case keys.RIGHT:
        if (x < this.map[y].length - 1) {
          // can go one step right
          x++;
        } else {
          if (this.cycleX) {
            // jump to the first column
            x = 0;
            cycle = true;
          } else {
            // grid edge
            overflow = true;
          }
        }

        break;

      case keys.LEFT:
        if (x > 0) {
          // can go one step left
          x--;
        } else {
          if (this.cycleX) {
            // jump to the last column
            x = this.map[y].length - 1;
            cycle = true;
          } else {
            // grid edge
            overflow = true;
          }
        }

        break;
    }

    // full cycle - has come to the start point
    if (x === this.focusX && y === this.focusY) {
      // full stop
      move = false;
    }

    //if row have not all elements
    if(!this.map[y][x]) {
      x = this.map[y].length - 1;
    }

    // focus item has changed and it's not disabled
    if (this.map[y][x] !== this.map[this.focusY][this.focusX] && this.map[y][x] && this.map[y][x].data.disable !== true) {
      // full stop
      move = false;
    }

    // the last cell in a row/col
    if (overflow) {
      // full stop
      move = false;

      // but it's disabled so need to go back
      if (this.map[y][x] && this.map[y][x].data.disable === true) {
        // return to the start point
        x = this.focusX;
        y = this.focusY;
      }
    }
  }

  if (cycle) {
    // there are some listeners
    if (this.events['cycle']) {
      /**
       * Jump to the opposite side.
       *
       * @event module:core/components/grid~Grid#cycle
       *
       * @type {Object}
       * @property {number} direction key code initiator of movement
       */
      this.emit('cycle', {
        direction: direction,
      });
    }
  }

  if (overflow) {
    // there are some listeners
    if (this.events['overflow']) {
      /**
       * Attempt to go beyond the edge of the grid.
       *
       * @event module:core/components/grid~Grid#overflow
       *
       * @type {Object}
       * @property {number} direction key code initiator of movement
       */
      this.emit('overflow', {
        direction: direction,
        type: type
      });
    }
  }
  if(this.$active_row) {
    this.$active_row.classList.remove('active');
  }
  this.focusItem(this.map[y][x]);

  this.$active_row = this.$focusItem.parentNode;
  this.$active_row.classList.add('active');

  // correct coordinates
  // focusItem set approximate values
  this.focusX = x;
  this.focusY = y;
};

/**
 * Highlight the given DOM element as focused.
 * Remove focus from the previously focused item.
 *
 * @param {Node|Element} $item element to focus
 * @param {number} $item.x the item horizontal position
 * @param {number} $item.y the item vertical position
 *
 * @return {boolean} operation status
 *
 * @fires module:core/components/grid~Grid#focus:item
 * @fires module:core/components/grid~Grid#blur:item
 */
Grid.prototype.focusItem = function($item, noEmit) {
  var $prev = this.$focusItem;

  // different element
  if ($item && $prev !== $item && $item.data.disable !== true) {
    // some item is focused already
    if ($prev !== null) {
      // style
      $prev.classList.remove('focus');

      // there are some listeners
      if (this.events['blur:item']) {
        /**
         * Remove focus from an element.
         *
         * @event module:core/components/grid~Grid#blur:item
         *
         * @type {Object}
         * @property {Element} $item previously focused HTML element
         */
        this.emit('blur:item', {
          $item: $prev,
        });
      }
    }

    // draft coordinates
    this.focusX = $item.x;
    this.focusY = $item.y;

    // reassign
    this.$focusItem = $item;

    // correct CSS
    $item.classList.add('focus');

    // there are some listeners
    if (this.events['focus:item'] && !noEmit) {
      /**
       * Set focus to an element.
       *
       * @event module:core/components/grid~Grid#focus:item
       *
       * @type {Object}
       * @property {Element} $prev old/previous focused HTML element
       * @property {Element} $curr new/current focused HTML element
       */
      this.emit('focus:item', {
        $prev: $prev,
        $curr: $item,
      });
    }

    return true;
  }

  // nothing was done
  return false;
};

/**
 * Set item state and appearance as marked.
 *
 * @param {Node|Element} $item element to focus
 * @param {boolean} state true - marked, false - not marked
 */
Grid.prototype.markItem = function($item, state) {
  if (state) {
    $item.classList.add('mark');
  } else {
    $item.classList.remove('mark');
  }

  $item.data.mark = state;
};

Grid.prototype.addData = function(config) {
  var addData = applyData(config.data, this);
  // navigation map filling
  var addDataMap = map(addData, this.map.length);
  this.map = this.map.concat(addDataMap);
};

Grid.prototype.clear = function() {
  if(this.$node) {
    this.$node.innerHTML = '';
    this.$body.innerHTML = '';
  }
  this.children = [];
  this.map = [];
  this.data = [];
};

function applyData(data,grid) {

  var self = grid;
  var $row, $item, itemData, j, i,

  /**
   * Cell mouse click handler.
   *
   * @param {Event} event click event data
   *
   * @this Element
   *
   * @fires module:core/components/grid~Grid#click:item
   */
  onItemClick = function(event) {
    // allow to accept focus
    if (this.data.disable !== true) {
      // visualize
      self.focusItem(this);

      // there are some listeners
      if (self.events['click:item']) {
        // notify listeners
        self.emit('click:item', {
          $item: this,
          event: event,
        });
      }
    }
  },
  mouseover = function (event) {
    if (self.events['mouseover'] && (!self.focused || self.$focusItem != this)) {
      // notify listeners
      self.emit('mouseover', {
        $item: this,
        event: event,
      });
    }
  },

  mouseout = function (event) {
    if (self.events['mouseout'] && (!self.focused || self.$focusItem != this)) {
      // notify listeners
      self.emit('mouseout', {
        $item: this,
        event: event,
      });
    }
  };

  // prepare user data
  var addData = normalize(data);


  // rows
  for (i = 0; i < addData.length; i++) {
    // dom

    $row = grid.$table.appendChild(dom.tag('div', {className: 'row'}));

    if(grid.viewSize && i >= grid.viewSize) {
      $row.classList.add('hidden');
    }

    // cols
    for (j = 0; j < addData[i].length; j++) {
      // dom
      $item = $row.appendChild(dom.tag('div', {className: 'col'}));

      // additional params
      $item.classList.add('item');

      // shortcut
      itemData = addData[i][j];

      // for map
      itemData.$item = $item;

      // merge columns
      $item.colSpan = itemData.colSpan;

      // merge rows
      $item.rowSpan = itemData.rowSpan;

      // active cell
      //focus disabled
      if (itemData.focus) {
        // store and clean
        //$focusItem = $item;
      }

      // disabled cell
      if (itemData.disable) {
        // apply CSS
        $item.classList.add('disable');
      }

      // marked cell
      if (itemData.mark) {
        // apply CSS
        $item.classList.add('mark');
      }

      // visualize
      grid.renderItem($item, itemData);

      // save data link
      $item.data = itemData;

      // manual focusing
      $item.addEventListener('click', onItemClick, false);

      $item.addEventListener('mouseover', mouseover, false);
      $item.addEventListener('mouseout', mouseout, false);
    }
  }

  return addData;

}

// public
module.exports = Grid;

},{"../component":18,"core/dom":31,"vendor/aura/keys":133}],22:[function(require,module,exports){
'use strict';

var Component = require('core/component');

function Label(options) {
  options = options || {};

  options.focusable = false;

  Component.call(this, options);
  if(this.$body) {
    this.$body.classList.add('label');
    this.$body.innerHTML = this.$text || '';
  }

  if (options.text) {
    this.text(options.text);
  }
}

Label.prototype = Object.create(Component.prototype);
Label.prototype.constructor = Label;

Label.prototype.text = function (text) {
  if (text) {
    this.$body.innerHTML = text;
  }
  return this;
};

module.exports = Label;

},{"core/component":18}],23:[function(require,module,exports){
/**
 * @module core/components/list
 * @license GNU GENERAL PUBLIC LICENSE Version 3
 */

'use strict';

var Component = require('../component'),
  keys = require('vendor/aura/keys'),
  animate = require('core/animate'),
  router = require('core/router'),
  transform_element = require('core/tools/transform.element'),
  scroll_config_animation, scroll_margin, scroll_value, scroll_item_index;
/**
 * Mouse click event.
 *
 * @event module:core/components/list~List#click:item
 *
 * @type {Object}
 * @property {Element} $item clicked HTML item
 * @property {Event} event click event data
 */

/**
 * Base list implementation.
 *
 * Each data item can be either a primitive value or an object with these fields:
 *
 *  Name    | Description
 * ---------|-------------
 *  value   | actual cell value to render
 *  mark    | is it necessary or not to render this cell as marked
 *
 * @constructor
 * @extends Component
 *
 * @param {Object}   [config={}]          init parameters (all inherited from the parent)
 * @param {Array}    [config.data=[]]     component data to visualize
 * @param {function} [config.render]      method to build each grid cell content
 * @param {function} [config.navigate]    method to move focus according to pressed keys
 * @param {number}   [config.size=5]      amount of visible items on a page
 * @param {number}   [config.viewIndex=0] move view window to this position on init
 * @param {number}   [config.focusIndex]  list item index to make item focused (move view window to this position)
 * @param {boolean}  [config.cycle=true]  allow or not to jump to the opposite side of a list when there is nowhere to go next
 * @param {object}  [config.scrollList=null] use default scroll list
 *
 * @fires module:core/components/list~List#click:item
 */
function List(config) {
  // current execution context
  // var self = this;

  // sanitize
  config = config || {};

  /**
   * Link to the currently focused DOM element.
   *
   * @type {Element}
   */
  this.$focusItem = null;

  /**
   * Link to the currently selected DOM element.
   *
   * @type {Element}
   */
  this.$selectedItem = null;

  /**
   * Position of the visible window to render.
   *
   * @type {number}
   */
  this.viewIndex = null;

  /**
   * Component data to visualize.
   *
   * @type {Array}
   */
  this.data = [];

  /**
   * Component orientation.
   *
   * @type {number}
   */
  this.type = this.TYPE_VERTICAL;

  /**
   * for seting different data type in list
   *
   */
  this.dataType = null;

  this.total_items = 0;

  /**
   * Amount of visible items on a page.
   *
   * @type {number}
   */
  this.size = 0;

  this.viewSize = 0;

  /**
   * Use scrollList in list
   *
   * @type {object}
   */
  this.scrollList = null;

  /**
   * Allow or not to jump to the opposite side of a list when there is nowhere to go next.
   *
   * @type {boolean}
   */
  this.cycle = false;

  // horizontal or vertical
  if (config.type) {
    // apply
    this.type = config.type;
  }

  if (config.dataType) {
    // apply
    this.dataType = config.dataType;
  }

  if (config.total_items) {
    this.total_items = config.total_items;
  }

  if (config.viewSize) {
    this.viewSize = config.viewSize;
  }

  // parent constructor call
  Component.call(this, config);
  if(this.$body && this.$body.classList) {
    this.$body.classList.add('list');
    if (this.type === this.TYPE_HORIZONTAL) {
      this.$body.classList.add('horizontal');
    }
  }

  // component setup
  this.init(config);
}

// inheritance
List.prototype = Object.create(Component.prototype);
List.prototype.constructor = List;

List.prototype.TYPE_VERTICAL = 1;
List.prototype.TYPE_HORIZONTAL = 2;

/**
 * Fill the given item with data.
 *
 * @param {Element} $item item DOM link
 * @param {*} data associated with this item data
 */
List.prototype.renderItemDefault = function($item, data) {
  $item.textContent = data.value;
};

/**
 * Method to build each list item content.
 * Can be redefined to provide custom rendering.
 *
 * @type {function}
 */
List.prototype.renderItem = List.prototype.renderItemDefault;

/**
 * List of all default event callbacks.
 *
 * @type {Object.<string, function>}
 */
List.prototype.defaultEvents = {
  /**
   * Default method to handle mouse wheel events.
   *
   * @param {Event} event generated event
   */
  mousewheel: function(event) {
    // scrolling by Y axis
    if (this.type === this.TYPE_VERTICAL && event.deltaY) {
      this.move(event.deltaY > 0 ? keys.DOWN : keys.UP, 'mousewheel');
    }

    // scrolling by X axis
    if (this.type === this.TYPE_HORIZONTAL && event.deltaY) {
      this.move(event.deltaY > 0 ? keys.RIGHT :  keys.LEFT, 'mousewheel');
    }
  },

  /**
   * Default method to handle keyboard keydown events.
   *
   * @param {Event} event generated event
   */
  keydown: function(event) {
    switch (event.keyCode) {
      case keys.UP:
      case keys.DOWN:
      case keys.RIGHT:
      case keys.LEFT:
      case keys.PAGE_UP:
      case keys.PAGE_DOWN:
        // cursor move only on arrow keys
        this.move(event.keyCode);
        break;
      case keys.ENTER:
        // there are some listeners
        if (this.events['click:item']) {
          // notify listeners
          this.emit('click:item', {
            $item: this.$focusItem,
            event: event,
          });
        }
        break;
    }
  }
};


/**
 * Make all the data items identical.
 * Wrap to objects if necessary.
 *
 * @param {Array} data incoming array
 * @return {Array} reworked incoming data
 */
function normalize(data) {
  var i, item;

  // rows
  for (i = 0; i < data.length; i++) {
    // cell value
    item = data[i];

    // primitive value
    if (typeof item !== 'object') {
      // wrap with defaults
      item = data[i] = {
        value: data[i],
      };
    }
  }

  return data;
}

/**
 * Init or re-init of the component inner structures and HTML.
 *
 * @param {Object} config init parameters (subset of constructor config params)
 */
List.prototype.init = function(config) {
  var self = this,
    currSize = this.$body.children.length,
    /**
     * Item mouse click handler.
     *
     * @param {Event} event click event data
     *
     * @this Element
     *
     * @fires module:core/components/list~List#click:item
     */
    onClick = function(event) {
      if (this.data) {
        self.focusItem(this);

        // there are some listeners
        if (self.events['click:item']) {
          // notify listeners
          self.emit('click:item', {
            $item: this,
            event: event,
          });
        }
      }
    },

    mouseover = function(event) {
      if (self.events['mouseover'] && (!self.focused || self.$focusItem != this)) {
        // notify listeners
        self.emit('mouseover', {
          $item: this,
          event: event,
        });
      }
    },
    mouseout = function(event) {
      if (self.events['mouseout']) {
        // notify listeners
        self.emit('mouseout', {
          $item: this,
          event: event,
        });
      }
    },

    item, i;

  // apply cycle behaviour
  if (config.cycle !== undefined) {
    this.cycle = config.cycle;
  }

  // apply list of items
  if (config.data) {
    // prepare user data
    if (config.size) {
      this.size = config.size;
    } else {
      this.size = config.data.length || 0;
    }

    this.data = normalize(config.data);
  }



  // custom render method
  if (config.render) {
    // apply
    this.renderItem = config.render;
  }


  // enable scroll list
  if (config.scrollList) {
    this.scrollList = config.scrollList;
    this.scrollList.stopIndex = config.scrollList.stopIndex ? config.scrollList.stopIndex : 0;
  }

  // geometry has changed or initial draw
  if (this.size !== currSize) {
    // non-empty list
    if (currSize > 0) {
      // clear old items
      this.$body.textContent = null;
    }

    // create new items
    for (i = 0; i < this.size; i++) {
      item = document.createElement('div');
      item.index = i;
      item.className = 'item';
      item.addEventListener('click', onClick, false);
      item.addEventListener('mouseover', mouseover, false);
      item.addEventListener('mouseout', mouseout, false);
      this.$body.appendChild(item);
    }
  }

  // reset current view window position
  this.viewIndex = null;

  this.renderView(0);

  // set focus item
  if (config.focusIndex !== undefined) {
    // jump to the necessary item
    this.focusIndex(config.focusIndex);
    setTimeout(function () {
      scrollList(self.$focusItem, self);
    },0);
  }
};

/**
 * Draw the visible window.
 *
 * @param {number} index start position to render
 *
 * @return {boolean} operation status
 *
 * @fires module:core/components/list~List#move:view
 */
List.prototype.renderView = function(index) {
  var $item, i, itemData, prevIndex, currIndex;

  // has the view window position changed
  if (this.viewIndex !== index) {
    // save for emit
    prevIndex = this.viewIndex;

    // sync global pointer
    this.viewIndex = currIndex = index;

    // rebuild all visible items
    for (i = 0; i < this.size; i++) {
      // shortcuts
      $item = this.$body.children[i];
      itemData = this.data[index];

      // real item or stub
      if ($item) {
        if (itemData) {
          // correct inner data/index and render
          $item.data = itemData;
          $item.index = index;
          this.renderItem($item, itemData);

          // apply CSS
          if (itemData.mark) {
            $item.classList.add('mark');
          } else {
            $item.classList.remove('mark');
          }

          if(itemData.className)
            $item.classList.add(itemData.className);

          if(this.viewSize && i > this.viewSize) {
            $item.classList.add('hidden');
          }
        } else {
          // nothing to render
          this.renderItem($item, itemData);
          //$item.data = $item.index = undefined;
          //$item.innerHTML = '&nbsp;';
        }
      }

      index++;
    }

    // there are some listeners
    if (this.events['move:view']) {
      // notify listeners
      this.emit('move:view', {
        prevIndex: prevIndex,
        currIndex: currIndex,
      });
    }

    // there are some listeners
    if (this.events['select:item']) {
      this.emit('select:item', {
        $item: $item,
      });
    }

    // full rebuild
    return true;
  }

  // nothing was done
  return false;
};

/**
 * Move focus to the given direction.
 *
 * @param {number} direction arrow key code
 *
 * @fires module:core/components/list~List#cycle
 * @fires module:core/components/list~List#overflow
 */
List.prototype.move = function(direction, type) {
  if(!direction) {
    console.log('ERROR not exist keyCode');
    return;
  }
  var total_size = this.total_items || this.size;
  var offset = 0;

  if ((direction === keys.UP && this.type === this.TYPE_VERTICAL) ||
    (direction === keys.LEFT && this.type === this.TYPE_HORIZONTAL)) {

    if (this.$focusItem && this.$focusItem.index > 0) {
      this.focusItem(this.$focusItem.previousSibling);
      if(this.viewSize) {

        if(this.scrollList) {
          offset = this.scrollList.stopIndex;
        }
        if(this.$node.children[this.$focusItem.index - this.viewSize + 2 + offset]) {
          this.$node.children[this.$focusItem.index - this.viewSize + 2 + offset].classList.remove('hidden');
        }
        if(this.$node.children[this.$focusItem.index + this.viewSize]) {
          this.$node.children[this.$focusItem.index + this.viewSize].classList.add('hidden');
        }
      }
    } else {
      // already at the beginning
      if (this.cycle) {
        // jump to the end of the list
        this.move('CYCLE_UP');

        // there are some listeners
        if (this.events['cycle']) {
          // notify listeners
          this.emit('cycle', {
            direction: direction,
          });
        }
      } else {
        // there are some listeners
        if (this.events['overflow']) {
          // notify listeners
          this.emit('overflow', {
            direction: direction,
            type: type
          });
        }
      }
    }
  }

  if ((direction === keys.DOWN && this.type === this.TYPE_VERTICAL) ||
    (direction === keys.RIGHT && this.type === this.TYPE_HORIZONTAL)) {
    // still can go forward
    if (this.$focusItem && this.$focusItem.index < this.data.length - 1) {
      this.focusItem(this.$focusItem.nextSibling);
      if(this.viewSize) {

        if(this.$node.children[this.$focusItem.index - this.viewSize + 1]) {
          this.$node.children[this.$focusItem.index - this.viewSize + 1].classList.add('hidden');
        }
        if(this.scrollList) {
          offset = this.scrollList.startIndex;
        }
        if(this.$node.children[this.$focusItem.index + this.viewSize - 1 - offset]) {
          this.$node.children[this.$focusItem.index + this.viewSize - 1 - offset].classList.remove('hidden');
        }
      }
    } else {
      // already at the beginning
      if (this.cycle) {
        // jump to the beginning of the list
        this.move('CYCLE_DOWN');

        // there are some listeners
        if (this.events['cycle']) {
          // notify listeners
          this.emit('cycle', {
            direction: direction,
          });
        }
      } else {
        // there are some listeners
        if (this.events['overflow']) {
          // notify listeners
          this.emit('overflow', {
            direction: direction,
            type: type
          });
        }
      }
    }
  }

  if (direction === keys.PAGE_UP) {
    if(this.scrollList && this.scrollList.scrollSize) {
      if(this.scrollList.overflow && !this.$focusItem.index) {
        if (this.events['overflow']) {
          // notify listeners
          this.emit('overflow', {
            direction: keys.UP,
            type: type
          });
          return;
        }
      }
      var scroll_index = this.$focusItem.index - this.scrollList.scrollSize;

      if(scroll_index <= 0) {
        scroll_index = 0;
      }

      this.focusIndex(scroll_index, {force_focus: true});
    }
  }

  if (direction === keys.PAGE_DOWN) {
    if(this.scrollList && this.scrollList.scrollSize) {
      if(this.size > this.total_items) {
        total_size = this.size;
      }
      if(this.scrollList.overflow && this.$focusItem.index == total_size - 1) {
        if (this.events['overflow']) {
          // notify listeners
          this.emit('overflow', {
            direction: keys.DOWN,
            type: type
          });
          return;
        }
      }

      var scroll_index = this.$focusItem.index + this.scrollList.scrollSize;

      if(scroll_index >= this.size) {
        scroll_index = this.size - 1;
      }

      if(scroll_index >= total_size - this.scrollList.stopIndex) {
        scroll_index = total_size - 1 - this.scrollList.stopIndex;
      }

      this.focusIndex(scroll_index, {force_focus: true});
    }
  }

  if (direction === 'CYCLE_DOWN') {
    this.focusIndex(0);
  }

  if (direction === 'CYCLE_UP') {
    this.focusIndex(this.size - 1);
  }
};

/**
 * Highlight the given DOM element as focused.
 * Remove focus from the previously focused item and generate associated event.
 *
 * @param {Node|Element} $item element to focus
 * @param {Object} config {no_emit:boolean, no_animate:boolean}
 * config.no_emit  if true disable events['focus:item']
 * no_animate use in events['focus:item'] handler to disable animation and set property  immediately
 *
 * @return {boolean} operation status
 *
 * @fires module:core/components/list~List#focus:item
 * @fires module:core/components/list~List#blur:item
 */
List.prototype.focusItem = function($item, config) {
  var $prev = this.$focusItem;
  var self = this;

  // different element
  if ($item && ($prev !== $item || (config && config.force_focus))) {
    // some item is focused already
    if ($prev !== null) {
      // style
      $prev.classList.remove('focus');

      // there are some listeners
      if (this.events['blur:item']) {
        /**
         * Remove focus from an element.
         *
         * @event module:core/components/list~List#blur:item
         *
         * @type {Object}
         * @property {Element} $item previously focused HTML element
         */
        this.emit('blur:item', {
          $item: $prev,
        });
      }
    }

    // reassign
    this.$focusItem = $item;

    this.$focusItem.data = this.data[this.$focusItem.index];

    $item.classList.add('focus');

    // there are some listeners
    if (this.events['focus:item'] && (!config || !config.no_emit)) {
      /**
       * Set focus to a DOM element.
       *
       * @event module:core/components/list~List#focus:item
       *
       * @type {Object}
       * @property {Element} $prev old/previous focused HTML element
       * @property {Element} $curr new/current focused HTML element
       */
      this.emit('focus:item', {
        $prev: $prev,
        $curr: $item,
        $config: config
      });
    }

    // there are some listeners
    if (this.events['select:item']) {
      /**
       * Set focus to a list item.
       *
       * @event module:core/components/list~List#select:item
       *
       * @type {Object}
       * @property {Element} $item new/current focused item
       */
      this.emit('select:item', {
        $item: $item,
      });
    }

    if (this.scrollList && (!config || !config.no_emit)) {
      scrollList($item, this);
    }

    return true;
  }

  // nothing was done
  return false;
};

function scrollList($item, list) {
  if($item && list.scrollList) {
    scroll_item_index = $item.index;
    var scroll_type = 'translateX';
    if ($item.index >= list.data.length - list.scrollList.stopIndex) {
      scroll_item_index = list.data.length - list.scrollList.stopIndex - 1;
    }
    scroll_margin = parseInt(window.getComputedStyle($item).marginRight) || 0;
    scroll_value = (scroll_item_index - list.scrollList.startIndex) >= 0 ? -1 * (scroll_item_index - list.scrollList.startIndex) * ($item.clientWidth + scroll_margin) : 0;
    scroll_config_animation = {'left': scroll_value};

    if (list.type === list.TYPE_VERTICAL) {
      scroll_type = 'translateY';
      scroll_margin = parseInt(window.getComputedStyle($item).marginBottom) || 0;
      scroll_value = (scroll_item_index - list.scrollList.startIndex) >= 0 ? -1 * (scroll_item_index - list.scrollList.startIndex) * ($item.clientHeight + scroll_margin) : 0;
      scroll_config_animation = {'top': scroll_value};
    }
    transform_element(list.$body, scroll_type, scroll_value);
  }
}

/**
 * Set the given item focused by item index.
 *
 * @param {number} index item data index
 */
List.prototype.focusIndex = function(index, config) {
  this.focusItem(this.$body.children[index], config);
  var viewIndex = this.viewIndex || 0;
};

/**
 * Set item state and appearance as marked.
 *
 * @param {Node|Element} $item element to focus
 * @param {boolean} state true - marked, false - not marked
 */
List.prototype.markItem = function($item, state) {
  // correct CSS
  if (state) {
    $item.classList.add('mark');
  } else {
    $item.classList.remove('mark');
  }

  // apply flag
  $item.data.mark = state;
};

/**
 *
 * @param
 * @param
 */
List.prototype.addData = function(data) {
    var norm_data = normalize(data);
    var index = this.size;
    this.renderData(norm_data, index);
    this.data = this.data.concat(norm_data);
    this.size += norm_data.length;
};
//@TODO need refactor, has duplication  mouseover, etc
List.prototype.renderData = function(data, index) {
  var item, itemData, i, len;
  var self = this;
  var onClick = function(event) {
    if (this.data) {
      self.focusItem(this);

      // there are some listeners
      if (self.events['click:item']) {
        // notify listeners
        self.emit('click:item', {
          $item: this,
          event: event,
        });
      }
    }
  },

  mouseover = function(event) {
    if (self.events['mouseover'] && (!self.focused || self.$focusItem != this)) {
      // notify listeners
      self.emit('mouseover', {
        $item: this,
        event: event,
      });
    }
  },
  mouseout = function(event) {
    if (self.events['mouseout'] && self.$focusItem != this) {
      // notify listeners
      self.emit('mouseout', {
        $item: this,
        event: event,
      });
    }
  };
  for (i = 0, len = data.length; i < len; i++) {
      itemData = data[i];
      item = document.createElement('div');
      item.index = i;
      item.className = 'item';
      this.$body.appendChild(item);

      // correct inner data/index and render
      item.data = data[i];
      item.index = index;
      this.renderItem(item, itemData);

      // manual focusing
      item.addEventListener('click', onClick, false);

      item.addEventListener('mouseover', mouseover, false);
      item.addEventListener('mouseout', mouseout, false);
      index++;
    }
};

List.prototype.clear = function() {
  if(this.$node) {
    this.$node.innerHTML = '';
    this.$body.innerHTML = '';
  }
  this.$focusItem = null;
  this.data = null;
  this.size = 0;
};

List.prototype.selectItem = function(item) {
  this.removeSelectItem();
  this.$selectedItem = item;
  this.$selectedItem.classList.add('selected');
};

List.prototype.removeSelectItem = function() {
  if(this.$selectedItem) {
    this.$selectedItem.classList.remove('selected');
    this.$selectedItem = null;
  }
};

List.prototype.removeItem = function(item) {
  if(item && item.parentNode && this.$node.children) {
    if(item.nextSibling) {
      this.focusItem(item.nextSibling);
    } else if(item.previousSibling) {
      this.focusItem(item.previousSibling);
    } else {
      this.emit('delete:all');
    }

    item.parentNode.removeChild(item);
    this.data.splice(item.index, 1);
    this.size--;
    for(var i = 0; i < this.$node.children.length; i++) {
      this.$node.children[i].index = i;
    }
  }
};

// public
module.exports = List;

},{"../component":18,"core/animate":14,"core/router":45,"core/tools/transform.element":55,"vendor/aura/keys":133}],24:[function(require,module,exports){
/**
 * @module core/components/modal.box
 * @author Stanislav Kalashnik <sk@infomir.eu>
 * @license GNU GENERAL PUBLIC LICENSE Version 3
 */

'use strict';

var Component = require('../component');

/**
 * Base modal window implementation.
 *
 * @constructor
 * @extends Modal
 *
 * @param {Object} [config={}] init parameters (all inherited from the parent)
 */
function ModalBox(config) {
  // sanitize
  config = config || {};

  // set default className if classList property empty or undefined
  config.className = 'modalBox ' + (config.className || '');

  // create centered div
  config.$body = document.createElement('div');
  config.$body.className = 'body';

  // parent constructor call
  Component.call(this, config);

  // add table-cell wrapper
  this.$node.appendChild(document.createElement('div').appendChild(this.$body).parentNode);
}

// inheritance
ModalBox.prototype = Object.create(Component.prototype);
ModalBox.prototype.constructor = ModalBox;

// public
module.exports = ModalBox;

},{"../component":18}],25:[function(require,module,exports){
/**
 * Page is the main component to build user interface.
 * Page is an area filling the whole screen.
 * There can be only one active page visible at the same time.
 *
 * Active/visible state of a page is managed by the `router` module.
 *
 * A page can contain other components.
 *
 * @module core/components/page
 * @author Stanislav Kalashnik <sk@infomir.eu>
 * @license GNU GENERAL PUBLIC LICENSE Version 3
 */

'use strict';

var Component = require('../component'),
  animate = require('core/animate'),
  Header = require('ui/header'),
  LeftMenu = require('widgets/menu-left'),
  Tween = require('core/lib/tween.js'),
  arrowsWidget = require('widgets/mouse-arrows'),
  BackButton = require('widgets/back-lable'),
  transform_element = require('core/tools/transform.element'),
  arrows_config
  ;

/**
 * Base page implementation.
 *
 * A full-screen top-level layer that can operate as an independent separate entity.
 * It is added to the document body on creation if not already linked.
 *
 * @constructor
 * @extends Component
 *
 * @param {Object} [config={}] init parameters (all inherited from the parent)
 *
 * @example
 * var Page = require('stb/ui/page'),
 *     page = new Page({
 *         $node: document.getElementById(id)
 *     });
 *
 * page.addListener('show', function show () {
 *     // page is visible now
 * });
 */
function Page(config) {
  // sanitize
  config = config || {};

  this.leftMenu = LeftMenu;

  /**
   * Page visibility/active state flag.
   *
   * @readonly
   * @type {boolean}
   */
  this.active = false;

  /**
   * Page scroller custom
   *
   */
  this.tweener = null;
  this.tweenVars = null;
  this.scrollTopValue = 0;

  /**
   * Use Header in page
   */
  this.header = null;

  /**
   * Use MRC Arrows in page
   */
  this.arrows = null;
  this.arrowsWidget = arrowsWidget;
  this.arrowsUpdate = null;

  this.backButton = null;

  /**
   * Link to the currently active component with focus.
   *
   * @readonly
   * @type {Component}
   */
  this.activeComponent = null;

  // parent constructor call
  Component.call(this, config);

  this.$node.classList.add('page');

  if(this.$body && this.$body.classList) {
    this.$body.classList.add('body');
  }

  // set default className if classList property empty or undefined
  if (config.className) {
    this.$node.classList.add(config.className);
  }

  // set page custom scroller (testing)
  if (config.tweener) {
    this.tweener = new Tween();
  }

  if(config.header !== undefined) {
    this.header =  new Header(config.header);
    this.addHeader(this.header);
  }

  if(config.arrows) {
    this.arrows = config.arrows;
  }
  if(config.arrowsUpdate) {
    this.arrowsUpdate = config.arrowsUpdate;
  }

  if(config.back_button) {
    this.backButton = new BackButton(config.back_button);
    this.$node.appendChild(this.backButton.$node);
  }


  // state flag
  this.active = this.$node.classList.contains('active');

  // correct DOM parent/child connection if necessary
  if (this.$node.parentNode === null) {
    document.body.appendChild(this.$node);
  }

  // always itself
  this.page = this;

  var self = this;
  if(config.events && config.events['mouseover']) {
    this.$node.addEventListener('mouseover', function(event) {
      if (config.events && config.events['mouseover']) {
        // notify listeners
        self.emit('mouseover', {
          $item: self,
          event: event,
        });
      }
    }, false);
  }

  this.addListener('show', function(){
    if(self.arrows) {
      self.arrowsWidget.updateConfig(self.arrows);
      if(self.arrowsWidget.activated) {
        self.arrowsWidget.showArrows();
      }

      if(self.arrowsUpdate) {
        setTimeout(function(){
          self.arrowsUpdate();
        }, 0);
      }
    } else {
      self.arrowsWidget.hideArrows();
      arrowsWidget.up.hide();
      arrowsWidget.down.hide();
      arrowsWidget.left.hide();
      arrowsWidget.right.hide();
    }

    if(self.backButton) {
      LeftMenu.hide();
    } else {
      LeftMenu.show();
    }
  })
}

// inheritance
Page.prototype = Object.create(Component.prototype);
Page.prototype.constructor = Page;

Page.prototype.addHeader = function(header) {
  if(header && header.$node && header.$node instanceof HTMLElement) {
    this.$node.appendChild(header.$node);
  }
}
Page.prototype.scrollTop = function(value, duration) {

  value = -1 * value;
  this.scrollTopValue = value;
  transform_element(this.$body,'translateY',value);
  this.transformTop('translateY',value);
};

Page.prototype.transformTop = function(type, value) {
  value =  value+'px';

  this.$body.style.webkitTransform = type + '(' + value + ')';
  this.$body.style.MozTransform = type + '(' + value + ')';
  this.$body.style.msTransform = type + '(' + value + ')';
  this.$body.style.OTransform = type + '(' + value + ')';
  this.$body.style.transform = type + '(' + value + ')';

};


Page.prototype.setClass = function(className) {
  this.$body.className = 'body ' + className;
};

Page.prototype.resetScroll = function() {
  this.scrollTopValue = 0;
  this.$body.style.top = this.scrollTopValue + 'px';
};

// public
module.exports = Page;

},{"../component":18,"core/animate":14,"core/lib/tween.js":39,"core/tools/transform.element":55,"ui/header":120,"widgets/back-lable":140,"widgets/menu-left":150,"widgets/mouse-arrows":152}],26:[function(require,module,exports){
/**
 * @module core/components/panel
 * @author Stanislav Kalashnik <sk@infomir.eu>
 * @license GNU GENERAL PUBLIC LICENSE Version 3
 */

'use strict';

var Component = require('../component');

/**
 * Base panel implementation.
 *
 * @constructor
 * @extends Component
 *
 * @param {Object} [config={}] init parameters (all inherited from the parent)
 *
 * @example
 * var Panel = require('stb/ui/panel'),
 *     panel = new Panel({
 *         $node: document.getElementById('someId'),
 *         children: [
 *             new Panel({
 *                 $node: document.getElementById('anotherId')
 *             })
 *         ]
 *     });
 *
 * panel.add(
 *     new Button(),
 *     new Button(),
 *     new Button()
 * );
 *
 * page.add(panel);
 */
function Panel(config) {
  // sanitize
  config = config || {};

  var self = this;

  // can't accept focus
  config.focusable = config.focusable || false;

  // set default className if classList property empty or undefined
  config.className = 'panel ' + (config.className || '');

  // parent constructor call
  Component.call(this, config);

  if (self.events['mouseover']) {
    this.$node.addEventListener('mouseover', function(event) {
      // notify listeners
      self.emit('mouseover', {
        $item: this,
        event: event
      });

    }, false);
  }

  if (self.events['mouseout']) {
    this.$node.addEventListener('mouseout', function(event) {
      // notify listeners
      self.emit('mouseout', {
        $item: this,
        event: event
      });

    }, false);
  }
}

// inheritance
Panel.prototype = Object.create(Component.prototype);
Panel.prototype.constructor = Panel;

Panel.prototype.text = function (text, className) {
  if (text && className) {
    var wrapper = this.$body.getElementsByClassName(className)[0];
    wrapper.innerHTML = text;
  }
  return this;
};


// public
module.exports = Panel;

},{"../component":18}],27:[function(require,module,exports){
/**
 * @module core/components/progress.bar
 * @author Igor Zaporozhets <deadbyelpy@gmail.com>
 * @license GNU GENERAL PUBLIC LICENSE Version 3
 */

'use strict';

var Component = require('../component');

/**
 * Base progress bar implementation.
 *
 * @constructor
 * @extends Component
 *
 * @param {Object} [config={}] init parameters (all inherited from the parent)
 * @param {number} [config.value=0] initial value
 * @param {number} [config.max=100] max progress value
 * @param {number} [config.min=0] min progress value
 *
 * @example
 * var ProgressBar = require('stb/ui/progress.bar'),
 *     progressBar = new ProgressBar({
 *         min: -100,
 *         max:  200,
 *         events: {
 *             done: function () {
 *                 debug('ProgressBar: done');
 *             },
 *             change: function ( data ) {
 *                 debug('ProgressBar: change to ' + data.curr + ' from ' + data.prev);
 *             }
 *         }
 *     });
 */
function ProgressBar(config) {
  // sanitize
  config = config || {};

  /**
   * Max progress value.
   *
   * @type {number}
   */
  this.max = 100;

  /**
   * Min progress value.
   *
   * @type {number}
   */
  this.min = 0;

  /**
   * Initial progress position.
   *
   * @type {number}
   */
  this.value = 0;

  /**
   * Value of the one percent step
   *
   * @type {number}
   */
  this.step = 1;
  this.buffer = 0;

  // can't accept focus
  config.focusable = config.focusable || false;

  // set default className if classList property empty or undefined
  config.className = 'progressBar ' + (config.className || '');

  // parent constructor call
  Component.call(this, config);

  // insert bar line
  this.$value = this.$body.appendChild(document.createElement('div'));
  this.$buffer = this.$body.appendChild(document.createElement('div'));

  // correct CSS class name
  this.$value.className = 'value';
  this.$buffer.className = 'buffer';

  // component setup
  this.init(config);
}

// inheritance
ProgressBar.prototype = Object.create(Component.prototype);
ProgressBar.prototype.constructor = ProgressBar;

/**
 * Set position of the given value.
 * Does nothing in case when progress is end and passed value is more than max value.
 *
 * @param {number} value new value to set
 * @return {boolean} operation result
 *
 * @fires module:core/components/progress.bar~ProgressBar#done
 * @fires module:core/components/progress.bar~ProgressBar#change
 */
ProgressBar.prototype.set = function (value) {
  var prevValue = this.value;
  // value changed but in the given range
  if (this.value !== value && value <= this.max && value >= this.min) {
    // set new value
    this.value = value;

    // get value in percents
    value = Math.abs(this.value - this.min) / this.step;

    if (value === 100) {
      // there are some listeners
      if (this.events['done']) {
        /**
         * Set progress to its maximum value.
         *
         * @event module:core/components/progress.bar~ProgressBar#done
         */
        this.emit('done');
      }
    }

    // set progress bar width
    this.$value.style.width = value + '%';

    // there are some listeners
    if (this.events['change']) {
      /**
       * Update progress value.
       *
       * @event module:core/components/progress.bar~ProgressBar#change
       *
       * @type {Object}
       * @property {number} prev old/previous progress value
       * @property {number} curr new/current progress value
       */
      this.emit('change', {
        curr: this.value,
        prev: prevValue,
      });
    }

    return true;
  }

  // nothing was done
  return false;
};

ProgressBar.prototype.setBuffer = function (buffer) {
  var prevBuffer = this.buffer;
  // value changed but in the given range
  if (buffer !== prevBuffer && buffer <= this.max && buffer >= this.min) {
    // set new value
    this.buffer = buffer;

    // set progress bar width
    this.$buffer.style.width = this.buffer === this.min ? 0 : Math.abs(this.buffer - this.min) / this.step + '%';
    // there are some listeners
    if (this.events['change']) {
      /**
       * Update progress value.
       *
       * @event module:core/components/progress.bar~ProgressBar#change
       *
       * @type {Object}
       * @property {number} prev old/previous progress value
       * @property {number} curr new/current progress value
       */
      this.emit('changeBuffer', {
        curr: this.buffer,
        prev: prevBuffer
      });
    }

    return true;
  }

  // nothing was done
  return false;
};

/**
 * Init or re-init current max or/and min or/and value.
 *
 * @param {Object} config init parameters (subset of constructor config params)
 */
ProgressBar.prototype.init = function (config) {
  // set max progress value
  if (config.max !== undefined) {
    // apply
    this.max = config.max;
  }

  // set min progress value
  if (config.min !== undefined) {
    // apply
    this.min = config.min;
  }

  // set actual progress value
  if (config.value !== undefined) {
    // apply
    this.value = config.value;
  }

  // set actual progress value
  if (config.buffer !== undefined) {
    // apply
    this.buffer = config.buffer;
  }

  this.step = Math.abs(this.max - this.min) / 100;

  // init bar size, (this.min - this.value) - calculate distance from start
  this.$value.style.width = (Math.abs(this.min - this.value) / this.step) + '%';
  this.$buffer.style.width = (Math.abs(this.min - this.buffer) / this.step) + '%';

  if (this.events['init']) {
    this.emit('init');
  }
};

// public
module.exports = ProgressBar;

},{"../component":18}],28:[function(require,module,exports){
/**
 * @module core/components/scroll.bar
 * @author Igor Zaporozhets <deadbyelpy@gmail.com>
 * @license GNU GENERAL PUBLIC LICENSE Version 3
 */

'use strict';

var Component = require('../component');

/**
 * Base scroll bar implementation.
 *
 * @constructor
 * @extends Component
 *
 * @param {Object} [config={}] init parameters (all inherited from the parent)
 * @param {number} [config.value=0] initial thumb position
 * @param {number} [config.realSize=100] actual scroll size
 * @param {number} [config.viewSize=10] visible area size
 * @param {number} [config.type] direction
 *
 * @example
 * var ScrollBar = require('stb/ui/scroll.bar'),
 *     scrollBar = new ScrollBar({
 *         viewSize: 5,
 *         realSize: 25,
 *         events: {
 *             done: function () {
 *                 debug('ScrollBar: done');
 *             },
 *             change: function ( data ) {
 *                 debug('ScrollBar: change to ' + data.curr + ' from ' + data.prev);
 *             }
 *         }
 *     });
 */
function ScrollBar(config) {
  // sanitize
  config = config || {};

  var self = this;

  /**
   * Visible area size.
   *
   * @type {number}
   */
  this.viewSize = 10;

  /**
   * Scroll area actual height or width (if scroll is horizontal).
   *
   * @type {number}
   */
  this.realSize = 100;

  /**
   * Scroll thumb position.
   *
   * @type {number}
   */
  this.value = 0;

  /**
   * Component orientation.
   *
   * @type {number}
   */
  this.type = this.TYPE_VERTICAL;

  /**
   * Geometry of the scroll thumb element.
   *
   * @type {ClientRect}
   */
  this.thumbRect = null;

  /**
   * Geometry of the scroll track element.
   *
   * @type {ClientRect}
   */
  this.trackRect = null;

  // can't accept focus
  config.focusable = config.focusable || false;

  // set default className if classList property empty or undefined
  config.className = 'scrollBar ' + (config.className || '');

  // horizontal or vertical
  if (config.type) {
    // apply
    this.type = config.type;
  }

  if (this.type === this.TYPE_HORIZONTAL) {
    config.className += ' horizontal';
  }

  // parent constructor call
  Component.call(this, config);

  // insert thumb line
  this.$thumb = this.$body.appendChild(document.createElement('div'));

  // correct CSS class name
  this.$thumb.className = 'thumb';

  if (self.events['mousewheel']) {
    this.$node.addEventListener('mousewheel', function(event) {
      // notify listeners
      self.emit('mousewheel', {
        $item: this,
        event: event
      });

    }, false);
  }

  // component setup
  this.init(config);
}

// inheritance
ScrollBar.prototype = Object.create(Component.prototype);
ScrollBar.prototype.constructor = ScrollBar;

ScrollBar.prototype.TYPE_VERTICAL = 1;
ScrollBar.prototype.TYPE_HORIZONTAL = 2;

/**
 * Init or re-init realSize/viewSize/value parameters.
 *
 * @param {Object} config init parameters (subset of constructor config params)
 */
ScrollBar.prototype.init = function(config) {
  config = config || {};

  // set actual scroll size
  if (config.realSize) {
    // apply
    this.realSize = config.realSize;
  }

  // set visible area size
  if (config.viewSize) {
    // apply
    this.viewSize = config.viewSize;
  }

  // show or hide thumb
  if (this.viewSize >= this.realSize) {
    //this.$thumb.classList.add('hidden');
   // this.$thumb.style.height = 100 + '%';
  } else {
    this.$thumb.classList.remove('hidden');
  }

  // set thumb position
  if (config.value !== undefined) {
    // apply
    this.scrollTo(config.value);
  }

  // set thumb size
  if (this.type === this.TYPE_VERTICAL) {
    this.$thumb.style.height = (this.viewSize / this.realSize * 100) + '%';
    if (this.viewSize >= this.realSize) {
      this.$thumb.style.height = 100 + '%';
    }
  } else {
    this.$thumb.style.width = (this.viewSize / this.realSize * 100) + '%';
  }

  // geometry
  this.thumbRect = this.$thumb.getBoundingClientRect();
  this.trackRect = this.$node.getBoundingClientRect();
};

/**
 * Set position of the given value.
 * Does nothing in case when scroll is in the end and passed value is more than scroll bar length.
 *
 * @param {number} value new value to set
 * @return {boolean} operation result
 *
 * @fires module:core/components/scroll.bar~ScrollBar#done
 * @fires module:core/components/scroll.bar~ScrollBar#change
 */
ScrollBar.prototype.scrollTo = function(value) {
  // value has changed
  if (this.value !== value) {
    // track and thumb geometry was not set
    if (this.thumbRect.height === 0 || this.thumbRect.width === 0) {
      // apply
      this.trackRect = this.$node.getBoundingClientRect();
      this.thumbRect = this.$thumb.getBoundingClientRect();
    }

    // set scroll bar width
    if (this.type === this.TYPE_VERTICAL) {
      this.$thumb.style.marginTop = ((this.trackRect.height - this.thumbRect.height) * value / (this.realSize - this.viewSize)) + 'px';
    } else {
      this.$thumb.style.marginLeft = ((this.trackRect.width - this.thumbRect.width) * value / (this.realSize - this.viewSize)) + 'px';
    }

    // there are some listeners
    if (this.events['change']) {
      /**
       * Update scroll value.
       *
       * @event module:core/components/scroll.bar~ScrollBar#change
       *
       * @type {Object}
       * @property {number} prev old/previous scroll value
       * @property {number} curr new/current scroll value
       */
      this.emit('change', {
        curr: value,
        prev: this.value,
      });
    }

    // is it the end?
    if (value >= this.realSize) {
      value = this.realSize;

      // there are some listeners
      if (this.events['done']) {
        /**
         * Set scroll to its maximum value.
         *
         * @event module:core/components/scroll.bar~ScrollBar#done
         */
        this.emit('done');
      }
    }

    // set new value
    this.value = value;

    return true;
  }

  // nothing was done
  return false;
};

// public
module.exports = ScrollBar;

},{"../component":18}],29:[function(require,module,exports){
/**
 * @module core/components/select.box
 * @license GNU GENERAL PUBLIC LICENSE Version 3
 */

'use strict';

var Component = require('../component'),
  dom = require('core/dom');
/**
 *
 * @constructor
 * @extends Component
 *
 * @param {Object} [config={}] init parameters (all inherited from the parent)
 */
function SelectBox(config) {
  // sanitize
  config = config || {};

  // set default className if classList property empty or undefined
  config.className = 'selectBox ' + (config.className || '');

  // parent constructor call
  Component.call(this, config);
  if(config.content) {
    this.$node.appendChild(config.content);
  }

}

// inheritance
SelectBox.prototype = Object.create(Component.prototype);
SelectBox.prototype.constructor = SelectBox;

// public
module.exports = SelectBox;

},{"../component":18,"core/dom":31}],30:[function(require,module,exports){
/**
 * @module core/components/widget
 * @license GNU GENERAL PUBLIC LICENSE Version 3
 */

'use strict';

var Component = require('../component'),
    BackButton = require('widgets/back-lable'),
    router = require('core/router');

/**
 * Base widget implementation.
 *
 * A part-screen top-level layer that can operate as an independent separate entity.
 *
 * @constructor
 * @extends Component
 *
 * @param {Object} [config={}] init parameters (all inherited from the parent)
 * @param {boolean} [config.visible=false] component initial visibility state flag
 * @param {boolean} [config.focusable=false] component can accept focus or not
 *
 * @example
 * var Widget = require('stb/ui/widget'),
 *     widget = new Widget({
 *         $node: document.getElementById(id)
 *     });
 *
 * // somewhere
 * widget.show();
 */
function Widget(config) {
  // sanitize
  config = config || {};

  // can't accept focus
  config.focusable = config.focusable || false;

  // hidden
  config.visible = config.visible || false;

  // set default className if classList property empty or undefined
  config.className = 'widget ' + (config.className || '');

  this.mouseover = function (event) {

    if (self.events['mouseover']) {
      // notify listeners
      self.emit('mouseover', {
        $item: this,
        event: event,
      });
    }
  },

  this.mouseout = function (event) {
    if (self.events['mouseout']) {
      // notify listeners
      self.emit('mouseout', {
        $item: this,
        event: event,
      });
    }
  },

    this.mousewheel = function (event) {
      if (self.events['mousewheel']) {
        // notify listeners
        self.emit('mousewheel', {
          $item: this,
          event: event,
        });
      }
    };


  // parent constructor call
  Component.call(this, config);

  var self = this;
  this.$body.addEventListener('mouseover', self.mouseover, false);
  this.$body.addEventListener('mouseout', self.mouseout, false);
  this.$body.addEventListener('mousewheel', self.mousewheel, false);

  this.addListener('show', function(){

  });
  this.addListener('hide', function(){

  });

  this.backButton = null;

  if(config.back_button) {
    this.backButton = new BackButton(config.back_button);
    this.$node.appendChild(this.backButton.$node);
  }
}

// inheritance
Widget.prototype = Object.create(Component.prototype);

Widget.prototype.constructor = Widget;


// public
module.exports = Widget;

},{"../component":18,"core/router":45,"widgets/back-lable":140}],31:[function(require,module,exports){
/**
 * HTML elements low-level handling.
 *
 * @module core/dom
 * @author Stanislav Kalashnik <sk@infomir.eu>
 * @license GNU GENERAL PUBLIC LICENSE Version 3
 */

'use strict';

/* eslint no-unused-vars: 0 */

/**
 * DOM manipulation module
 */
var dom = {};

/**
 * Create a new HTML element.
 *
 * @param {string} tagName mandatory tag name
 * @param {Object|null} [attrList] element attributes
 * @param {...*} [content] element content (primitive value/values or other nodes)
 * @return {Node|null} HTML element or null on failure
 *
 * @example
 * dom.tag('table');
 * dom.tag('div', {}, 'some text');
 * dom.tag('div', {className:'top'}, dom.tag('span'), dom.tag('br'));
 * dom.tag('link', {rel:'stylesheet', type:'text/css', href:'http:// some.url/'});
 */
dom.tag = function(tagName, attrList, content) {
  var node = null,
    i, name;

  // minimal param is given
  if (tagName) {
    // empty element
    node = document.createElement(tagName);

    // optional attribute list is given
    if (attrList && typeof attrList === 'object') {
      for (name in attrList) {
        // extend a new node with the given attributes
        node[name] = attrList[name];
      }
    }

    // content (arguments except the first two)
    for (i = 2; i < arguments.length; i++) {
      // some data is given
      if (arguments[i]) {
        // regular HTML tag or plain data
        node.appendChild(
          typeof arguments[i] === 'object' ?
          arguments[i] :
          document.createTextNode(arguments[i])
        );
      }
    }

  }

  return node;
};

/**
 * Create a new DocumentFragment filled with the given non-empty elements if any.
 *
 * @param {...*} [node] fragment content (primitive value/values or other nodes)
 * @return {DocumentFragment} new placeholder
 *
 * @example
 * // gives an empty fragment element
 * dom.fragment();
 * // gives a fragment element with 3 div element inside
 * dom.fragment(dom.tag('div'), div2, div3);
 * // mixed case
 * dom.fragment('some text', 123, div3);
 */
dom.fragment = function(node) {
  // prepare placeholder
  var i, fragment = document.createDocumentFragment();

  // walk through all the given elements
  for (i = 0; i < arguments.length; i++) {
    node = arguments[i];

    // some data is given
    if (node) {
      // regular HTML tag or plain data
      fragment.appendChild(typeof node === 'object' ? node : document.createTextNode(node));
    }
  }

  return fragment;
};

/**
 * Add the given non-empty data (HTML element/text or list) to the destination element.
 *
 * @param {Node} tagDst element to receive children
 * @param {...*} [content] element content (primitive value/values or other nodes)
 * @return {Node|null} the destination element - owner of all added data
 *
 * @example
 * // simple text value
 * add(some_div, 'Hello world');
 * // single DOM Element
 * add(some_div, some_other_div);
 * // DOM Element list
 * add(some_div, div1, div2, div3);
 * // mixed case
 * add(some_div, div1, 'hello', 'world');
 */
dom.add = function(tagDst, content) {
  var i;

  // valid HTML tag as the destination
  if (tagDst instanceof Node) {
    // append all except the first one
    for (i = 1; i < arguments.length; i++) {
      // some data is given
      if (arguments[i]) {
        // regular HTML tag or plain data
        tagDst.appendChild(
          typeof arguments[i] === 'object' ?
          arguments[i] :
          document.createTextNode(arguments[i])
        );
      }
    }

    return tagDst;
  }

  return null;
};

/**
 * Remove the given elements from the DOM.
 *
 * @param {...Node} [nodes] element to be removed
 * @return {boolean} operation status (true - all given elements removed)
 *
 * @example
 * dom.remove(document.querySelector('div.test'));
 * dom.remove(div1, div2, div3);
 */
dom.remove = function(nodes) {
  var count = 0, // amount of successfully removed nodes
    i;

  // walk through all the given elements
  for (i = 0; i < arguments.length; i++) {
    // valid non-empty tag
    if (arguments[i] && arguments[i].parentNode) {
      if (arguments[i].parentNode.removeChild(arguments[i]) === arguments[i]) {
        count++;
      }
    }
  }

  return arguments.length > 0 && count === arguments.length;
};

// public
module.exports = dom;

},{}],32:[function(require,module,exports){
/**
 * @module core/emitter
 * @author Stanislav Kalashnik <sk@infomir.eu>
 * @license GNU GENERAL PUBLIC LICENSE Version 3
 */

'use strict';
var statInfoService;

/**
 * Base Events Emitter implementation.
 *
 * @see http:// nodejs.org/api/events.html
 * @constructor
 */
function Emitter() {
  /**
   * Inner hash table for event names and linked callbacks.
   * Manual editing should be avoided.
   *
   * @member {Object.<string, function[]>}
   *
   * @example
   * {
   *     click: [
   *         function click1 () { ... },
   *         function click2 () { ... }
   *     ],
   *     keydown: [
   *         function () { ... }
   *     ]
   * }
   **/
  this.events = {};
}

Emitter.prototype = {
  /**
   * Bind an event to the given callback function.
   * The same callback function can be added multiple times for the same event name.
   *
   * @param {string} name event identifier
   * @param {function} callback function to call on this event
   *
   * @example
   * var obj = new Emitter();
   * obj.addListener('click', function ( data ) { ... });
   * // one more click handler
   * obj.addListener('click', function ( data ) { ... });
   */
  addListener: function(name, callback) {
    // initialization may be required
    this.events[name] = this.events[name] || [];

    // append this new event to the list
    this.events[name].push(callback);
  },

  /**
   * Add a one time listener for the event.
   * This listener is invoked only the next time the event is fired, after which it is removed.
   *
   * @param {string} name event identifier
   * @param {function} callback function to call on this event
   */
  once: function(name, callback) {
    // current execution context
    var self = this;

    // initialization may be required
    this.events[name] = this.events[name] || [];

    // append this new event to the list
    this.events[name].push(function onceWrapper(data) {
      callback(data);
      self.removeListener(name, onceWrapper);
    });
  },

  /**
   * Apply multiple listeners at once.
   *
   * @param {Object} callbacks event names with callbacks
   *
   * @example
   * var obj = new Emitter();
   * obj.addListeners({click: function ( data ) {}, close: function ( data ) {}});
   */
  addListeners: function(callbacks) {
    var name;

    // valid input
    if (typeof callbacks === 'object') {
      for (name in callbacks) {
        if (callbacks.hasOwnProperty(name)) {
          this.addListener(name, callbacks[name]);
        }
      }
    }
  },

  /**
   * Remove all instances of the given callback.
   *
   * @param {string} name event identifier
   * @param {function} callback function to remove
   *
   * @example
   * obj.removeListener('click', func1);
   */
  removeListener: function(name, callback) {
    // the event exists and should have some callbacks
    if (this.events[name]) {
      // rework the callback list to exclude the given one
      this.events[name] = this.events[name].filter(function callbacksFilter(fn) {
        return fn !== callback;
      });

      // event has no more callbacks so clean it
      if (this.events[name].length === 0) {
        // as if there were no listeners at all
        this.events[name] = undefined;
      }
    }
  },

  /**
   * Remove all callbacks for the given event name.
   * Without event name clears all events.
   *
   * @param {string} [name] event identifier
   *
   * @example
   * obj.removeAllListeners('click');
   * obj.removeAllListeners();
   */
  removeAllListeners: function(name) {
    // check input
    if (arguments.length === 0) {
      // no arguments so remove everything
      this.events = {};
    } else if (name) {
      // only name is given so remove all callbacks for the given event
      // but object structure modification should be avoided
      this.events[name] = undefined;
    }
  },

  /**
   * Execute each of the listeners in the given order with the supplied arguments.
   *
   * @param {string} name event identifier
   * @param {Object} [data] options to send
   *
   * @todo consider use context
   *
   * @example
   * obj.emit('init');
   * obj.emit('click', {src:panel1, dst:panel2});
   *
   * // it's a good idea to emit event only when there are some listeners
   * if ( this.events['click'] ) {
   *     this.emit('click', {event: event});
   * }
   */
  emit: function(name, data) {
    var event = this.events[name],
      i;

    // the event exists and should have some callbacks
    if (event) {
      for (i = 0; i < event.length; i++) {
        try {
          event[i].call(this, data);
        } catch (e) {
          if(!statInfoService) statInfoService = require('core/tools/statInfoService');
          if(!e) e = {};
          console.error(e);
          statInfoService.sendDebugErrorLog ('TRY_CATCH', encodeURIComponent(e.message), encodeURIComponent(e.stack), encodeURIComponent(e.sourceURL), e.line);
        }
      }
    }
  }
};

// correct constructor name
Emitter.prototype.constructor = Emitter;

// public
module.exports = Emitter;

},{"core/tools/statInfoService":53}],33:[function(require,module,exports){
(function (global){
/*!
 * VERSION: 1.18.1
 * DATE: 2015-12-11
 * UPDATES AND DOCS AT: http://greensock.com
 *
 * @license Copyright (c) 2008-2015, GreenSock. All rights reserved.
 * This work is subject to the terms at http://greensock.com/standard-license or for
 * Club GreenSock members, the software agreement that was issued with your membership.
 *
 * @author: Jack Doyle, jack@greensock.com
 */
(function(window, moduleName) {

		"use strict";
		var _globals = window.GreenSockGlobals = window.GreenSockGlobals || window;
		if (_globals.TweenLite) {
			return; //in case the core set of classes is already loaded, don't instantiate twice.
		}
		var _namespace = function(ns) {
				var a = ns.split("."),
					p = _globals, i;
				for (i = 0; i < a.length; i++) {
					p[a[i]] = p = p[a[i]] || {};
				}
				return p;
			},
			gs = _namespace("com.greensock"),
			_tinyNum = 0.0000000001,
			_slice = function(a) { //don't use Array.prototype.slice.call(target, 0) because that doesn't work in IE8 with a NodeList that's returned by querySelectorAll()
				var b = [],
					l = a.length,
					i;
				for (i = 0; i !== l; b.push(a[i++])) {}
				return b;
			},
			_emptyFunc = function() {},
			_isArray = (function() { //works around issues in iframe environments where the Array global isn't shared, thus if the object originates in a different window/iframe, "(obj instanceof Array)" will evaluate false. We added some speed optimizations to avoid Object.prototype.toString.call() unless it's absolutely necessary because it's VERY slow (like 20x slower)
				var toString = Object.prototype.toString,
					array = toString.call([]);
				return function(obj) {
					return obj != null && (obj instanceof Array || (typeof(obj) === "object" && !!obj.push && toString.call(obj) === array));
				};
			}()),
			a, i, p, _ticker, _tickerActive,
			_defLookup = {},

			/**
			 * @constructor
			 * Defines a GreenSock class, optionally with an array of dependencies that must be instantiated first and passed into the definition.
			 * This allows users to load GreenSock JS files in any order even if they have interdependencies (like CSSPlugin extends TweenPlugin which is
			 * inside TweenLite.js, but if CSSPlugin is loaded first, it should wait to run its code until TweenLite.js loads and instantiates TweenPlugin
			 * and then pass TweenPlugin to CSSPlugin's definition). This is all done automatically and internally.
			 *
			 * Every definition will be added to a "com.greensock" global object (typically window, but if a window.GreenSockGlobals object is found,
			 * it will go there as of v1.7). For example, TweenLite will be found at window.com.greensock.TweenLite and since it's a global class that should be available anywhere,
			 * it is ALSO referenced at window.TweenLite. However some classes aren't considered global, like the base com.greensock.core.Animation class, so
			 * those will only be at the package like window.com.greensock.core.Animation. Again, if you define a GreenSockGlobals object on the window, everything
			 * gets tucked neatly inside there instead of on the window directly. This allows you to do advanced things like load multiple versions of GreenSock
			 * files and put them into distinct objects (imagine a banner ad uses a newer version but the main site uses an older one). In that case, you could
			 * sandbox the banner one like:
			 *
			 * <script>
			 *     var gs = window.GreenSockGlobals = {}; //the newer version we're about to load could now be referenced in a "gs" object, like gs.TweenLite.to(...). Use whatever alias you want as long as it's unique, "gs" or "banner" or whatever.
			 * </script>
			 * <script src="js/greensock/v1.7/TweenMax.js"></script>
			 * <script>
			 *     window.GreenSockGlobals = window._gsQueue = window._gsDefine = null; //reset it back to null (along with the special _gsQueue variable) so that the next load of TweenMax affects the window and we can reference things directly like TweenLite.to(...)
			 * </script>
			 * <script src="js/greensock/v1.6/TweenMax.js"></script>
			 * <script>
			 *     gs.TweenLite.to(...); //would use v1.7
			 *     TweenLite.to(...); //would use v1.6
			 * </script>
			 *
			 * @param {!string} ns The namespace of the class definition, leaving off "com.greensock." as that's assumed. For example, "TweenLite" or "plugins.CSSPlugin" or "easing.Back".
			 * @param {!Array.<string>} dependencies An array of dependencies (described as their namespaces minus "com.greensock." prefix). For example ["TweenLite","plugins.TweenPlugin","core.Animation"]
			 * @param {!function():Object} func The function that should be called and passed the resolved dependencies which will return the actual class for this definition.
			 * @param {boolean=} global If true, the class will be added to the global scope (typically window unless you define a window.GreenSockGlobals object)
			 */
			Definition = function(ns, dependencies, func, global) {
				this.sc = (_defLookup[ns]) ? _defLookup[ns].sc : []; //subclasses
				_defLookup[ns] = this;
				this.gsClass = null;
				this.func = func;
				var _classes = [];
				this.check = function(init) {
					var i = dependencies.length,
						missing = i,
						cur, a, n, cl, hasModule;
					while (--i > -1) {
						if ((cur = _defLookup[dependencies[i]] || new Definition(dependencies[i], [])).gsClass) {
							_classes[i] = cur.gsClass;
							missing--;
						} else if (init) {
							cur.sc.push(this);
						}
					}
					if (missing === 0 && func) {
						a = ("com.greensock." + ns).split(".");
						n = a.pop();
						cl = _namespace(a.join("."))[n] = this.gsClass = func.apply(func, _classes);

						//exports to multiple environments
						if (global) {
							_globals[n] = cl; //provides a way to avoid global namespace pollution. By default, the main classes like TweenLite, Power1, Strong, etc. are added to window unless a GreenSockGlobals is defined. So if you want to have things added to a custom object instead, just do something like window.GreenSockGlobals = {} before loading any GreenSock files. You can even set up an alias like window.GreenSockGlobals = windows.gs = {} so that you can access everything like gs.TweenLite. Also remember that ALL classes are added to the window.com.greensock object (in their respective packages, like com.greensock.easing.Power1, com.greensock.TweenLite, etc.)
							hasModule = (typeof(module) !== "undefined" && module.exports);
							if (!hasModule && typeof(define) === "function" && define.amd){ //AMD
								define((window.GreenSockAMDPath ? window.GreenSockAMDPath + "/" : "") + ns.split(".").pop(), [], function() { return cl; });
							} else if (ns === moduleName && hasModule){ //node
								module.exports = cl;
							}
						}
						for (i = 0; i < this.sc.length; i++) {
							this.sc[i].check();
						}
					}
				};
				this.check(true);
			},

			//used to create Definition instances (which basically registers a class that has dependencies).
			_gsDefine = window._gsDefine = function(ns, dependencies, func, global) {
				return new Definition(ns, dependencies, func, global);
			},

			//a quick way to create a class that doesn't have any dependencies. Returns the class, but first registers it in the GreenSock namespace so that other classes can grab it (other classes might be dependent on the class).
			_class = gs._class = function(ns, func, global) {
				func = func || function() {};
				_gsDefine(ns, [], function(){ return func; }, global);
				return func;
			};

		_gsDefine.globals = _globals;



/*
 * ----------------------------------------------------------------
 * Ease
 * ----------------------------------------------------------------
 */
		var _baseParams = [0, 0, 1, 1],
			_blankArray = [],
			Ease = _class("easing.Ease", function(func, extraParams, type, power) {
				this._func = func;
				this._type = type || 0;
				this._power = power || 0;
				this._params = extraParams ? _baseParams.concat(extraParams) : _baseParams;
			}, true),
			_easeMap = Ease.map = {},
			_easeReg = Ease.register = function(ease, names, types, create) {
				var na = names.split(","),
					i = na.length,
					ta = (types || "easeIn,easeOut,easeInOut").split(","),
					e, name, j, type;
				while (--i > -1) {
					name = na[i];
					e = create ? _class("easing."+name, null, true) : gs.easing[name] || {};
					j = ta.length;
					while (--j > -1) {
						type = ta[j];
						_easeMap[name + "." + type] = _easeMap[type + name] = e[type] = ease.getRatio ? ease : ease[type] || new ease();
					}
				}
			};

		p = Ease.prototype;
		p._calcEnd = false;
		p.getRatio = function(p) {
			if (this._func) {
				this._params[0] = p;
				return this._func.apply(null, this._params);
			}
			var t = this._type,
				pw = this._power,
				r = (t === 1) ? 1 - p : (t === 2) ? p : (p < 0.5) ? p * 2 : (1 - p) * 2;
			if (pw === 1) {
				r *= r;
			} else if (pw === 2) {
				r *= r * r;
			} else if (pw === 3) {
				r *= r * r * r;
			} else if (pw === 4) {
				r *= r * r * r * r;
			}
			return (t === 1) ? 1 - r : (t === 2) ? r : (p < 0.5) ? r / 2 : 1 - (r / 2);
		};

		//create all the standard eases like Linear, Quad, Cubic, Quart, Quint, Strong, Power0, Power1, Power2, Power3, and Power4 (each with easeIn, easeOut, and easeInOut)
		a = ["Linear","Quad","Cubic","Quart","Quint,Strong"];
		i = a.length;
		while (--i > -1) {
			p = a[i]+",Power"+i;
			_easeReg(new Ease(null,null,1,i), p, "easeOut", true);
			_easeReg(new Ease(null,null,2,i), p, "easeIn" + ((i === 0) ? ",easeNone" : ""));
			_easeReg(new Ease(null,null,3,i), p, "easeInOut");
		}
		_easeMap.linear = gs.easing.Linear.easeIn;
		_easeMap.swing = gs.easing.Quad.easeInOut; //for jQuery folks


/*
 * ----------------------------------------------------------------
 * EventDispatcher
 * ----------------------------------------------------------------
 */
		var EventDispatcher = _class("events.EventDispatcher", function(target) {
			this._listeners = {};
			this._eventTarget = target || this;
		});
		p = EventDispatcher.prototype;

		p.addEventListener = function(type, callback, scope, useParam, priority) {
			priority = priority || 0;
			var list = this._listeners[type],
				index = 0,
				listener, i;
			if (list == null) {
				this._listeners[type] = list = [];
			}
			i = list.length;
			while (--i > -1) {
				listener = list[i];
				if (listener.c === callback && listener.s === scope) {
					list.splice(i, 1);
				} else if (index === 0 && listener.pr < priority) {
					index = i + 1;
				}
			}
			list.splice(index, 0, {c:callback, s:scope, up:useParam, pr:priority});
			if (this === _ticker && !_tickerActive) {
				_ticker.wake();
			}
		};

		p.removeEventListener = function(type, callback) {
			var list = this._listeners[type], i;
			if (list) {
				i = list.length;
				while (--i > -1) {
					if (list[i].c === callback) {
						list.splice(i, 1);
						return;
					}
				}
			}
		};

		p.dispatchEvent = function(type) {
			var list = this._listeners[type],
				i, t, listener;
			if (list) {
				i = list.length;
				t = this._eventTarget;
				while (--i > -1) {
					listener = list[i];
					if (listener) {
						if (listener.up) {
							listener.c.call(listener.s || t, {type:type, target:t});
						} else {
							listener.c.call(listener.s || t);
						}
					}
				}
			}
		};


/*
 * ----------------------------------------------------------------
 * Ticker
 * ----------------------------------------------------------------
 */
 		var _reqAnimFrame = window.requestAnimationFrame,
			_cancelAnimFrame = window.cancelAnimationFrame,
			_getTime = Date.now || function() {return new Date().getTime();},
			_lastUpdate = _getTime();

		//now try to determine the requestAnimationFrame and cancelAnimationFrame functions and if none are found, we'll use a setTimeout()/clearTimeout() polyfill.
		a = ["ms","moz","webkit","o"];
		i = a.length;
		while (--i > -1 && !_reqAnimFrame) {
			_reqAnimFrame = window[a[i] + "RequestAnimationFrame"];
			_cancelAnimFrame = window[a[i] + "CancelAnimationFrame"] || window[a[i] + "CancelRequestAnimationFrame"];
		}

		_class("Ticker", function(fps, useRAF) {
			var _self = this,
				_startTime = _getTime(),
				_useRAF = (useRAF !== false && _reqAnimFrame) ? "auto" : false,
				_lagThreshold = 500,
				_adjustedLag = 33,
				_tickWord = "tick", //helps reduce gc burden
				_fps, _req, _id, _gap, _nextTime,
				_tick = function(manual) {
					var elapsed = _getTime() - _lastUpdate,
						overlap, dispatch;
					if (elapsed > _lagThreshold) {
						_startTime += elapsed - _adjustedLag;
					}
					_lastUpdate += elapsed;
					_self.time = (_lastUpdate - _startTime) / 1000;
					overlap = _self.time - _nextTime;
					if (!_fps || overlap > 0 || manual === true) {
						_self.frame++;
						_nextTime += overlap + (overlap >= _gap ? 0.004 : _gap - overlap);
						dispatch = true;
					}
					if (manual !== true) { //make sure the request is made before we dispatch the "tick" event so that timing is maintained. Otherwise, if processing the "tick" requires a bunch of time (like 15ms) and we're using a setTimeout() that's based on 16.7ms, it'd technically take 31.7ms between frames otherwise.
						_id = _req(_tick);
					}
					if (dispatch) {
						_self.dispatchEvent(_tickWord);
					}
				};

			EventDispatcher.call(_self);
			_self.time = _self.frame = 0;
			_self.tick = function() {
				_tick(true);
			};

			_self.lagSmoothing = function(threshold, adjustedLag) {
				_lagThreshold = threshold || (1 / _tinyNum); //zero should be interpreted as basically unlimited
				_adjustedLag = Math.min(adjustedLag, _lagThreshold, 0);
			};

			_self.sleep = function() {
				if (_id == null) {
					return;
				}
				if (!_useRAF || !_cancelAnimFrame) {
					clearTimeout(_id);
				} else {
					_cancelAnimFrame(_id);
				}
				_req = _emptyFunc;
				_id = null;
				if (_self === _ticker) {
					_tickerActive = false;
				}
			};

			_self.wake = function(seamless) {
				if (_id !== null) {
					_self.sleep();
				} else if (seamless) {
					_startTime += -_lastUpdate + (_lastUpdate = _getTime());
				} else if (_self.frame > 10) { //don't trigger lagSmoothing if we're just waking up, and make sure that at least 10 frames have elapsed because of the iOS bug that we work around below with the 1.5-second setTimout().
					_lastUpdate = _getTime() - _lagThreshold + 5;
				}
				_req = (_fps === 0) ? _emptyFunc : (!_useRAF || !_reqAnimFrame) ? function(f) { return setTimeout(f, ((_nextTime - _self.time) * 1000 + 1) | 0); } : _reqAnimFrame;
				if (_self === _ticker) {
					_tickerActive = true;
				}
				_tick(2);
			};

			_self.fps = function(value) {
				if (!arguments.length) {
					return _fps;
				}
				_fps = value;
				_gap = 1 / (_fps || 60);
				_nextTime = this.time + _gap;
				_self.wake();
			};

			_self.useRAF = function(value) {
				if (!arguments.length) {
					return _useRAF;
				}
				_self.sleep();
				_useRAF = value;
				_self.fps(_fps);
			};
			_self.fps(fps);

			//a bug in iOS 6 Safari occasionally prevents the requestAnimationFrame from working initially, so we use a 1.5-second timeout that automatically falls back to setTimeout() if it senses this condition.
			setTimeout(function() {
				if (_useRAF === "auto" && _self.frame < 5 && document.visibilityState !== "hidden") {
					_self.useRAF(false);
				}
			}, 1500);
		});

		p = gs.Ticker.prototype = new gs.events.EventDispatcher();
		p.constructor = gs.Ticker;


/*
 * ----------------------------------------------------------------
 * Animation
 * ----------------------------------------------------------------
 */
		var Animation = _class("core.Animation", function(duration, vars) {
				this.vars = vars = vars || {};
				this._duration = this._totalDuration = duration || 0;
				this._delay = Number(vars.delay) || 0;
				this._timeScale = 1;
				this._active = (vars.immediateRender === true);
				this.data = vars.data;
				this._reversed = (vars.reversed === true);

				if (!_rootTimeline) {
					return;
				}
				if (!_tickerActive) { //some browsers (like iOS 6 Safari) shut down JavaScript execution when the tab is disabled and they [occasionally] neglect to start up requestAnimationFrame again when returning - this code ensures that the engine starts up again properly.
					_ticker.wake();
				}

				var tl = this.vars.useFrames ? _rootFramesTimeline : _rootTimeline;
				tl.add(this, tl._time);

				if (this.vars.paused) {
					this.paused(true);
				}
			});

		_ticker = Animation.ticker = new gs.Ticker();
		p = Animation.prototype;
		p._dirty = p._gc = p._initted = p._paused = false;
		p._totalTime = p._time = 0;
		p._rawPrevTime = -1;
		p._next = p._last = p._onUpdate = p._timeline = p.timeline = null;
		p._paused = false;


		//some browsers (like iOS) occasionally drop the requestAnimationFrame event when the user switches to a different tab and then comes back again, so we use a 2-second setTimeout() to sense if/when that condition occurs and then wake() the ticker.
		var _checkTimeout = function() {
				if (_tickerActive && _getTime() - _lastUpdate > 2000) {
					_ticker.wake();
				}
				setTimeout(_checkTimeout, 2000);
			};
		_checkTimeout();


		p.play = function(from, suppressEvents) {
			if (from != null) {
				this.seek(from, suppressEvents);
			}
			return this.reversed(false).paused(false);
		};

		p.pause = function(atTime, suppressEvents) {
			if (atTime != null) {
				this.seek(atTime, suppressEvents);
			}
			return this.paused(true);
		};

		p.resume = function(from, suppressEvents) {
			if (from != null) {
				this.seek(from, suppressEvents);
			}
			return this.paused(false);
		};

		p.seek = function(time, suppressEvents) {
			return this.totalTime(Number(time), suppressEvents !== false);
		};

		p.restart = function(includeDelay, suppressEvents) {
			return this.reversed(false).paused(false).totalTime(includeDelay ? -this._delay : 0, (suppressEvents !== false), true);
		};

		p.reverse = function(from, suppressEvents) {
			if (from != null) {
				this.seek((from || this.totalDuration()), suppressEvents);
			}
			return this.reversed(true).paused(false);
		};

		p.render = function(time, suppressEvents, force) {
			//stub - we override this method in subclasses.
		};

		p.invalidate = function() {
			this._time = this._totalTime = 0;
			this._initted = this._gc = false;
			this._rawPrevTime = -1;
			if (this._gc || !this.timeline) {
				this._enabled(true);
			}
			return this;
		};

		p.isActive = function() {
			var tl = this._timeline, //the 2 root timelines won't have a _timeline; they're always active.
				startTime = this._startTime,
				rawTime;
			return (!tl || (!this._gc && !this._paused && tl.isActive() && (rawTime = tl.rawTime()) >= startTime && rawTime < startTime + this.totalDuration() / this._timeScale));
		};

		p._enabled = function (enabled, ignoreTimeline) {
			if (!_tickerActive) {
				_ticker.wake();
			}
			this._gc = !enabled;
			this._active = this.isActive();
			if (ignoreTimeline !== true) {
				if (enabled && !this.timeline) {
					this._timeline.add(this, this._startTime - this._delay);
				} else if (!enabled && this.timeline) {
					this._timeline._remove(this, true);
				}
			}
			return false;
		};


		p._kill = function(vars, target) {
			return this._enabled(false, false);
		};

		p.kill = function(vars, target) {
			this._kill(vars, target);
			return this;
		};

		p._uncache = function(includeSelf) {
			var tween = includeSelf ? this : this.timeline;
			while (tween) {
				tween._dirty = true;
				tween = tween.timeline;
			}
			return this;
		};

		p._swapSelfInParams = function(params) {
			var i = params.length,
				copy = params.concat();
			while (--i > -1) {
				if (params[i] === "{self}") {
					copy[i] = this;
				}
			}
			return copy;
		};

		p._callback = function(type) {
			var v = this.vars;
			v[type].apply(v[type + "Scope"] || v.callbackScope || this, v[type + "Params"] || _blankArray);
		};

//----Animation getters/setters --------------------------------------------------------

		p.eventCallback = function(type, callback, params, scope) {
			if ((type || "").substr(0,2) === "on") {
				var v = this.vars;
				if (arguments.length === 1) {
					return v[type];
				}
				if (callback == null) {
					delete v[type];
				} else {
					v[type] = callback;
					v[type + "Params"] = (_isArray(params) && params.join("").indexOf("{self}") !== -1) ? this._swapSelfInParams(params) : params;
					v[type + "Scope"] = scope;
				}
				if (type === "onUpdate") {
					this._onUpdate = callback;
				}
			}
			return this;
		};

		p.delay = function(value) {
			if (!arguments.length) {
				return this._delay;
			}
			if (this._timeline.smoothChildTiming) {
				this.startTime( this._startTime + value - this._delay );
			}
			this._delay = value;
			return this;
		};

		p.duration = function(value) {
			if (!arguments.length) {
				this._dirty = false;
				return this._duration;
			}
			this._duration = this._totalDuration = value;
			this._uncache(true); //true in case it's a TweenMax or TimelineMax that has a repeat - we'll need to refresh the totalDuration.
			if (this._timeline.smoothChildTiming) if (this._time > 0) if (this._time < this._duration) if (value !== 0) {
				this.totalTime(this._totalTime * (value / this._duration), true);
			}
			return this;
		};

		p.totalDuration = function(value) {
			this._dirty = false;
			return (!arguments.length) ? this._totalDuration : this.duration(value);
		};

		p.time = function(value, suppressEvents) {
			if (!arguments.length) {
				return this._time;
			}
			if (this._dirty) {
				this.totalDuration();
			}
			return this.totalTime((value > this._duration) ? this._duration : value, suppressEvents);
		};

		p.totalTime = function(time, suppressEvents, uncapped) {
			if (!_tickerActive) {
				_ticker.wake();
			}
			if (!arguments.length) {
				return this._totalTime;
			}
			if (this._timeline) {
				if (time < 0 && !uncapped) {
					time += this.totalDuration();
				}
				if (this._timeline.smoothChildTiming) {
					if (this._dirty) {
						this.totalDuration();
					}
					var totalDuration = this._totalDuration,
						tl = this._timeline;
					if (time > totalDuration && !uncapped) {
						time = totalDuration;
					}
					this._startTime = (this._paused ? this._pauseTime : tl._time) - ((!this._reversed ? time : totalDuration - time) / this._timeScale);
					if (!tl._dirty) { //for performance improvement. If the parent's cache is already dirty, it already took care of marking the ancestors as dirty too, so skip the function call here.
						this._uncache(false);
					}
					//in case any of the ancestor timelines had completed but should now be enabled, we should reset their totalTime() which will also ensure that they're lined up properly and enabled. Skip for animations that are on the root (wasteful). Example: a TimelineLite.exportRoot() is performed when there's a paused tween on the root, the export will not complete until that tween is unpaused, but imagine a child gets restarted later, after all [unpaused] tweens have completed. The startTime of that child would get pushed out, but one of the ancestors may have completed.
					if (tl._timeline) {
						while (tl._timeline) {
							if (tl._timeline._time !== (tl._startTime + tl._totalTime) / tl._timeScale) {
								tl.totalTime(tl._totalTime, true);
							}
							tl = tl._timeline;
						}
					}
				}
				if (this._gc) {
					this._enabled(true, false);
				}
				if (this._totalTime !== time || this._duration === 0) {
					if (_lazyTweens.length) {
						_lazyRender();
					}
					this.render(time, suppressEvents, false);
					if (_lazyTweens.length) { //in case rendering caused any tweens to lazy-init, we should render them because typically when someone calls seek() or time() or progress(), they expect an immediate render.
						_lazyRender();
					}
				}
			}
			return this;
		};

		p.progress = p.totalProgress = function(value, suppressEvents) {
			var duration = this.duration();
			return (!arguments.length) ? (duration ? this._time / duration : this.ratio) : this.totalTime(duration * value, suppressEvents);
		};

		p.startTime = function(value) {
			if (!arguments.length) {
				return this._startTime;
			}
			if (value !== this._startTime) {
				this._startTime = value;
				if (this.timeline) if (this.timeline._sortChildren) {
					this.timeline.add(this, value - this._delay); //ensures that any necessary re-sequencing of Animations in the timeline occurs to make sure the rendering order is correct.
				}
			}
			return this;
		};

		p.endTime = function(includeRepeats) {
			return this._startTime + ((includeRepeats != false) ? this.totalDuration() : this.duration()) / this._timeScale;
		};

		p.timeScale = function(value) {
			if (!arguments.length) {
				return this._timeScale;
			}
			value = value || _tinyNum; //can't allow zero because it'll throw the math off
			if (this._timeline && this._timeline.smoothChildTiming) {
				var pauseTime = this._pauseTime,
					t = (pauseTime || pauseTime === 0) ? pauseTime : this._timeline.totalTime();
				this._startTime = t - ((t - this._startTime) * this._timeScale / value);
			}
			this._timeScale = value;
			return this._uncache(false);
		};

		p.reversed = function(value) {
			if (!arguments.length) {
				return this._reversed;
			}
			if (value != this._reversed) {
				this._reversed = value;
				this.totalTime(((this._timeline && !this._timeline.smoothChildTiming) ? this.totalDuration() - this._totalTime : this._totalTime), true);
			}
			return this;
		};

		p.paused = function(value) {
			if (!arguments.length) {
				return this._paused;
			}
			var tl = this._timeline,
				raw, elapsed;
			if (value != this._paused) if (tl) {
				if (!_tickerActive && !value) {
					_ticker.wake();
				}
				raw = tl.rawTime();
				elapsed = raw - this._pauseTime;
				if (!value && tl.smoothChildTiming) {
					this._startTime += elapsed;
					this._uncache(false);
				}
				this._pauseTime = value ? raw : null;
				this._paused = value;
				this._active = this.isActive();
				if (!value && elapsed !== 0 && this._initted && this.duration()) {
					raw = tl.smoothChildTiming ? this._totalTime : (raw - this._startTime) / this._timeScale;
					this.render(raw, (raw === this._totalTime), true); //in case the target's properties changed via some other tween or manual update by the user, we should force a render.
				}
			}
			if (this._gc && !value) {
				this._enabled(true, false);
			}
			return this;
		};


/*
 * ----------------------------------------------------------------
 * SimpleTimeline
 * ----------------------------------------------------------------
 */
		var SimpleTimeline = _class("core.SimpleTimeline", function(vars) {
			Animation.call(this, 0, vars);
			this.autoRemoveChildren = this.smoothChildTiming = true;
		});

		p = SimpleTimeline.prototype = new Animation();
		p.constructor = SimpleTimeline;
		p.kill()._gc = false;
		p._first = p._last = p._recent = null;
		p._sortChildren = false;

		p.add = p.insert = function(child, position, align, stagger) {
			var prevTween, st;
			child._startTime = Number(position || 0) + child._delay;
			if (child._paused) if (this !== child._timeline) { //we only adjust the _pauseTime if it wasn't in this timeline already. Remember, sometimes a tween will be inserted again into the same timeline when its startTime is changed so that the tweens in the TimelineLite/Max are re-ordered properly in the linked list (so everything renders in the proper order).
				child._pauseTime = child._startTime + ((this.rawTime() - child._startTime) / child._timeScale);
			}
			if (child.timeline) {
				child.timeline._remove(child, true); //removes from existing timeline so that it can be properly added to this one.
			}
			child.timeline = child._timeline = this;
			if (child._gc) {
				child._enabled(true, true);
			}
			prevTween = this._last;
			if (this._sortChildren) {
				st = child._startTime;
				while (prevTween && prevTween._startTime > st) {
					prevTween = prevTween._prev;
				}
			}
			if (prevTween) {
				child._next = prevTween._next;
				prevTween._next = child;
			} else {
				child._next = this._first;
				this._first = child;
			}
			if (child._next) {
				child._next._prev = child;
			} else {
				this._last = child;
			}
			child._prev = prevTween;
			this._recent = child;
			if (this._timeline) {
				this._uncache(true);
			}
			return this;
		};

		p._remove = function(tween, skipDisable) {
			if (tween.timeline === this) {
				if (!skipDisable) {
					tween._enabled(false, true);
				}

				if (tween._prev) {
					tween._prev._next = tween._next;
				} else if (this._first === tween) {
					this._first = tween._next;
				}
				if (tween._next) {
					tween._next._prev = tween._prev;
				} else if (this._last === tween) {
					this._last = tween._prev;
				}
				tween._next = tween._prev = tween.timeline = null;
				if (tween === this._recent) {
					this._recent = this._last;
				}

				if (this._timeline) {
					this._uncache(true);
				}
			}
			return this;
		};

		p.render = function(time, suppressEvents, force) {
			var tween = this._first,
				next;
			this._totalTime = this._time = this._rawPrevTime = time;
			while (tween) {
				next = tween._next; //record it here because the value could change after rendering...
				if (tween._active || (time >= tween._startTime && !tween._paused)) {
					if (!tween._reversed) {
						tween.render((time - tween._startTime) * tween._timeScale, suppressEvents, force);
					} else {
						tween.render(((!tween._dirty) ? tween._totalDuration : tween.totalDuration()) - ((time - tween._startTime) * tween._timeScale), suppressEvents, force);
					}
				}
				tween = next;
			}
		};

		p.rawTime = function() {
			if (!_tickerActive) {
				_ticker.wake();
			}
			return this._totalTime;
		};

/*
 * ----------------------------------------------------------------
 * TweenLite
 * ----------------------------------------------------------------
 */
		var TweenLite = _class("TweenLite", function(target, duration, vars) {
				Animation.call(this, duration, vars);
				this.render = TweenLite.prototype.render; //speed optimization (avoid prototype lookup on this "hot" method)

				if (target == null) {
					throw "Cannot tween a null target.";
				}

				this.target = target = (typeof(target) !== "string") ? target : TweenLite.selector(target) || target;

				var isSelector = (target.jquery || (target.length && target !== window && target[0] && (target[0] === window || (target[0].nodeType && target[0].style && !target.nodeType)))),
					overwrite = this.vars.overwrite,
					i, targ, targets;

				this._overwrite = overwrite = (overwrite == null) ? _overwriteLookup[TweenLite.defaultOverwrite] : (typeof(overwrite) === "number") ? overwrite >> 0 : _overwriteLookup[overwrite];

				if ((isSelector || target instanceof Array || (target.push && _isArray(target))) && typeof(target[0]) !== "number") {
					this._targets = targets = _slice(target);  //don't use Array.prototype.slice.call(target, 0) because that doesn't work in IE8 with a NodeList that's returned by querySelectorAll()
					this._propLookup = [];
					this._siblings = [];
					for (i = 0; i < targets.length; i++) {
						targ = targets[i];
						if (!targ) {
							targets.splice(i--, 1);
							continue;
						} else if (typeof(targ) === "string") {
							targ = targets[i--] = TweenLite.selector(targ); //in case it's an array of strings
							if (typeof(targ) === "string") {
								targets.splice(i+1, 1); //to avoid an endless loop (can't imagine why the selector would return a string, but just in case)
							}
							continue;
						} else if (targ.length && targ !== window && targ[0] && (targ[0] === window || (targ[0].nodeType && targ[0].style && !targ.nodeType))) { //in case the user is passing in an array of selector objects (like jQuery objects), we need to check one more level and pull things out if necessary. Also note that <select> elements pass all the criteria regarding length and the first child having style, so we must also check to ensure the target isn't an HTML node itself.
							targets.splice(i--, 1);
							this._targets = targets = targets.concat(_slice(targ));
							continue;
						}
						this._siblings[i] = _register(targ, this, false);
						if (overwrite === 1) if (this._siblings[i].length > 1) {
							_applyOverwrite(targ, this, null, 1, this._siblings[i]);
						}
					}

				} else {
					this._propLookup = {};
					this._siblings = _register(target, this, false);
					if (overwrite === 1) if (this._siblings.length > 1) {
						_applyOverwrite(target, this, null, 1, this._siblings);
					}
				}
				if (this.vars.immediateRender || (duration === 0 && this._delay === 0 && this.vars.immediateRender !== false)) {
					this._time = -_tinyNum; //forces a render without having to set the render() "force" parameter to true because we want to allow lazying by default (using the "force" parameter always forces an immediate full render)
					this.render(-this._delay);
				}
			}, true),
			_isSelector = function(v) {
				return (v && v.length && v !== window && v[0] && (v[0] === window || (v[0].nodeType && v[0].style && !v.nodeType))); //we cannot check "nodeType" if the target is window from within an iframe, otherwise it will trigger a security error in some browsers like Firefox.
			},
			_autoCSS = function(vars, target) {
				var css = {},
					p;
				for (p in vars) {
					if (!_reservedProps[p] && (!(p in target) || p === "transform" || p === "x" || p === "y" || p === "width" || p === "height" || p === "className" || p === "border") && (!_plugins[p] || (_plugins[p] && _plugins[p]._autoCSS))) { //note: <img> elements contain read-only "x" and "y" properties. We should also prioritize editing css width/height rather than the element's properties.
						css[p] = vars[p];
						delete vars[p];
					}
				}
				vars.css = css;
			};

		p = TweenLite.prototype = new Animation();
		p.constructor = TweenLite;
		p.kill()._gc = false;

//----TweenLite defaults, overwrite management, and root updates ----------------------------------------------------

		p.ratio = 0;
		p._firstPT = p._targets = p._overwrittenProps = p._startAt = null;
		p._notifyPluginsOfEnabled = p._lazy = false;

		TweenLite.version = "1.18.1";
		TweenLite.defaultEase = p._ease = new Ease(null, null, 1, 1);
		TweenLite.defaultOverwrite = "auto";
		TweenLite.ticker = _ticker;
		TweenLite.autoSleep = 120;
		TweenLite.lagSmoothing = function(threshold, adjustedLag) {
			_ticker.lagSmoothing(threshold, adjustedLag);
		};

		TweenLite.selector = window.$ || window.jQuery || function(e) {
			var selector = window.$ || window.jQuery;
			if (selector) {
				TweenLite.selector = selector;
				return selector(e);
			}
			return (typeof(document) === "undefined") ? e : (document.querySelectorAll ? document.querySelectorAll(e) : document.getElementById((e.charAt(0) === "#") ? e.substr(1) : e));
		};

		var _lazyTweens = [],
			_lazyLookup = {},
			_numbersExp = /(?:(-|-=|\+=)?\d*\.?\d*(?:e[\-+]?\d+)?)[0-9]/ig,
			//_nonNumbersExp = /(?:([\-+](?!(\d|=)))|[^\d\-+=e]|(e(?![\-+][\d])))+/ig,
			_setRatio = function(v) {
				var pt = this._firstPT,
					min = 0.000001,
					val;
				while (pt) {
					val = !pt.blob ? pt.c * v + pt.s : v ? this.join("") : this.start;
					if (pt.r) {
						val = Math.round(val);
					} else if (val < min) if (val > -min) { //prevents issues with converting very small numbers to strings in the browser
						val = 0;
					}
					if (!pt.f) {
						pt.t[pt.p] = val;
					} else if (pt.fp) {
						pt.t[pt.p](pt.fp, val);
					} else {
						pt.t[pt.p](val);
					}
					pt = pt._next;
				}
			},
			//compares two strings (start/end), finds the numbers that are different and spits back an array representing the whole value but with the changing values isolated as elements. For example, "rgb(0,0,0)" and "rgb(100,50,0)" would become ["rgb(", 0, ",", 50, ",0)"]. Notice it merges the parts that are identical (performance optimization). The array also has a linked list of PropTweens attached starting with _firstPT that contain the tweening data (t, p, s, c, f, etc.). It also stores the starting value as a "start" property so that we can revert to it if/when necessary, like when a tween rewinds fully. If the quantity of numbers differs between the start and end, it will always prioritize the end value(s). The pt parameter is optional - it's for a PropTween that will be appended to the end of the linked list and is typically for actually setting the value after all of the elements have been updated (with array.join("")).
			_blobDif = function(start, end, filter, pt) {
				var a = [start, end],
					charIndex = 0,
					s = "",
					color = 0,
					startNums, endNums, num, i, l, nonNumbers, currentNum;
				a.start = start;
				if (filter) {
					filter(a); //pass an array with the starting and ending values and let the filter do whatever it needs to the values.
					start = a[0];
					end = a[1];
				}
				a.length = 0;
				startNums = start.match(_numbersExp) || [];
				endNums = end.match(_numbersExp) || [];
				if (pt) {
					pt._next = null;
					pt.blob = 1;
					a._firstPT = pt; //apply last in the linked list (which means inserting it first)
				}
				l = endNums.length;
				for (i = 0; i < l; i++) {
					currentNum = endNums[i];
					nonNumbers = end.substr(charIndex, end.indexOf(currentNum, charIndex)-charIndex);
					s += (nonNumbers || !i) ? nonNumbers : ","; //note: SVG spec allows omission of comma/space when a negative sign is wedged between two numbers, like 2.5-5.3 instead of 2.5,-5.3 but when tweening, the negative value may switch to positive, so we insert the comma just in case.
					charIndex += nonNumbers.length;
					if (color) { //sense rgba() values and round them.
						color = (color + 1) % 5;
					} else if (nonNumbers.substr(-5) === "rgba(") {
						color = 1;
					}
					if (currentNum === startNums[i] || startNums.length <= i) {
						s += currentNum;
					} else {
						if (s) {
							a.push(s);
							s = "";
						}
						num = parseFloat(startNums[i]);
						a.push(num);
						a._firstPT = {_next: a._firstPT, t:a, p: a.length-1, s:num, c:((currentNum.charAt(1) === "=") ? parseInt(currentNum.charAt(0) + "1", 10) * parseFloat(currentNum.substr(2)) : (parseFloat(currentNum) - num)) || 0, f:0, r:(color && color < 4)};
						//note: we don't set _prev because we'll never need to remove individual PropTweens from this list.
					}
					charIndex += currentNum.length;
				}
				s += end.substr(charIndex);
				if (s) {
					a.push(s);
				}
				a.setRatio = _setRatio;
				return a;
			},
			//note: "funcParam" is only necessary for function-based getters/setters that require an extra parameter like getAttribute("width") and setAttribute("width", value). In this example, funcParam would be "width". Used by AttrPlugin for example.
			_addPropTween = function(target, prop, start, end, overwriteProp, round, funcParam, stringFilter) {
				var s = (start === "get") ? target[prop] : start,
					type = typeof(target[prop]),
					isRelative = (typeof(end) === "string" && end.charAt(1) === "="),
					pt = {t:target, p:prop, s:s, f:(type === "function"), pg:0, n:overwriteProp || prop, r:round, pr:0, c:isRelative ? parseInt(end.charAt(0) + "1", 10) * parseFloat(end.substr(2)) : (parseFloat(end) - s) || 0},
					blob, getterName;
				if (type !== "number") {
					if (type === "function" && start === "get") {
						getterName = ((prop.indexOf("set") || typeof(target["get" + prop.substr(3)]) !== "function") ? prop : "get" + prop.substr(3));
						pt.s = s = funcParam ? target[getterName](funcParam) : target[getterName]();
					}
					if (typeof(s) === "string" && (funcParam || isNaN(s))) {
						//a blob (string that has multiple numbers in it)
						pt.fp = funcParam;
						blob = _blobDif(s, end, stringFilter || TweenLite.defaultStringFilter, pt);
						pt = {t:blob, p:"setRatio", s:0, c:1, f:2, pg:0, n:overwriteProp || prop, pr:0}; //"2" indicates it's a Blob property tween. Needed for RoundPropsPlugin for example.
					} else if (!isRelative) {
						pt.s = parseFloat(s);
						pt.c = (parseFloat(end) - pt.s) || 0;
					}
				}
				if (pt.c) { //only add it to the linked list if there's a change.
					if ((pt._next = this._firstPT)) {
						pt._next._prev = pt;
					}
					this._firstPT = pt;
					return pt;
				}
			},
			_internals = TweenLite._internals = {isArray:_isArray, isSelector:_isSelector, lazyTweens:_lazyTweens, blobDif:_blobDif}, //gives us a way to expose certain private values to other GreenSock classes without contaminating tha main TweenLite object.
			_plugins = TweenLite._plugins = {},
			_tweenLookup = _internals.tweenLookup = {},
			_tweenLookupNum = 0,
			_reservedProps = _internals.reservedProps = {ease:1, delay:1, overwrite:1, onComplete:1, onCompleteParams:1, onCompleteScope:1, useFrames:1, runBackwards:1, startAt:1, onUpdate:1, onUpdateParams:1, onUpdateScope:1, onStart:1, onStartParams:1, onStartScope:1, onReverseComplete:1, onReverseCompleteParams:1, onReverseCompleteScope:1, onRepeat:1, onRepeatParams:1, onRepeatScope:1, easeParams:1, yoyo:1, immediateRender:1, repeat:1, repeatDelay:1, data:1, paused:1, reversed:1, autoCSS:1, lazy:1, onOverwrite:1, callbackScope:1, stringFilter:1},
			_overwriteLookup = {none:0, all:1, auto:2, concurrent:3, allOnStart:4, preexisting:5, "true":1, "false":0},
			_rootFramesTimeline = Animation._rootFramesTimeline = new SimpleTimeline(),
			_rootTimeline = Animation._rootTimeline = new SimpleTimeline(),
			_nextGCFrame = 30,
			_lazyRender = _internals.lazyRender = function() {
				var i = _lazyTweens.length,
					tween;
				_lazyLookup = {};
				while (--i > -1) {
					tween = _lazyTweens[i];
					if (tween && tween._lazy !== false) {
						tween.render(tween._lazy[0], tween._lazy[1], true);
						tween._lazy = false;
					}
				}
				_lazyTweens.length = 0;
			};

		_rootTimeline._startTime = _ticker.time;
		_rootFramesTimeline._startTime = _ticker.frame;
		_rootTimeline._active = _rootFramesTimeline._active = true;
		setTimeout(_lazyRender, 1); //on some mobile devices, there isn't a "tick" before code runs which means any lazy renders wouldn't run before the next official "tick".

		Animation._updateRoot = TweenLite.render = function() {
				var i, a, p;
				if (_lazyTweens.length) { //if code is run outside of the requestAnimationFrame loop, there may be tweens queued AFTER the engine refreshed, so we need to ensure any pending renders occur before we refresh again.
					_lazyRender();
				}
				_rootTimeline.render((_ticker.time - _rootTimeline._startTime) * _rootTimeline._timeScale, false, false);
				_rootFramesTimeline.render((_ticker.frame - _rootFramesTimeline._startTime) * _rootFramesTimeline._timeScale, false, false);
				if (_lazyTweens.length) {
					_lazyRender();
				}
				if (_ticker.frame >= _nextGCFrame) { //dump garbage every 120 frames or whatever the user sets TweenLite.autoSleep to
					_nextGCFrame = _ticker.frame + (parseInt(TweenLite.autoSleep, 10) || 120);
					for (p in _tweenLookup) {
						a = _tweenLookup[p].tweens;
						i = a.length;
						while (--i > -1) {
							if (a[i]._gc) {
								a.splice(i, 1);
							}
						}
						if (a.length === 0) {
							delete _tweenLookup[p];
						}
					}
					//if there are no more tweens in the root timelines, or if they're all paused, make the _timer sleep to reduce load on the CPU slightly
					p = _rootTimeline._first;
					if (!p || p._paused) if (TweenLite.autoSleep && !_rootFramesTimeline._first && _ticker._listeners.tick.length === 1) {
						while (p && p._paused) {
							p = p._next;
						}
						if (!p) {
							_ticker.sleep();
						}
					}
				}
			};

		_ticker.addEventListener("tick", Animation._updateRoot, false);

		var _register = function(target, tween, scrub) {
				var id = target._gsTweenID, a, i;
				if (!_tweenLookup[id || (target._gsTweenID = id = "t" + (_tweenLookupNum++))]) {
					_tweenLookup[id] = {target:target, tweens:[]};
				}
				if (tween) {
					a = _tweenLookup[id].tweens;
					a[(i = a.length)] = tween;
					if (scrub) {
						while (--i > -1) {
							if (a[i] === tween) {
								a.splice(i, 1);
							}
						}
					}
				}
				return _tweenLookup[id].tweens;
			},
			_onOverwrite = function(overwrittenTween, overwritingTween, target, killedProps) {
				var func = overwrittenTween.vars.onOverwrite, r1, r2;
				if (func) {
					r1 = func(overwrittenTween, overwritingTween, target, killedProps);
				}
				func = TweenLite.onOverwrite;
				if (func) {
					r2 = func(overwrittenTween, overwritingTween, target, killedProps);
				}
				return (r1 !== false && r2 !== false);
			},
			_applyOverwrite = function(target, tween, props, mode, siblings) {
				var i, changed, curTween, l;
				if (mode === 1 || mode >= 4) {
					l = siblings.length;
					for (i = 0; i < l; i++) {
						if ((curTween = siblings[i]) !== tween) {
							if (!curTween._gc) {
								if (curTween._kill(null, target, tween)) {
									changed = true;
								}
							}
						} else if (mode === 5) {
							break;
						}
					}
					return changed;
				}
				//NOTE: Add 0.0000000001 to overcome floating point errors that can cause the startTime to be VERY slightly off (when a tween's time() is set for example)
				var startTime = tween._startTime + _tinyNum,
					overlaps = [],
					oCount = 0,
					zeroDur = (tween._duration === 0),
					globalStart;
				i = siblings.length;
				while (--i > -1) {
					if ((curTween = siblings[i]) === tween || curTween._gc || curTween._paused) {
						//ignore
					} else if (curTween._timeline !== tween._timeline) {
						globalStart = globalStart || _checkOverlap(tween, 0, zeroDur);
						if (_checkOverlap(curTween, globalStart, zeroDur) === 0) {
							overlaps[oCount++] = curTween;
						}
					} else if (curTween._startTime <= startTime) if (curTween._startTime + curTween.totalDuration() / curTween._timeScale > startTime) if (!((zeroDur || !curTween._initted) && startTime - curTween._startTime <= 0.0000000002)) {
						overlaps[oCount++] = curTween;
					}
				}

				i = oCount;
				while (--i > -1) {
					curTween = overlaps[i];
					if (mode === 2) if (curTween._kill(props, target, tween)) {
						changed = true;
					}
					if (mode !== 2 || (!curTween._firstPT && curTween._initted)) {
						if (mode !== 2 && !_onOverwrite(curTween, tween)) {
							continue;
						}
						if (curTween._enabled(false, false)) { //if all property tweens have been overwritten, kill the tween.
							changed = true;
						}
					}
				}
				return changed;
			},
			_checkOverlap = function(tween, reference, zeroDur) {
				var tl = tween._timeline,
					ts = tl._timeScale,
					t = tween._startTime;
				while (tl._timeline) {
					t += tl._startTime;
					ts *= tl._timeScale;
					if (tl._paused) {
						return -100;
					}
					tl = tl._timeline;
				}
				t /= ts;
				return (t > reference) ? t - reference : ((zeroDur && t === reference) || (!tween._initted && t - reference < 2 * _tinyNum)) ? _tinyNum : ((t += tween.totalDuration() / tween._timeScale / ts) > reference + _tinyNum) ? 0 : t - reference - _tinyNum;
			};


//---- TweenLite instance methods -----------------------------------------------------------------------------

		p._init = function() {
			var v = this.vars,
				op = this._overwrittenProps,
				dur = this._duration,
				immediate = !!v.immediateRender,
				ease = v.ease,
				i, initPlugins, pt, p, startVars;
			if (v.startAt) {
				if (this._startAt) {
					this._startAt.render(-1, true); //if we've run a startAt previously (when the tween instantiated), we should revert it so that the values re-instantiate correctly particularly for relative tweens. Without this, a TweenLite.fromTo(obj, 1, {x:"+=100"}, {x:"-=100"}), for example, would actually jump to +=200 because the startAt would run twice, doubling the relative change.
					this._startAt.kill();
				}
				startVars = {};
				for (p in v.startAt) { //copy the properties/values into a new object to avoid collisions, like var to = {x:0}, from = {x:500}; timeline.fromTo(e, 1, from, to).fromTo(e, 1, to, from);
					startVars[p] = v.startAt[p];
				}
				startVars.overwrite = false;
				startVars.immediateRender = true;
				startVars.lazy = (immediate && v.lazy !== false);
				startVars.startAt = startVars.delay = null; //no nesting of startAt objects allowed (otherwise it could cause an infinite loop).
				this._startAt = TweenLite.to(this.target, 0, startVars);
				if (immediate) {
					if (this._time > 0) {
						this._startAt = null; //tweens that render immediately (like most from() and fromTo() tweens) shouldn't revert when their parent timeline's playhead goes backward past the startTime because the initial render could have happened anytime and it shouldn't be directly correlated to this tween's startTime. Imagine setting up a complex animation where the beginning states of various objects are rendered immediately but the tween doesn't happen for quite some time - if we revert to the starting values as soon as the playhead goes backward past the tween's startTime, it will throw things off visually. Reversion should only happen in TimelineLite/Max instances where immediateRender was false (which is the default in the convenience methods like from()).
					} else if (dur !== 0) {
						return; //we skip initialization here so that overwriting doesn't occur until the tween actually begins. Otherwise, if you create several immediateRender:true tweens of the same target/properties to drop into a TimelineLite or TimelineMax, the last one created would overwrite the first ones because they didn't get placed into the timeline yet before the first render occurs and kicks in overwriting.
					}
				}
			} else if (v.runBackwards && dur !== 0) {
				//from() tweens must be handled uniquely: their beginning values must be rendered but we don't want overwriting to occur yet (when time is still 0). Wait until the tween actually begins before doing all the routines like overwriting. At that time, we should render at the END of the tween to ensure that things initialize correctly (remember, from() tweens go backwards)
				if (this._startAt) {
					this._startAt.render(-1, true);
					this._startAt.kill();
					this._startAt = null;
				} else {
					if (this._time !== 0) { //in rare cases (like if a from() tween runs and then is invalidate()-ed), immediateRender could be true but the initial forced-render gets skipped, so there's no need to force the render in this context when the _time is greater than 0
						immediate = false;
					}
					pt = {};
					for (p in v) { //copy props into a new object and skip any reserved props, otherwise onComplete or onUpdate or onStart could fire. We should, however, permit autoCSS to go through.
						if (!_reservedProps[p] || p === "autoCSS") {
							pt[p] = v[p];
						}
					}
					pt.overwrite = 0;
					pt.data = "isFromStart"; //we tag the tween with as "isFromStart" so that if [inside a plugin] we need to only do something at the very END of a tween, we have a way of identifying this tween as merely the one that's setting the beginning values for a "from()" tween. For example, clearProps in CSSPlugin should only get applied at the very END of a tween and without this tag, from(...{height:100, clearProps:"height", delay:1}) would wipe the height at the beginning of the tween and after 1 second, it'd kick back in.
					pt.lazy = (immediate && v.lazy !== false);
					pt.immediateRender = immediate; //zero-duration tweens render immediately by default, but if we're not specifically instructed to render this tween immediately, we should skip this and merely _init() to record the starting values (rendering them immediately would push them to completion which is wasteful in that case - we'd have to render(-1) immediately after)
					this._startAt = TweenLite.to(this.target, 0, pt);
					if (!immediate) {
						this._startAt._init(); //ensures that the initial values are recorded
						this._startAt._enabled(false); //no need to have the tween render on the next cycle. Disable it because we'll always manually control the renders of the _startAt tween.
						if (this.vars.immediateRender) {
							this._startAt = null;
						}
					} else if (this._time === 0) {
						return;
					}
				}
			}
			this._ease = ease = (!ease) ? TweenLite.defaultEase : (ease instanceof Ease) ? ease : (typeof(ease) === "function") ? new Ease(ease, v.easeParams) : _easeMap[ease] || TweenLite.defaultEase;
			if (v.easeParams instanceof Array && ease.config) {
				this._ease = ease.config.apply(ease, v.easeParams);
			}
			this._easeType = this._ease._type;
			this._easePower = this._ease._power;
			this._firstPT = null;

			if (this._targets) {
				i = this._targets.length;
				while (--i > -1) {
					if ( this._initProps( this._targets[i], (this._propLookup[i] = {}), this._siblings[i], (op ? op[i] : null)) ) {
						initPlugins = true;
					}
				}
			} else {
				initPlugins = this._initProps(this.target, this._propLookup, this._siblings, op);
			}

			if (initPlugins) {
				TweenLite._onPluginEvent("_onInitAllProps", this); //reorders the array in order of priority. Uses a static TweenPlugin method in order to minimize file size in TweenLite
			}
			if (op) if (!this._firstPT) if (typeof(this.target) !== "function") { //if all tweening properties have been overwritten, kill the tween. If the target is a function, it's probably a delayedCall so let it live.
				this._enabled(false, false);
			}
			if (v.runBackwards) {
				pt = this._firstPT;
				while (pt) {
					pt.s += pt.c;
					pt.c = -pt.c;
					pt = pt._next;
				}
			}
			this._onUpdate = v.onUpdate;
			this._initted = true;
		};

		p._initProps = function(target, propLookup, siblings, overwrittenProps) {
			var p, i, initPlugins, plugin, pt, v;
			if (target == null) {
				return false;
			}

			if (_lazyLookup[target._gsTweenID]) {
				_lazyRender(); //if other tweens of the same target have recently initted but haven't rendered yet, we've got to force the render so that the starting values are correct (imagine populating a timeline with a bunch of sequential tweens and then jumping to the end)
			}

			if (!this.vars.css) if (target.style) if (target !== window && target.nodeType) if (_plugins.css) if (this.vars.autoCSS !== false) { //it's so common to use TweenLite/Max to animate the css of DOM elements, we assume that if the target is a DOM element, that's what is intended (a convenience so that users don't have to wrap things in css:{}, although we still recommend it for a slight performance boost and better specificity). Note: we cannot check "nodeType" on the window inside an iframe.
				_autoCSS(this.vars, target);
			}
			for (p in this.vars) {
				v = this.vars[p];
				if (_reservedProps[p]) {
					if (v) if ((v instanceof Array) || (v.push && _isArray(v))) if (v.join("").indexOf("{self}") !== -1) {
						this.vars[p] = v = this._swapSelfInParams(v, this);
					}

				} else if (_plugins[p] && (plugin = new _plugins[p]())._onInitTween(target, this.vars[p], this)) {

					//t - target 		[object]
					//p - property 		[string]
					//s - start			[number]
					//c - change		[number]
					//f - isFunction	[boolean]
					//n - name			[string]
					//pg - isPlugin 	[boolean]
					//pr - priority		[number]
					this._firstPT = pt = {_next:this._firstPT, t:plugin, p:"setRatio", s:0, c:1, f:1, n:p, pg:1, pr:plugin._priority};
					i = plugin._overwriteProps.length;
					while (--i > -1) {
						propLookup[plugin._overwriteProps[i]] = this._firstPT;
					}
					if (plugin._priority || plugin._onInitAllProps) {
						initPlugins = true;
					}
					if (plugin._onDisable || plugin._onEnable) {
						this._notifyPluginsOfEnabled = true;
					}
					if (pt._next) {
						pt._next._prev = pt;
					}

				} else {
					propLookup[p] = _addPropTween.call(this, target, p, "get", v, p, 0, null, this.vars.stringFilter);
				}
			}

			if (overwrittenProps) if (this._kill(overwrittenProps, target)) { //another tween may have tried to overwrite properties of this tween before init() was called (like if two tweens start at the same time, the one created second will run first)
				return this._initProps(target, propLookup, siblings, overwrittenProps);
			}
			if (this._overwrite > 1) if (this._firstPT) if (siblings.length > 1) if (_applyOverwrite(target, this, propLookup, this._overwrite, siblings)) {
				this._kill(propLookup, target);
				return this._initProps(target, propLookup, siblings, overwrittenProps);
			}
			if (this._firstPT) if ((this.vars.lazy !== false && this._duration) || (this.vars.lazy && !this._duration)) { //zero duration tweens don't lazy render by default; everything else does.
				_lazyLookup[target._gsTweenID] = true;
			}
			return initPlugins;
		};

		p.render = function(time, suppressEvents, force) {
			var prevTime = this._time,
				duration = this._duration,
				prevRawPrevTime = this._rawPrevTime,
				isComplete, callback, pt, rawPrevTime;
			if (time >= duration - 0.0000001) { //to work around occasional floating point math artifacts.
				this._totalTime = this._time = duration;
				this.ratio = this._ease._calcEnd ? this._ease.getRatio(1) : 1;
				if (!this._reversed ) {
					isComplete = true;
					callback = "onComplete";
					force = (force || this._timeline.autoRemoveChildren); //otherwise, if the animation is unpaused/activated after it's already finished, it doesn't get removed from the parent timeline.
				}
				if (duration === 0) if (this._initted || !this.vars.lazy || force) { //zero-duration tweens are tricky because we must discern the momentum/direction of time in order to determine whether the starting values should be rendered or the ending values. If the "playhead" of its timeline goes past the zero-duration tween in the forward direction or lands directly on it, the end values should be rendered, but if the timeline's "playhead" moves past it in the backward direction (from a postitive time to a negative time), the starting values must be rendered.
					if (this._startTime === this._timeline._duration) { //if a zero-duration tween is at the VERY end of a timeline and that timeline renders at its end, it will typically add a tiny bit of cushion to the render time to prevent rounding errors from getting in the way of tweens rendering their VERY end. If we then reverse() that timeline, the zero-duration tween will trigger its onReverseComplete even though technically the playhead didn't pass over it again. It's a very specific edge case we must accommodate.
						time = 0;
					}
					if (prevRawPrevTime < 0 || (time <= 0 && time >= -0.0000001) || (prevRawPrevTime === _tinyNum && this.data !== "isPause")) if (prevRawPrevTime !== time) { //note: when this.data is "isPause", it's a callback added by addPause() on a timeline that we should not be triggered when LEAVING its exact start time. In other words, tl.addPause(1).play(1) shouldn't pause.
						force = true;
						if (prevRawPrevTime > _tinyNum) {
							callback = "onReverseComplete";
						}
					}
					this._rawPrevTime = rawPrevTime = (!suppressEvents || time || prevRawPrevTime === time) ? time : _tinyNum; //when the playhead arrives at EXACTLY time 0 (right on top) of a zero-duration tween, we need to discern if events are suppressed so that when the playhead moves again (next time), it'll trigger the callback. If events are NOT suppressed, obviously the callback would be triggered in this render. Basically, the callback should fire either when the playhead ARRIVES or LEAVES this exact spot, not both. Imagine doing a timeline.seek(0) and there's a callback that sits at 0. Since events are suppressed on that seek() by default, nothing will fire, but when the playhead moves off of that position, the callback should fire. This behavior is what people intuitively expect. We set the _rawPrevTime to be a precise tiny number to indicate this scenario rather than using another property/variable which would increase memory usage. This technique is less readable, but more efficient.
				}

			} else if (time < 0.0000001) { //to work around occasional floating point math artifacts, round super small values to 0.
				this._totalTime = this._time = 0;
				this.ratio = this._ease._calcEnd ? this._ease.getRatio(0) : 0;
				if (prevTime !== 0 || (duration === 0 && prevRawPrevTime > 0)) {
					callback = "onReverseComplete";
					isComplete = this._reversed;
				}
				if (time < 0) {
					this._active = false;
					if (duration === 0) if (this._initted || !this.vars.lazy || force) { //zero-duration tweens are tricky because we must discern the momentum/direction of time in order to determine whether the starting values should be rendered or the ending values. If the "playhead" of its timeline goes past the zero-duration tween in the forward direction or lands directly on it, the end values should be rendered, but if the timeline's "playhead" moves past it in the backward direction (from a postitive time to a negative time), the starting values must be rendered.
						if (prevRawPrevTime >= 0 && !(prevRawPrevTime === _tinyNum && this.data === "isPause")) {
							force = true;
						}
						this._rawPrevTime = rawPrevTime = (!suppressEvents || time || prevRawPrevTime === time) ? time : _tinyNum; //when the playhead arrives at EXACTLY time 0 (right on top) of a zero-duration tween, we need to discern if events are suppressed so that when the playhead moves again (next time), it'll trigger the callback. If events are NOT suppressed, obviously the callback would be triggered in this render. Basically, the callback should fire either when the playhead ARRIVES or LEAVES this exact spot, not both. Imagine doing a timeline.seek(0) and there's a callback that sits at 0. Since events are suppressed on that seek() by default, nothing will fire, but when the playhead moves off of that position, the callback should fire. This behavior is what people intuitively expect. We set the _rawPrevTime to be a precise tiny number to indicate this scenario rather than using another property/variable which would increase memory usage. This technique is less readable, but more efficient.
					}
				}
				if (!this._initted) { //if we render the very beginning (time == 0) of a fromTo(), we must force the render (normal tweens wouldn't need to render at a time of 0 when the prevTime was also 0). This is also mandatory to make sure overwriting kicks in immediately.
					force = true;
				}
			} else {
				this._totalTime = this._time = time;

				if (this._easeType) {
					var r = time / duration, type = this._easeType, pow = this._easePower;
					if (type === 1 || (type === 3 && r >= 0.5)) {
						r = 1 - r;
					}
					if (type === 3) {
						r *= 2;
					}
					if (pow === 1) {
						r *= r;
					} else if (pow === 2) {
						r *= r * r;
					} else if (pow === 3) {
						r *= r * r * r;
					} else if (pow === 4) {
						r *= r * r * r * r;
					}

					if (type === 1) {
						this.ratio = 1 - r;
					} else if (type === 2) {
						this.ratio = r;
					} else if (time / duration < 0.5) {
						this.ratio = r / 2;
					} else {
						this.ratio = 1 - (r / 2);
					}

				} else {
					this.ratio = this._ease.getRatio(time / duration);
				}
			}

			if (this._time === prevTime && !force) {
				return;
			} else if (!this._initted) {
				this._init();
				if (!this._initted || this._gc) { //immediateRender tweens typically won't initialize until the playhead advances (_time is greater than 0) in order to ensure that overwriting occurs properly. Also, if all of the tweening properties have been overwritten (which would cause _gc to be true, as set in _init()), we shouldn't continue otherwise an onStart callback could be called for example.
					return;
				} else if (!force && this._firstPT && ((this.vars.lazy !== false && this._duration) || (this.vars.lazy && !this._duration))) {
					this._time = this._totalTime = prevTime;
					this._rawPrevTime = prevRawPrevTime;
					_lazyTweens.push(this);
					this._lazy = [time, suppressEvents];
					return;
				}
				//_ease is initially set to defaultEase, so now that init() has run, _ease is set properly and we need to recalculate the ratio. Overall this is faster than using conditional logic earlier in the method to avoid having to set ratio twice because we only init() once but renderTime() gets called VERY frequently.
				if (this._time && !isComplete) {
					this.ratio = this._ease.getRatio(this._time / duration);
				} else if (isComplete && this._ease._calcEnd) {
					this.ratio = this._ease.getRatio((this._time === 0) ? 0 : 1);
				}
			}
			if (this._lazy !== false) { //in case a lazy render is pending, we should flush it because the new render is occurring now (imagine a lazy tween instantiating and then immediately the user calls tween.seek(tween.duration()), skipping to the end - the end render would be forced, and then if we didn't flush the lazy render, it'd fire AFTER the seek(), rendering it at the wrong time.
				this._lazy = false;
			}
			if (!this._active) if (!this._paused && this._time !== prevTime && time >= 0) {
				this._active = true;  //so that if the user renders a tween (as opposed to the timeline rendering it), the timeline is forced to re-render and align it with the proper time/frame on the next rendering cycle. Maybe the tween already finished but the user manually re-renders it as halfway done.
			}
			if (prevTime === 0) {
				if (this._startAt) {
					if (time >= 0) {
						this._startAt.render(time, suppressEvents, force);
					} else if (!callback) {
						callback = "_dummyGS"; //if no callback is defined, use a dummy value just so that the condition at the end evaluates as true because _startAt should render AFTER the normal render loop when the time is negative. We could handle this in a more intuitive way, of course, but the render loop is the MOST important thing to optimize, so this technique allows us to avoid adding extra conditional logic in a high-frequency area.
					}
				}
				if (this.vars.onStart) if (this._time !== 0 || duration === 0) if (!suppressEvents) {
					this._callback("onStart");
				}
			}
			pt = this._firstPT;
			while (pt) {
				if (pt.f) {
					pt.t[pt.p](pt.c * this.ratio + pt.s);
				} else {
					pt.t[pt.p] = pt.c * this.ratio + pt.s;
				}
				pt = pt._next;
			}

			if (this._onUpdate) {
				if (time < 0) if (this._startAt && time !== -0.0001) { //if the tween is positioned at the VERY beginning (_startTime 0) of its parent timeline, it's illegal for the playhead to go back further, so we should not render the recorded startAt values.
					this._startAt.render(time, suppressEvents, force); //note: for performance reasons, we tuck this conditional logic inside less traveled areas (most tweens don't have an onUpdate). We'd just have it at the end before the onComplete, but the values should be updated before any onUpdate is called, so we ALSO put it here and then if it's not called, we do so later near the onComplete.
				}
				if (!suppressEvents) if (this._time !== prevTime || isComplete) {
					this._callback("onUpdate");
				}
			}
			if (callback) if (!this._gc || force) { //check _gc because there's a chance that kill() could be called in an onUpdate
				if (time < 0 && this._startAt && !this._onUpdate && time !== -0.0001) { //-0.0001 is a special value that we use when looping back to the beginning of a repeated TimelineMax, in which case we shouldn't render the _startAt values.
					this._startAt.render(time, suppressEvents, force);
				}
				if (isComplete) {
					if (this._timeline.autoRemoveChildren) {
						this._enabled(false, false);
					}
					this._active = false;
				}
				if (!suppressEvents && this.vars[callback]) {
					this._callback(callback);
				}
				if (duration === 0 && this._rawPrevTime === _tinyNum && rawPrevTime !== _tinyNum) { //the onComplete or onReverseComplete could trigger movement of the playhead and for zero-duration tweens (which must discern direction) that land directly back on their start time, we don't want to fire again on the next render. Think of several addPause()'s in a timeline that forces the playhead to a certain spot, but what if it's already paused and another tween is tweening the "time" of the timeline? Each time it moves [forward] past that spot, it would move back, and since suppressEvents is true, it'd reset _rawPrevTime to _tinyNum so that when it begins again, the callback would fire (so ultimately it could bounce back and forth during that tween). Again, this is a very uncommon scenario, but possible nonetheless.
					this._rawPrevTime = 0;
				}
			}
		};

		p._kill = function(vars, target, overwritingTween) {
			if (vars === "all") {
				vars = null;
			}
			if (vars == null) if (target == null || target === this.target) {
				this._lazy = false;
				return this._enabled(false, false);
			}
			target = (typeof(target) !== "string") ? (target || this._targets || this.target) : TweenLite.selector(target) || target;
			var simultaneousOverwrite = (overwritingTween && this._time && overwritingTween._startTime === this._startTime && this._timeline === overwritingTween._timeline),
				i, overwrittenProps, p, pt, propLookup, changed, killProps, record, killed;
			if ((_isArray(target) || _isSelector(target)) && typeof(target[0]) !== "number") {
				i = target.length;
				while (--i > -1) {
					if (this._kill(vars, target[i], overwritingTween)) {
						changed = true;
					}
				}
			} else {
				if (this._targets) {
					i = this._targets.length;
					while (--i > -1) {
						if (target === this._targets[i]) {
							propLookup = this._propLookup[i] || {};
							this._overwrittenProps = this._overwrittenProps || [];
							overwrittenProps = this._overwrittenProps[i] = vars ? this._overwrittenProps[i] || {} : "all";
							break;
						}
					}
				} else if (target !== this.target) {
					return false;
				} else {
					propLookup = this._propLookup;
					overwrittenProps = this._overwrittenProps = vars ? this._overwrittenProps || {} : "all";
				}

				if (propLookup) {
					killProps = vars || propLookup;
					record = (vars !== overwrittenProps && overwrittenProps !== "all" && vars !== propLookup && (typeof(vars) !== "object" || !vars._tempKill)); //_tempKill is a super-secret way to delete a particular tweening property but NOT have it remembered as an official overwritten property (like in BezierPlugin)
					if (overwritingTween && (TweenLite.onOverwrite || this.vars.onOverwrite)) {
						for (p in killProps) {
							if (propLookup[p]) {
								if (!killed) {
									killed = [];
								}
								killed.push(p);
							}
						}
						if ((killed || !vars) && !_onOverwrite(this, overwritingTween, target, killed)) { //if the onOverwrite returned false, that means the user wants to override the overwriting (cancel it).
							return false;
						}
					}

					for (p in killProps) {
						if ((pt = propLookup[p])) {
							if (simultaneousOverwrite) { //if another tween overwrites this one and they both start at exactly the same time, yet this tween has already rendered once (for example, at 0.001) because it's first in the queue, we should revert the values to where they were at 0 so that the starting values aren't contaminated on the overwriting tween.
								if (pt.f) {
									pt.t[pt.p](pt.s);
								} else {
									pt.t[pt.p] = pt.s;
								}
								changed = true;
							}
							if (pt.pg && pt.t._kill(killProps)) {
								changed = true; //some plugins need to be notified so they can perform cleanup tasks first
							}
							if (!pt.pg || pt.t._overwriteProps.length === 0) {
								if (pt._prev) {
									pt._prev._next = pt._next;
								} else if (pt === this._firstPT) {
									this._firstPT = pt._next;
								}
								if (pt._next) {
									pt._next._prev = pt._prev;
								}
								pt._next = pt._prev = null;
							}
							delete propLookup[p];
						}
						if (record) {
							overwrittenProps[p] = 1;
						}
					}
					if (!this._firstPT && this._initted) { //if all tweening properties are killed, kill the tween. Without this line, if there's a tween with multiple targets and then you killTweensOf() each target individually, the tween would technically still remain active and fire its onComplete even though there aren't any more properties tweening.
						this._enabled(false, false);
					}
				}
			}
			return changed;
		};

		p.invalidate = function() {
			if (this._notifyPluginsOfEnabled) {
				TweenLite._onPluginEvent("_onDisable", this);
			}
			this._firstPT = this._overwrittenProps = this._startAt = this._onUpdate = null;
			this._notifyPluginsOfEnabled = this._active = this._lazy = false;
			this._propLookup = (this._targets) ? {} : [];
			Animation.prototype.invalidate.call(this);
			if (this.vars.immediateRender) {
				this._time = -_tinyNum; //forces a render without having to set the render() "force" parameter to true because we want to allow lazying by default (using the "force" parameter always forces an immediate full render)
				this.render(-this._delay);
			}
			return this;
		};

		p._enabled = function(enabled, ignoreTimeline) {
			if (!_tickerActive) {
				_ticker.wake();
			}
			if (enabled && this._gc) {
				var targets = this._targets,
					i;
				if (targets) {
					i = targets.length;
					while (--i > -1) {
						this._siblings[i] = _register(targets[i], this, true);
					}
				} else {
					this._siblings = _register(this.target, this, true);
				}
			}
			Animation.prototype._enabled.call(this, enabled, ignoreTimeline);
			if (this._notifyPluginsOfEnabled) if (this._firstPT) {
				return TweenLite._onPluginEvent((enabled ? "_onEnable" : "_onDisable"), this);
			}
			return false;
		};


//----TweenLite static methods -----------------------------------------------------

		TweenLite.to = function(target, duration, vars) {
			return new TweenLite(target, duration, vars);
		};

		TweenLite.from = function(target, duration, vars) {
			vars.runBackwards = true;
			vars.immediateRender = (vars.immediateRender != false);
			return new TweenLite(target, duration, vars);
		};

		TweenLite.fromTo = function(target, duration, fromVars, toVars) {
			toVars.startAt = fromVars;
			toVars.immediateRender = (toVars.immediateRender != false && fromVars.immediateRender != false);
			return new TweenLite(target, duration, toVars);
		};

		TweenLite.delayedCall = function(delay, callback, params, scope, useFrames) {
			return new TweenLite(callback, 0, {delay:delay, onComplete:callback, onCompleteParams:params, callbackScope:scope, onReverseComplete:callback, onReverseCompleteParams:params, immediateRender:false, lazy:false, useFrames:useFrames, overwrite:0});
		};

		TweenLite.set = function(target, vars) {
			return new TweenLite(target, 0, vars);
		};

		TweenLite.getTweensOf = function(target, onlyActive) {
			if (target == null) { return []; }
			target = (typeof(target) !== "string") ? target : TweenLite.selector(target) || target;
			var i, a, j, t;
			if ((_isArray(target) || _isSelector(target)) && typeof(target[0]) !== "number") {
				i = target.length;
				a = [];
				while (--i > -1) {
					a = a.concat(TweenLite.getTweensOf(target[i], onlyActive));
				}
				i = a.length;
				//now get rid of any duplicates (tweens of arrays of objects could cause duplicates)
				while (--i > -1) {
					t = a[i];
					j = i;
					while (--j > -1) {
						if (t === a[j]) {
							a.splice(i, 1);
						}
					}
				}
			} else {
				a = _register(target).concat();
				i = a.length;
				while (--i > -1) {
					if (a[i]._gc || (onlyActive && !a[i].isActive())) {
						a.splice(i, 1);
					}
				}
			}
			return a;
		};

		TweenLite.killTweensOf = TweenLite.killDelayedCallsTo = function(target, onlyActive, vars) {
			if (typeof(onlyActive) === "object") {
				vars = onlyActive; //for backwards compatibility (before "onlyActive" parameter was inserted)
				onlyActive = false;
			}
			var a = TweenLite.getTweensOf(target, onlyActive),
				i = a.length;
			while (--i > -1) {
				a[i]._kill(vars, target);
			}
		};



/*
 * ----------------------------------------------------------------
 * TweenPlugin   (could easily be split out as a separate file/class, but included for ease of use (so that people don't need to include another script call before loading plugins which is easy to forget)
 * ----------------------------------------------------------------
 */
		var TweenPlugin = _class("plugins.TweenPlugin", function(props, priority) {
					this._overwriteProps = (props || "").split(",");
					this._propName = this._overwriteProps[0];
					this._priority = priority || 0;
					this._super = TweenPlugin.prototype;
				}, true);

		p = TweenPlugin.prototype;
		TweenPlugin.version = "1.18.0";
		TweenPlugin.API = 2;
		p._firstPT = null;
		p._addTween = _addPropTween;
		p.setRatio = _setRatio;

		p._kill = function(lookup) {
			var a = this._overwriteProps,
				pt = this._firstPT,
				i;
			if (lookup[this._propName] != null) {
				this._overwriteProps = [];
			} else {
				i = a.length;
				while (--i > -1) {
					if (lookup[a[i]] != null) {
						a.splice(i, 1);
					}
				}
			}
			while (pt) {
				if (lookup[pt.n] != null) {
					if (pt._next) {
						pt._next._prev = pt._prev;
					}
					if (pt._prev) {
						pt._prev._next = pt._next;
						pt._prev = null;
					} else if (this._firstPT === pt) {
						this._firstPT = pt._next;
					}
				}
				pt = pt._next;
			}
			return false;
		};

		p._roundProps = function(lookup, value) {
			var pt = this._firstPT;
			while (pt) {
				if (lookup[this._propName] || (pt.n != null && lookup[ pt.n.split(this._propName + "_").join("") ])) { //some properties that are very plugin-specific add a prefix named after the _propName plus an underscore, so we need to ignore that extra stuff here.
					pt.r = value;
				}
				pt = pt._next;
			}
		};

		TweenLite._onPluginEvent = function(type, tween) {
			var pt = tween._firstPT,
				changed, pt2, first, last, next;
			if (type === "_onInitAllProps") {
				//sorts the PropTween linked list in order of priority because some plugins need to render earlier/later than others, like MotionBlurPlugin applies its effects after all x/y/alpha tweens have rendered on each frame.
				while (pt) {
					next = pt._next;
					pt2 = first;
					while (pt2 && pt2.pr > pt.pr) {
						pt2 = pt2._next;
					}
					if ((pt._prev = pt2 ? pt2._prev : last)) {
						pt._prev._next = pt;
					} else {
						first = pt;
					}
					if ((pt._next = pt2)) {
						pt2._prev = pt;
					} else {
						last = pt;
					}
					pt = next;
				}
				pt = tween._firstPT = first;
			}
			while (pt) {
				if (pt.pg) if (typeof(pt.t[type]) === "function") if (pt.t[type]()) {
					changed = true;
				}
				pt = pt._next;
			}
			return changed;
		};

		TweenPlugin.activate = function(plugins) {
			var i = plugins.length;
			while (--i > -1) {
				if (plugins[i].API === TweenPlugin.API) {
					_plugins[(new plugins[i]())._propName] = plugins[i];
				}
			}
			return true;
		};

		//provides a more concise way to define plugins that have no dependencies besides TweenPlugin and TweenLite, wrapping common boilerplate stuff into one function (added in 1.9.0). You don't NEED to use this to define a plugin - the old way still works and can be useful in certain (rare) situations.
		_gsDefine.plugin = function(config) {
			if (!config || !config.propName || !config.init || !config.API) { throw "illegal plugin definition."; }
			var propName = config.propName,
				priority = config.priority || 0,
				overwriteProps = config.overwriteProps,
				map = {init:"_onInitTween", set:"setRatio", kill:"_kill", round:"_roundProps", initAll:"_onInitAllProps"},
				Plugin = _class("plugins." + propName.charAt(0).toUpperCase() + propName.substr(1) + "Plugin",
					function() {
						TweenPlugin.call(this, propName, priority);
						this._overwriteProps = overwriteProps || [];
					}, (config.global === true)),
				p = Plugin.prototype = new TweenPlugin(propName),
				prop;
			p.constructor = Plugin;
			Plugin.API = config.API;
			for (prop in map) {
				if (typeof(config[prop]) === "function") {
					p[map[prop]] = config[prop];
				}
			}
			Plugin.version = config.version;
			TweenPlugin.activate([Plugin]);
			return Plugin;
		};


		//now run through all the dependencies discovered and if any are missing, log that to the console as a warning. This is why it's best to have TweenLite load last - it can check all the dependencies for you.
		a = window._gsQueue;
		if (a) {
			for (i = 0; i < a.length; i++) {
				a[i]();
			}
			for (p in _defLookup) {
				if (!_defLookup[p].func) {
					window.console.log("GSAP encountered missing dependency: com.greensock." + p);
				}
			}
		}

		_tickerActive = false; //ensures that the first official animation forces a ticker.tick() to update the time when it is instantiated

})((typeof(module) !== "undefined" && module.exports && typeof(global) !== "undefined") ? global : this || window, "TweenLite");

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{}],34:[function(require,module,exports){
'use strict';
var app = require('core/app'),
  md5 = require('core/lib/md5'),
  Promise = require('core/promise'),
  statInfoService = require('core/tools/statInfoService'),
  gulpDeviceVendor = require('vendor/aura/name'),
  storage = require('core/lib/storage'),
  router = require('core/router');

var helpFunctions = {
  getCookie: function (name) {
    var matches = document.cookie.match(new RegExp("(?:^|; )" + name.replace(/([\.$?*|{}\(\)\[\]\\\/\+^])/g, '\\$1') + "=([^;]*)"));
    return matches ? decodeURIComponent(matches[1]) : undefined;
  },
  setCookie: function (name, value, props) {
    props = props || {expires: 157680000, path: '/'};
    var exp = props.expires;

    if (typeof exp == "number" && exp) {
      var d = new Date();
      d.setTime(d.getTime() + exp * 1000);
      exp = props.expires = d;
    }

    if (exp && exp.toUTCString) {
      props.expires = exp.toUTCString();
    }

    value = encodeURIComponent(value);

    var updatedCookie = name + "=" + value;

    for (var propName in props) {
      updatedCookie += "; " + propName;
      var propValue = props[propName];
      if (propValue !== true) {
        updatedCookie += "=" + propValue;
      }
    }
    document.cookie = updatedCookie;
  },
  iswebOS: function () {
    var userAgent = navigator.userAgent;
    return (userAgent.toLowerCase().indexOf('webos') != -1 || userAgent.toLowerCase().indexOf('web0s') != -1);
  },
  getDeviceVendor: function () {

    if (gulpDeviceVendor && gulpDeviceVendor.name.length) {
      return gulpDeviceVendor.name;
    }

    var userAgent = navigator.userAgent;
    var deviceVendor = '';
    if (userAgent.toLowerCase().indexOf('tizen') != -1) {
      deviceVendor = 'tizen';
    } else if (userAgent.toLowerCase().indexOf('smarthub') != -1) {
      deviceVendor = 'samsung';
    } else if (userAgent.toLowerCase().indexOf('stbapp') != -1) {
      deviceVendor = 'aura';
    } else if (userAgent.toLowerCase().indexOf('simplesmart') != -1) {
      deviceVendor = 'lg';
    } else if (userAgent.toLowerCase().indexOf('netcast') != -1 && userAgent.toLowerCase().indexOf('webos') == -1) {
      deviceVendor = 'lg';
    } else if (userAgent.toLowerCase().indexOf('webos') != -1 || userAgent.toLowerCase().indexOf('web0s') != -1) {
      deviceVendor = 'lg';
      mainConfigMgg.deviceInfo.isWebos = true;
    } else if (userAgent.toLowerCase().indexOf('philips') != -1) {
      deviceVendor = 'philips';
    } else if (userAgent.toLowerCase().indexOf('qtembedded') != -1 || userAgent.toLowerCase().indexOf('toshiba') != -1) {
      deviceVendor = 'toshiba';
    } else if (userAgent.toLowerCase().indexOf('viera') != -1) {
      deviceVendor = 'panasonic';
    } else if (userAgent.toLowerCase().indexOf('opera tv') != -1) {
      deviceVendor = 'opera';
    } else if (userAgent.toLowerCase().indexOf('oppo player') != -1) {
      deviceVendor = 'oppo';
    } else if (userAgent.toLowerCase().indexOf('playstation') != -1) {
      deviceVendor = 'sony_ps';
    } else {
      var hostname = window.location.hostname;
      if (hostname.toLowerCase().indexOf('netrange') != -1) {
        deviceVendor = 'netrange';
      } else if (hostname.toLowerCase().indexOf('opera') != -1) {
        deviceVendor = 'opera';
      } else if (hostname.toLowerCase().indexOf('sony') != -1) {
        deviceVendor = 'sony';
      } else if (hostname.toLowerCase().indexOf('foxxum') != -1) {
        deviceVendor = 'foxxum';
      } else {
        deviceVendor = 'browser';
      }
    }
    return deviceVendor;
  },
  lgOldModel: function () {
    var userAgent = navigator.userAgent;
    return userAgent.toLowerCase().indexOf('netcast.tv-2011') != -1;
  },
  getAppLanguage: function () {
    return mainConfigMgg.app.lang;
  },
  getKeyboardLanguage: function () {
    return helpFunctions.getCookieStorageItem('langKey') || 'RUS';
  },
  setKeyboardLanguage: function (lang) {
    helpFunctions.setCookieStorageItem('langKey', lang, {expires: 31556926, path: '/'});
  },
  getLocalizationLanguage: function () {
    var tvLanguage = helpFunctions.getCookie('lang');
    var keyboardLang = helpFunctions.getKeyboardLanguage();
    if (typeof tvLanguage == 'undefined' || typeof keyboardLang == "undefined") {
      tvLanguage = this.getDeviceLanguage();
      mainConfigMgg.app.firstTimeUser = true;

      var lang = '';

      for (var n in mainConfigMgg.langs_supported) {
        var currentLang = mainConfigMgg.langs_supported[n];
        if (currentLang === tvLanguage) {
          lang = tvLanguage;
        }
      }

      if (lang.length < 1) {
        tvLanguage = 'ru';
      } else {
        tvLanguage = lang;
      }
      helpFunctions.setCookie('lang', tvLanguage, {expires: 31556926, path: '/'});

      if (mainConfigMgg.keyboard_lang[tvLanguage].id != undefined) {
        keyboardLang = mainConfigMgg.keyboard_lang[tvLanguage].id;
      } else {
        keyboardLang = 'RUS';
      }
      helpFunctions.setKeyboardLanguage(keyboardLang);
    } else {
      var currentLang = '';

      for (var n in mainConfigMgg.langs_supported) {
        var currentLangInner = mainConfigMgg.langs_supported[n];
        if (currentLangInner === tvLanguage) {
          currentLang = tvLanguage;
        }
      }
      /*
       var currentLang = _.filter(config.langs_supported, function (lang) {
       return lang == tvLanguage;
       });*/

      if (currentLang.length < 1) {
        tvLanguage = 'ru';
        helpFunctions.setCookie('lang', tvLanguage, {expires: 31556926, path: '/'});
      } else {
        tvLanguage = currentLang;
        helpFunctions.setCookie('lang', tvLanguage, {expires: 31556926, path: '/'});
      }
    }
    return tvLanguage;
  },
  setLocalizationLanguage: function (lang) {
    var keyboardLang = mainConfigMgg.keyboard_lang[lang] ? mainConfigMgg.keyboard_lang[lang].id : 'RUS';
    helpFunctions.setCookie('lang', lang, {expires: 31556926, path: '/'});
    helpFunctions.setKeyboardLanguage(keyboardLang);
  },
  getDeviceLanguage: function () {

    var tvLanguage;
    if (mainConfigMgg.deviceInfo.vendor != 'samsung' && mainConfigMgg.deviceInfo.vendor != 'lg' && mainConfigMgg.deviceInfo.vendor != 'philips') {
      tvLanguage = navigator.language.substr(0, 2);
      if (tvLanguage == undefined || tvLanguage == '') {
        tvLanguage = "ru";
      }
    } else if (mainConfigMgg.deviceInfo.vendor == 'samsung') {
      tvLanguage = decodeURI((RegExp('lang' + '=' + '(.+?)(&|$)').exec(location.search) || [, null])[1]);
      if (tvLanguage == undefined || tvLanguage == '' || tvLanguage == 'null') {
        tvLanguage = "ru";
      } else {
        tvLanguage.substr(0, 2);
      }
    } else if (mainConfigMgg.deviceInfo.vendor == 'lg' && !mainConfigMgg.deviceInfo.isWebos) {
      var device = document.getElementById("device");
      tvLanguage = device.tvLanguage2;
      if (tvLanguage === undefined) {
        tvLanguage = "ru";
      }
    } else {
      tvLanguage = "ru";
    }
    if (mainConfigMgg.langs_overrride[tvLanguage]) {
      tvLanguage = mainConfigMgg.langs_overrride[tvLanguage];
    }

    return tvLanguage;
  },
  getWebOSLocalizationLanguage: function () {
    var tvLanguage = helpFunctions.getCookie('lang');
    var keyboardLang = helpFunctions.getKeyboardLanguage();

    return new Promise(function (resolve) {
      if (typeof tvLanguage == 'undefined' || typeof keyboardLang == "undefined") {
        mainConfigMgg.app.firstTimeUser = true;
        helpFunctions.getWebOSUILanguage().then(function (data) {
          tvLanguage = data;
          var lang = '';
          for (var n in mainConfigMgg.langs_supported) {
            var currentLang = mainConfigMgg.langs_supported[n];
            if (currentLang === tvLanguage) {
              lang = tvLanguage;
            }
          }
          if (lang.length < 1) {
            tvLanguage = 'ru';
          } else {
            tvLanguage = lang;
          }
          helpFunctions.setCookie('lang', tvLanguage, {expires: 31556926, path: '/'});

          if (mainConfigMgg.keyboard_lang[tvLanguage].id != undefined) {
            keyboardLang = mainConfigMgg.keyboard_lang[tvLanguage].id;
          } else {
            keyboardLang = 'RUS';
          }
          helpFunctions.setKeyboardLanguage(keyboardLang);
          resolve({error: false, lang: tvLanguage});
        });
      } else {
        var currentLang = '';
        for (var n in mainConfigMgg.langs_supported) {
          var currentLangInner = mainConfigMgg.langs_supported[n];
          if (currentLangInner === tvLanguage) {
            currentLang = tvLanguage;
          }
        }
        if (currentLang.length < 1) {
          tvLanguage = 'ru';
          helpFunctions.setCookie('lang', tvLanguage, {expires: 31556926, path: '/'});
        } else {
          tvLanguage = currentLang;
          helpFunctions.setCookie('lang', tvLanguage, {expires: 31556926, path: '/'});
        }
        resolve({error: false, lang: tvLanguage});
      }
    });
  },
  getWebOSUILanguage: function () {
    return new Promise(function (resolve, reject) {
      webOS.service.request("luna://com.webos.settingsservice", {
        method: "getSystemSettings",
        parameters: {
          "keys": ["localeInfo"]
        },
        onSuccess: function (inResponse) {
          var tvUILocale = inResponse.settings.localeInfo.locales.UI;
          var tvLanguage = tvUILocale.slice(0, 2);
          if (mainConfigMgg.langs_overrride[tvLanguage]) {
            tvLanguage = mainConfigMgg.langs_overrride[tvLanguage];
          }
          resolve({error: false, lang: tvLanguage});
        },
        onFailure: function (inError) {
          statInfoService.sendDebugErrorLog(
            'DEBUG_WEBOS',
            "Failed to get settings' value (settingsservice)",
            "ErrorText " + inError.errorText,
            encodeURIComponent(window.location.href),
            'n/a',
            'n/a',
            "ErrorCode " + inError.errorCode);
          resolve({error: false, lang: "en"});
        }
      });
    });
  },
  getDeviceId: function () {
    var serialNumber = 'N/A';
    switch (mainConfigMgg.deviceInfo.vendor) {
      case 'lg':
        var device = document.getElementById("device");
        if (typeof device != 'undefined' && device !== null) {
          if (typeof device.serialNumber != 'undefined' && device.serialNumber !== null) {
            mainConfigMgg.deviceInfo.serialNumber = device.serialNumber;
          }
          if (typeof device.net_macAddress != 'undefined' && device.net_macAddress !== null) {
            mainConfigMgg.deviceInfo.deviceMacAddress = device.net_macAddress;
          }
        }
        serialNumber = this.getNewDeviceId(mainConfigMgg.deviceInfo.serialNumber);
        break;
      case 'samsung':
        this.nnaviPlugin = document.getElementById("pluginObjectNNavi");
        this.networkPlugin = document.getElementById('pluginObjectNetwork');
        var mac = this.networkPlugin.GetMAC();
        serialNumber = this.nnaviPlugin.GetDUID(mac);
        mainConfigMgg.deviceInfo.deviceMacAddress = mac;
        break;
      case 'tizen':
        serialNumber = mainConfigMgg.deviceInfo.vendor.toUpperCase() + webapis.productinfo.getDuid();
        break;
      case 'aura':
        serialNumber = md5(gSTB.GetDeviceMacAddress());
        mainConfigMgg.deviceInfo.deviceMacAddress = gSTB.GetDeviceMacAddress();
        break;
      case 'dune':
        var _native = document.getElementById("duneapi");
        var serialNumber = _native.getSerialNumber();
        mainConfigMgg.deviceInfo.deviceMacAddress = _native.getMacAddress();
        break;
      default:
        serialNumber = this.getNewDeviceId('MEGOGO');
        break;
    }
    return serialNumber;
  },
  getWebOSDeviceId: function () {

    return new Promise(function (resolve, reject) {
      var deviceID = helpFunctions.getCookie('deviceID');
      var webOSVersion = helpFunctions.getCookieStorageItem('webOSVersion');

      if(deviceID && webOSVersion && parseInt(webOSVersion) > 2){
        mainConfigMgg.deviceInfo.deviceID = deviceID;
        mainConfigMgg.deviceInfo.name = helpFunctions.getCookieStorageItem('name');
        mainConfigMgg.deviceInfo.firmware = helpFunctions.getCookieStorageItem('firmware');
        mainConfigMgg.deviceInfo.support3d = !!helpFunctions.getCookieStorageItem('support3d');
        mainConfigMgg.deviceInfo.supportUHD = !!helpFunctions.getCookieStorageItem('supportUHD');
        mainConfigMgg.deviceInfo.supportHDR = !!helpFunctions.getCookieStorageItem('supportHDR');
        mainConfigMgg.deviceInfo.platformName = helpFunctions.getCookieStorageItem('platformName');

        resolve({error: false, deviceID: mainConfigMgg.deviceInfo.deviceID});
      }else{
        webOS.service.request("luna://com.webos.service.tv.systemproperty", {
          method: "getSystemInfo",
          parameters: {
            "keys": ["modelName", "firmwareVersion", "UHD", "sdkVersion", "_3d"]
          },
          onComplete: function (inResponse) {
            var isSucceeded = inResponse.returnValue;
            if (isSucceeded) {
              mainConfigMgg.deviceInfo.name = inResponse["modelName"];
              mainConfigMgg.deviceInfo.firmware = inResponse["firmwareVersion"];
              mainConfigMgg.deviceInfo.support3d = inResponse["_3d"] == 'true';
              mainConfigMgg.deviceInfo.supportUHD = inResponse["UHD"] == 'true';

              helpFunctions.setCookieStorageItem('name', mainConfigMgg.deviceInfo.name, {expires: 172800, path: '/'});
              helpFunctions.setCookieStorageItem('firmware', mainConfigMgg.deviceInfo.firmware, {expires: 172800, path: '/'});
              helpFunctions.setCookieStorageItem('support3d', mainConfigMgg.deviceInfo.support3d, {expires: 172800, path: '/'});
              helpFunctions.setCookieStorageItem('supportUHD', mainConfigMgg.deviceInfo.supportUHD, {expires: 172800, path: '/'});

              var noAdLGModels = mainConfigMgg.noAdLGModels;
              for (var i in noAdLGModels) {
                if (mainConfigMgg.deviceInfo.name.indexOf(noAdLGModels[i]) != -1) {
                  mainConfigMgg.deviceInfo.noAdKey = true;
                }
              }

              mainConfigMgg.deviceInfo.platformName = 'WebOS ' + inResponse["sdkVersion"];
              helpFunctions.setCookieStorageItem('platformName', mainConfigMgg.deviceInfo.platformName, {expires: 172800, path: '/'});

              var webOSVersion = parseInt(inResponse["sdkVersion"].charAt(0));
              helpFunctions.setCookieStorageItem('webOSVersion', webOSVersion, {expires: 172800, path: '/'});

              if (webOSVersion < 3) {
                mainConfigMgg.deviceInfo.deviceID = helpFunctions.getNewDeviceId('MEGOGO');
                resolve({error: false, deviceID: mainConfigMgg.deviceInfo.deviceID});
              } else {
                webOS.service.request("luna://com.webos.service.sm", {
                  method: "deviceid/getIDs",
                  parameters: {
                    "idType": ["LGUDID"]
                  },
                  onSuccess: function (inResponse) {
                    var serialNumber = inResponse.idList[0].idValue;
                    //TODO-INNA test for LG for empty User_ID

                    if (serialNumber) {
                      mainConfigMgg.deviceInfo.deviceID = mainConfigMgg.deviceInfo.vendor.toUpperCase() + serialNumber;
                      helpFunctions.setCookie('deviceID', mainConfigMgg.deviceInfo.deviceID, {expires: 86400, path: '/'})
                    } else {
                      helpFunctions.getNewDeviceId(serialNumber, true);
                    }
                    if (mainConfigMgg.deviceInfo.supportUHD) {
                      helpFunctions.checkWebOSHDRSupport().then(function(data){
                        resolve({error: false, deviceID: mainConfigMgg.deviceInfo.deviceID});
                      });
                    }else{
                      resolve({error: false, deviceID: mainConfigMgg.deviceInfo.deviceID});
                    }
                  },
                  onFailure: function (inError) {

                    statInfoService.sendDebugErrorLog(
                      'DEBUG_WEBOS',
                      "Failed to get system ID information",
                      "ErrorText " + inError.errorText,
                      encodeURIComponent(window.location.href),
                      'n/a',
                      'n/a',
                      "ErrorCode " + inError.errorCode);

                    resolve({
                      error: true,
                      errorText: "Failed to get system ID information" + "<br>" + "[" + inError.errorCode + "]: " + inError.errorText
                    });

                  }
                });
              }
            } else {

              statInfoService.sendDebugErrorLog(
                'DEBUG_WEBOS',
                "Failed to get TV device information",
                "ErrorText " + inResponse.errorText,
                encodeURIComponent(window.location.href),
                'n/a',
                'n/a',
                "ErrorCode " + inResponse.errorCode);

              //error перехода с Неткаста на ВебОС

              resolve({
                error: true,
                errorText: "Failed to get TV device information " + "<br>" + "[" + inResponse.errorCode + "]: " + inResponse.errorText
              });

            }
          }
        });
      }
    });
  },
  checkWebOSHDRSupport: function(){
    return new Promise(function (resolve, reject) {
      webOS.service.request("luna://com.webos.service.config/", {
        method: "getConfigs",
        parameters: {
          "configNames": ["tv.model.supportHDR", "tv.config.supportDolbyHDRContents"]
        },
        onSuccess: function (t) {
          var HDR = t.configs["tv.model.supportHDR"];
          if (HDR){
            mainConfigMgg.deviceInfo.supportHDR = true;
            helpFunctions.setCookieStorageItem('supportHDR', mainConfigMgg.deviceInfo.supportHDR, {expires: 172800, path: '/'})
          }
          resolve(mainConfigMgg.deviceInfo.supportHDR);
        },
        onFailure: function(inError){
          statInfoService.sendDebugErrorLog(
            'DEBUG_WEBOS',
            "Failed to get WebOS 3.0 HDR support information",
            "ErrorText " + inError.errorText,
            encodeURIComponent(window.location.href),
            'n/a',
            'n/a',
            "ErrorCode " + inError.errorCode);

          resolve(mainConfigMgg.deviceInfo.supportHDR);
        }
      });
    });
  },
  hasStorage: function () {
    try {
      storage.set('Megogo', '1');
      storage.remove('Megogo','');
      return true;
    } catch (exception) {
      return false;
    }
  },
  setLocalStorage: function (name, value) {
    try {
      storage.set(name, value);
      return true;
    } catch (exception) {
      return false;
    }
  },
  getNewDeviceId: function (serialNumber, isWebOS3) {
    var cookieID = helpFunctions.getCookie('deviceID'),
      newDeviceID = null,
      storageID = null;

    if (mainConfigMgg.deviceInfo.hasStorage) storageID = storage.get('deviceID');
    if (cookieID == null && storageID != null) {
      newDeviceID = storageID;
      helpFunctions.setCookie('deviceID', newDeviceID, {expires: 157680000, path: '/'});
    } else if (cookieID != null && storageID == null) {
      newDeviceID = cookieID;
      mainConfigMgg.deviceInfo.hasStorage && this.setLocalStorage('deviceID', newDeviceID);
    } else if (cookieID == null && storageID == null) {
      if (mainConfigMgg.deviceInfo.isWebos && isWebOS3) {
        newDeviceID = mainConfigMgg.deviceInfo.vendor.toUpperCase() + serialNumber;
      } else if (mainConfigMgg.deviceInfo.deviceMacAddress.length && mainConfigMgg.deviceInfo.deviceMacAddress != 'NA') {
        var deviceMac = mainConfigMgg.deviceInfo.deviceMacAddress.split(':').join('');
        newDeviceID = mainConfigMgg.deviceInfo.vendor.toUpperCase() + deviceMac;
      } else {
        newDeviceID = mainConfigMgg.deviceInfo.vendor.toUpperCase() + md5(serialNumber + 'xxxxxxxxZxxxxZ4xxxZyxxxZxxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
              var r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8);
              return v.toString(16);
            }));
      }
      mainConfigMgg.deviceInfo.hasStorage && this.setLocalStorage('deviceID', newDeviceID);
      helpFunctions.setCookie('deviceID', newDeviceID, {expires: 157680000, path: '/'});
    } else if (cookieID != null && storageID != null) {
      newDeviceID = cookieID;
    }
    return newDeviceID;
  },
  getDeviceName: function () {
    var deviceName = null,
      defaultName = mainConfigMgg.deviceInfo.vendor.charAt(0).toUpperCase() + mainConfigMgg.deviceInfo.vendor.slice(1) + ' TV',
      userAgent = navigator.userAgent;
    switch (mainConfigMgg.deviceInfo.vendor) {
      case 'lg':
        if (!mainConfigMgg.deviceInfo.isWebos) {
          var device = document.getElementById("device");
          if (device && (device.manufacturer || device.modelName)) {
            deviceName = device.manufacturer + '_' + device.modelName;

            var noAdLGModels = mainConfigMgg.noAdLGModels;
            for (var i in noAdLGModels) {
              if (device.modelName.indexOf(noAdLGModels[i]) != -1) {
                mainConfigMgg.deviceInfo.noAdKey = true;
              }
            }
          } else {
            deviceName = defaultName;
          }
        }
        break;
      case 'sony':
        var matches = userAgent.match(/(KDL\-.*?);/);
        if (matches && matches.length > 0) {
          deviceName = matches[1];
        } else {
          deviceName = defaultName;
        }
        break;
      case 'philips':
        var matches = userAgent.match(/Philips;(.*?);/);
        if (matches && matches[1] && matches[1].trim().length > 0) {
          deviceName = matches[1].trim();
        } else {
          deviceName = defaultName;
        }
        break;
      case 'toshiba':
        var matches = userAgent.match(/TOSHIBA;(.*?);/);
        if (matches && matches.length > 0) {
          deviceName = matches[1].trim();
        } else {
          deviceName = defaultName;
        }
        break;
      case 'samsung':
        deviceName = helpFunctions.getParameterByName('realmodel');
        if (!deviceName) {
          this.nnaviPlugin = document.getElementById("pluginObjectNNavi");
          deviceName = defaultName + ' (' + this.nnaviPlugin.GetModelCode() + ')';
        }
        break;
      case 'tizen':
        deviceName = webapis.productinfo.getRealModel();
        /* if(deviceName.indexOf("K") != -1){
         mainConfigMgg.deviceInfo.isTizen16 = true;
         }*/
        break;
      case 'aura':
        deviceName = gSTB.GetDeviceVendor() + ' ' + gSTB.GetDeviceModel();
        break;
      default:
        deviceName = defaultName;
        break;
    }

    return deviceName;
  },
  setCookieStorageItem: function(name, item, config){

    if(item){
      helpFunctions.setCookie(name, item, config);
      if(mainConfigMgg.deviceInfo.hasStorage){
        helpFunctions.setLocalStorage(name, item);
      }
    }
  },
  getCookieStorageItem: function(name){

    var cookieItem = helpFunctions.getCookie(name),
      storageItem = mainConfigMgg.deviceInfo.hasStorage ? storage.get(name) : null;

    var resultItem = null;
    if(storageItem) resultItem = storageItem;
    if(cookieItem) resultItem = cookieItem;
    return resultItem;
  },
  getParameterByName: function (name) {
    name = name.replace(/[\[]/, "\\\[").replace(/[\]]/, "\\\]");
    var regex = new RegExp("[\\?&]" + name + "=([^&#]*)"),
      results = regex.exec(location.search);
    return results == null ? false : decodeURIComponent(results[1].replace(/\+/g, " "));
  },
  isBD: function () {
    var TVPlugin = document.getElementById('pluginObjectTv');
    if (TVPlugin.GetProductType() == 2) {
      return true;
    } else {
      return false;
    }
  },
  support3d: function () {
    switch (mainConfigMgg.deviceInfo.vendor) {
      case 'lg':
        if (!mainConfigMgg.deviceInfo.isWebos) {
          var device = document.getElementById("device");
          return device.support3D;
        }
        break;
      case 'tizen':
        return (tizen.tvdisplaycontrol.is3DModeEnabled() === "READY");
        break;
      case 'philips':
        return true;
        break;
      case 'samsung':
        var pluginScreen3D = document.getElementById("pluginObjectScreen3D");
        if (pluginScreen3D.Flag3DEffectSupport() == '3D1' || pluginScreen3D.Flag3DEffectSupport() == 1 || pluginScreen3D.Flag3DTVConnect() == 1) {
          return true;
        } else {
          return false;
        }
        break;
      default:
        return false;
        break;
    }
  },

  supportUHD: function () {
    switch (mainConfigMgg.deviceInfo.vendor) {
      case 'tizen':
        mainConfigMgg.deviceInfo.supportHDR = webapis.avinfo.isHdrTvSupport();
        return webapis.productinfo.isUdPanelSupported();
        break;
      case 'sony':
        return (window.sony && window.sony.tv && window.sony.tv.is4K) ? true : false;
        break;
      case 'samsung':
        if (/realmodel/.test(window.location.search)) {
          var deviceName = helpFunctions.getParameterByName('realmodel');
          if (/[a-z]+[0-9]+[a-z]+u[0-9]+/.test(deviceName.toLowerCase())) {
            return true;
          } else {
            return false;
          }
        } else {
          return false;
        }
        break;
      case 'lg':
        if (!mainConfigMgg.deviceInfo.isWebos) {
          var uhdModels = [
            'UB980V',
            'UF950V',
            'UG870V',
            'UF860V',
            'UF850V',
            'UF853V',
            'UF830V',
            'UF771V',
            'UG730V',
            'UF690V',
            'UF680V',
            'UF640V',
            'UB980V',
            'UC970V',
            'UB950V',
            'UB850V',
            'UB830V'
          ];

          var isUHDModel = false;

          for (var i in uhdModels) {
            if (mainConfigMgg.deviceInfo.name.indexOf(uhdModels[i]) > 0) {
              isUHDModel = true;
            }
          }

          if (mainConfigMgg.deviceInfo.isWebos && (window.screen.deviceWidth > 3000 || isUHDModel)) {
            return true;
          } else {
            return false;
          }
        }
        break;
      default:
        return false;
        break;
    }
  },
  supportWebSocket: function(){
    if(window.WebSocket){
      return true;
    }else{
      return false;
    }
  },
  getDeviceFirmware: function () {
    switch (mainConfigMgg.deviceInfo.vendor) {
      case 'lg':
        if (!mainConfigMgg.deviceInfo.isWebos) {
          var device = document.getElementById("device");
          var firmware = device.swVersion;
          mainConfigMgg.deviceInfo.platformName = device.platform;
          mainConfigMgg.deviceInfo.chipset = device.chipset;
          mainConfigMgg.deviceInfo.networkType = device.networkType;
        }
        break;
      case 'samsung':
        this.nnaviPlugin = document.getElementById("pluginObjectNNavi");
        var firmware = this.nnaviPlugin.GetFirmware();
        break;
      case 'tizen':
        var firmware = webapis.productinfo.getFirmware();
        mainConfigMgg.deviceInfo.platformName = webapis.productinfo.getModelCode();

        break;
      case 'philips':
        var matches = navigator.userAgent.match(/Firmware\/(.*?)\(/);
        if (matches && matches[1] && matches[1].trim().length > 0) {
          var firmware = matches[1].trim();
        }
        break;
      case 'sony':
        var matches = navigator.userAgent.match(/CTV\/(.*?);/);
        if (matches && matches[1] && matches[1].trim().length > 0) {
          var firmware = matches[1].trim();
        }
        break;
      case 'dune':
        var _native = document.getElementById("duneapi");
        var firmware = _native.getFirmwareVersion();
        break;
    }
    if (firmware !== undefined) {
      return firmware;
    } else {
      return 'N/A';
    }
  },
  getConnectionType: function () {
    var connectionTypeTxt = "Unknown";

    switch (mainConfigMgg.deviceInfo.vendor) {
      case 'lg':
        if (!mainConfigMgg.deviceInfo.isWebos) {
          var device = document.getElementById("device");
          if (device) {
            var connectionTypeInt = device.networkType;

            switch (connectionTypeInt) {
              case 1:
                connectionTypeTxt = "Wi-Fi";
                break;
              case 0:
                connectionTypeTxt = "Ethernet";
                break;
            }
          }
        }
        break;
      case 'tizen':
        var connectionTypeInt = webapis.network.getActiveConnectionType();
        switch (connectionTypeInt) {
          case 0:
            connectionTypeTxt = "DISCONNECTED";
            break;
          case 1:
            connectionTypeTxt = "Wi-Fi";
            break;
          case 2:
            connectionTypeTxt = "Cellular";
            break;
          case 3:
            connectionTypeTxt = "Ethernet";
            break;
          default:
            connectionTypeTxt = "Unknown";
            break;
        }
        break;
      case 'samsung':
        var networkPlugin = document.getElementById("pluginObjectNetwork");
        var connectionTypeInt = networkPlugin.GetActiveType();

        switch (connectionTypeInt) {
          case 0:
            connectionTypeTxt = "Wi-Fi";
            break;
          case 1:
            connectionTypeTxt = "Ethernet";
            break;
        }
        break;
    }

    return connectionTypeTxt;
  },
  getGenreByIds: function (genresIds, count) {
    var genresList = [];
    var genres_config = app.dataStorage.configuration.genres;
    for (var i = 0; i < genresIds.length; i++) {
      for (var j = 0; j < genres_config.length; j++) {
        if (genres_config[j].id == genresIds[i]) {
          genresList.push(genres_config[j].title);
          break;
        }
      }
    }

    if (count) {
      genresList = genresList.slice(0, count);
    }

    return genresList.join(', ');
  },
  getGenreById: function (genresId) {
    var genre = null;
    var genres_config = app.dataStorage.configuration.genres;
    for (var j = 0; j < genres_config.length; j++) {
      if (genres_config[j].id == genresId) {
        genre = genres_config[j]
        break;
      }
    }

    return genre;
  },
  getConfigurationInfo: function (configKey, idsArray) {
    var resultArray = [];
    var targetInfo = app.dataStorage.configuration[configKey];
    if (!targetInfo) return resultArray;

    for (var i = 0; i < idsArray.length; i++) {
      for (var j = 0; j < targetInfo.length; j++) {
        if (idsArray[i] == targetInfo[j].id) {
          resultArray.push(targetInfo[j]);
          break;
        }
      }
    }

    return resultArray;
  },

  getCategoryById: function (id) {
    var category;
    for (var i = 0; i < app.dataStorage.configuration.categories.length; i++) {

      var cat = app.dataStorage.configuration.categories[i];
      if (cat.id == id) {
        category = cat;
        break;
      }
    }

    return category;
  },

  pad: function (value) {
    return value < 10 ? '0' + value : value;
  },

  getTimeNow: function () {
    var d = new Date();
    var time_now = d.getTime();
    //time_now = d.setHours(0, 0, 0, 0);
    //time_now = d.getTime();
    return new Date(Math.floor(time_now - app.dataStorage.timeLocalDiff * 1000));
  },

  getTimestampNow: function () {
    var timeNow = helpFunctions.getTimeNow();
    return (timeNow.getTime() / 1000);
  },

  groupChannelsByGenres: function (data) {
    if (!data) return;
    if (!data.channels) return [];

    var genresTemp = [];
    var genresList = [];
    var channel = null;
    var genre = null;
    var epgs = data.epg_programs;

    for (var i = 0, len = data.channels.length; i < len; i++) {
      channel = data.channels[i];
      channel.currentProgram = null;
      genre = helpFunctions.getGenreById(channel.genres[0]);

      if (epgs) {
        for (var y = 0; y < epgs.length; y++) {
          if (channel.epg_id == epgs[y].external_id) {
            channel.currentProgram = epgs[y];
            break;
          }
        }
      }

      if (channel.is_favorite) {
        if (!genresTemp[1]) {
          genresTemp[1] = {
            title: i18nMgg('favourite_tv_title'),
            id: 1,
            channels: [channel]
          };
        } else {
          genresTemp[1].channels.push(channel);
        }
      } else {
        var genre_key = 'g_' + channel.genres[0];
        var genre_image = genre.images && genre.images.length && genre.images[0] ? genre.images[0].url : '';
        if (!genresTemp[genre_key]) {
          genresTemp[genre_key] = {
            title: genre.title,
            image: genre_image,
            id: channel.genres[0],
            channels: [channel]
          };
        } else {
          genresTemp[genre_key].channels.push(channel);
        }
      }
    }

    for (var genreItem in genresTemp) {
      genresList.push(genresTemp[genreItem]);
    }

    genresTemp = null;
    return genresList;
  },
  getValueText: function (value, type) {
    var text;
    if (value >= 5 && value < 21) {
      text = i18nMgg(type + 's_rp');
    } else {
      var stringValue = value.toString();
      var numberLength = stringValue.length;
      var lastChar = parseInt(stringValue.charAt(numberLength - 1));
      var twoLastChars = parseInt(' ' + parseInt(stringValue.charAt(numberLength - 2)) + lastChar);

      if (lastChar === 1 && twoLastChars !== 11) {
        text = i18nMgg(type);
      } else {
        text = i18nMgg(type + 's_rp');
      }
      if (lastChar > 1 && lastChar < 5) {
        text = i18nMgg(type + 's');
      }
      if (lastChar >= 5 || lastChar == 0) {
        text = i18nMgg(type + 's_rp');
      }
      if (twoLastChars == 12 || twoLastChars == 13 || twoLastChars == 14) {
        text = i18nMgg(type + 's_rp');
      }
    }
    return text;
  },
  /* getValueTextDative: function (value, type, translations) {
   var text;
   var stringValue = value.toString();
   var numberLength = stringValue.length;
   var lastChar = parseInt(stringValue.charAt(numberLength - 1));
   var twoLastChars = parseInt(' ' + parseInt(stringValue.charAt(numberLength - 2)) + lastChar);
   if (lastChar === 1 && twoLastChars !== 11) {
   text = translations[type];
   } else {
   text = translations[type + '_s'];
   }
   return text;
   },*/
  getKeyByValue: function (obj, value) {
    for (var prop in obj) {
      if (obj.hasOwnProperty(prop)) {
        if (obj[prop].id === value)
          return prop;
      }
    }
  },
  getCorrectTimeFromSeconds: function (secs) {
    var dayInSec = 86400;
    var hoursInSec = 3600;
    var days, remDays, remHours, hours, minutes;
    days = Math.floor(secs / dayInSec);
    remDays = secs % dayInSec;
    hours = Math.floor(remDays / hoursInSec);
    remHours = remDays % hoursInSec;
    minutes = Math.floor(remHours / 60);
    return {
      'days': days,
      'hours': hours,
      'minutes': minutes
    }
  },
  getAgeTitlesByID: function (ageID) {
    var ageLimitsInfo = app.dataStorage.configuration.age_limits;

    var ageInfo = {
      id: ageLimitsInfo[ageLimitsInfo.length - 1].id,
      title: ageLimitsInfo[ageLimitsInfo.length - 1].title,
      maxAge: ageLimitsInfo[ageLimitsInfo.length - 1].max_age
    };

    for (var n in ageLimitsInfo) {
      if (ageLimitsInfo[n].id == ageID) {
        ageInfo = {
          id: ageLimitsInfo[n].id,
          title: ageLimitsInfo[n].title,
          maxAge: ageLimitsInfo[n].max_age
        };
      }
    }
    return ageInfo
  },
  getPaymentSystemName: function () {
    var payment_systems = app.dataStorage.configuration.payment_systems;

    var cardPaymentSystem = new Array();
    for (var n in payment_systems) {
      cardPaymentSystem.push(payment_systems[n]);
    }
    if (cardPaymentSystem.indexOf('mixplat') != -1) {
      cardPaymentSystem.splice(cardPaymentSystem.indexOf('mixplat'), 1);
    }
    return cardPaymentSystem;
  },
  isNavigateBack: function (data) {
    if (data && data.data && data.data.length) {
      return data.data[0].navigateBack;
    }
    return false;
  },
  isRouteHasData: function (data) {
    if (data && data.data && data.data.length) {
      return data.data[0].data;
    }
    return false;
  },
  isMobilePaymentsAvailable: function () {
    var payment_systems = app.dataStorage.configuration.payment_systems;
    for (var n in payment_systems) {
      if (payment_systems[n] == 'mixplat') {
        return true;
      }
    }
    return false;
  },
  removeLastWatched: function (objectId) {
    if (mainConfigMgg.deviceInfo.hasStorage) {
      var lastPlayedObjects = JSON.parse(storage.get('lastPlayedObjects'));

      if (lastPlayedObjects && lastPlayedObjects[objectId]) {
        delete lastPlayedObjects[objectId];

        try {
          storage.set('lastPlayedObjects', JSON.stringify(lastPlayedObjects));
        } catch (e) {
          console.log('Local storage error.');
        }
      }
    }
  },
  checkLastWatchedLength: function (lastPlayedObjects) {
    if (Object.keys(lastPlayedObjects).length > 21) {
      var keysSorted = Object.keys(lastPlayedObjects).sort(function (a, b) {
        return lastPlayedObjects[a].date - lastPlayedObjects[b].date
      });
      delete lastPlayedObjects[keysSorted[0]];

      try {
        storage.set('lastPlayedObjects', JSON.stringify(lastPlayedObjects));
      } catch (e) {
        console.log('Local storage error.');
      }
    }
  },
  getLastWatched: function (objectId) {
    var lastPlayedObjects = JSON.parse(storage.get('lastPlayedObjects'));

    if (lastPlayedObjects) {
      this.checkLastWatchedLength(lastPlayedObjects);
      if (lastPlayedObjects[objectId]) {
        return lastPlayedObjects[objectId];
      }
    }

    return false;
  },
  getDefaultQuality: function () {
    return this.getCookieStorageItem('defaultQuality');
  },
  setDefaultQuality: function (quality) {
    try {
      this.setCookieStorageItem('defaultQuality', JSON.stringify(quality));
    } catch (e) {
      console.log('Local storage error.');
    }
  },
  updateLastWatched: function (objectId, time, parentId, next, duration) {
    if (mainConfigMgg.deviceInfo.hasStorage) {
      var lastPlayedObjects = JSON.parse(storage.get('lastPlayedObjects'));
      var saveObjectId = parentId || objectId;

      if (!lastPlayedObjects) {
        lastPlayedObjects = {};
      }

      if (!lastPlayedObjects[saveObjectId]) {
        lastPlayedObjects[saveObjectId] = {};
      }

      lastPlayedObjects[saveObjectId].time = Math.round(time);
      lastPlayedObjects[saveObjectId].date = Date.now();
      lastPlayedObjects[saveObjectId].next = next;
      lastPlayedObjects[saveObjectId].duration = duration;

      if (parentId) {
        lastPlayedObjects[saveObjectId].objectId = objectId;
      }

      try {
        storage.set('lastPlayedObjects', JSON.stringify(lastPlayedObjects));
      } catch (e) {
        console.log('Local storage error.');
      }
    }
  },
  updateLastWatchedTv: function (channelId) {
    if (mainConfigMgg.deviceInfo.hasStorage) {
      try {
        this.setCookieStorageItem('lastPlayedTvChannel', JSON.stringify(channelId));
      } catch (e) {
        console.log('Local storage error.');
      }
    }
  },
  getLastWatchedTv: function (objectId) {
    var lastPlayedObjects = JSON.parse(this.getCookieStorageItem('lastPlayedTvChannel'));
    return lastPlayedObjects || false;
  },
  findBy: function (array, key, value) {
    for (var i = 0; i < array.length; i++) {
      if (array[i][key] == value)
        return array[i];
    }
  },
  getPCStatusText: function () {
    var pcInfo = app.dataStorage.pc_info;
    return pcInfo.status ? i18nMgg('switched_on') : i18nMgg('switched_off');
  },
  formatDataForGreed: function (data, perLine) {
    var formated_arr = [], end = 0, i;
    if (data && data.length && perLine) {
      for (i = 0; i < data.length; i += perLine) {
        end = perLine + i;
        formated_arr.push(data.slice(i, end));
      }
    } else {
      console.log('not valid data for format array');
    }

    return formated_arr;
  },
  deepObjectExtend: function (target, source) {
    for (var prop in source) {
      if (source.hasOwnProperty(prop)) {
        if (target[prop] && typeof source[prop] === 'object') {
          helpFunctions.deepObjectExtend(target[prop], source[prop]);
        }
        else {
          target[prop] = source[prop];
        }
      }
    }
    return target;
  },
  getUserCardText: function () {
    var cardNumber = app.dataStorage.user.credit_card;
    var cardType = app.dataStorage.user.card_type;
    var textNumber = cardNumber.length > 4 ? cardNumber : '&middot;&middot;&middot;&middot; &middot;&middot;&middot;&middot; &middot;&middot;&middot;&middot; ' + cardNumber;

    return {
      "cardNumber": textNumber,
      "cardType": cardType,
      "fullText": cardType + ' ' + textNumber
    };
  },
  filterSupportedSliders: function (slider) {
    var supportedSliders = [];
    var supportedTypes = mainConfigMgg.sliderTypes;

    slider.forEach(function (slide) {
      if (supportedTypes.indexOf(slide.slider_type.toLowerCase()) != -1) {
        if (slide.slider_type.toLowerCase() == 'url') {
          var navigateLink = slide.link.match(/^megogo:\/\/(.+)$/);
          if (navigateLink && navigateLink[1] && helpFunctions.getMenuNavigateService().checkAdLink(navigateLink[1])) {
            slide.link = navigateLink[1];
            supportedSliders.push(slide);
          }
        } else {
          supportedSliders.push(slide);
        }
      }
    });

    return supportedSliders;
  },
  deviceExit: function (PopUpExit, update) {

  function getUrlVars() {
    var vars = {};
    var parts = window.location.href.replace(/[?&]+([^=&]+)=([^&]*)/gi, function(
      m,
      key,
      value
    ) {
      vars[key] = value;
    });
    return vars;
  }

  var ref = getUrlVars()["referrer"]

  if (ref) {
    location = ref
  }
  location = "http://212.77.128.205/stalker_portal/c/index.html"

  },
  goPrevPage: function () {

    if (mainConfigMgg.deviceInfo.isWebos) {
      var appID = router.getLGDeepLinkData().appID;
      webOS.service.request("luna://com.webos.applicationManager", {
        method: "launch",
        parameters: {
          "id": appID
        },
        onSuccess: function (inResponse) {
          console.log("The app is launched");
        },
        onFailure: function (inError) {
          console.log("The app is NOT launched, make history Back");
          window.history.back();
        }
      });

    } else {
      var first_history_index = 0;

      if (window.history && window.history.length) {
        first_history_index = -1 * (window.history.length - 1);
      }
      window.history.go(first_history_index);
      //window.history.back();
    }

  },
  updateWatchedHistory: function (component, movie_data) {
    if (component && component.$focusItem && component.renderItem
      && component.$focusItem.data) {
      if (movie_data.id === component.$focusItem.data.id) {
        component.$focusItem.data.watched_history = movie_data.watched_history;
        component.renderItem(component.$focusItem, component.$focusItem.data);
      }
    }
  },
  getMenuNavigateService: function () {
    return require('core/tools/menuNavigateService');
  },
  removeDuplicates: function (arr, prop) {
    var new_arr = [];
    var lookup = {};
    for (var i = 0; i < arr.length; i++) {
      arr[i].index = i;
    }
    for (var i in arr) {
      lookup[arr[i][prop]] = arr[i];
    }
    for (i in lookup) {
      new_arr.push(lookup[i]);
    }
    new_arr.sort(function (a, b) {
      return a.index - b.index;
    });
    for (var i = 0; i < new_arr.length; i++) {
      delete(new_arr[i].index);
    }
    return new_arr;
  },
  cropTextAndAddDots: function (text, length) {
    if (text.length > length + 3)
      return text.slice(0, length).trim() + '...';
    return text;
  },
  getCatchUpSubTitle: function(timeStart){
    var translations = app.dataStorage.configurationInterface;
    var phrase = translations['airtime_recorded'];
    var startDate = new Date(timeStart);
    var month = startDate.getMonth() + 1;

    var mapObj = {
      DD: startDate.getDate(),
      MM: translations['month_' + month + '_rp'],
      hh: helpFunctions.pad(startDate.getHours()),
      mm: helpFunctions.pad(startDate.getMinutes())
    };

    var re = new RegExp(Object.keys(mapObj).join("|"),"gi");
    phrase = phrase.replace(re, function(matched){
      return mapObj[matched];
    });

    return phrase;
  },
  getStartEndTimeString: function(timeStart, timeEnd){
    var startDate = new Date(timeStart);
    var endDate = new Date(timeEnd);

    return helpFunctions.pad(startDate.getHours()) + ':' + helpFunctions.pad(startDate.getMinutes()) + ' - ' + helpFunctions.pad(endDate.getHours()) + ':' + helpFunctions.pad(endDate.getMinutes())
  }
};

module.exports = helpFunctions;

},{"core/app":16,"core/lib/md5":35,"core/lib/storage":37,"core/promise":43,"core/router":45,"core/tools/menuNavigateService":49,"core/tools/statInfoService":53,"vendor/aura/name":135}],35:[function(require,module,exports){
/**
 * Created by bas on 09.04.15.
 */

// no eslint for this strange lib
/*eslint-disable */
'use strict';

function md5(str) {
  // Calculate the md5 hash of a string
  // + original by: Webtoolkit.info (http:// www.webtoolkit.info/)
  // + namespaced by: Michael White (http:// crestidg.com)
  var RotateLeft = function(lValue, iShiftBits) {return (lValue << iShiftBits) | (lValue >>> (32 - iShiftBits));};

  var AddUnsigned = function(lX, lY) {
    var lX4, lY4, lX8, lY8, lResult;
    lX8 = (lX & 0x80000000);
    lY8 = (lY & 0x80000000);
    lX4 = (lX & 0x40000000);
    lY4 = (lY & 0x40000000);
    lResult = (lX & 0x3FFFFFFF) + (lY & 0x3FFFFFFF);
    if (lX4 & lY4) {
      return (lResult ^ 0x80000000 ^ lX8 ^ lY8);
    }

    if (lX4 | lY4) {
      if (lResult & 0x40000000) {
        return (lResult ^ 0xC0000000 ^ lX8 ^ lY8);
      } else {
        return (lResult ^ 0x40000000 ^ lX8 ^ lY8);
      }
    } else {
      return (lResult ^ lX8 ^ lY8);
    }
  };

  var F = function(x, y, z) {return (x & y) | ((~x) & z);};

  var G = function(x, y, z) {return (x & z) | (y & (~z));};

  var H = function(x, y, z) {return (x ^ y ^ z);};

  var I = function(x, y, z) {return (y ^ (x | (~z)));};

  var FF = function(a, b, c, d, x, s, ac) {
    a = AddUnsigned(a, AddUnsigned(AddUnsigned(F(b, c, d), x), ac));
    return AddUnsigned(RotateLeft(a, s), b);
  };

  var GG = function(a, b, c, d, x, s, ac) {
    a = AddUnsigned(a, AddUnsigned(AddUnsigned(G(b, c, d), x), ac));
    return AddUnsigned(RotateLeft(a, s), b);
  };

  var HH = function(a, b, c, d, x, s, ac) {
    a = AddUnsigned(a, AddUnsigned(AddUnsigned(H(b, c, d), x), ac));
    return AddUnsigned(RotateLeft(a, s), b);
  };

  var II = function(a, b, c, d, x, s, ac) {
    a = AddUnsigned(a, AddUnsigned(AddUnsigned(I(b, c, d), x), ac));
    return AddUnsigned(RotateLeft(a, s), b);
  };

  var ConvertToWordArray = function(str) {
    var lWordCount;
    var lMessageLength = str.length;
    var lNumberOfWords_temp1 = lMessageLength + 8;
    var lNumberOfWords_temp2 = (lNumberOfWords_temp1 - (lNumberOfWords_temp1 % 64)) / 64;
    var lNumberOfWords = (lNumberOfWords_temp2 + 1) * 16;
    var lWordArray = new Array(lNumberOfWords - 1);
    var lBytePosition = 0;
    var lByteCount = 0;
    while (lByteCount < lMessageLength) {
      lWordCount = (lByteCount - (lByteCount % 4)) / 4;
      lBytePosition = (lByteCount % 4) * 8;
      lWordArray[lWordCount] = (lWordArray[lWordCount] | (str.charCodeAt(lByteCount) << lBytePosition));
      lByteCount++;
    }

    lWordCount = (lByteCount - (lByteCount % 4)) / 4;
    lBytePosition = (lByteCount % 4) * 8;
    lWordArray[lWordCount] = lWordArray[lWordCount] | (0x80 << lBytePosition);
    lWordArray[lNumberOfWords - 2] = lMessageLength << 3;
    lWordArray[lNumberOfWords - 1] = lMessageLength >>> 29;
    return lWordArray;
  };

  var WordToHex = function(lValue) {
    var WordToHexValue = '', WordToHexValue_temp = '', lByte, lCount;
    for (lCount = 0; lCount <= 3; lCount++) {
      lByte = (lValue >>> (lCount * 8)) & 255;
      WordToHexValue_temp = '0' + lByte.toString(16);
      WordToHexValue = WordToHexValue + WordToHexValue_temp.substr(WordToHexValue_temp.length - 2, 2);
    }

    return WordToHexValue;
  };

  var x = [];
  var k, AA, BB, CC, DD, a, b, c, d;
  var S11 = 7, S12 = 12, S13 = 17, S14 = 22;
  var S21 = 5, S22 = 9, S23 = 14, S24 = 20;
  var S31 = 4, S32 = 11, S33 = 16, S34 = 23;
  var S41 = 6, S42 = 10, S43 = 15, S44 = 21;
  str = utf8_encode(str);
  x = ConvertToWordArray(str);
  a = 0x67452301;
  b = 0xEFCDAB89;
  c = 0x98BADCFE;
  d = 0x10325476;
  for (k = 0; k < x.length; k += 16) {
    AA = a;
    BB = b;
    CC = c;
    DD = d;
    a = FF(a, b, c, d, x[k + 0], S11, 0xD76AA478);
    d = FF(d, a, b, c, x[k + 1], S12, 0xE8C7B756);
    c = FF(c, d, a, b, x[k + 2], S13, 0x242070DB);
    b = FF(b, c, d, a, x[k + 3], S14, 0xC1BDCEEE);
    a = FF(a, b, c, d, x[k + 4], S11, 0xF57C0FAF);
    d = FF(d, a, b, c, x[k + 5], S12, 0x4787C62A);
    c = FF(c, d, a, b, x[k + 6], S13, 0xA8304613);
    b = FF(b, c, d, a, x[k + 7], S14, 0xFD469501);
    a = FF(a, b, c, d, x[k + 8], S11, 0x698098D8);
    d = FF(d, a, b, c, x[k + 9], S12, 0x8B44F7AF);
    c = FF(c, d, a, b, x[k + 10], S13, 0xFFFF5BB1);
    b = FF(b, c, d, a, x[k + 11], S14, 0x895CD7BE);
    a = FF(a, b, c, d, x[k + 12], S11, 0x6B901122);
    d = FF(d, a, b, c, x[k + 13], S12, 0xFD987193);
    c = FF(c, d, a, b, x[k + 14], S13, 0xA679438E);
    b = FF(b, c, d, a, x[k + 15], S14, 0x49B40821);
    a = GG(a, b, c, d, x[k + 1], S21, 0xF61E2562);
    d = GG(d, a, b, c, x[k + 6], S22, 0xC040B340);
    c = GG(c, d, a, b, x[k + 11], S23, 0x265E5A51);
    b = GG(b, c, d, a, x[k + 0], S24, 0xE9B6C7AA);
    a = GG(a, b, c, d, x[k + 5], S21, 0xD62F105D);
    d = GG(d, a, b, c, x[k + 10], S22, 0x2441453);
    c = GG(c, d, a, b, x[k + 15], S23, 0xD8A1E681);
    b = GG(b, c, d, a, x[k + 4], S24, 0xE7D3FBC8);
    a = GG(a, b, c, d, x[k + 9], S21, 0x21E1CDE6);
    d = GG(d, a, b, c, x[k + 14], S22, 0xC33707D6);
    c = GG(c, d, a, b, x[k + 3], S23, 0xF4D50D87);
    b = GG(b, c, d, a, x[k + 8], S24, 0x455A14ED);
    a = GG(a, b, c, d, x[k + 13], S21, 0xA9E3E905);
    d = GG(d, a, b, c, x[k + 2], S22, 0xFCEFA3F8);
    c = GG(c, d, a, b, x[k + 7], S23, 0x676F02D9);
    b = GG(b, c, d, a, x[k + 12], S24, 0x8D2A4C8A);
    a = HH(a, b, c, d, x[k + 5], S31, 0xFFFA3942);
    d = HH(d, a, b, c, x[k + 8], S32, 0x8771F681);
    c = HH(c, d, a, b, x[k + 11], S33, 0x6D9D6122);
    b = HH(b, c, d, a, x[k + 14], S34, 0xFDE5380C);
    a = HH(a, b, c, d, x[k + 1], S31, 0xA4BEEA44);
    d = HH(d, a, b, c, x[k + 4], S32, 0x4BDECFA9);
    c = HH(c, d, a, b, x[k + 7], S33, 0xF6BB4B60);
    b = HH(b, c, d, a, x[k + 10], S34, 0xBEBFBC70);
    a = HH(a, b, c, d, x[k + 13], S31, 0x289B7EC6);
    d = HH(d, a, b, c, x[k + 0], S32, 0xEAA127FA);
    c = HH(c, d, a, b, x[k + 3], S33, 0xD4EF3085);
    b = HH(b, c, d, a, x[k + 6], S34, 0x4881D05);
    a = HH(a, b, c, d, x[k + 9], S31, 0xD9D4D039);
    d = HH(d, a, b, c, x[k + 12], S32, 0xE6DB99E5);
    c = HH(c, d, a, b, x[k + 15], S33, 0x1FA27CF8);
    b = HH(b, c, d, a, x[k + 2], S34, 0xC4AC5665);
    a = II(a, b, c, d, x[k + 0], S41, 0xF4292244);
    d = II(d, a, b, c, x[k + 7], S42, 0x432AFF97);
    c = II(c, d, a, b, x[k + 14], S43, 0xAB9423A7);
    b = II(b, c, d, a, x[k + 5], S44, 0xFC93A039);
    a = II(a, b, c, d, x[k + 12], S41, 0x655B59C3);
    d = II(d, a, b, c, x[k + 3], S42, 0x8F0CCC92);
    c = II(c, d, a, b, x[k + 10], S43, 0xFFEFF47D);
    b = II(b, c, d, a, x[k + 1], S44, 0x85845DD1);
    a = II(a, b, c, d, x[k + 8], S41, 0x6FA87E4F);
    d = II(d, a, b, c, x[k + 15], S42, 0xFE2CE6E0);
    c = II(c, d, a, b, x[k + 6], S43, 0xA3014314);
    b = II(b, c, d, a, x[k + 13], S44, 0x4E0811A1);
    a = II(a, b, c, d, x[k + 4], S41, 0xF7537E82);
    d = II(d, a, b, c, x[k + 11], S42, 0xBD3AF235);
    c = II(c, d, a, b, x[k + 2], S43, 0x2AD7D2BB);
    b = II(b, c, d, a, x[k + 9], S44, 0xEB86D391);
    a = AddUnsigned(a, AA);
    b = AddUnsigned(b, BB);
    c = AddUnsigned(c, CC);
    d = AddUnsigned(d, DD);
  }

  var temp = WordToHex(a) + WordToHex(b) + WordToHex(c) + WordToHex(d);
  return temp.toLowerCase();
}

function utf8_encode(str_data) {
  // Encodes an ISO-8859-1 string to UTF-8
  // +   original by: Webtoolkit.info (http:// www.webtoolkit.info/)
  str_data = str_data.replace(/\r\n/g, '\n');
  var utftext = '';
  for (var n = 0; n < str_data.length; n++) {
    var c = str_data.charCodeAt(n);
    if (c < 128) {
      utftext += String.fromCharCode(c);
    } else if ((c > 127) && (c < 2048)) {
      utftext += String.fromCharCode((c >> 6) | 192);
      utftext += String.fromCharCode((c & 63) | 128);
    } else {
      utftext += String.fromCharCode((c >> 12) | 224);
      utftext += String.fromCharCode(((c >> 6) & 63) | 128);
      utftext += String.fromCharCode((c & 63) | 128);
    }
  }

  return utftext;
}

module.exports = md5;
/*eslint-enable */

},{}],36:[function(require,module,exports){
(function (global){
/*!
 * VERSION: 1.18.1
 * DATE: 2015-12-11
 * UPDATES AND DOCS AT: http://greensock.com
 *
 * @license Copyright (c) 2008-2015, GreenSock. All rights reserved.
 * This work is subject to the terms at http://greensock.com/standard-license or for
 * Club GreenSock members, the software agreement that was issued with your membership.
 *
 * @author: Jack Doyle, jack@greensock.com
 */
var _gsScope = (typeof(module) !== "undefined" && module.exports && typeof(global) !== "undefined") ? global : this || window; //helps ensure compatibility with AMD/RequireJS and CommonJS/Node
(_gsScope._gsQueue || (_gsScope._gsQueue = [])).push( function() {

	"use strict";

	_gsScope._gsDefine("plugins.CSSPlugin", ["plugins.TweenPlugin","TweenLite"], function(TweenPlugin, TweenLite) {

		/** @constructor **/
		var CSSPlugin = function() {
				TweenPlugin.call(this, "css");
				this._overwriteProps.length = 0;
				this.setRatio = CSSPlugin.prototype.setRatio; //speed optimization (avoid prototype lookup on this "hot" method)
			},
			_globals = _gsScope._gsDefine.globals,
			_hasPriority, //turns true whenever a CSSPropTween instance is created that has a priority other than 0. This helps us discern whether or not we should spend the time organizing the linked list or not after a CSSPlugin's _onInitTween() method is called.
			_suffixMap, //we set this in _onInitTween() each time as a way to have a persistent variable we can use in other methods like _parse() without having to pass it around as a parameter and we keep _parse() decoupled from a particular CSSPlugin instance
			_cs, //computed style (we store this in a shared variable to conserve memory and make minification tighter
			_overwriteProps, //alias to the currently instantiating CSSPlugin's _overwriteProps array. We use this closure in order to avoid having to pass a reference around from method to method and aid in minification.
			_specialProps = {},
			p = CSSPlugin.prototype = new TweenPlugin("css");

		p.constructor = CSSPlugin;
		CSSPlugin.version = "1.18.1";
		CSSPlugin.API = 2;
		CSSPlugin.defaultTransformPerspective = 0;
		CSSPlugin.defaultSkewType = "compensated";
		CSSPlugin.defaultSmoothOrigin = true;
		p = "px"; //we'll reuse the "p" variable to keep file size down
		CSSPlugin.suffixMap = {top:p, right:p, bottom:p, left:p, width:p, height:p, fontSize:p, padding:p, margin:p, perspective:p, lineHeight:""};


		var _numExp = /(?:\d|\-\d|\.\d|\-\.\d)+/g,
			_relNumExp = /(?:\d|\-\d|\.\d|\-\.\d|\+=\d|\-=\d|\+=.\d|\-=\.\d)+/g,
			_valuesExp = /(?:\+=|\-=|\-|\b)[\d\-\.]+[a-zA-Z0-9]*(?:%|\b)/gi, //finds all the values that begin with numbers or += or -= and then a number. Includes suffixes. We use this to split complex values apart like "1px 5px 20px rgb(255,102,51)"
			_NaNExp = /(?![+-]?\d*\.?\d+|[+-]|e[+-]\d+)[^0-9]/g, //also allows scientific notation and doesn't kill the leading -/+ in -= and +=
			_suffixExp = /(?:\d|\-|\+|=|#|\.)*/g,
			_opacityExp = /opacity *= *([^)]*)/i,
			_opacityValExp = /opacity:([^;]*)/i,
			_alphaFilterExp = /alpha\(opacity *=.+?\)/i,
			_rgbhslExp = /^(rgb|hsl)/,
			_capsExp = /([A-Z])/g,
			_camelExp = /-([a-z])/gi,
			_urlExp = /(^(?:url\(\"|url\())|(?:(\"\))$|\)$)/gi, //for pulling out urls from url(...) or url("...") strings (some browsers wrap urls in quotes, some don't when reporting things like backgroundImage)
			_camelFunc = function(s, g) { return g.toUpperCase(); },
			_horizExp = /(?:Left|Right|Width)/i,
			_ieGetMatrixExp = /(M11|M12|M21|M22)=[\d\-\.e]+/gi,
			_ieSetMatrixExp = /progid\:DXImageTransform\.Microsoft\.Matrix\(.+?\)/i,
			_commasOutsideParenExp = /,(?=[^\)]*(?:\(|$))/gi, //finds any commas that are not within parenthesis
			_DEG2RAD = Math.PI / 180,
			_RAD2DEG = 180 / Math.PI,
			_forcePT = {},
			_doc = document,
			_createElement = function(type) {
				return _doc.createElementNS ? _doc.createElementNS("http://www.w3.org/1999/xhtml", type) : _doc.createElement(type);
			},
			_tempDiv = _createElement("div"),
			_tempImg = _createElement("img"),
			_internals = CSSPlugin._internals = {_specialProps:_specialProps}, //provides a hook to a few internal methods that we need to access from inside other plugins
			_agent = navigator.userAgent,
			_autoRound,
			_reqSafariFix, //we won't apply the Safari transform fix until we actually come across a tween that affects a transform property (to maintain best performance).

			_isSafari,
			_isFirefox, //Firefox has a bug that causes 3D transformed elements to randomly disappear unless a repaint is forced after each update on each element.
			_isSafariLT6, //Safari (and Android 4 which uses a flavor of Safari) has a bug that prevents changes to "top" and "left" properties from rendering properly if changed on the same frame as a transform UNLESS we set the element's WebkitBackfaceVisibility to hidden (weird, I know). Doing this for Android 3 and earlier seems to actually cause other problems, though (fun!)
			_ieVers,
			_supportsOpacity = (function() { //we set _isSafari, _ieVers, _isFirefox, and _supportsOpacity all in one function here to reduce file size slightly, especially in the minified version.
				var i = _agent.indexOf("Android"),
					a = _createElement("a");
				_isSafari = (_agent.indexOf("Safari") !== -1 && _agent.indexOf("Chrome") === -1 && (i === -1 || Number(_agent.substr(i+8, 1)) > 3));
				_isSafariLT6 = (_isSafari && (Number(_agent.substr(_agent.indexOf("Version/")+8, 1)) < 6));
				_isFirefox = (_agent.indexOf("Firefox") !== -1);
				if ((/MSIE ([0-9]{1,}[\.0-9]{0,})/).exec(_agent) || (/Trident\/.*rv:([0-9]{1,}[\.0-9]{0,})/).exec(_agent)) {
					_ieVers = parseFloat( RegExp.$1 );
				}
				if (!a) {
					return false;
				}
				a.style.cssText = "top:1px;opacity:.55;";
				return /^0.55/.test(a.style.opacity);
			}()),
			_getIEOpacity = function(v) {
				return (_opacityExp.test( ((typeof(v) === "string") ? v : (v.currentStyle ? v.currentStyle.filter : v.style.filter) || "") ) ? ( parseFloat( RegExp.$1 ) / 100 ) : 1);
			},
			_log = function(s) {//for logging messages, but in a way that won't throw errors in old versions of IE.
				if (window.console) {
					console.log(s);
				}
			},

			_prefixCSS = "", //the non-camelCase vendor prefix like "-o-", "-moz-", "-ms-", or "-webkit-"
			_prefix = "", //camelCase vendor prefix like "O", "ms", "Webkit", or "Moz".

			// @private feed in a camelCase property name like "transform" and it will check to see if it is valid as-is or if it needs a vendor prefix. It returns the corrected camelCase property name (i.e. "WebkitTransform" or "MozTransform" or "transform" or null if no such property is found, like if the browser is IE8 or before, "transform" won't be found at all)
			_checkPropPrefix = function(p, e) {
				e = e || _tempDiv;
				var s = e.style,
					a, i;
				if (s[p] !== undefined) {
					return p;
				}
				p = p.charAt(0).toUpperCase() + p.substr(1);
				a = ["O","Moz","ms","Ms","Webkit"];
				i = 5;
				while (--i > -1 && s[a[i]+p] === undefined) { }
				if (i >= 0) {
					_prefix = (i === 3) ? "ms" : a[i];
					_prefixCSS = "-" + _prefix.toLowerCase() + "-";
					return _prefix + p;
				}
				return null;
			},

			_getComputedStyle = _doc.defaultView ? _doc.defaultView.getComputedStyle : function() {},

			/**
			 * @private Returns the css style for a particular property of an element. For example, to get whatever the current "left" css value for an element with an ID of "myElement", you could do:
			 * var currentLeft = CSSPlugin.getStyle( document.getElementById("myElement"), "left");
			 *
			 * @param {!Object} t Target element whose style property you want to query
			 * @param {!string} p Property name (like "left" or "top" or "marginTop", etc.)
			 * @param {Object=} cs Computed style object. This just provides a way to speed processing if you're going to get several properties on the same element in quick succession - you can reuse the result of the getComputedStyle() call.
			 * @param {boolean=} calc If true, the value will not be read directly from the element's "style" property (if it exists there), but instead the getComputedStyle() result will be used. This can be useful when you want to ensure that the browser itself is interpreting the value.
			 * @param {string=} dflt Default value that should be returned in the place of null, "none", "auto" or "auto auto".
			 * @return {?string} The current property value
			 */
			_getStyle = CSSPlugin.getStyle = function(t, p, cs, calc, dflt) {
				var rv;
				if (!_supportsOpacity) if (p === "opacity") { //several versions of IE don't use the standard "opacity" property - they use things like filter:alpha(opacity=50), so we parse that here.
					return _getIEOpacity(t);
				}
				if (!calc && t.style[p]) {
					rv = t.style[p];
				} else if ((cs = cs || _getComputedStyle(t))) {
					rv = cs[p] || cs.getPropertyValue(p) || cs.getPropertyValue(p.replace(_capsExp, "-$1").toLowerCase());
				} else if (t.currentStyle) {
					rv = t.currentStyle[p];
				}
				return (dflt != null && (!rv || rv === "none" || rv === "auto" || rv === "auto auto")) ? dflt : rv;
			},

			/**
			 * @private Pass the target element, the property name, the numeric value, and the suffix (like "%", "em", "px", etc.) and it will spit back the equivalent pixel number.
			 * @param {!Object} t Target element
			 * @param {!string} p Property name (like "left", "top", "marginLeft", etc.)
			 * @param {!number} v Value
			 * @param {string=} sfx Suffix (like "px" or "%" or "em")
			 * @param {boolean=} recurse If true, the call is a recursive one. In some browsers (like IE7/8), occasionally the value isn't accurately reported initially, but if we run the function again it will take effect.
			 * @return {number} value in pixels
			 */
			_convertToPixels = _internals.convertToPixels = function(t, p, v, sfx, recurse) {
				if (sfx === "px" || !sfx) { return v; }
				if (sfx === "auto" || !v) { return 0; }
				var horiz = _horizExp.test(p),
					node = t,
					style = _tempDiv.style,
					neg = (v < 0),
					pix, cache, time;
				if (neg) {
					v = -v;
				}
				if (sfx === "%" && p.indexOf("border") !== -1) {
					pix = (v / 100) * (horiz ? t.clientWidth : t.clientHeight);
				} else {
					style.cssText = "border:0 solid red;position:" + _getStyle(t, "position") + ";line-height:0;";
					if (sfx === "%" || !node.appendChild || sfx.charAt(0) === "v" || sfx === "rem") {
						node = t.parentNode || _doc.body;
						cache = node._gsCache;
						time = TweenLite.ticker.frame;
						if (cache && horiz && cache.time === time) { //performance optimization: we record the width of elements along with the ticker frame so that we can quickly get it again on the same tick (seems relatively safe to assume it wouldn't change on the same tick)
							return cache.width * v / 100;
						}
						style[(horiz ? "width" : "height")] = v + sfx;
					} else {
						style[(horiz ? "borderLeftWidth" : "borderTopWidth")] = v + sfx;
					}
					node.appendChild(_tempDiv);
					pix = parseFloat(_tempDiv[(horiz ? "offsetWidth" : "offsetHeight")]);
					node.removeChild(_tempDiv);
					if (horiz && sfx === "%" && CSSPlugin.cacheWidths !== false) {
						cache = node._gsCache = node._gsCache || {};
						cache.time = time;
						cache.width = pix / v * 100;
					}
					if (pix === 0 && !recurse) {
						pix = _convertToPixels(t, p, v, sfx, true);
					}
				}
				return neg ? -pix : pix;
			},
			_calculateOffset = _internals.calculateOffset = function(t, p, cs) { //for figuring out "top" or "left" in px when it's "auto". We need to factor in margin with the offsetLeft/offsetTop
				if (_getStyle(t, "position", cs) !== "absolute") { return 0; }
				var dim = ((p === "left") ? "Left" : "Top"),
					v = _getStyle(t, "margin" + dim, cs);
				return t["offset" + dim] - (_convertToPixels(t, p, parseFloat(v), v.replace(_suffixExp, "")) || 0);
			},

			// @private returns at object containing ALL of the style properties in camelCase and their associated values.
			_getAllStyles = function(t, cs) {
				var s = {},
					i, tr, p;
				if ((cs = cs || _getComputedStyle(t, null))) {
					if ((i = cs.length)) {
						while (--i > -1) {
							p = cs[i];
							if (p.indexOf("-transform") === -1 || _transformPropCSS === p) { //Some webkit browsers duplicate transform values, one non-prefixed and one prefixed ("transform" and "WebkitTransform"), so we must weed out the extra one here.
								s[p.replace(_camelExp, _camelFunc)] = cs.getPropertyValue(p);
							}
						}
					} else { //some browsers behave differently - cs.length is always 0, so we must do a for...in loop.
						for (i in cs) {
							if (i.indexOf("Transform") === -1 || _transformProp === i) { //Some webkit browsers duplicate transform values, one non-prefixed and one prefixed ("transform" and "WebkitTransform"), so we must weed out the extra one here.
								s[i] = cs[i];
							}
						}
					}
				} else if ((cs = t.currentStyle || t.style)) {
					for (i in cs) {
						if (typeof(i) === "string" && s[i] === undefined) {
							s[i.replace(_camelExp, _camelFunc)] = cs[i];
						}
					}
				}
				if (!_supportsOpacity) {
					s.opacity = _getIEOpacity(t);
				}
				tr = _getTransform(t, cs, false);
				s.rotation = tr.rotation;
				s.skewX = tr.skewX;
				s.scaleX = tr.scaleX;
				s.scaleY = tr.scaleY;
				s.x = tr.x;
				s.y = tr.y;
				if (_supports3D) {
					s.z = tr.z;
					s.rotationX = tr.rotationX;
					s.rotationY = tr.rotationY;
					s.scaleZ = tr.scaleZ;
				}
				if (s.filters) {
					delete s.filters;
				}
				return s;
			},

			// @private analyzes two style objects (as returned by _getAllStyles()) and only looks for differences between them that contain tweenable values (like a number or color). It returns an object with a "difs" property which refers to an object containing only those isolated properties and values for tweening, and a "firstMPT" property which refers to the first MiniPropTween instance in a linked list that recorded all the starting values of the different properties so that we can revert to them at the end or beginning of the tween - we don't want the cascading to get messed up. The forceLookup parameter is an optional generic object with properties that should be forced into the results - this is necessary for className tweens that are overwriting others because imagine a scenario where a rollover/rollout adds/removes a class and the user swipes the mouse over the target SUPER fast, thus nothing actually changed yet and the subsequent comparison of the properties would indicate they match (especially when px rounding is taken into consideration), thus no tweening is necessary even though it SHOULD tween and remove those properties after the tween (otherwise the inline styles will contaminate things). See the className SpecialProp code for details.
			_cssDif = function(t, s1, s2, vars, forceLookup) {
				var difs = {},
					style = t.style,
					val, p, mpt;
				for (p in s2) {
					if (p !== "cssText") if (p !== "length") if (isNaN(p)) if (s1[p] !== (val = s2[p]) || (forceLookup && forceLookup[p])) if (p.indexOf("Origin") === -1) if (typeof(val) === "number" || typeof(val) === "string") {
						difs[p] = (val === "auto" && (p === "left" || p === "top")) ? _calculateOffset(t, p) : ((val === "" || val === "auto" || val === "none") && typeof(s1[p]) === "string" && s1[p].replace(_NaNExp, "") !== "") ? 0 : val; //if the ending value is defaulting ("" or "auto"), we check the starting value and if it can be parsed into a number (a string which could have a suffix too, like 700px), then we swap in 0 for "" or "auto" so that things actually tween.
						if (style[p] !== undefined) { //for className tweens, we must remember which properties already existed inline - the ones that didn't should be removed when the tween isn't in progress because they were only introduced to facilitate the transition between classes.
							mpt = new MiniPropTween(style, p, style[p], mpt);
						}
					}
				}
				if (vars) {
					for (p in vars) { //copy properties (except className)
						if (p !== "className") {
							difs[p] = vars[p];
						}
					}
				}
				return {difs:difs, firstMPT:mpt};
			},
			_dimensions = {width:["Left","Right"], height:["Top","Bottom"]},
			_margins = ["marginLeft","marginRight","marginTop","marginBottom"],

			/**
			 * @private Gets the width or height of an element
			 * @param {!Object} t Target element
			 * @param {!string} p Property name ("width" or "height")
			 * @param {Object=} cs Computed style object (if one exists). Just a speed optimization.
			 * @return {number} Dimension (in pixels)
			 */
			_getDimension = function(t, p, cs) {
				var v = parseFloat((p === "width") ? t.offsetWidth : t.offsetHeight),
					a = _dimensions[p],
					i = a.length;
				cs = cs || _getComputedStyle(t, null);
				while (--i > -1) {
					v -= parseFloat( _getStyle(t, "padding" + a[i], cs, true) ) || 0;
					v -= parseFloat( _getStyle(t, "border" + a[i] + "Width", cs, true) ) || 0;
				}
				return v;
			},

			// @private Parses position-related complex strings like "top left" or "50px 10px" or "70% 20%", etc. which are used for things like transformOrigin or backgroundPosition. Optionally decorates a supplied object (recObj) with the following properties: "ox" (offsetX), "oy" (offsetY), "oxp" (if true, "ox" is a percentage not a pixel value), and "oxy" (if true, "oy" is a percentage not a pixel value)
			_parsePosition = function(v, recObj) {
				if (v === "contain" || v === "auto" || v === "auto auto") {
					return v + " ";
				}
				if (v == null || v === "") { //note: Firefox uses "auto auto" as default whereas Chrome uses "auto".
					v = "0 0";
				}
				var a = v.split(" "),
					x = (v.indexOf("left") !== -1) ? "0%" : (v.indexOf("right") !== -1) ? "100%" : a[0],
					y = (v.indexOf("top") !== -1) ? "0%" : (v.indexOf("bottom") !== -1) ? "100%" : a[1];
				if (y == null) {
					y = (x === "center") ? "50%" : "0";
				} else if (y === "center") {
					y = "50%";
				}
				if (x === "center" || (isNaN(parseFloat(x)) && (x + "").indexOf("=") === -1)) { //remember, the user could flip-flop the values and say "bottom center" or "center bottom", etc. "center" is ambiguous because it could be used to describe horizontal or vertical, hence the isNaN(). If there's an "=" sign in the value, it's relative.
					x = "50%";
				}
				v = x + " " + y + ((a.length > 2) ? " " + a[2] : "");
				if (recObj) {
					recObj.oxp = (x.indexOf("%") !== -1);
					recObj.oyp = (y.indexOf("%") !== -1);
					recObj.oxr = (x.charAt(1) === "=");
					recObj.oyr = (y.charAt(1) === "=");
					recObj.ox = parseFloat(x.replace(_NaNExp, ""));
					recObj.oy = parseFloat(y.replace(_NaNExp, ""));
					recObj.v = v;
				}
				return recObj || v;
			},

			/**
			 * @private Takes an ending value (typically a string, but can be a number) and a starting value and returns the change between the two, looking for relative value indicators like += and -= and it also ignores suffixes (but make sure the ending value starts with a number or +=/-= and that the starting value is a NUMBER!)
			 * @param {(number|string)} e End value which is typically a string, but could be a number
			 * @param {(number|string)} b Beginning value which is typically a string but could be a number
			 * @return {number} Amount of change between the beginning and ending values (relative values that have a "+=" or "-=" are recognized)
			 */
			_parseChange = function(e, b) {
				return (typeof(e) === "string" && e.charAt(1) === "=") ? parseInt(e.charAt(0) + "1", 10) * parseFloat(e.substr(2)) : parseFloat(e) - parseFloat(b);
			},

			/**
			 * @private Takes a value and a default number, checks if the value is relative, null, or numeric and spits back a normalized number accordingly. Primarily used in the _parseTransform() function.
			 * @param {Object} v Value to be parsed
			 * @param {!number} d Default value (which is also used for relative calculations if "+=" or "-=" is found in the first parameter)
			 * @return {number} Parsed value
			 */
			_parseVal = function(v, d) {
				return (v == null) ? d : (typeof(v) === "string" && v.charAt(1) === "=") ? parseInt(v.charAt(0) + "1", 10) * parseFloat(v.substr(2)) + d : parseFloat(v);
			},

			/**
			 * @private Translates strings like "40deg" or "40" or 40rad" or "+=40deg" or "270_short" or "-90_cw" or "+=45_ccw" to a numeric radian angle. Of course a starting/default value must be fed in too so that relative values can be calculated properly.
			 * @param {Object} v Value to be parsed
			 * @param {!number} d Default value (which is also used for relative calculations if "+=" or "-=" is found in the first parameter)
			 * @param {string=} p property name for directionalEnd (optional - only used when the parsed value is directional ("_short", "_cw", or "_ccw" suffix). We need a way to store the uncompensated value so that at the end of the tween, we set it to exactly what was requested with no directional compensation). Property name would be "rotation", "rotationX", or "rotationY"
			 * @param {Object=} directionalEnd An object that will store the raw end values for directional angles ("_short", "_cw", or "_ccw" suffix). We need a way to store the uncompensated value so that at the end of the tween, we set it to exactly what was requested with no directional compensation.
			 * @return {number} parsed angle in radians
			 */
			_parseAngle = function(v, d, p, directionalEnd) {
				var min = 0.000001,
					cap, split, dif, result, isRelative;
				if (v == null) {
					result = d;
				} else if (typeof(v) === "number") {
					result = v;
				} else {
					cap = 360;
					split = v.split("_");
					isRelative = (v.charAt(1) === "=");
					dif = (isRelative ? parseInt(v.charAt(0) + "1", 10) * parseFloat(split[0].substr(2)) : parseFloat(split[0])) * ((v.indexOf("rad") === -1) ? 1 : _RAD2DEG) - (isRelative ? 0 : d);
					if (split.length) {
						if (directionalEnd) {
							directionalEnd[p] = d + dif;
						}
						if (v.indexOf("short") !== -1) {
							dif = dif % cap;
							if (dif !== dif % (cap / 2)) {
								dif = (dif < 0) ? dif + cap : dif - cap;
							}
						}
						if (v.indexOf("_cw") !== -1 && dif < 0) {
							dif = ((dif + cap * 9999999999) % cap) - ((dif / cap) | 0) * cap;
						} else if (v.indexOf("ccw") !== -1 && dif > 0) {
							dif = ((dif - cap * 9999999999) % cap) - ((dif / cap) | 0) * cap;
						}
					}
					result = d + dif;
				}
				if (result < min && result > -min) {
					result = 0;
				}
				return result;
			},

			_colorLookup = {aqua:[0,255,255],
				lime:[0,255,0],
				silver:[192,192,192],
				black:[0,0,0],
				maroon:[128,0,0],
				teal:[0,128,128],
				blue:[0,0,255],
				navy:[0,0,128],
				white:[255,255,255],
				fuchsia:[255,0,255],
				olive:[128,128,0],
				yellow:[255,255,0],
				orange:[255,165,0],
				gray:[128,128,128],
				purple:[128,0,128],
				green:[0,128,0],
				red:[255,0,0],
				pink:[255,192,203],
				cyan:[0,255,255],
				transparent:[255,255,255,0]},

			_hue = function(h, m1, m2) {
				h = (h < 0) ? h + 1 : (h > 1) ? h - 1 : h;
				return ((((h * 6 < 1) ? m1 + (m2 - m1) * h * 6 : (h < 0.5) ? m2 : (h * 3 < 2) ? m1 + (m2 - m1) * (2 / 3 - h) * 6 : m1) * 255) + 0.5) | 0;
			},

			/**
			 * @private Parses a color (like #9F0, #FF9900, rgb(255,51,153) or hsl(108, 50%, 10%)) into an array with 3 elements for red, green, and blue or if toHSL parameter is true, it will populate the array with hue, saturation, and lightness values. If a relative value is found in an hsl() or hsla() string, it will preserve those relative prefixes and all the values in the array will be strings instead of numbers (in all other cases it will be populated with numbers).
			 * @param {(string|number)} v The value the should be parsed which could be a string like #9F0 or rgb(255,102,51) or rgba(255,0,0,0.5) or it could be a number like 0xFF00CC or even a named color like red, blue, purple, etc.
			 * @param {(boolean)} toHSL If true, an hsl() or hsla() value will be returned instead of rgb() or rgba()
			 * @return {Array.<number>} An array containing red, green, and blue (and optionally alpha) in that order, or if the toHSL parameter was true, the array will contain hue, saturation and lightness (and optionally alpha) in that order. Always numbers unless there's a relative prefix found in an hsl() or hsla() string and toHSL is true.
			 */
			_parseColor = CSSPlugin.parseColor = function(v, toHSL) {
				var a, r, g, b, h, s, l, max, min, d, wasHSL;
				if (!v) {
					a = _colorLookup.black;
				} else if (typeof(v) === "number") {
					a = [v >> 16, (v >> 8) & 255, v & 255];
				} else {
					if (v.charAt(v.length - 1) === ",") { //sometimes a trailing comma is included and we should chop it off (typically from a comma-delimited list of values like a textShadow:"2px 2px 2px blue, 5px 5px 5px rgb(255,0,0)" - in this example "blue," has a trailing comma. We could strip it out inside parseComplex() but we'd need to do it to the beginning and ending values plus it wouldn't provide protection from other potential scenarios like if the user passes in a similar value.
						v = v.substr(0, v.length - 1);
					}
					if (_colorLookup[v]) {
						a = _colorLookup[v];
					} else if (v.charAt(0) === "#") {
						if (v.length === 4) { //for shorthand like #9F0
							r = v.charAt(1);
							g = v.charAt(2);
							b = v.charAt(3);
							v = "#" + r + r + g + g + b + b;
						}
						v = parseInt(v.substr(1), 16);
						a = [v >> 16, (v >> 8) & 255, v & 255];
					} else if (v.substr(0, 3) === "hsl") {
						a = wasHSL = v.match(_numExp);
						if (!toHSL) {
							h = (Number(a[0]) % 360) / 360;
							s = Number(a[1]) / 100;
							l = Number(a[2]) / 100;
							g = (l <= 0.5) ? l * (s + 1) : l + s - l * s;
							r = l * 2 - g;
							if (a.length > 3) {
								a[3] = Number(v[3]);
							}
							a[0] = _hue(h + 1 / 3, r, g);
							a[1] = _hue(h, r, g);
							a[2] = _hue(h - 1 / 3, r, g);
						} else if (v.indexOf("=") !== -1) { //if relative values are found, just return the raw strings with the relative prefixes in place.
							return v.match(_relNumExp);
						}
					} else {
						a = v.match(_numExp) || _colorLookup.transparent;
					}
					a[0] = Number(a[0]);
					a[1] = Number(a[1]);
					a[2] = Number(a[2]);
					if (a.length > 3) {
						a[3] = Number(a[3]);
					}
				}
				if (toHSL && !wasHSL) {
					r = a[0] / 255;
					g = a[1] / 255;
					b = a[2] / 255;
					max = Math.max(r, g, b);
					min = Math.min(r, g, b);
					l = (max + min) / 2;
					if (max === min) {
						h = s = 0;
					} else {
						d = max - min;
						s = l > 0.5 ? d / (2 - max - min) : d / (max + min);
						h = (max === r) ? (g - b) / d + (g < b ? 6 : 0) : (max === g) ? (b - r) / d + 2 : (r - g) / d + 4;
						h *= 60;
					}
					a[0] = (h + 0.5) | 0;
					a[1] = (s * 100 + 0.5) | 0;
					a[2] = (l * 100 + 0.5) | 0;
				}
				return a;
			},
			_formatColors = function(s, toHSL) {
				var colors = s.match(_colorExp) || [],
					charIndex = 0,
					parsed = colors.length ? "" : s,
					i, color, temp;
				for (i = 0; i < colors.length; i++) {
					color = colors[i];
					temp = s.substr(charIndex, s.indexOf(color, charIndex)-charIndex);
					charIndex += temp.length + color.length;
					color = _parseColor(color, toHSL);
					if (color.length === 3) {
						color.push(1);
					}
					parsed += temp + (toHSL ? "hsla(" + color[0] + "," + color[1] + "%," + color[2] + "%," + color[3] : "rgba(" + color.join(",")) + ")";
				}
				return parsed;
			},
			_colorExp = "(?:\\b(?:(?:rgb|rgba|hsl|hsla)\\(.+?\\))|\\B#(?:[0-9a-f]{3}){1,2}\\b"; //we'll dynamically build this Regular Expression to conserve file size. After building it, it will be able to find rgb(), rgba(), # (hexadecimal), and named color values like red, blue, purple, etc.

		for (p in _colorLookup) {
			_colorExp += "|" + p + "\\b";
		}
		_colorExp = new RegExp(_colorExp+")", "gi");

		CSSPlugin.colorStringFilter = function(a) {
			var combined = a[0] + a[1],
				toHSL;
			_colorExp.lastIndex = 0;
			if (_colorExp.test(combined)) {
				toHSL = (combined.indexOf("hsl(") !== -1 || combined.indexOf("hsla(") !== -1);
				a[0] = _formatColors(a[0], toHSL);
				a[1] = _formatColors(a[1], toHSL);
			}
		};

		if (!TweenLite.defaultStringFilter) {
			TweenLite.defaultStringFilter = CSSPlugin.colorStringFilter;
		}

		/**
		 * @private Returns a formatter function that handles taking a string (or number in some cases) and returning a consistently formatted one in terms of delimiters, quantity of values, etc. For example, we may get boxShadow values defined as "0px red" or "0px 0px 10px rgb(255,0,0)" or "0px 0px 20px 20px #F00" and we need to ensure that what we get back is described with 4 numbers and a color. This allows us to feed it into the _parseComplex() method and split the values up appropriately. The neat thing about this _getFormatter() function is that the dflt defines a pattern as well as a default, so for example, _getFormatter("0px 0px 0px 0px #777", true) not only sets the default as 0px for all distances and #777 for the color, but also sets the pattern such that 4 numbers and a color will always get returned.
		 * @param {!string} dflt The default value and pattern to follow. So "0px 0px 0px 0px #777" will ensure that 4 numbers and a color will always get returned.
		 * @param {boolean=} clr If true, the values should be searched for color-related data. For example, boxShadow values typically contain a color whereas borderRadius don't.
		 * @param {boolean=} collapsible If true, the value is a top/left/right/bottom style one that acts like margin or padding, where if only one value is received, it's used for all 4; if 2 are received, the first is duplicated for 3rd (bottom) and the 2nd is duplicated for the 4th spot (left), etc.
		 * @return {Function} formatter function
		 */
		var _getFormatter = function(dflt, clr, collapsible, multi) {
				if (dflt == null) {
					return function(v) {return v;};
				}
				var dColor = clr ? (dflt.match(_colorExp) || [""])[0] : "",
					dVals = dflt.split(dColor).join("").match(_valuesExp) || [],
					pfx = dflt.substr(0, dflt.indexOf(dVals[0])),
					sfx = (dflt.charAt(dflt.length - 1) === ")") ? ")" : "",
					delim = (dflt.indexOf(" ") !== -1) ? " " : ",",
					numVals = dVals.length,
					dSfx = (numVals > 0) ? dVals[0].replace(_numExp, "") : "",
					formatter;
				if (!numVals) {
					return function(v) {return v;};
				}
				if (clr) {
					formatter = function(v) {
						var color, vals, i, a;
						if (typeof(v) === "number") {
							v += dSfx;
						} else if (multi && _commasOutsideParenExp.test(v)) {
							a = v.replace(_commasOutsideParenExp, "|").split("|");
							for (i = 0; i < a.length; i++) {
								a[i] = formatter(a[i]);
							}
							return a.join(",");
						}
						color = (v.match(_colorExp) || [dColor])[0];
						vals = v.split(color).join("").match(_valuesExp) || [];
						i = vals.length;
						if (numVals > i--) {
							while (++i < numVals) {
								vals[i] = collapsible ? vals[(((i - 1) / 2) | 0)] : dVals[i];
							}
						}
						return pfx + vals.join(delim) + delim + color + sfx + (v.indexOf("inset") !== -1 ? " inset" : "");
					};
					return formatter;

				}
				formatter = function(v) {
					var vals, a, i;
					if (typeof(v) === "number") {
						v += dSfx;
					} else if (multi && _commasOutsideParenExp.test(v)) {
						a = v.replace(_commasOutsideParenExp, "|").split("|");
						for (i = 0; i < a.length; i++) {
							a[i] = formatter(a[i]);
						}
						return a.join(",");
					}
					vals = v.match(_valuesExp) || [];
					i = vals.length;
					if (numVals > i--) {
						while (++i < numVals) {
							vals[i] = collapsible ? vals[(((i - 1) / 2) | 0)] : dVals[i];
						}
					}
					return pfx + vals.join(delim) + sfx;
				};
				return formatter;
			},

			/**
			 * @private returns a formatter function that's used for edge-related values like marginTop, marginLeft, paddingBottom, paddingRight, etc. Just pass a comma-delimited list of property names related to the edges.
			 * @param {!string} props a comma-delimited list of property names in order from top to left, like "marginTop,marginRight,marginBottom,marginLeft"
			 * @return {Function} a formatter function
			 */
			_getEdgeParser = function(props) {
				props = props.split(",");
				return function(t, e, p, cssp, pt, plugin, vars) {
					var a = (e + "").split(" "),
						i;
					vars = {};
					for (i = 0; i < 4; i++) {
						vars[props[i]] = a[i] = a[i] || a[(((i - 1) / 2) >> 0)];
					}
					return cssp.parse(t, vars, pt, plugin);
				};
			},

			// @private used when other plugins must tween values first, like BezierPlugin or ThrowPropsPlugin, etc. That plugin's setRatio() gets called first so that the values are updated, and then we loop through the MiniPropTweens  which handle copying the values into their appropriate slots so that they can then be applied correctly in the main CSSPlugin setRatio() method. Remember, we typically create a proxy object that has a bunch of uniquely-named properties that we feed to the sub-plugin and it does its magic normally, and then we must interpret those values and apply them to the css because often numbers must get combined/concatenated, suffixes added, etc. to work with css, like boxShadow could have 4 values plus a color.
			_setPluginRatio = _internals._setPluginRatio = function(v) {
				this.plugin.setRatio(v);
				var d = this.data,
					proxy = d.proxy,
					mpt = d.firstMPT,
					min = 0.000001,
					val, pt, i, str, p;
				while (mpt) {
					val = proxy[mpt.v];
					if (mpt.r) {
						val = Math.round(val);
					} else if (val < min && val > -min) {
						val = 0;
					}
					mpt.t[mpt.p] = val;
					mpt = mpt._next;
				}
				if (d.autoRotate) {
					d.autoRotate.rotation = proxy.rotation;
				}
				//at the end, we must set the CSSPropTween's "e" (end) value dynamically here because that's what is used in the final setRatio() method. Same for "b" at the beginning.
				if (v === 1 || v === 0) {
					mpt = d.firstMPT;
					p = (v === 1) ? "e" : "b";
					while (mpt) {
						pt = mpt.t;
						if (!pt.type) {
							pt[p] = pt.s + pt.xs0;
						} else if (pt.type === 1) {
							str = pt.xs0 + pt.s + pt.xs1;
							for (i = 1; i < pt.l; i++) {
								str += pt["xn"+i] + pt["xs"+(i+1)];
							}
							pt[p] = str;
						}
						mpt = mpt._next;
					}
				}
			},

			/**
			 * @private @constructor Used by a few SpecialProps to hold important values for proxies. For example, _parseToProxy() creates a MiniPropTween instance for each property that must get tweened on the proxy, and we record the original property name as well as the unique one we create for the proxy, plus whether or not the value needs to be rounded plus the original value.
			 * @param {!Object} t target object whose property we're tweening (often a CSSPropTween)
			 * @param {!string} p property name
			 * @param {(number|string|object)} v value
			 * @param {MiniPropTween=} next next MiniPropTween in the linked list
			 * @param {boolean=} r if true, the tweened value should be rounded to the nearest integer
			 */
			MiniPropTween = function(t, p, v, next, r) {
				this.t = t;
				this.p = p;
				this.v = v;
				this.r = r;
				if (next) {
					next._prev = this;
					this._next = next;
				}
			},

			/**
			 * @private Most other plugins (like BezierPlugin and ThrowPropsPlugin and others) can only tween numeric values, but CSSPlugin must accommodate special values that have a bunch of extra data (like a suffix or strings between numeric values, etc.). For example, boxShadow has values like "10px 10px 20px 30px rgb(255,0,0)" which would utterly confuse other plugins. This method allows us to split that data apart and grab only the numeric data and attach it to uniquely-named properties of a generic proxy object ({}) so that we can feed that to virtually any plugin to have the numbers tweened. However, we must also keep track of which properties from the proxy go with which CSSPropTween values and instances. So we create a linked list of MiniPropTweens. Each one records a target (the original CSSPropTween), property (like "s" or "xn1" or "xn2") that we're tweening and the unique property name that was used for the proxy (like "boxShadow_xn1" and "boxShadow_xn2") and whether or not they need to be rounded. That way, in the _setPluginRatio() method we can simply copy the values over from the proxy to the CSSPropTween instance(s). Then, when the main CSSPlugin setRatio() method runs and applies the CSSPropTween values accordingly, they're updated nicely. So the external plugin tweens the numbers, _setPluginRatio() copies them over, and setRatio() acts normally, applying css-specific values to the element.
			 * This method returns an object that has the following properties:
			 *  - proxy: a generic object containing the starting values for all the properties that will be tweened by the external plugin.  This is what we feed to the external _onInitTween() as the target
			 *  - end: a generic object containing the ending values for all the properties that will be tweened by the external plugin. This is what we feed to the external plugin's _onInitTween() as the destination values
			 *  - firstMPT: the first MiniPropTween in the linked list
			 *  - pt: the first CSSPropTween in the linked list that was created when parsing. If shallow is true, this linked list will NOT attach to the one passed into the _parseToProxy() as the "pt" (4th) parameter.
			 * @param {!Object} t target object to be tweened
			 * @param {!(Object|string)} vars the object containing the information about the tweening values (typically the end/destination values) that should be parsed
			 * @param {!CSSPlugin} cssp The CSSPlugin instance
			 * @param {CSSPropTween=} pt the next CSSPropTween in the linked list
			 * @param {TweenPlugin=} plugin the external TweenPlugin instance that will be handling tweening the numeric values
			 * @param {boolean=} shallow if true, the resulting linked list from the parse will NOT be attached to the CSSPropTween that was passed in as the "pt" (4th) parameter.
			 * @return An object containing the following properties: proxy, end, firstMPT, and pt (see above for descriptions)
			 */
			_parseToProxy = _internals._parseToProxy = function(t, vars, cssp, pt, plugin, shallow) {
				var bpt = pt,
					start = {},
					end = {},
					transform = cssp._transform,
					oldForce = _forcePT,
					i, p, xp, mpt, firstPT;
				cssp._transform = null;
				_forcePT = vars;
				pt = firstPT = cssp.parse(t, vars, pt, plugin);
				_forcePT = oldForce;
				//break off from the linked list so the new ones are isolated.
				if (shallow) {
					cssp._transform = transform;
					if (bpt) {
						bpt._prev = null;
						if (bpt._prev) {
							bpt._prev._next = null;
						}
					}
				}
				while (pt && pt !== bpt) {
					if (pt.type <= 1) {
						p = pt.p;
						end[p] = pt.s + pt.c;
						start[p] = pt.s;
						if (!shallow) {
							mpt = new MiniPropTween(pt, "s", p, mpt, pt.r);
							pt.c = 0;
						}
						if (pt.type === 1) {
							i = pt.l;
							while (--i > 0) {
								xp = "xn" + i;
								p = pt.p + "_" + xp;
								end[p] = pt.data[xp];
								start[p] = pt[xp];
								if (!shallow) {
									mpt = new MiniPropTween(pt, xp, p, mpt, pt.rxp[xp]);
								}
							}
						}
					}
					pt = pt._next;
				}
				return {proxy:start, end:end, firstMPT:mpt, pt:firstPT};
			},



			/**
			 * @constructor Each property that is tweened has at least one CSSPropTween associated with it. These instances store important information like the target, property, starting value, amount of change, etc. They can also optionally have a number of "extra" strings and numeric values named xs1, xn1, xs2, xn2, xs3, xn3, etc. where "s" indicates string and "n" indicates number. These can be pieced together in a complex-value tween (type:1) that has alternating types of data like a string, number, string, number, etc. For example, boxShadow could be "5px 5px 8px rgb(102, 102, 51)". In that value, there are 6 numbers that may need to tween and then pieced back together into a string again with spaces, suffixes, etc. xs0 is special in that it stores the suffix for standard (type:0) tweens, -OR- the first string (prefix) in a complex-value (type:1) CSSPropTween -OR- it can be the non-tweening value in a type:-1 CSSPropTween. We do this to conserve memory.
			 * CSSPropTweens have the following optional properties as well (not defined through the constructor):
			 *  - l: Length in terms of the number of extra properties that the CSSPropTween has (default: 0). For example, for a boxShadow we may need to tween 5 numbers in which case l would be 5; Keep in mind that the start/end values for the first number that's tweened are always stored in the s and c properties to conserve memory. All additional values thereafter are stored in xn1, xn2, etc.
			 *  - xfirst: The first instance of any sub-CSSPropTweens that are tweening properties of this instance. For example, we may split up a boxShadow tween so that there's a main CSSPropTween of type:1 that has various xs* and xn* values associated with the h-shadow, v-shadow, blur, color, etc. Then we spawn a CSSPropTween for each of those that has a higher priority and runs BEFORE the main CSSPropTween so that the values are all set by the time it needs to re-assemble them. The xfirst gives us an easy way to identify the first one in that chain which typically ends at the main one (because they're all prepende to the linked list)
			 *  - plugin: The TweenPlugin instance that will handle the tweening of any complex values. For example, sometimes we don't want to use normal subtweens (like xfirst refers to) to tween the values - we might want ThrowPropsPlugin or BezierPlugin some other plugin to do the actual tweening, so we create a plugin instance and store a reference here. We need this reference so that if we get a request to round values or disable a tween, we can pass along that request.
			 *  - data: Arbitrary data that needs to be stored with the CSSPropTween. Typically if we're going to have a plugin handle the tweening of a complex-value tween, we create a generic object that stores the END values that we're tweening to and the CSSPropTween's xs1, xs2, etc. have the starting values. We store that object as data. That way, we can simply pass that object to the plugin and use the CSSPropTween as the target.
			 *  - setRatio: Only used for type:2 tweens that require custom functionality. In this case, we call the CSSPropTween's setRatio() method and pass the ratio each time the tween updates. This isn't quite as efficient as doing things directly in the CSSPlugin's setRatio() method, but it's very convenient and flexible.
			 * @param {!Object} t Target object whose property will be tweened. Often a DOM element, but not always. It could be anything.
			 * @param {string} p Property to tween (name). For example, to tween element.width, p would be "width".
			 * @param {number} s Starting numeric value
			 * @param {number} c Change in numeric value over the course of the entire tween. For example, if element.width starts at 5 and should end at 100, c would be 95.
			 * @param {CSSPropTween=} next The next CSSPropTween in the linked list. If one is defined, we will define its _prev as the new instance, and the new instance's _next will be pointed at it.
			 * @param {number=} type The type of CSSPropTween where -1 = a non-tweening value, 0 = a standard simple tween, 1 = a complex value (like one that has multiple numbers in a comma- or space-delimited string like border:"1px solid red"), and 2 = one that uses a custom setRatio function that does all of the work of applying the values on each update.
			 * @param {string=} n Name of the property that should be used for overwriting purposes which is typically the same as p but not always. For example, we may need to create a subtween for the 2nd part of a "clip:rect(...)" tween in which case "p" might be xs1 but "n" is still "clip"
			 * @param {boolean=} r If true, the value(s) should be rounded
			 * @param {number=} pr Priority in the linked list order. Higher priority CSSPropTweens will be updated before lower priority ones. The default priority is 0.
			 * @param {string=} b Beginning value. We store this to ensure that it is EXACTLY what it was when the tween began without any risk of interpretation issues.
			 * @param {string=} e Ending value. We store this to ensure that it is EXACTLY what the user defined at the end of the tween without any risk of interpretation issues.
			 */
			CSSPropTween = _internals.CSSPropTween = function(t, p, s, c, next, type, n, r, pr, b, e) {
				this.t = t; //target
				this.p = p; //property
				this.s = s; //starting value
				this.c = c; //change value
				this.n = n || p; //name that this CSSPropTween should be associated to (usually the same as p, but not always - n is what overwriting looks at)
				if (!(t instanceof CSSPropTween)) {
					_overwriteProps.push(this.n);
				}
				this.r = r; //round (boolean)
				this.type = type || 0; //0 = normal tween, -1 = non-tweening (in which case xs0 will be applied to the target's property, like tp.t[tp.p] = tp.xs0), 1 = complex-value SpecialProp, 2 = custom setRatio() that does all the work
				if (pr) {
					this.pr = pr;
					_hasPriority = true;
				}
				this.b = (b === undefined) ? s : b;
				this.e = (e === undefined) ? s + c : e;
				if (next) {
					this._next = next;
					next._prev = this;
				}
			},

			_addNonTweeningNumericPT = function(target, prop, start, end, next, overwriteProp) { //cleans up some code redundancies and helps minification. Just a fast way to add a NUMERIC non-tweening CSSPropTween
				var pt = new CSSPropTween(target, prop, start, end - start, next, -1, overwriteProp);
				pt.b = start;
				pt.e = pt.xs0 = end;
				return pt;
			},

			/**
			 * Takes a target, the beginning value and ending value (as strings) and parses them into a CSSPropTween (possibly with child CSSPropTweens) that accommodates multiple numbers, colors, comma-delimited values, etc. For example:
			 * sp.parseComplex(element, "boxShadow", "5px 10px 20px rgb(255,102,51)", "0px 0px 0px red", true, "0px 0px 0px rgb(0,0,0,0)", pt);
			 * It will walk through the beginning and ending values (which should be in the same format with the same number and type of values) and figure out which parts are numbers, what strings separate the numeric/tweenable values, and then create the CSSPropTweens accordingly. If a plugin is defined, no child CSSPropTweens will be created. Instead, the ending values will be stored in the "data" property of the returned CSSPropTween like: {s:-5, xn1:-10, xn2:-20, xn3:255, xn4:0, xn5:0} so that it can be fed to any other plugin and it'll be plain numeric tweens but the recomposition of the complex value will be handled inside CSSPlugin's setRatio().
			 * If a setRatio is defined, the type of the CSSPropTween will be set to 2 and recomposition of the values will be the responsibility of that method.
			 *
			 * @param {!Object} t Target whose property will be tweened
			 * @param {!string} p Property that will be tweened (its name, like "left" or "backgroundColor" or "boxShadow")
			 * @param {string} b Beginning value
			 * @param {string} e Ending value
			 * @param {boolean} clrs If true, the value could contain a color value like "rgb(255,0,0)" or "#F00" or "red". The default is false, so no colors will be recognized (a performance optimization)
			 * @param {(string|number|Object)} dflt The default beginning value that should be used if no valid beginning value is defined or if the number of values inside the complex beginning and ending values don't match
			 * @param {?CSSPropTween} pt CSSPropTween instance that is the current head of the linked list (we'll prepend to this).
			 * @param {number=} pr Priority in the linked list order. Higher priority properties will be updated before lower priority ones. The default priority is 0.
			 * @param {TweenPlugin=} plugin If a plugin should handle the tweening of extra properties, pass the plugin instance here. If one is defined, then NO subtweens will be created for any extra properties (the properties will be created - just not additional CSSPropTween instances to tween them) because the plugin is expected to do so. However, the end values WILL be populated in the "data" property, like {s:100, xn1:50, xn2:300}
			 * @param {function(number)=} setRatio If values should be set in a custom function instead of being pieced together in a type:1 (complex-value) CSSPropTween, define that custom function here.
			 * @return {CSSPropTween} The first CSSPropTween in the linked list which includes the new one(s) added by the parseComplex() call.
			 */
			_parseComplex = CSSPlugin.parseComplex = function(t, p, b, e, clrs, dflt, pt, pr, plugin, setRatio) {
				//DEBUG: _log("parseComplex: "+p+", b: "+b+", e: "+e);
				b = b || dflt || "";
				pt = new CSSPropTween(t, p, 0, 0, pt, (setRatio ? 2 : 1), null, false, pr, b, e);
				e += ""; //ensures it's a string
				var ba = b.split(", ").join(",").split(" "), //beginning array
					ea = e.split(", ").join(",").split(" "), //ending array
					l = ba.length,
					autoRound = (_autoRound !== false),
					i, xi, ni, bv, ev, bnums, enums, bn, hasAlpha, temp, cv, str, useHSL;
				if (e.indexOf(",") !== -1 || b.indexOf(",") !== -1) {
					ba = ba.join(" ").replace(_commasOutsideParenExp, ", ").split(" ");
					ea = ea.join(" ").replace(_commasOutsideParenExp, ", ").split(" ");
					l = ba.length;
				}
				if (l !== ea.length) {
					//DEBUG: _log("mismatched formatting detected on " + p + " (" + b + " vs " + e + ")");
					ba = (dflt || "").split(" ");
					l = ba.length;
				}
				pt.plugin = plugin;
				pt.setRatio = setRatio;
				_colorExp.lastIndex = 0;
				for (i = 0; i < l; i++) {
					bv = ba[i];
					ev = ea[i];
					bn = parseFloat(bv);
					//if the value begins with a number (most common). It's fine if it has a suffix like px
					if (bn || bn === 0) {
						pt.appendXtra("", bn, _parseChange(ev, bn), ev.replace(_relNumExp, ""), (autoRound && ev.indexOf("px") !== -1), true);

					//if the value is a color
					} else if (clrs && _colorExp.test(bv)) {
						str = ev.charAt(ev.length - 1) === "," ? ")," : ")"; //if there's a comma at the end, retain it.
						useHSL = (ev.indexOf("hsl") !== -1 && _supportsOpacity);
						bv = _parseColor(bv, useHSL);
						ev = _parseColor(ev, useHSL);
						hasAlpha = (bv.length + ev.length > 6);
						if (hasAlpha && !_supportsOpacity && ev[3] === 0) { //older versions of IE don't support rgba(), so if the destination alpha is 0, just use "transparent" for the end color
							pt["xs" + pt.l] += pt.l ? " transparent" : "transparent";
							pt.e = pt.e.split(ea[i]).join("transparent");
						} else {
							if (!_supportsOpacity) { //old versions of IE don't support rgba().
								hasAlpha = false;
							}
							if (useHSL) {
								pt.appendXtra((hasAlpha ? "hsla(" : "hsl("), bv[0], _parseChange(ev[0], bv[0]), ",", false, true)
									.appendXtra("", bv[1], _parseChange(ev[1], bv[1]), "%,", false)
									.appendXtra("", bv[2], _parseChange(ev[2], bv[2]), (hasAlpha ? "%," : "%" + str), false);
							} else {
								pt.appendXtra((hasAlpha ? "rgba(" : "rgb("), bv[0], ev[0] - bv[0], ",", true, true)
									.appendXtra("", bv[1], ev[1] - bv[1], ",", true)
									.appendXtra("", bv[2], ev[2] - bv[2], (hasAlpha ? "," : str), true);
							}

							if (hasAlpha) {
								bv = (bv.length < 4) ? 1 : bv[3];
								pt.appendXtra("", bv, ((ev.length < 4) ? 1 : ev[3]) - bv, str, false);
							}
						}
						_colorExp.lastIndex = 0; //otherwise the test() on the RegExp could move the lastIndex and taint future results.

					} else {
						bnums = bv.match(_numExp); //gets each group of numbers in the beginning value string and drops them into an array

						//if no number is found, treat it as a non-tweening value and just append the string to the current xs.
						if (!bnums) {
							pt["xs" + pt.l] += pt.l ? " " + ev : ev;

						//loop through all the numbers that are found and construct the extra values on the pt.
						} else {
							enums = ev.match(_relNumExp); //get each group of numbers in the end value string and drop them into an array. We allow relative values too, like +=50 or -=.5
							if (!enums || enums.length !== bnums.length) {
								//DEBUG: _log("mismatched formatting detected on " + p + " (" + b + " vs " + e + ")");
								return pt;
							}
							ni = 0;
							for (xi = 0; xi < bnums.length; xi++) {
								cv = bnums[xi];
								temp = bv.indexOf(cv, ni);
								pt.appendXtra(bv.substr(ni, temp - ni), Number(cv), _parseChange(enums[xi], cv), "", (autoRound && bv.substr(temp + cv.length, 2) === "px"), (xi === 0));
								ni = temp + cv.length;
							}
							pt["xs" + pt.l] += bv.substr(ni);
						}
					}
				}
				//if there are relative values ("+=" or "-=" prefix), we need to adjust the ending value to eliminate the prefixes and combine the values properly.
				if (e.indexOf("=") !== -1) if (pt.data) {
					str = pt.xs0 + pt.data.s;
					for (i = 1; i < pt.l; i++) {
						str += pt["xs" + i] + pt.data["xn" + i];
					}
					pt.e = str + pt["xs" + i];
				}
				if (!pt.l) {
					pt.type = -1;
					pt.xs0 = pt.e;
				}
				return pt.xfirst || pt;
			},
			i = 9;


		p = CSSPropTween.prototype;
		p.l = p.pr = 0; //length (number of extra properties like xn1, xn2, xn3, etc.
		while (--i > 0) {
			p["xn" + i] = 0;
			p["xs" + i] = "";
		}
		p.xs0 = "";
		p._next = p._prev = p.xfirst = p.data = p.plugin = p.setRatio = p.rxp = null;


		/**
		 * Appends and extra tweening value to a CSSPropTween and automatically manages any prefix and suffix strings. The first extra value is stored in the s and c of the main CSSPropTween instance, but thereafter any extras are stored in the xn1, xn2, xn3, etc. The prefixes and suffixes are stored in the xs0, xs1, xs2, etc. properties. For example, if I walk through a clip value like "rect(10px, 5px, 0px, 20px)", the values would be stored like this:
		 * xs0:"rect(", s:10, xs1:"px, ", xn1:5, xs2:"px, ", xn2:0, xs3:"px, ", xn3:20, xn4:"px)"
		 * And they'd all get joined together when the CSSPlugin renders (in the setRatio() method).
		 * @param {string=} pfx Prefix (if any)
		 * @param {!number} s Starting value
		 * @param {!number} c Change in numeric value over the course of the entire tween. For example, if the start is 5 and the end is 100, the change would be 95.
		 * @param {string=} sfx Suffix (if any)
		 * @param {boolean=} r Round (if true).
		 * @param {boolean=} pad If true, this extra value should be separated by the previous one by a space. If there is no previous extra and pad is true, it will automatically drop the space.
		 * @return {CSSPropTween} returns itself so that multiple methods can be chained together.
		 */
		p.appendXtra = function(pfx, s, c, sfx, r, pad) {
			var pt = this,
				l = pt.l;
			pt["xs" + l] += (pad && l) ? " " + pfx : pfx || "";
			if (!c) if (l !== 0 && !pt.plugin) { //typically we'll combine non-changing values right into the xs to optimize performance, but we don't combine them when there's a plugin that will be tweening the values because it may depend on the values being split apart, like for a bezier, if a value doesn't change between the first and second iteration but then it does on the 3rd, we'll run into trouble because there's no xn slot for that value!
				pt["xs" + l] += s + (sfx || "");
				return pt;
			}
			pt.l++;
			pt.type = pt.setRatio ? 2 : 1;
			pt["xs" + pt.l] = sfx || "";
			if (l > 0) {
				pt.data["xn" + l] = s + c;
				pt.rxp["xn" + l] = r; //round extra property (we need to tap into this in the _parseToProxy() method)
				pt["xn" + l] = s;
				if (!pt.plugin) {
					pt.xfirst = new CSSPropTween(pt, "xn" + l, s, c, pt.xfirst || pt, 0, pt.n, r, pt.pr);
					pt.xfirst.xs0 = 0; //just to ensure that the property stays numeric which helps modern browsers speed up processing. Remember, in the setRatio() method, we do pt.t[pt.p] = val + pt.xs0 so if pt.xs0 is "" (the default), it'll cast the end value as a string. When a property is a number sometimes and a string sometimes, it prevents the compiler from locking in the data type, slowing things down slightly.
				}
				return pt;
			}
			pt.data = {s:s + c};
			pt.rxp = {};
			pt.s = s;
			pt.c = c;
			pt.r = r;
			return pt;
		};

		/**
		 * @constructor A SpecialProp is basically a css property that needs to be treated in a non-standard way, like if it may contain a complex value like boxShadow:"5px 10px 15px rgb(255, 102, 51)" or if it is associated with another plugin like ThrowPropsPlugin or BezierPlugin. Every SpecialProp is associated with a particular property name like "boxShadow" or "throwProps" or "bezier" and it will intercept those values in the vars object that's passed to the CSSPlugin and handle them accordingly.
		 * @param {!string} p Property name (like "boxShadow" or "throwProps")
		 * @param {Object=} options An object containing any of the following configuration options:
		 *                      - defaultValue: the default value
		 *                      - parser: A function that should be called when the associated property name is found in the vars. This function should return a CSSPropTween instance and it should ensure that it is properly inserted into the linked list. It will receive 4 paramters: 1) The target, 2) The value defined in the vars, 3) The CSSPlugin instance (whose _firstPT should be used for the linked list), and 4) A computed style object if one was calculated (this is a speed optimization that allows retrieval of starting values quicker)
		 *                      - formatter: a function that formats any value received for this special property (for example, boxShadow could take "5px 5px red" and format it to "5px 5px 0px 0px red" so that both the beginning and ending values have a common order and quantity of values.)
		 *                      - prefix: if true, we'll determine whether or not this property requires a vendor prefix (like Webkit or Moz or ms or O)
		 *                      - color: set this to true if the value for this SpecialProp may contain color-related values like rgb(), rgba(), etc.
		 *                      - priority: priority in the linked list order. Higher priority SpecialProps will be updated before lower priority ones. The default priority is 0.
		 *                      - multi: if true, the formatter should accommodate a comma-delimited list of values, like boxShadow could have multiple boxShadows listed out.
		 *                      - collapsible: if true, the formatter should treat the value like it's a top/right/bottom/left value that could be collapsed, like "5px" would apply to all, "5px, 10px" would use 5px for top/bottom and 10px for right/left, etc.
		 *                      - keyword: a special keyword that can [optionally] be found inside the value (like "inset" for boxShadow). This allows us to validate beginning/ending values to make sure they match (if the keyword is found in one, it'll be added to the other for consistency by default).
		 */
		var SpecialProp = function(p, options) {
				options = options || {};
				this.p = options.prefix ? _checkPropPrefix(p) || p : p;
				_specialProps[p] = _specialProps[this.p] = this;
				this.format = options.formatter || _getFormatter(options.defaultValue, options.color, options.collapsible, options.multi);
				if (options.parser) {
					this.parse = options.parser;
				}
				this.clrs = options.color;
				this.multi = options.multi;
				this.keyword = options.keyword;
				this.dflt = options.defaultValue;
				this.pr = options.priority || 0;
			},

			//shortcut for creating a new SpecialProp that can accept multiple properties as a comma-delimited list (helps minification). dflt can be an array for multiple values (we don't do a comma-delimited list because the default value may contain commas, like rect(0px,0px,0px,0px)). We attach this method to the SpecialProp class/object instead of using a private _createSpecialProp() method so that we can tap into it externally if necessary, like from another plugin.
			_registerComplexSpecialProp = _internals._registerComplexSpecialProp = function(p, options, defaults) {
				if (typeof(options) !== "object") {
					options = {parser:defaults}; //to make backwards compatible with older versions of BezierPlugin and ThrowPropsPlugin
				}
				var a = p.split(","),
					d = options.defaultValue,
					i, temp;
				defaults = defaults || [d];
				for (i = 0; i < a.length; i++) {
					options.prefix = (i === 0 && options.prefix);
					options.defaultValue = defaults[i] || d;
					temp = new SpecialProp(a[i], options);
				}
			},

			//creates a placeholder special prop for a plugin so that the property gets caught the first time a tween of it is attempted, and at that time it makes the plugin register itself, thus taking over for all future tweens of that property. This allows us to not mandate that things load in a particular order and it also allows us to log() an error that informs the user when they attempt to tween an external plugin-related property without loading its .js file.
			_registerPluginProp = function(p) {
				if (!_specialProps[p]) {
					var pluginName = p.charAt(0).toUpperCase() + p.substr(1) + "Plugin";
					_registerComplexSpecialProp(p, {parser:function(t, e, p, cssp, pt, plugin, vars) {
						var pluginClass = _globals.com.greensock.plugins[pluginName];
						if (!pluginClass) {
							_log("Error: " + pluginName + " js file not loaded.");
							return pt;
						}
						pluginClass._cssRegister();
						return _specialProps[p].parse(t, e, p, cssp, pt, plugin, vars);
					}});
				}
			};


		p = SpecialProp.prototype;

		/**
		 * Alias for _parseComplex() that automatically plugs in certain values for this SpecialProp, like its property name, whether or not colors should be sensed, the default value, and priority. It also looks for any keyword that the SpecialProp defines (like "inset" for boxShadow) and ensures that the beginning and ending values have the same number of values for SpecialProps where multi is true (like boxShadow and textShadow can have a comma-delimited list)
		 * @param {!Object} t target element
		 * @param {(string|number|object)} b beginning value
		 * @param {(string|number|object)} e ending (destination) value
		 * @param {CSSPropTween=} pt next CSSPropTween in the linked list
		 * @param {TweenPlugin=} plugin If another plugin will be tweening the complex value, that TweenPlugin instance goes here.
		 * @param {function=} setRatio If a custom setRatio() method should be used to handle this complex value, that goes here.
		 * @return {CSSPropTween=} First CSSPropTween in the linked list
		 */
		p.parseComplex = function(t, b, e, pt, plugin, setRatio) {
			var kwd = this.keyword,
				i, ba, ea, l, bi, ei;
			//if this SpecialProp's value can contain a comma-delimited list of values (like boxShadow or textShadow), we must parse them in a special way, and look for a keyword (like "inset" for boxShadow) and ensure that the beginning and ending BOTH have it if the end defines it as such. We also must ensure that there are an equal number of values specified (we can't tween 1 boxShadow to 3 for example)
			if (this.multi) if (_commasOutsideParenExp.test(e) || _commasOutsideParenExp.test(b)) {
				ba = b.replace(_commasOutsideParenExp, "|").split("|");
				ea = e.replace(_commasOutsideParenExp, "|").split("|");
			} else if (kwd) {
				ba = [b];
				ea = [e];
			}
			if (ea) {
				l = (ea.length > ba.length) ? ea.length : ba.length;
				for (i = 0; i < l; i++) {
					b = ba[i] = ba[i] || this.dflt;
					e = ea[i] = ea[i] || this.dflt;
					if (kwd) {
						bi = b.indexOf(kwd);
						ei = e.indexOf(kwd);
						if (bi !== ei) {
							if (ei === -1) { //if the keyword isn't in the end value, remove it from the beginning one.
								ba[i] = ba[i].split(kwd).join("");
							} else if (bi === -1) { //if the keyword isn't in the beginning, add it.
								ba[i] += " " + kwd;
							}
						}
					}
				}
				b = ba.join(", ");
				e = ea.join(", ");
			}
			return _parseComplex(t, this.p, b, e, this.clrs, this.dflt, pt, this.pr, plugin, setRatio);
		};

		/**
		 * Accepts a target and end value and spits back a CSSPropTween that has been inserted into the CSSPlugin's linked list and conforms with all the conventions we use internally, like type:-1, 0, 1, or 2, setting up any extra property tweens, priority, etc. For example, if we have a boxShadow SpecialProp and call:
		 * this._firstPT = sp.parse(element, "5px 10px 20px rgb(2550,102,51)", "boxShadow", this);
		 * It should figure out the starting value of the element's boxShadow, compare it to the provided end value and create all the necessary CSSPropTweens of the appropriate types to tween the boxShadow. The CSSPropTween that gets spit back should already be inserted into the linked list (the 4th parameter is the current head, so prepend to that).
		 * @param {!Object} t Target object whose property is being tweened
		 * @param {Object} e End value as provided in the vars object (typically a string, but not always - like a throwProps would be an object).
		 * @param {!string} p Property name
		 * @param {!CSSPlugin} cssp The CSSPlugin instance that should be associated with this tween.
		 * @param {?CSSPropTween} pt The CSSPropTween that is the current head of the linked list (we'll prepend to it)
		 * @param {TweenPlugin=} plugin If a plugin will be used to tween the parsed value, this is the plugin instance.
		 * @param {Object=} vars Original vars object that contains the data for parsing.
		 * @return {CSSPropTween} The first CSSPropTween in the linked list which includes the new one(s) added by the parse() call.
		 */
		p.parse = function(t, e, p, cssp, pt, plugin, vars) {
			return this.parseComplex(t.style, this.format(_getStyle(t, this.p, _cs, false, this.dflt)), this.format(e), pt, plugin);
		};

		/**
		 * Registers a special property that should be intercepted from any "css" objects defined in tweens. This allows you to handle them however you want without CSSPlugin doing it for you. The 2nd parameter should be a function that accepts 3 parameters:
		 *  1) Target object whose property should be tweened (typically a DOM element)
		 *  2) The end/destination value (could be a string, number, object, or whatever you want)
		 *  3) The tween instance (you probably don't need to worry about this, but it can be useful for looking up information like the duration)
		 *
		 * Then, your function should return a function which will be called each time the tween gets rendered, passing a numeric "ratio" parameter to your function that indicates the change factor (usually between 0 and 1). For example:
		 *
		 * CSSPlugin.registerSpecialProp("myCustomProp", function(target, value, tween) {
		 *      var start = target.style.width;
		 *      return function(ratio) {
		 *              target.style.width = (start + value * ratio) + "px";
		 *              console.log("set width to " + target.style.width);
		 *          }
		 * }, 0);
		 *
		 * Then, when I do this tween, it will trigger my special property:
		 *
		 * TweenLite.to(element, 1, {css:{myCustomProp:100}});
		 *
		 * In the example, of course, we're just changing the width, but you can do anything you want.
		 *
		 * @param {!string} name Property name (or comma-delimited list of property names) that should be intercepted and handled by your function. For example, if I define "myCustomProp", then it would handle that portion of the following tween: TweenLite.to(element, 1, {css:{myCustomProp:100}})
		 * @param {!function(Object, Object, Object, string):function(number)} onInitTween The function that will be called when a tween of this special property is performed. The function will receive 4 parameters: 1) Target object that should be tweened, 2) Value that was passed to the tween, 3) The tween instance itself (rarely used), and 4) The property name that's being tweened. Your function should return a function that should be called on every update of the tween. That function will receive a single parameter that is a "change factor" value (typically between 0 and 1) indicating the amount of change as a ratio. You can use this to determine how to set the values appropriately in your function.
		 * @param {number=} priority Priority that helps the engine determine the order in which to set the properties (default: 0). Higher priority properties will be updated before lower priority ones.
		 */
		CSSPlugin.registerSpecialProp = function(name, onInitTween, priority) {
			_registerComplexSpecialProp(name, {parser:function(t, e, p, cssp, pt, plugin, vars) {
				var rv = new CSSPropTween(t, p, 0, 0, pt, 2, p, false, priority);
				rv.plugin = plugin;
				rv.setRatio = onInitTween(t, e, cssp._tween, p);
				return rv;
			}, priority:priority});
		};

		_registerComplexSpecialProp("transform,scale,scaleX,scaleY,scaleZ,x,y,z,rotation,rotationX,rotationY,rotationZ,skewX,skewY,shortRotation,shortRotationX,shortRotationY,shortRotationZ,transformOrigin,svgOrigin,transformPerspective,directionalRotation,parseTransform,force3D,skewType,xPercent,yPercent,smoothOrigin", {parser:function(t, e, p, cssp, pt, plugin, vars) {
			if (cssp._lastParsedTransform === vars) { return pt; } //only need to parse the transform once, and only if the browser supports it.
			cssp._lastParsedTransform = vars;
			var originalGSTransform = t._gsTransform,
				style = t.style,
				min = 0.000001,
				i = _transformProps.length,
				v = vars,
				endRotations = {},
				transformOriginString = "transformOrigin",
				m1, m2, skewY, copy, orig, has3D, hasChange, dr, x, y;
			if (vars.display) { //if the user is setting display during this tween, it may not be instantiated yet but we must force it here in order to get accurate readings. If display is "none", some browsers refuse to report the transform properties correctly.
				copy = _getStyle(t, "display");
				style.display = "block";
				m1 = _getTransform(t, _cs, true, vars.parseTransform);
				style.display = copy;
			} else {
				m1 = _getTransform(t, _cs, true, vars.parseTransform);
			}
			cssp._transform = m1;
			if (typeof(v.transform) === "string" && _transformProp) { //for values like transform:"rotate(60deg) scale(0.5, 0.8)"
				copy = _tempDiv.style; //don't use the original target because it might be SVG in which case some browsers don't report computed style correctly.
				copy[_transformProp] = v.transform;
				copy.display = "block"; //if display is "none", the browser often refuses to report the transform properties correctly.
				copy.position = "absolute";
				_doc.body.appendChild(_tempDiv);
				m2 = _getTransform(_tempDiv, null, false);
				_doc.body.removeChild(_tempDiv);
				if (!m2.perspective) {
					m2.perspective = m1.perspective; //tweening to no perspective gives very unintuitive results - just keep the same perspective in that case.
				}
				if (v.xPercent != null) {
					m2.xPercent = _parseVal(v.xPercent, m1.xPercent);
				}
				if (v.yPercent != null) {
					m2.yPercent = _parseVal(v.yPercent, m1.yPercent);
				}
			} else if (typeof(v) === "object") { //for values like scaleX, scaleY, rotation, x, y, skewX, and skewY or transform:{...} (object)
				m2 = {scaleX:_parseVal((v.scaleX != null) ? v.scaleX : v.scale, m1.scaleX),
					scaleY:_parseVal((v.scaleY != null) ? v.scaleY : v.scale, m1.scaleY),
					scaleZ:_parseVal(v.scaleZ, m1.scaleZ),
					x:_parseVal(v.x, m1.x),
					y:_parseVal(v.y, m1.y),
					z:_parseVal(v.z, m1.z),
					xPercent:_parseVal(v.xPercent, m1.xPercent),
					yPercent:_parseVal(v.yPercent, m1.yPercent),
					perspective:_parseVal(v.transformPerspective, m1.perspective)};
				dr = v.directionalRotation;
				if (dr != null) {
					if (typeof(dr) === "object") {
						for (copy in dr) {
							v[copy] = dr[copy];
						}
					} else {
						v.rotation = dr;
					}
				}
				if (typeof(v.x) === "string" && v.x.indexOf("%") !== -1) {
					m2.x = 0;
					m2.xPercent = _parseVal(v.x, m1.xPercent);
				}
				if (typeof(v.y) === "string" && v.y.indexOf("%") !== -1) {
					m2.y = 0;
					m2.yPercent = _parseVal(v.y, m1.yPercent);
				}

				m2.rotation = _parseAngle(("rotation" in v) ? v.rotation : ("shortRotation" in v) ? v.shortRotation + "_short" : ("rotationZ" in v) ? v.rotationZ : m1.rotation, m1.rotation, "rotation", endRotations);
				if (_supports3D) {
					m2.rotationX = _parseAngle(("rotationX" in v) ? v.rotationX : ("shortRotationX" in v) ? v.shortRotationX + "_short" : m1.rotationX || 0, m1.rotationX, "rotationX", endRotations);
					m2.rotationY = _parseAngle(("rotationY" in v) ? v.rotationY : ("shortRotationY" in v) ? v.shortRotationY + "_short" : m1.rotationY || 0, m1.rotationY, "rotationY", endRotations);
				}
				m2.skewX = (v.skewX == null) ? m1.skewX : _parseAngle(v.skewX, m1.skewX);

				//note: for performance reasons, we combine all skewing into the skewX and rotation values, ignoring skewY but we must still record it so that we can discern how much of the overall skew is attributed to skewX vs. skewY. Otherwise, if the skewY would always act relative (tween skewY to 10deg, for example, multiple times and if we always combine things into skewX, we can't remember that skewY was 10 from last time). Remember, a skewY of 10 degrees looks the same as a rotation of 10 degrees plus a skewX of -10 degrees.
				m2.skewY = (v.skewY == null) ? m1.skewY : _parseAngle(v.skewY, m1.skewY);
				if ((skewY = m2.skewY - m1.skewY)) {
					m2.skewX += skewY;
					m2.rotation += skewY;
				}
			}
			if (_supports3D && v.force3D != null) {
				m1.force3D = v.force3D;
				hasChange = true;
			}

			m1.skewType = v.skewType || m1.skewType || CSSPlugin.defaultSkewType;

			has3D = (m1.force3D || m1.z || m1.rotationX || m1.rotationY || m2.z || m2.rotationX || m2.rotationY || m2.perspective);
			if (!has3D && v.scale != null) {
				m2.scaleZ = 1; //no need to tween scaleZ.
			}

			while (--i > -1) {
				p = _transformProps[i];
				orig = m2[p] - m1[p];
				if (orig > min || orig < -min || v[p] != null || _forcePT[p] != null) {
					hasChange = true;
					pt = new CSSPropTween(m1, p, m1[p], orig, pt);
					if (p in endRotations) {
						pt.e = endRotations[p]; //directional rotations typically have compensated values during the tween, but we need to make sure they end at exactly what the user requested
					}
					pt.xs0 = 0; //ensures the value stays numeric in setRatio()
					pt.plugin = plugin;
					cssp._overwriteProps.push(pt.n);
				}
			}

			orig = v.transformOrigin;
			if (m1.svg && (orig || v.svgOrigin)) {
				x = m1.xOffset; //when we change the origin, in order to prevent things from jumping we adjust the x/y so we must record those here so that we can create PropTweens for them and flip them at the same time as the origin
				y = m1.yOffset;
				_parseSVGOrigin(t, _parsePosition(orig), m2, v.svgOrigin, v.smoothOrigin);
				pt = _addNonTweeningNumericPT(m1, "xOrigin", (originalGSTransform ? m1 : m2).xOrigin, m2.xOrigin, pt, transformOriginString); //note: if there wasn't a transformOrigin defined yet, just start with the destination one; it's wasteful otherwise, and it causes problems with fromTo() tweens. For example, TweenLite.to("#wheel", 3, {rotation:180, transformOrigin:"50% 50%", delay:1}); TweenLite.fromTo("#wheel", 3, {scale:0.5, transformOrigin:"50% 50%"}, {scale:1, delay:2}); would cause a jump when the from values revert at the beginning of the 2nd tween.
				pt = _addNonTweeningNumericPT(m1, "yOrigin", (originalGSTransform ? m1 : m2).yOrigin, m2.yOrigin, pt, transformOriginString);
				if (x !== m1.xOffset || y !== m1.yOffset) {
					pt = _addNonTweeningNumericPT(m1, "xOffset", (originalGSTransform ? x : m1.xOffset), m1.xOffset, pt, transformOriginString);
					pt = _addNonTweeningNumericPT(m1, "yOffset", (originalGSTransform ? y : m1.yOffset), m1.yOffset, pt, transformOriginString);
				}
				orig = _useSVGTransformAttr ? null : "0px 0px"; //certain browsers (like firefox) completely botch transform-origin, so we must remove it to prevent it from contaminating transforms. We manage it ourselves with xOrigin and yOrigin
			}
			if (orig || (_supports3D && has3D && m1.zOrigin)) { //if anything 3D is happening and there's a transformOrigin with a z component that's non-zero, we must ensure that the transformOrigin's z-component is set to 0 so that we can manually do those calculations to get around Safari bugs. Even if the user didn't specifically define a "transformOrigin" in this particular tween (maybe they did it via css directly).
				if (_transformProp) {
					hasChange = true;
					p = _transformOriginProp;
					orig = (orig || _getStyle(t, p, _cs, false, "50% 50%")) + ""; //cast as string to avoid errors
					pt = new CSSPropTween(style, p, 0, 0, pt, -1, transformOriginString);
					pt.b = style[p];
					pt.plugin = plugin;
					if (_supports3D) {
						copy = m1.zOrigin;
						orig = orig.split(" ");
						m1.zOrigin = ((orig.length > 2 && !(copy !== 0 && orig[2] === "0px")) ? parseFloat(orig[2]) : copy) || 0; //Safari doesn't handle the z part of transformOrigin correctly, so we'll manually handle it in the _set3DTransformRatio() method.
						pt.xs0 = pt.e = orig[0] + " " + (orig[1] || "50%") + " 0px"; //we must define a z value of 0px specifically otherwise iOS 5 Safari will stick with the old one (if one was defined)!
						pt = new CSSPropTween(m1, "zOrigin", 0, 0, pt, -1, pt.n); //we must create a CSSPropTween for the _gsTransform.zOrigin so that it gets reset properly at the beginning if the tween runs backward (as opposed to just setting m1.zOrigin here)
						pt.b = copy;
						pt.xs0 = pt.e = m1.zOrigin;
					} else {
						pt.xs0 = pt.e = orig;
					}

					//for older versions of IE (6-8), we need to manually calculate things inside the setRatio() function. We record origin x and y (ox and oy) and whether or not the values are percentages (oxp and oyp).
				} else {
					_parsePosition(orig + "", m1);
				}
			}
			if (hasChange) {
				cssp._transformType = (!(m1.svg && _useSVGTransformAttr) && (has3D || this._transformType === 3)) ? 3 : 2; //quicker than calling cssp._enableTransforms();
			}
			return pt;
		}, prefix:true});

		_registerComplexSpecialProp("boxShadow", {defaultValue:"0px 0px 0px 0px #999", prefix:true, color:true, multi:true, keyword:"inset"});

		_registerComplexSpecialProp("borderRadius", {defaultValue:"0px", parser:function(t, e, p, cssp, pt, plugin) {
			e = this.format(e);
			var props = ["borderTopLeftRadius","borderTopRightRadius","borderBottomRightRadius","borderBottomLeftRadius"],
				style = t.style,
				ea1, i, es2, bs2, bs, es, bn, en, w, h, esfx, bsfx, rel, hn, vn, em;
			w = parseFloat(t.offsetWidth);
			h = parseFloat(t.offsetHeight);
			ea1 = e.split(" ");
			for (i = 0; i < props.length; i++) { //if we're dealing with percentages, we must convert things separately for the horizontal and vertical axis!
				if (this.p.indexOf("border")) { //older browsers used a prefix
					props[i] = _checkPropPrefix(props[i]);
				}
				bs = bs2 = _getStyle(t, props[i], _cs, false, "0px");
				if (bs.indexOf(" ") !== -1) {
					bs2 = bs.split(" ");
					bs = bs2[0];
					bs2 = bs2[1];
				}
				es = es2 = ea1[i];
				bn = parseFloat(bs);
				bsfx = bs.substr((bn + "").length);
				rel = (es.charAt(1) === "=");
				if (rel) {
					en = parseInt(es.charAt(0)+"1", 10);
					es = es.substr(2);
					en *= parseFloat(es);
					esfx = es.substr((en + "").length - (en < 0 ? 1 : 0)) || "";
				} else {
					en = parseFloat(es);
					esfx = es.substr((en + "").length);
				}
				if (esfx === "") {
					esfx = _suffixMap[p] || bsfx;
				}
				if (esfx !== bsfx) {
					hn = _convertToPixels(t, "borderLeft", bn, bsfx); //horizontal number (we use a bogus "borderLeft" property just because the _convertToPixels() method searches for the keywords "Left", "Right", "Top", and "Bottom" to determine of it's a horizontal or vertical property, and we need "border" in the name so that it knows it should measure relative to the element itself, not its parent.
					vn = _convertToPixels(t, "borderTop", bn, bsfx); //vertical number
					if (esfx === "%") {
						bs = (hn / w * 100) + "%";
						bs2 = (vn / h * 100) + "%";
					} else if (esfx === "em") {
						em = _convertToPixels(t, "borderLeft", 1, "em");
						bs = (hn / em) + "em";
						bs2 = (vn / em) + "em";
					} else {
						bs = hn + "px";
						bs2 = vn + "px";
					}
					if (rel) {
						es = (parseFloat(bs) + en) + esfx;
						es2 = (parseFloat(bs2) + en) + esfx;
					}
				}
				pt = _parseComplex(style, props[i], bs + " " + bs2, es + " " + es2, false, "0px", pt);
			}
			return pt;
		}, prefix:true, formatter:_getFormatter("0px 0px 0px 0px", false, true)});
		_registerComplexSpecialProp("backgroundPosition", {defaultValue:"0 0", parser:function(t, e, p, cssp, pt, plugin) {
			var bp = "background-position",
				cs = (_cs || _getComputedStyle(t, null)),
				bs = this.format( ((cs) ? _ieVers ? cs.getPropertyValue(bp + "-x") + " " + cs.getPropertyValue(bp + "-y") : cs.getPropertyValue(bp) : t.currentStyle.backgroundPositionX + " " + t.currentStyle.backgroundPositionY) || "0 0"), //Internet Explorer doesn't report background-position correctly - we must query background-position-x and background-position-y and combine them (even in IE10). Before IE9, we must do the same with the currentStyle object and use camelCase
				es = this.format(e),
				ba, ea, i, pct, overlap, src;
			if ((bs.indexOf("%") !== -1) !== (es.indexOf("%") !== -1)) {
				src = _getStyle(t, "backgroundImage").replace(_urlExp, "");
				if (src && src !== "none") {
					ba = bs.split(" ");
					ea = es.split(" ");
					_tempImg.setAttribute("src", src); //set the temp IMG's src to the background-image so that we can measure its width/height
					i = 2;
					while (--i > -1) {
						bs = ba[i];
						pct = (bs.indexOf("%") !== -1);
						if (pct !== (ea[i].indexOf("%") !== -1)) {
							overlap = (i === 0) ? t.offsetWidth - _tempImg.width : t.offsetHeight - _tempImg.height;
							ba[i] = pct ? (parseFloat(bs) / 100 * overlap) + "px" : (parseFloat(bs) / overlap * 100) + "%";
						}
					}
					bs = ba.join(" ");
				}
			}
			return this.parseComplex(t.style, bs, es, pt, plugin);
		}, formatter:_parsePosition});
		_registerComplexSpecialProp("backgroundSize", {defaultValue:"0 0", formatter:_parsePosition});
		_registerComplexSpecialProp("perspective", {defaultValue:"0px", prefix:true});
		_registerComplexSpecialProp("perspectiveOrigin", {defaultValue:"50% 50%", prefix:true});
		_registerComplexSpecialProp("transformStyle", {prefix:true});
		_registerComplexSpecialProp("backfaceVisibility", {prefix:true});
		_registerComplexSpecialProp("userSelect", {prefix:true});
		_registerComplexSpecialProp("margin", {parser:_getEdgeParser("marginTop,marginRight,marginBottom,marginLeft")});
		_registerComplexSpecialProp("padding", {parser:_getEdgeParser("paddingTop,paddingRight,paddingBottom,paddingLeft")});
		_registerComplexSpecialProp("clip", {defaultValue:"rect(0px,0px,0px,0px)", parser:function(t, e, p, cssp, pt, plugin){
			var b, cs, delim;
			if (_ieVers < 9) { //IE8 and earlier don't report a "clip" value in the currentStyle - instead, the values are split apart into clipTop, clipRight, clipBottom, and clipLeft. Also, in IE7 and earlier, the values inside rect() are space-delimited, not comma-delimited.
				cs = t.currentStyle;
				delim = _ieVers < 8 ? " " : ",";
				b = "rect(" + cs.clipTop + delim + cs.clipRight + delim + cs.clipBottom + delim + cs.clipLeft + ")";
				e = this.format(e).split(",").join(delim);
			} else {
				b = this.format(_getStyle(t, this.p, _cs, false, this.dflt));
				e = this.format(e);
			}
			return this.parseComplex(t.style, b, e, pt, plugin);
		}});
		_registerComplexSpecialProp("textShadow", {defaultValue:"0px 0px 0px #999", color:true, multi:true});
		_registerComplexSpecialProp("autoRound,strictUnits", {parser:function(t, e, p, cssp, pt) {return pt;}}); //just so that we can ignore these properties (not tween them)
		_registerComplexSpecialProp("border", {defaultValue:"0px solid #000", parser:function(t, e, p, cssp, pt, plugin) {
				return this.parseComplex(t.style, this.format(_getStyle(t, "borderTopWidth", _cs, false, "0px") + " " + _getStyle(t, "borderTopStyle", _cs, false, "solid") + " " + _getStyle(t, "borderTopColor", _cs, false, "#000")), this.format(e), pt, plugin);
			}, color:true, formatter:function(v) {
				var a = v.split(" ");
				return a[0] + " " + (a[1] || "solid") + " " + (v.match(_colorExp) || ["#000"])[0];
			}});
		_registerComplexSpecialProp("borderWidth", {parser:_getEdgeParser("borderTopWidth,borderRightWidth,borderBottomWidth,borderLeftWidth")}); //Firefox doesn't pick up on borderWidth set in style sheets (only inline).
		_registerComplexSpecialProp("float,cssFloat,styleFloat", {parser:function(t, e, p, cssp, pt, plugin) {
			var s = t.style,
				prop = ("cssFloat" in s) ? "cssFloat" : "styleFloat";
			return new CSSPropTween(s, prop, 0, 0, pt, -1, p, false, 0, s[prop], e);
		}});

		//opacity-related
		var _setIEOpacityRatio = function(v) {
				var t = this.t, //refers to the element's style property
					filters = t.filter || _getStyle(this.data, "filter") || "",
					val = (this.s + this.c * v) | 0,
					skip;
				if (val === 100) { //for older versions of IE that need to use a filter to apply opacity, we should remove the filter if opacity hits 1 in order to improve performance, but make sure there isn't a transform (matrix) or gradient in the filters.
					if (filters.indexOf("atrix(") === -1 && filters.indexOf("radient(") === -1 && filters.indexOf("oader(") === -1) {
						t.removeAttribute("filter");
						skip = (!_getStyle(this.data, "filter")); //if a class is applied that has an alpha filter, it will take effect (we don't want that), so re-apply our alpha filter in that case. We must first remove it and then check.
					} else {
						t.filter = filters.replace(_alphaFilterExp, "");
						skip = true;
					}
				}
				if (!skip) {
					if (this.xn1) {
						t.filter = filters = filters || ("alpha(opacity=" + val + ")"); //works around bug in IE7/8 that prevents changes to "visibility" from being applied properly if the filter is changed to a different alpha on the same frame.
					}
					if (filters.indexOf("pacity") === -1) { //only used if browser doesn't support the standard opacity style property (IE 7 and 8). We omit the "O" to avoid case-sensitivity issues
						if (val !== 0 || !this.xn1) { //bugs in IE7/8 won't render the filter properly if opacity is ADDED on the same frame/render as "visibility" changes (this.xn1 is 1 if this tween is an "autoAlpha" tween)
							t.filter = filters + " alpha(opacity=" + val + ")"; //we round the value because otherwise, bugs in IE7/8 can prevent "visibility" changes from being applied properly.
						}
					} else {
						t.filter = filters.replace(_opacityExp, "opacity=" + val);
					}
				}
			};
		_registerComplexSpecialProp("opacity,alpha,autoAlpha", {defaultValue:"1", parser:function(t, e, p, cssp, pt, plugin) {
			var b = parseFloat(_getStyle(t, "opacity", _cs, false, "1")),
				style = t.style,
				isAutoAlpha = (p === "autoAlpha");
			if (typeof(e) === "string" && e.charAt(1) === "=") {
				e = ((e.charAt(0) === "-") ? -1 : 1) * parseFloat(e.substr(2)) + b;
			}
			if (isAutoAlpha && b === 1 && _getStyle(t, "visibility", _cs) === "hidden" && e !== 0) { //if visibility is initially set to "hidden", we should interpret that as intent to make opacity 0 (a convenience)
				b = 0;
			}
			if (_supportsOpacity) {
				pt = new CSSPropTween(style, "opacity", b, e - b, pt);
			} else {
				pt = new CSSPropTween(style, "opacity", b * 100, (e - b) * 100, pt);
				pt.xn1 = isAutoAlpha ? 1 : 0; //we need to record whether or not this is an autoAlpha so that in the setRatio(), we know to duplicate the setting of the alpha in order to work around a bug in IE7 and IE8 that prevents changes to "visibility" from taking effect if the filter is changed to a different alpha(opacity) at the same time. Setting it to the SAME value first, then the new value works around the IE7/8 bug.
				style.zoom = 1; //helps correct an IE issue.
				pt.type = 2;
				pt.b = "alpha(opacity=" + pt.s + ")";
				pt.e = "alpha(opacity=" + (pt.s + pt.c) + ")";
				pt.data = t;
				pt.plugin = plugin;
				pt.setRatio = _setIEOpacityRatio;
			}
			if (isAutoAlpha) { //we have to create the "visibility" PropTween after the opacity one in the linked list so that they run in the order that works properly in IE8 and earlier
				pt = new CSSPropTween(style, "visibility", 0, 0, pt, -1, null, false, 0, ((b !== 0) ? "inherit" : "hidden"), ((e === 0) ? "hidden" : "inherit"));
				pt.xs0 = "inherit";
				cssp._overwriteProps.push(pt.n);
				cssp._overwriteProps.push(p);
			}
			return pt;
		}});


		var _removeProp = function(s, p) {
				if (p) {
					if (s.removeProperty) {
						if (p.substr(0,2) === "ms" || p.substr(0,6) === "webkit") { //Microsoft and some Webkit browsers don't conform to the standard of capitalizing the first prefix character, so we adjust so that when we prefix the caps with a dash, it's correct (otherwise it'd be "ms-transform" instead of "-ms-transform" for IE9, for example)
							p = "-" + p;
						}
						s.removeProperty(p.replace(_capsExp, "-$1").toLowerCase());
					} else { //note: old versions of IE use "removeAttribute()" instead of "removeProperty()"
						s.removeAttribute(p);
					}
				}
			},
			_setClassNameRatio = function(v) {
				this.t._gsClassPT = this;
				if (v === 1 || v === 0) {
					this.t.setAttribute("class", (v === 0) ? this.b : this.e);
					var mpt = this.data, //first MiniPropTween
						s = this.t.style;
					while (mpt) {
						if (!mpt.v) {
							_removeProp(s, mpt.p);
						} else {
							s[mpt.p] = mpt.v;
						}
						mpt = mpt._next;
					}
					if (v === 1 && this.t._gsClassPT === this) {
						this.t._gsClassPT = null;
					}
				} else if (this.t.getAttribute("class") !== this.e) {
					this.t.setAttribute("class", this.e);
				}
			};
		_registerComplexSpecialProp("className", {parser:function(t, e, p, cssp, pt, plugin, vars) {
			var b = t.getAttribute("class") || "", //don't use t.className because it doesn't work consistently on SVG elements; getAttribute("class") and setAttribute("class", value") is more reliable.
				cssText = t.style.cssText,
				difData, bs, cnpt, cnptLookup, mpt;
			pt = cssp._classNamePT = new CSSPropTween(t, p, 0, 0, pt, 2);
			pt.setRatio = _setClassNameRatio;
			pt.pr = -11;
			_hasPriority = true;
			pt.b = b;
			bs = _getAllStyles(t, _cs);
			//if there's a className tween already operating on the target, force it to its end so that the necessary inline styles are removed and the class name is applied before we determine the end state (we don't want inline styles interfering that were there just for class-specific values)
			cnpt = t._gsClassPT;
			if (cnpt) {
				cnptLookup = {};
				mpt = cnpt.data; //first MiniPropTween which stores the inline styles - we need to force these so that the inline styles don't contaminate things. Otherwise, there's a small chance that a tween could start and the inline values match the destination values and they never get cleaned.
				while (mpt) {
					cnptLookup[mpt.p] = 1;
					mpt = mpt._next;
				}
				cnpt.setRatio(1);
			}
			t._gsClassPT = pt;
			pt.e = (e.charAt(1) !== "=") ? e : b.replace(new RegExp("\\s*\\b" + e.substr(2) + "\\b"), "") + ((e.charAt(0) === "+") ? " " + e.substr(2) : "");
			t.setAttribute("class", pt.e);
			difData = _cssDif(t, bs, _getAllStyles(t), vars, cnptLookup);
			t.setAttribute("class", b);
			pt.data = difData.firstMPT;
			t.style.cssText = cssText; //we recorded cssText before we swapped classes and ran _getAllStyles() because in cases when a className tween is overwritten, we remove all the related tweening properties from that class change (otherwise class-specific stuff can't override properties we've directly set on the target's style object due to specificity).
			pt = pt.xfirst = cssp.parse(t, difData.difs, pt, plugin); //we record the CSSPropTween as the xfirst so that we can handle overwriting propertly (if "className" gets overwritten, we must kill all the properties associated with the className part of the tween, so we can loop through from xfirst to the pt itself)
			return pt;
		}});


		var _setClearPropsRatio = function(v) {
			if (v === 1 || v === 0) if (this.data._totalTime === this.data._totalDuration && this.data.data !== "isFromStart") { //this.data refers to the tween. Only clear at the END of the tween (remember, from() tweens make the ratio go from 1 to 0, so we can't just check that and if the tween is the zero-duration one that's created internally to render the starting values in a from() tween, ignore that because otherwise, for example, from(...{height:100, clearProps:"height", delay:1}) would wipe the height at the beginning of the tween and after 1 second, it'd kick back in).
				var s = this.t.style,
					transformParse = _specialProps.transform.parse,
					a, p, i, clearTransform, transform;
				if (this.e === "all") {
					s.cssText = "";
					clearTransform = true;
				} else {
					a = this.e.split(" ").join("").split(",");
					i = a.length;
					while (--i > -1) {
						p = a[i];
						if (_specialProps[p]) {
							if (_specialProps[p].parse === transformParse) {
								clearTransform = true;
							} else {
								p = (p === "transformOrigin") ? _transformOriginProp : _specialProps[p].p; //ensures that special properties use the proper browser-specific property name, like "scaleX" might be "-webkit-transform" or "boxShadow" might be "-moz-box-shadow"
							}
						}
						_removeProp(s, p);
					}
				}
				if (clearTransform) {
					_removeProp(s, _transformProp);
					transform = this.t._gsTransform;
					if (transform) {
						if (transform.svg) {
							this.t.removeAttribute("data-svg-origin");
							this.t.removeAttribute("transform");
						}
						delete this.t._gsTransform;
					}
				}

			}
		};
		_registerComplexSpecialProp("clearProps", {parser:function(t, e, p, cssp, pt) {
			pt = new CSSPropTween(t, p, 0, 0, pt, 2);
			pt.setRatio = _setClearPropsRatio;
			pt.e = e;
			pt.pr = -10;
			pt.data = cssp._tween;
			_hasPriority = true;
			return pt;
		}});

		p = "bezier,throwProps,physicsProps,physics2D".split(",");
		i = p.length;
		while (i--) {
			_registerPluginProp(p[i]);
		}








		p = CSSPlugin.prototype;
		p._firstPT = p._lastParsedTransform = p._transform = null;

		//gets called when the tween renders for the first time. This kicks everything off, recording start/end values, etc.
		p._onInitTween = function(target, vars, tween) {
			if (!target.nodeType) { //css is only for dom elements
				return false;
			}
			this._target = target;
			this._tween = tween;
			this._vars = vars;
			_autoRound = vars.autoRound;
			_hasPriority = false;
			_suffixMap = vars.suffixMap || CSSPlugin.suffixMap;
			_cs = _getComputedStyle(target, "");
			_overwriteProps = this._overwriteProps;
			var style = target.style,
				v, pt, pt2, first, last, next, zIndex, tpt, threeD;
			if (_reqSafariFix) if (style.zIndex === "") {
				v = _getStyle(target, "zIndex", _cs);
				if (v === "auto" || v === "") {
					//corrects a bug in [non-Android] Safari that prevents it from repainting elements in their new positions if they don't have a zIndex set. We also can't just apply this inside _parseTransform() because anything that's moved in any way (like using "left" or "top" instead of transforms like "x" and "y") can be affected, so it is best to ensure that anything that's tweening has a z-index. Setting "WebkitPerspective" to a non-zero value worked too except that on iOS Safari things would flicker randomly. Plus zIndex is less memory-intensive.
					this._addLazySet(style, "zIndex", 0);
				}
			}

			if (typeof(vars) === "string") {
				first = style.cssText;
				v = _getAllStyles(target, _cs);
				style.cssText = first + ";" + vars;
				v = _cssDif(target, v, _getAllStyles(target)).difs;
				if (!_supportsOpacity && _opacityValExp.test(vars)) {
					v.opacity = parseFloat( RegExp.$1 );
				}
				vars = v;
				style.cssText = first;
			}

			if (vars.className) { //className tweens will combine any differences they find in the css with the vars that are passed in, so {className:"myClass", scale:0.5, left:20} would work.
				this._firstPT = pt = _specialProps.className.parse(target, vars.className, "className", this, null, null, vars);
			} else {
				this._firstPT = pt = this.parse(target, vars, null);
			}

			if (this._transformType) {
				threeD = (this._transformType === 3);
				if (!_transformProp) {
					style.zoom = 1; //helps correct an IE issue.
				} else if (_isSafari) {
					_reqSafariFix = true;
					//if zIndex isn't set, iOS Safari doesn't repaint things correctly sometimes (seemingly at random).
					if (style.zIndex === "") {
						zIndex = _getStyle(target, "zIndex", _cs);
						if (zIndex === "auto" || zIndex === "") {
							this._addLazySet(style, "zIndex", 0);
						}
					}
					//Setting WebkitBackfaceVisibility corrects 3 bugs:
					// 1) [non-Android] Safari skips rendering changes to "top" and "left" that are made on the same frame/render as a transform update.
					// 2) iOS Safari sometimes neglects to repaint elements in their new positions. Setting "WebkitPerspective" to a non-zero value worked too except that on iOS Safari things would flicker randomly.
					// 3) Safari sometimes displayed odd artifacts when tweening the transform (or WebkitTransform) property, like ghosts of the edges of the element remained. Definitely a browser bug.
					//Note: we allow the user to override the auto-setting by defining WebkitBackfaceVisibility in the vars of the tween.
					if (_isSafariLT6) {
						this._addLazySet(style, "WebkitBackfaceVisibility", this._vars.WebkitBackfaceVisibility || (threeD ? "visible" : "hidden"));
					}
				}
				pt2 = pt;
				while (pt2 && pt2._next) {
					pt2 = pt2._next;
				}
				tpt = new CSSPropTween(target, "transform", 0, 0, null, 2);
				this._linkCSSP(tpt, null, pt2);
				tpt.setRatio = _transformProp ? _setTransformRatio : _setIETransformRatio;
				tpt.data = this._transform || _getTransform(target, _cs, true);
				tpt.tween = tween;
				tpt.pr = -1; //ensures that the transforms get applied after the components are updated.
				_overwriteProps.pop(); //we don't want to force the overwrite of all "transform" tweens of the target - we only care about individual transform properties like scaleX, rotation, etc. The CSSPropTween constructor automatically adds the property to _overwriteProps which is why we need to pop() here.
			}

			if (_hasPriority) {
				//reorders the linked list in order of pr (priority)
				while (pt) {
					next = pt._next;
					pt2 = first;
					while (pt2 && pt2.pr > pt.pr) {
						pt2 = pt2._next;
					}
					if ((pt._prev = pt2 ? pt2._prev : last)) {
						pt._prev._next = pt;
					} else {
						first = pt;
					}
					if ((pt._next = pt2)) {
						pt2._prev = pt;
					} else {
						last = pt;
					}
					pt = next;
				}
				this._firstPT = first;
			}
			return true;
		};


		p.parse = function(target, vars, pt, plugin) {
			var style = target.style,
				p, sp, bn, en, bs, es, bsfx, esfx, isStr, rel;
			for (p in vars) {
				es = vars[p]; //ending value string
				sp = _specialProps[p]; //SpecialProp lookup.
				if (sp) {
					pt = sp.parse(target, es, p, this, pt, plugin, vars);

				} else {
					bs = _getStyle(target, p, _cs) + "";
					isStr = (typeof(es) === "string");
					if (p === "color" || p === "fill" || p === "stroke" || p.indexOf("Color") !== -1 || (isStr && _rgbhslExp.test(es))) { //Opera uses background: to define color sometimes in addition to backgroundColor:
						if (!isStr) {
							es = _parseColor(es);
							es = ((es.length > 3) ? "rgba(" : "rgb(") + es.join(",") + ")";
						}
						pt = _parseComplex(style, p, bs, es, true, "transparent", pt, 0, plugin);

					} else if (isStr && (es.indexOf(" ") !== -1 || es.indexOf(",") !== -1)) {
						pt = _parseComplex(style, p, bs, es, true, null, pt, 0, plugin);

					} else {
						bn = parseFloat(bs);
						bsfx = (bn || bn === 0) ? bs.substr((bn + "").length) : ""; //remember, bs could be non-numeric like "normal" for fontWeight, so we should default to a blank suffix in that case.

						if (bs === "" || bs === "auto") {
							if (p === "width" || p === "height") {
								bn = _getDimension(target, p, _cs);
								bsfx = "px";
							} else if (p === "left" || p === "top") {
								bn = _calculateOffset(target, p, _cs);
								bsfx = "px";
							} else {
								bn = (p !== "opacity") ? 0 : 1;
								bsfx = "";
							}
						}

						rel = (isStr && es.charAt(1) === "=");
						if (rel) {
							en = parseInt(es.charAt(0) + "1", 10);
							es = es.substr(2);
							en *= parseFloat(es);
							esfx = es.replace(_suffixExp, "");
						} else {
							en = parseFloat(es);
							esfx = isStr ? es.replace(_suffixExp, "") : "";
						}

						if (esfx === "") {
							esfx = (p in _suffixMap) ? _suffixMap[p] : bsfx; //populate the end suffix, prioritizing the map, then if none is found, use the beginning suffix.
						}

						es = (en || en === 0) ? (rel ? en + bn : en) + esfx : vars[p]; //ensures that any += or -= prefixes are taken care of. Record the end value before normalizing the suffix because we always want to end the tween on exactly what they intended even if it doesn't match the beginning value's suffix.

						//if the beginning/ending suffixes don't match, normalize them...
						if (bsfx !== esfx) if (esfx !== "") if (en || en === 0) if (bn) { //note: if the beginning value (bn) is 0, we don't need to convert units!
							bn = _convertToPixels(target, p, bn, bsfx);
							if (esfx === "%") {
								bn /= _convertToPixels(target, p, 100, "%") / 100;
								if (vars.strictUnits !== true) { //some browsers report only "px" values instead of allowing "%" with getComputedStyle(), so we assume that if we're tweening to a %, we should start there too unless strictUnits:true is defined. This approach is particularly useful for responsive designs that use from() tweens.
									bs = bn + "%";
								}

							} else if (esfx === "em" || esfx === "rem" || esfx === "vw" || esfx === "vh") {
								bn /= _convertToPixels(target, p, 1, esfx);

							//otherwise convert to pixels.
							} else if (esfx !== "px") {
								en = _convertToPixels(target, p, en, esfx);
								esfx = "px"; //we don't use bsfx after this, so we don't need to set it to px too.
							}
							if (rel) if (en || en === 0) {
								es = (en + bn) + esfx; //the changes we made affect relative calculations, so adjust the end value here.
							}
						}

						if (rel) {
							en += bn;
						}

						if ((bn || bn === 0) && (en || en === 0)) { //faster than isNaN(). Also, previously we required en !== bn but that doesn't really gain much performance and it prevents _parseToProxy() from working properly if beginning and ending values match but need to get tweened by an external plugin anyway. For example, a bezier tween where the target starts at left:0 and has these points: [{left:50},{left:0}] wouldn't work properly because when parsing the last point, it'd match the first (current) one and a non-tweening CSSPropTween would be recorded when we actually need a normal tween (type:0) so that things get updated during the tween properly.
							pt = new CSSPropTween(style, p, bn, en - bn, pt, 0, p, (_autoRound !== false && (esfx === "px" || p === "zIndex")), 0, bs, es);
							pt.xs0 = esfx;
							//DEBUG: _log("tween "+p+" from "+pt.b+" ("+bn+esfx+") to "+pt.e+" with suffix: "+pt.xs0);
						} else if (style[p] === undefined || !es && (es + "" === "NaN" || es == null)) {
							_log("invalid " + p + " tween value: " + vars[p]);
						} else {
							pt = new CSSPropTween(style, p, en || bn || 0, 0, pt, -1, p, false, 0, bs, es);
							pt.xs0 = (es === "none" && (p === "display" || p.indexOf("Style") !== -1)) ? bs : es; //intermediate value should typically be set immediately (end value) except for "display" or things like borderTopStyle, borderBottomStyle, etc. which should use the beginning value during the tween.
							//DEBUG: _log("non-tweening value "+p+": "+pt.xs0);
						}
					}
				}
				if (plugin) if (pt && !pt.plugin) {
					pt.plugin = plugin;
				}
			}
			return pt;
		};


		//gets called every time the tween updates, passing the new ratio (typically a value between 0 and 1, but not always (for example, if an Elastic.easeOut is used, the value can jump above 1 mid-tween). It will always start and 0 and end at 1.
		p.setRatio = function(v) {
			var pt = this._firstPT,
				min = 0.000001,
				val, str, i;
			//at the end of the tween, we set the values to exactly what we received in order to make sure non-tweening values (like "position" or "float" or whatever) are set and so that if the beginning/ending suffixes (units) didn't match and we normalized to px, the value that the user passed in is used here. We check to see if the tween is at its beginning in case it's a from() tween in which case the ratio will actually go from 1 to 0 over the course of the tween (backwards).
			if (v === 1 && (this._tween._time === this._tween._duration || this._tween._time === 0)) {
				while (pt) {
					if (pt.type !== 2) {
						if (pt.r && pt.type !== -1) {
							val = Math.round(pt.s + pt.c);
							if (!pt.type) {
								pt.t[pt.p] = val + pt.xs0;
							} else if (pt.type === 1) { //complex value (one that typically has multiple numbers inside a string, like "rect(5px,10px,20px,25px)"
								i = pt.l;
								str = pt.xs0 + val + pt.xs1;
								for (i = 1; i < pt.l; i++) {
									str += pt["xn"+i] + pt["xs"+(i+1)];
								}
								pt.t[pt.p] = str;
							}
						} else {
							pt.t[pt.p] = pt.e;
						}
					} else {
						pt.setRatio(v);
					}
					pt = pt._next;
				}

			} else if (v || !(this._tween._time === this._tween._duration || this._tween._time === 0) || this._tween._rawPrevTime === -0.000001) {
				while (pt) {
					val = pt.c * v + pt.s;
					if (pt.r) {
						val = Math.round(val);
					} else if (val < min) if (val > -min) {
						val = 0;
					}
					if (!pt.type) {
						pt.t[pt.p] = val + pt.xs0;
					} else if (pt.type === 1) { //complex value (one that typically has multiple numbers inside a string, like "rect(5px,10px,20px,25px)"
						i = pt.l;
						if (i === 2) {
							pt.t[pt.p] = pt.xs0 + val + pt.xs1 + pt.xn1 + pt.xs2;
						} else if (i === 3) {
							pt.t[pt.p] = pt.xs0 + val + pt.xs1 + pt.xn1 + pt.xs2 + pt.xn2 + pt.xs3;
						} else if (i === 4) {
							pt.t[pt.p] = pt.xs0 + val + pt.xs1 + pt.xn1 + pt.xs2 + pt.xn2 + pt.xs3 + pt.xn3 + pt.xs4;
						} else if (i === 5) {
							pt.t[pt.p] = pt.xs0 + val + pt.xs1 + pt.xn1 + pt.xs2 + pt.xn2 + pt.xs3 + pt.xn3 + pt.xs4 + pt.xn4 + pt.xs5;
						} else {
							str = pt.xs0 + val + pt.xs1;
							for (i = 1; i < pt.l; i++) {
								str += pt["xn"+i] + pt["xs"+(i+1)];
							}
							pt.t[pt.p] = str;
						}

					} else if (pt.type === -1) { //non-tweening value
						pt.t[pt.p] = pt.xs0;

					} else if (pt.setRatio) { //custom setRatio() for things like SpecialProps, external plugins, etc.
						pt.setRatio(v);
					}
					pt = pt._next;
				}

			//if the tween is reversed all the way back to the beginning, we need to restore the original values which may have different units (like % instead of px or em or whatever).
			} else {
				while (pt) {
					if (pt.type !== 2) {
						pt.t[pt.p] = pt.b;
					} else {
						pt.setRatio(v);
					}
					pt = pt._next;
				}
			}
		};

		/**
		 * @private
		 * Forces rendering of the target's transforms (rotation, scale, etc.) whenever the CSSPlugin's setRatio() is called.
		 * Basically, this tells the CSSPlugin to create a CSSPropTween (type 2) after instantiation that runs last in the linked
		 * list and calls the appropriate (3D or 2D) rendering function. We separate this into its own method so that we can call
		 * it from other plugins like BezierPlugin if, for example, it needs to apply an autoRotation and this CSSPlugin
		 * doesn't have any transform-related properties of its own. You can call this method as many times as you
		 * want and it won't create duplicate CSSPropTweens.
		 *
		 * @param {boolean} threeD if true, it should apply 3D tweens (otherwise, just 2D ones are fine and typically faster)
		 */
		p._enableTransforms = function(threeD) {
			this._transform = this._transform || _getTransform(this._target, _cs, true); //ensures that the element has a _gsTransform property with the appropriate values.
			this._transformType = (!(this._transform.svg && _useSVGTransformAttr) && (threeD || this._transformType === 3)) ? 3 : 2;
		};

		var lazySet = function(v) {
			this.t[this.p] = this.e;
			this.data._linkCSSP(this, this._next, null, true); //we purposefully keep this._next even though it'd make sense to null it, but this is a performance optimization, as this happens during the while (pt) {} loop in setRatio() at the bottom of which it sets pt = pt._next, so if we null it, the linked list will be broken in that loop.
		};
		/** @private Gives us a way to set a value on the first render (and only the first render). **/
		p._addLazySet = function(t, p, v) {
			var pt = this._firstPT = new CSSPropTween(t, p, 0, 0, this._firstPT, 2);
			pt.e = v;
			pt.setRatio = lazySet;
			pt.data = this;
		};

		/** @private **/
		p._linkCSSP = function(pt, next, prev, remove) {
			if (pt) {
				if (next) {
					next._prev = pt;
				}
				if (pt._next) {
					pt._next._prev = pt._prev;
				}
				if (pt._prev) {
					pt._prev._next = pt._next;
				} else if (this._firstPT === pt) {
					this._firstPT = pt._next;
					remove = true; //just to prevent resetting this._firstPT 5 lines down in case pt._next is null. (optimized for speed)
				}
				if (prev) {
					prev._next = pt;
				} else if (!remove && this._firstPT === null) {
					this._firstPT = pt;
				}
				pt._next = next;
				pt._prev = prev;
			}
			return pt;
		};

		//we need to make sure that if alpha or autoAlpha is killed, opacity is too. And autoAlpha affects the "visibility" property.
		p._kill = function(lookup) {
			var copy = lookup,
				pt, p, xfirst;
			if (lookup.autoAlpha || lookup.alpha) {
				copy = {};
				for (p in lookup) { //copy the lookup so that we're not changing the original which may be passed elsewhere.
					copy[p] = lookup[p];
				}
				copy.opacity = 1;
				if (copy.autoAlpha) {
					copy.visibility = 1;
				}
			}
			if (lookup.className && (pt = this._classNamePT)) { //for className tweens, we need to kill any associated CSSPropTweens too; a linked list starts at the className's "xfirst".
				xfirst = pt.xfirst;
				if (xfirst && xfirst._prev) {
					this._linkCSSP(xfirst._prev, pt._next, xfirst._prev._prev); //break off the prev
				} else if (xfirst === this._firstPT) {
					this._firstPT = pt._next;
				}
				if (pt._next) {
					this._linkCSSP(pt._next, pt._next._next, xfirst._prev);
				}
				this._classNamePT = null;
			}
			return TweenPlugin.prototype._kill.call(this, copy);
		};



		//used by cascadeTo() for gathering all the style properties of each child element into an array for comparison.
		var _getChildStyles = function(e, props, targets) {
				var children, i, child, type;
				if (e.slice) {
					i = e.length;
					while (--i > -1) {
						_getChildStyles(e[i], props, targets);
					}
					return;
				}
				children = e.childNodes;
				i = children.length;
				while (--i > -1) {
					child = children[i];
					type = child.type;
					if (child.style) {
						props.push(_getAllStyles(child));
						if (targets) {
							targets.push(child);
						}
					}
					if ((type === 1 || type === 9 || type === 11) && child.childNodes.length) {
						_getChildStyles(child, props, targets);
					}
				}
			};

		/**
		 * Typically only useful for className tweens that may affect child elements, this method creates a TweenLite
		 * and then compares the style properties of all the target's child elements at the tween's start and end, and
		 * if any are different, it also creates tweens for those and returns an array containing ALL of the resulting
		 * tweens (so that you can easily add() them to a TimelineLite, for example). The reason this functionality is
		 * wrapped into a separate static method of CSSPlugin instead of being integrated into all regular className tweens
		 * is because it creates entirely new tweens that may have completely different targets than the original tween,
		 * so if they were all lumped into the original tween instance, it would be inconsistent with the rest of the API
		 * and it would create other problems. For example:
		 *  - If I create a tween of elementA, that tween instance may suddenly change its target to include 50 other elements (unintuitive if I specifically defined the target I wanted)
		 *  - We can't just create new independent tweens because otherwise, what happens if the original/parent tween is reversed or pause or dropped into a TimelineLite for tight control? You'd expect that tween's behavior to affect all the others.
		 *  - Analyzing every style property of every child before and after the tween is an expensive operation when there are many children, so this behavior shouldn't be imposed on all className tweens by default, especially since it's probably rare that this extra functionality is needed.
		 *
		 * @param {Object} target object to be tweened
		 * @param {number} Duration in seconds (or frames for frames-based tweens)
		 * @param {Object} Object containing the end values, like {className:"newClass", ease:Linear.easeNone}
		 * @return {Array} An array of TweenLite instances
		 */
		CSSPlugin.cascadeTo = function(target, duration, vars) {
			var tween = TweenLite.to(target, duration, vars),
				results = [tween],
				b = [],
				e = [],
				targets = [],
				_reservedProps = TweenLite._internals.reservedProps,
				i, difs, p, from;
			target = tween._targets || tween.target;
			_getChildStyles(target, b, targets);
			tween.render(duration, true, true);
			_getChildStyles(target, e);
			tween.render(0, true, true);
			tween._enabled(true);
			i = targets.length;
			while (--i > -1) {
				difs = _cssDif(targets[i], b[i], e[i]);
				if (difs.firstMPT) {
					difs = difs.difs;
					for (p in vars) {
						if (_reservedProps[p]) {
							difs[p] = vars[p];
						}
					}
					from = {};
					for (p in difs) {
						from[p] = b[i][p];
					}
					results.push(TweenLite.fromTo(targets[i], duration, from, difs));
				}
			}
			return results;
		};

		TweenPlugin.activate([CSSPlugin]);
		return CSSPlugin;

	}, true);

}); if (_gsScope._gsDefine) { _gsScope._gsQueue.pop()(); }

//export to AMD/RequireJS and CommonJS/Node (precursor to full modular build system coming at a later date)
(function(name) {
	"use strict";
	var getGlobal = function() {
		return (_gsScope.GreenSockGlobals || _gsScope)[name];
	};
	if (typeof(define) === "function" && define.amd) { //AMD
		define(["TweenLite"], getGlobal);
	} else if (typeof(module) !== "undefined" && module.exports) { //node
		require("../TweenLite.js");
		module.exports = getGlobal();
	}
}("CSSPlugin"));

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"../TweenLite.js":33}],37:[function(require,module,exports){
'use strict';

var StorageGeneral = {

  set: function (name, value) {
    return localStorage.setItem(name, value);
  },

  get: function (name) {
    return localStorage.getItem(name);
  },

  remove: function (name) {
    return localStorage.removeItem(name);
  }

};

module.exports = StorageGeneral;

},{}],38:[function(require,module,exports){
var animate = require('core/animate');

var ToggleBg = function(block1, block2) {
  var activeImage = block1,
    notActiveImage = block2,
    bgTimeout,
    changeBgAnim
  return {
    start: function(src) {

      var img = new Image();
      img.src = src;
      activeImage = block1 === activeImage ? block2 : block1;
      notActiveImage = block2 === notActiveImage ? block1 : block2;

      activeImage.style.backgroundImage = 'url(' + src+ '/pt/c640x360' + ')';
      activeImage.style.opacity = '1';

      activeImage.style.zIndex = '3';
      notActiveImage.style.zIndex = '2';

      /*
              clearTimeout(bgTimeout);
              bgTimeout = setTimeout(function() {
                var img = new Image();



                img.onload = function() {
                  activeImage = block1 === activeImage ? block2 : block1;
                  notActiveImage = block2 === notActiveImage ? block1 : block2;

                  activeImage.style.backgroundImage = 'url(' + src + ')';
                  activeImage.style.opacity = '1';

                  activeImage.style.zIndex = '3';
                  notActiveImage.style.zIndex = '2';

      /*
                  if (changeBgAnim) {
                    changeBgAnim.kill();
                  }

                  changeBgAnim = animate(notActiveImage, 0, {
                    opacity: '0',
                    ease: Power0.easeNone,
                    onComplete: function() {
                      //notActiveImage.style.backgroundImage = '';
                    }
                  });

                };

                img.src = src;
              }, 0);
                  */
    }

  }
}

module.exports = ToggleBg;

/*if(useScrollAnimation) {
//USE FOR SCROLL ANIMATION
      changeBgAnim = animate(notActiveImage, 1, {
        top: '-720',
        ease: Power0.easeNone,
        onComplete:function(){
          notActiveImage.style.backgroundImage = '';
          notActiveImage.style.top = '720px';
        }
      });
      animate(activeImage, 1, {
        top: '0',
        ease: Power0.easeNone,
        onComplete:function(){
          notActiveImage.style.backgroundImage = '';
        }
      });
} */

},{"core/animate":14}],39:[function(require,module,exports){
var Tween = function (name, grade) {
    var private_vars = {
        FRAMERATE: 24,

        _totalFrames: 0,
        _changeValue: 0,
        _framesExecuted: 0,
        _target: null,
        _property: null,
        _startValue: 0,
        _destValue: 0,
        _time: 0,
        _timer: 0,
        _currentValue: 0,
        _easing: null,
        _started: false,
        _disposed: false,

        onStart: null,
        onChange: null,
        onComplete: null
    }
    return {
        init: function (pTarget, pProperty, pStartValue, pDestValue,
            pTime, pEasing) {
            if (private_vars._started &&
                private_vars._target == pTarget &&
                private_vars._property == pProperty &&
                private_vars._easing == pEasing) {

                this.reInit(pDestValue, pTime);
                return;
            }

            private_vars._target = pTarget;
            private_vars._property = pProperty;
            private_vars._startValue = pStartValue;
            private_vars._destValue = pDestValue;
            private_vars._time = pTime;
            private_vars._changeValue = pDestValue - pStartValue;
            private_vars._totalFrames = parseInt((pTime / 1000) * private_vars.FRAMERATE);
            private_vars._framesExecuted = 0;
            private_vars._easing = pEasing || this.Linear.easeNone;

        },

        reInit: function (pDestValue, pTime) {
            private_vars._destValue = pDestValue;
            private_vars._time = pTime;
            private_vars._changeValue = pDestValue - private_vars._startValue;
            private_vars._totalFrames = parseInt((pTime / 1000) * private_vars.FRAMERATE);
        },

        start: function () {
            var self = this;
            if(private_vars._started) return;
            
            if (private_vars._target === null || private_vars._property === '' || private_vars._changeValue === '' || !private_vars._totalFrames) {
                console.log("Tween.start: One or more parameters is null!!");
                return;
            }

            private_vars._target[private_vars._property] = private_vars._startValue;

            private_vars._timer = window.setInterval(function () {
                self.update()
            }, 1000 / 24);

            private_vars._started = true;

            if (private_vars.onStart != null) private_vars.onStart();
        },

        update: function () {
            if (private_vars._framesExecuted < private_vars._totalFrames) {

                var value = private_vars._easing(private_vars._framesExecuted, private_vars._startValue, private_vars._changeValue, private_vars._totalFrames);

                if (typeof private_vars._property == 'function') {
                    private_vars._property(value)
                } else {
                    private_vars._target[private_vars._property] = private_vars._destValue;
                }

                if (private_vars.onChange != null) private_vars.onChange(value);
                private_vars._framesExecuted++;

            } else {
                if (typeof private_vars._property == 'function') {
                    private_vars._property(private_vars._destValue)
                } else {
                    private_vars._target[private_vars._property] = private_vars._destValue;
                }

                this.stop();
                if (private_vars.onComplete != null) private_vars.onComplete();
            }
        },

        stop: function () {
            if (private_vars._started) {
                window.clearInterval(private_vars._timer);
                private_vars._framesExecuted = 0;
                private_vars._started = false;
            }
        },

        getstarted: function () {
            return private_vars._started;
        },

        getDisposed: function () {
            return private_vars._disposed;
        },

        dispose: function () {
            private_vars._target = null;
            private_vars._property = null;
            private_vars._easing = null;

            private_vars.onStart = null;
            private_vars.onChange = null;
            private_vars.onComplete = null;

            private_vars._startValue = 0;
            private_vars._destValue = 0;
            private_vars._time = 0;
            private_vars._changeValue = 0;
            private_vars._totalFrames = 0;
            private_vars._framesExecuted = 0;
            private_vars._currentValue = 0;

            private_vars._disposed = true;
        },

        Linear: {

            easeNone: function (t, b, c, d) {
                return c * t / d + b;
            },

            easeIn: function (t, b, c, d) {
                return c * t / d + b;
            },

            easeOut: function (t, b, c, d) {
                return c * t / d + b;
            },

            easeInOut: function (t, b, c, d) {
                return c * t / d + b;
            }
        },

        Back: {
            easeIn: function (t, b, c, d, s) {
                if (!s) s = 1.70158;
                return c * (t /= d) * t * ((s + 1) * t - s) + b;
            },

            easeOut: function (t, b, c, d, s) {
                if (!s) s = 1.70158;
                return c * ((t = t / d - 1) * t * ((s + 1) * t + s) + 1) + b;
            },

            easeInOut: function (t, b, c, d, s) {
                if (!s) s = 1.70158;
                if ((t /= d / 2) < 1) return c / 2 * (t * t * (((s *= (1.525)) + 1) * t - s)) + b;
                return c / 2 * ((t -= 2) * t * (((s *= (1.525)) + 1) * t + s) + 2) + b;
            }
        }
    }
}

module.exports = Tween;

},{}],40:[function(require,module,exports){
/**
 * @module core/model
 * @author Stanislav Kalashnik <sk@infomir.eu>
 * @license GNU GENERAL PUBLIC LICENSE Version 3
 */

'use strict';

var Emitter = require('./emitter');

/**
 * Base model implementation.
 *
 * Represents domain-specific data or information that an application will be working with.
 * A typical example is a user account (e.g name, avatar, e-mail) or a music track (e.g title, year, album).
 * Holds information, but don’t handle behaviour and don’t format information or influence how data appears.
 *
 * @constructor
 * @extends Emitter
 *
 * @param {Object} [data={}] init attributes
 */
function Model(data) {
  // parent constructor call
  Emitter.call(this);

  /**
   * Model attributes with given data or empty hash table.
   *
   * @member {Object.<string, *>}
   **/
  this.data = data || {};
}

// inheritance
Model.prototype = Object.create(Emitter.prototype);
Model.prototype.constructor = Model;

// which of data fields is primary
Model.prototype.idName = 'id';

/**
 * Remove all attributes from the model event.
 *
 * @event module:core/model~Model#clear
 *
 * @type {Object}
 * @property {Object} data old model attributes
 */

/**
 * Remove all attributes from the model.
 *
 * @return {boolean} operation status
 *
 * @fires module:core/model~Model#clear
 */
Model.prototype.clear = function() {
  var data = this.data;

  // is there any data?
  if (Object.keys(data).length > 0) {
    // reset
    this.data = {};

    // there are some listeners
    if (this.events['clear']) {
      // notify listeners
      this.emit('clear', {
        data: data,
      });
    }

    return true;
  }

  // nothing was done
  return false;
};

/**
 * Set model data event.
 *
 * @event module:core/model~Model#init
 *
 * @type {Object}
 * @property {Object} data new model attributes
 */

/**
 * Clear and set model data.
 *
 * @param {Object} data attributes
 * @return {boolean} operation status
 *
 * @fires module:core/model~Model#clear
 * @fires module:core/model~Model#init
 */
Model.prototype.init = function(data) {
  // valid input
  if (data) {
    // reset data
    this.clear();

    // init with given data
    this.data = data;

    // there are some listeners
    if (this.events['init']) {
      // notify listeners
      this.emit('init', {
        data: data,
      });
    }

    return true;
  }

  // nothing was done
  return false;
};

/**
 * Check an attribute existence.
 *
 * @param {string} name attribute
 *
 * @return {boolean} attribute exists or not
 */
Model.prototype.has = function(name) {
  // hasOwnProperty method is not available directly in case of Object.create(null)
  // return Object.hasOwnProperty.call(this.data, name);
  return this.data.hasOwnProperty(name);
};

/**
 * Get the model attribute by name.
 *
 * @param {string} name attribute
 *
 * @return {*} associated value
 */
Model.prototype.get = function(name) {
  return this.data[name];
};

/**
 * Update or create a model attribute event.
 *
 * @event module:core/model~Model#change
 *
 * @type {Object}
 * @property {string} name attribute name
 * @property {*} [prev] old/previous attribute value (can be absent on attribute creation)
 * @property {*} [curr] new/current attribute value (can be absent on attribute removal)
 */

/**
 * Update or create a model attribute.
 *
 * @param {string} name attribute
 * @param {*} value associated value
 * @return {boolean} operation status (true - attribute value was changed/created)
 *
 * @fires module:core/model~Model#change
 */
Model.prototype.set = function(name, value, parent_id) {
  var isAttrSet = name in this.data,
    emitData = {
      name: name,
      curr: value,
    };
    if(parent_id) {
      emitData.parent_id = parent_id;
    }

  if (isAttrSet) {
    // update
    emitData.prev = this.data[name];

    // only if values are different
    if (value !== emitData.prev) {
      this.data[name] = value;

      // there are some listeners
      if (this.events['change']) {
        // notify listeners
        this.emit('change', emitData);
      }

      return true;
    }
  } else {
    // create
    this.data[name] = value;

    // there are some listeners
    if (this.events['change']) {
      // notify listeners
      this.emit('change', emitData);
    }

    return true;
  }

  // nothing was done
  return false;
};

/**
 * Delete the given attribute by name.
 *
 * @param {string} name attribute
 * @return {boolean} operation status (true - attribute was deleted)
 *
 * @fires module:core/model~Model#change
 */
Model.prototype.unset = function(name) {
  var isAttrSet = name in this.data,
    emitData;

  if (isAttrSet) {
    emitData = {
      name: name,
      prev: this.data[name],
    };
    delete this.data[name];

    // there are some listeners
    if (this.events['change']) {
      // notify listeners
      this.emit('change', emitData);
    }

    return true;
  }

  // nothing was done
  return false;
};

// /**
// * Extends the model with the given attribute list
// * @param {Object} data
// */
// Model.prototype.attributes = function ( data ) {
// 	var index   = 0,
// 		keyList = data && typeof data === 'object' ? Object.keys(data) : [];
// 	for ( ; index < keyList.length; index++ ) {
// 		this.set(keyList[index], data[keyList[index]]);
// 	}
// };

// /**
// * Prepare all data for sending to a server
// * @return {Object}
// */
// Model.prototype.pack = function () {
// 	return this._data;
// };

// /**
// * Restores the received data from a server to a model data
// * @param {Object} data
// * @return {Object}
// */
// Model.prototype.unpack = function ( data ) {
// 	return data;
// };

// /**
// * Sync model to a server
// */
// Model.prototype.save = function () {
// 	var self = this;
// 	if ( this.url ) {
// 		// collect data
// 		io.ajax(this.url, {
// 			// request params
// 			method: self._data[self.idName] ? 'put' : 'post',
// 			data  : self.pack(),
// 			onload: function ( data ) {
// 				data = self.unpack(self.parse(data));
// 				self.attributes(data);
// 				console.log(data);
// 				self.emit('save', true);
// 			},
// 			// error handlers
// 			onerror:   this.saveFailure,
// 			ontimeout: this.saveFailure
// 		});
// 	}
// };

// /**
// * Error handler while model data fetch
// */
// Model.prototype.saveFailure = function () {
// 	this.emit('save', false);
// };

// /**
// * Converts received data from a server to a model attributes
// * @param {string} response
// * @return {Object}
// */
// Model.prototype.parse = function ( response ) {
// 	var data = {};
// 	try {
// 		data = JSON.parse(response).data;
// 	} catch(e){ console.log(e); }
// 	return data;
// };

// public
module.exports = Model;

},{"./emitter":32}],41:[function(require,module,exports){
'use strict';

var Model = require('./model'),
  subscriptionService = require('./tools/subscriptionService'),
  helpFunctions = require('./lib/helpFunctions'),
  paymentModel;

require('./shims');


paymentModel = new Model({
  objectID: '',
  serviceID: '',
  tariffID: '',
  title: '',
  tariffTitle: '',
  subTitle: '',
  buttonTitle: '',
  currency: '',
  currencyID: '',
  price: '',
  period: '',
  paymentType: '',
  vodRules: '',
  vodRulesType: '',
  typeSubs: '',
  geoPrice: '',
  geoMonthlyPrice: '',
  elementToFocus: '',
  telNumber: '',
  periodName: '',
  orderID: '',
  epgID: '',
  objectType: '',
  paymentSystem: '',
  qualityName: '',
  isVodChannel: false,
  isTwoTvSubs: false,
  isVideoObject: false
});

paymentModel.getDefaultData = function () {
  return {
    objectID: '',
    serviceID: '',
    tariffID: '',
    title: '',
    tariffTitle: '',
    subTitle: '',
    buttonTitle: '',
    currency: '',
    currencyID: '',
    price: '',
    period: '',
    paymentType: '',
    vodRules: '',
    vodRulesType: '',
    typeSubs: '',
    geoPrice: '',
    geoMonthlyPrice: '',
    elementToFocus: '',
    telNumber: '',
    periodName: '',
    orderID: '',
    epgID: '',
    paymentSystem: '',
    qualityName: '',
    isVodChannel: false,
    isTwoTvSubs: false,
    isVideoObject: false,
    isPromoCode: false
  }
};

paymentModel.defaultEvents = {
  isSubs: function () {
    return paymentModel.get('vodRulesType') == 'subs' ? '1' : '0';
  },
  setGeoPrice: function (data) {
    var price = data ? data : paymentModel.get('price');
    var currency = paymentModel.get('currency');
    var currencyID = paymentModel.get('currencyID');
    var geoPrice;

    switch (currencyID) {
      case 16:
      case 17:
      case 41:
        geoPrice = '' + currency + price;
        break;
      case 51:
      case 21:
        geoPrice = currency + ' ' + price;
        break;
      default:
        geoPrice = price + ' ' + currency;
    }
    paymentModel.set('geoPrice', geoPrice);
  },

  getGeoPriceFromData: function (dataPrice, dataCurrency, dataCurrencyID) {
    var price = dataPrice;
    var currency = dataCurrency? dataCurrency : paymentModel.get('currency');
    var currencyID = dataCurrencyID? dataCurrencyID :paymentModel.get('currencyID');
    var geoPrice;

    switch (currencyID) {
      case 16:
      case 17:
      case 41:
        geoPrice = '' + currency + price;
        break;
      case 51:
      case 21:
        geoPrice = currency + ' ' + price;
        break;
      default:
        geoPrice = price + ' ' + currency;
    }
    return geoPrice;
  },
  getRegularPrice: function () {
    var tariffID = paymentModel.get('tariffID');
    var serviceID = paymentModel.get('serviceID');
    var subscription = subscriptionService.getSubscriptionById(serviceID);
    var regularPrice = subscriptionService.getSubscriptionTariffById(subscription, tariffID).regular_price;
    if (subscriptionService.isCurrentTariffPromo(serviceID, tariffID)) {
      return this.getGeoPriceFromData(regularPrice);
    } else {
      return '';
    }

  },
  isPromoTariff: function () {
    return paymentModel.get('vodRulesType') == 'subs' ? subscriptionService.isCurrentTariffPromo(paymentModel.get('serviceID'), paymentModel.get('tariffID')) : false;
  },
  setSubtitleText: function () {
    this.setGeoPrice();
    var geoPrice = paymentModel.get('geoPrice');
    var vodRulesType = paymentModel.get('vodRulesType');
    var vodRules = paymentModel.get('vodRules');
    var tariffID = paymentModel.get('tariffID');
    var serviceID = paymentModel.get('serviceID');

    var subTitleString;

    if (vodRulesType == 'paid') {
      if (vodRules == 'tvod') {
        subTitleString = this.getFullSubtitleMovieName(i18nMgg('na_for') + ' ' + this.getFullPeriodName(), geoPrice);
         //  + ' ' + this.getFullQualityName() + ' ' + i18nMgg('for') + ' ' + geoPrice;
      }
      if (vodRules == 'dto') {
        subTitleString = this.getFullSubtitleMovieName(i18nMgg('forever'), geoPrice);

       // subTitleString =  + ' ' + this.getFullQualityName() + ' ' + i18nMgg('for') + ' ' + geoPrice;
      }

    } else {
      if (subscriptionService.isCurrentTariffPromo(serviceID, tariffID)) {
        var subscription = subscriptionService.getSubscriptionById(serviceID);
        var regularPrice = subscriptionService.getSubscriptionTariffById(subscription, tariffID).regular_price;
        var regularGeoPrice = this.getGeoPriceFromData(regularPrice);
        subTitleString = i18nMgg('first_month_price') + geoPrice + ', ' + i18nMgg('next_month_price') + regularGeoPrice + i18nMgg("short_per_month");
      } else {
        subTitleString = paymentModel.get('tariffTitle') + ' ' + i18nMgg('for') + ' ' + geoPrice;
      }
    }
    paymentModel.set('subTitle', subTitleString);
  },

  getFullSubtitleMovieName: function(period, price){
    var text = i18nMgg('paid_movie_subtitle');
    var parts = text.replace(/\[(.*?)\]/g, function(data){
      if(data == '[period]'){
        return period;
      }
      if(data == '[quality]'){
        return paymentModel.get('qualityName');
      }
      if(data == '[price]'){
        return price;
      }
    });
    return parts;
  },

  getFullPeriodName: function () {
    var period = paymentModel.get('period');
    return period + ' ' + helpFunctions.getValueText(period, 'day');
  },

  getFullQualityName: function(){
    var quality = paymentModel.get('qualityName');
    return i18nMgg('at') + ' ' + quality;
  },

  getGACurrencyFormat: function () {
    var internationalCurrencyCodes = {
      1: 'UAH',
      2: 'RUB',
      3: 'AMD',
      4: 'AZN',
      5: 'BYR',
      6: 'EUR',
      7: 'GEL',
      8: 'KGS',
      9: 'KZT',
      10: 'LTL',
      11: 'LVL',
      12: 'MDL',
      13: 'TJS',
      14: 'TMT',
      15: 'UZS',
      16: 'EUR',
      17: 'USD',
      21: 'CZK',
      31: 'PLN',
      41: 'GBP',
      51: 'CAD',
      61: 'ILS'
    };
    return internationalCurrencyCodes[paymentModel.get('currencyID')];
  }
};


module.exports = paymentModel;

},{"./lib/helpFunctions":34,"./model":40,"./shims":46,"./tools/subscriptionService":54}],42:[function(require,module,exports){
/**
 * Singleton for url links pre-loading.
 *
 * @module core/preloader
 * @author Stanislav Kalashnik <sk@infomir.eu>
 * @license GNU GENERAL PUBLIC LICENSE Version 3
 */

'use strict';

var Emitter = require('./emitter'),
  preloader = new Emitter(),
  queueSize = 0,
  groups = {},
  verbose = false;

/**
 * One of the links is loaded.
 *
 * @event module:core/preloader#link
 *
 * @type {Object}
 * @property {string} url link address
 * @property {string} group group name
 */

/**
 * The whole group of links is loaded.
 *
 * @event module:core/preloader#group
 *
 * @type {Object}
 * @property {string} name group name
 */

/**
 * Everything is loaded.
 *
 * @event module:core/preloader#done
 */

/**
 * Handler of image loading process.
 *
 * @param {Event} event load event
 *
 * @fires module:core/preloader#link
 * @fires module:core/preloader#group
 * @fires module:core/preloader#done
 */
function handler(event) {
  queueSize--;
  groups[this.group]--;

  // one link is done
  if (preloader.events['link']) {
    // notify listeners
    preloader.emit('link', {
      url: this.src,
      group: this.group,
    });
  }

  // the whole group is done
  if (groups[this.group] === 0) {
    // one link is done
    if (preloader.events['group']) {
      // notify listeners
      preloader.emit('group', {
        name: this.group,
      });
    }
  }

  // everything is done
  if (queueSize === 0) {
    // all links are done
    if (preloader.events['done']) {
      // notify listeners
      preloader.emit('done');
    }
  }
}

/**
 * Clear and fill the router with the given list of pages.
 *
 * @param {Array} links list of urls to load
 *
 * @example
 * preloader.addListener('link', function ( data ) { console.log(data.url, data.group); });
 * preloader.addListener('group', function ( data ) { console.log(data.name); });
 * preloader.addListener('done', function () { console.log('ok'); });
 *
 * preloader.add([
 *     'http:// pic.uuhy.com/uploads/2011/09/01/Painting-Of-Nature.png',
 *     'https:// perishablepress.com/wp/wp-content/themes/wire/img/jeff-starr.jpg',
 *     {url: 'http:// www.phpied.com/files/reflow/dyna1.png', group:'qwe'},
 *     {url: 'http:// www.phpied.com/files/reflow/dyna3.png', group:'qwe'},
 *     'http:// www.phpied.com/files/reflow/render.wrong.extension'
 * ]);
 */
preloader.add = function(links) {
  // walk through all the given links
  links.forEach(function(item) {
    var img = new Image(),
      url = item.url || item,
      group = item.group || '';

    // increase counters
    queueSize++;
    groups[group] = groups[group] === undefined ? 1 : groups[group] + 1;

    // build tag
    img.src = url;
    img.group = group;
    img.onload = img.onerror = img.ontimeout = handler;
  });

};

// public
module.exports = preloader;

},{"./emitter":32}],43:[function(require,module,exports){
/**
 * https:// github.com/taylorhakes/promise-polyfill
 *
 * @module core/promise
 * @author Stanislav Kalashnik <sk@infomir.eu>
 * @license GNU GENERAL PUBLIC LICENSE Version 3
 */

'use strict';

/* eslint-disable */

/**
 * Base Promise implementation.
 *
 * @param {function} fn function executor with two arguments resolve and reject
 *
 * @constructor
 *
 * @example
 * var p = new Promise(function ( resolve, reject ) {
 *     // do a thing, possibly async, then ...
 *     if ( everything_turned_out_fine ) {
 *         resolve('ok');
 *     } else {
 *         reject(new Error('failure'));
 *     }
 * });
 */
function Promise(fn) {
  this.state = null;
  this.value = null;
  this.deferreds = [];

  // this.executor  = fn;
  doResolve(fn, bind(resolve, this), bind(reject, this));
}

/*Promise.prototype = {
	then: function ( onFulfilled, onRejected ) {
		var self = this;

		return new Promise(function ( resolve, reject ) {
			handle.call(self, new Handler(onFulfilled, onRejected, resolve, reject));
		});
	}
};*/

// Polyfill for Function.prototype.bind
function bind(fn, thisArg) {
  return function () {
    fn.apply(thisArg, arguments);
  };
}

function handle(deferred) {
  var self = this;

  if (this.state === null) {
    this.deferreds.push(deferred);
    return;
  }

  setTimeout(function () {
    var cb = self.state ? deferred.onFulfilled : deferred.onRejected,
      ret;

    if (cb === null) {
      (self.state ? deferred.resolve : deferred.reject)(self.value);
      return;
    }

    try {
      ret = cb(self.value);
    } catch (e) {
      deferred.reject(e);
      return;
    }

    deferred.resolve(ret);
  });
}

function resolve(newValue) {
  try { // Promise Resolution Procedure: https:// github.com/promises-aplus/promises-spec#the-promise-resolution-procedure
    if (newValue === this) {
      throw new TypeError('A promise cannot be resolved with itself.');
    }

    if (newValue && (typeof newValue === 'object' || typeof newValue === 'function')) {
      var then = newValue.then;

      if (typeof then === 'function') {
        doResolve(bind(then, newValue), bind(resolve, this), bind(reject, this));
        return;
      }
    }

    this.state = true;
    this.value = newValue;
    finale.call(this);
  } catch (e) {
    reject.call(this, e);
  }
}

function reject(newValue) {
  this.state = false;
  this.value = newValue;
  finale.call(this);
}

function finale() {
  var i, len;

  for (i = 0, len = this.deferreds.length; i < len; i++) {
    handle.call(this, this.deferreds[i]);
  }

  this.deferreds = null;
}

function Handler(onFulfilled, onRejected, resolve, reject) {
  this.onFulfilled = typeof onFulfilled === 'function' ? onFulfilled : null;
  this.onRejected = typeof onRejected === 'function' ? onRejected : null;
  this.resolve = resolve;
  this.reject = reject;
}

/**
 * Take a potentially misbehaving resolver function and make sure
 * onFulfilled and onRejected are only called once.
 *
 * Makes no guarantees about asynchrony.
 */
function doResolve(fn, onFulfilled, onRejected) {
  var done = false;

  try {
    fn(function (value) {
      if (done) {
        return;
      }

      done = true;
      onFulfilled(value);
    }, function (reason) {

      if (done) {
        return;
      }

      done = true;
      onRejected(reason);
    });
  } catch (ex) {
    if (done) {
      return;
    }

    done = true;
    onRejected(ex);
  }
}

Promise.prototype.catchError = function (onRejected) {
  return this.then(null, onRejected);
};

Promise.prototype.then = function (onFulfilled, onRejected) {
  var self = this;

  return new Promise(function (resolve, reject) {
    handle.call(self, new Handler(onFulfilled, onRejected, resolve, reject));
  });
};

Promise.all = function () {
  var args = Array.prototype.slice.call(arguments.length === 1 && Array.isArray(arguments[0]) ? arguments[0] : arguments);

  return new Promise(function (resolve, reject) {
    var remaining = args.length,
      i;

    if (args.length === 0) {
      return resolve([]);
    }

    function res(i, val) {
      try {
        if (val && (typeof val === 'object' || typeof val === 'function')) {
          var then = val.then;

          if (typeof then === 'function') {
            then.call(val, function (val) {
              res(i, val);
            }, reject);

            return;
          }
        }

        args[i] = val;
        if (--remaining === 0) {
          resolve(args);
        }
      } catch (ex) {
        reject(ex);
      }
    }

    for (i = 0; i < args.length; i++) {
      res(i, args[i]);
    }
  });
};

Promise.resolve = function (value) {
  if (value && typeof value === 'object' && value.constructor === Promise) {
    return value;
  }

  return new Promise(function (resolve) {
    resolve(value);
  });
};

Promise.reject = function (value) {
  return new Promise(function (resolve, reject) {
    reject(value);
  });
};

Promise.race = function (values) {
  return new Promise(function (resolve, reject) {
    for (var i = 0, len = values.length; i < len; i++) {
      values[i].then(resolve, reject);
    }
  });
};

// public
module.exports = Promise;

},{}],44:[function(require,module,exports){
'use strict';

var request = {},
  defaults = {
    method: 'GET', // HTTP method to use, such as "GET", "POST", "PUT", "DELETE", etc.
    async: true, // whether or not to perform the operation asynchronously
    headers: {}, // list of HTTP request headers
    type: 'text', // "", "arraybuffer", "blob", "document", "json", "text"
    data: null, // data to send (plain object)
    timeout: 30000, // amount of milliseconds a request can take before being terminated
    onload: null, // callback when the request has successfully completed
    onerror: null, // callback when the request has failed
    ontimeout: null // callback when the author specified timeout has passed before the request could complete
  },
  defaultsKeys = Object.keys(defaults);

/**
 * Main method to send ajax requests.
 *
 * @param {string} url address
 * @param {Object} options Plain object with call parameters
 * @return {XMLHttpRequest|Boolean} false in case of wrong params
 *
 * @example
 * TODO: add
 */
request.ajax = function (url, options) {

  var i, headersKeys, client;

  // init
  options = options || {};

  // valid non-empty string
  if (url && (typeof url === 'string' || url instanceof String) && url.length > 0) {
    // plain object is given as param
    if (options && typeof options === 'object') {
      // extend with default options
      for (i = 0; i < defaultsKeys.length; i++) {
        // in case not redefined
        if (options[defaultsKeys[i]] === undefined) {
          options[defaultsKeys[i]] = defaults[defaultsKeys[i]];
        }
      }
    }

    client = new XMLHttpRequest();

    // init a request
    client.open(options.method, url, options.async);



    // apply the given headers
    if (options.headers && typeof options.headers === 'object') {
      headersKeys = Object.keys(options.headers);
      for (i = 0; i < headersKeys.length; i++) {
        client.setRequestHeader(headersKeys[i], options.headers[headersKeys[i]]);
      }
    }

    // set response type and timeout
    //client.responseType = options.type; not work in lg
    client.timeout = options.timeout;

    client.onreadystatechange = function () {
      if (!client.status) {
        if(options.onerror) {
          options.onerror.call(this);
        }
      }
    }

    // callbacks
    if (options.onload && typeof options.onload === 'function') {
      client.onload = function onload() {
        var errorBody = null;
        var response = null;
        if (!options.dataType || options.dataType == 'json') {
          try {
            response = JSON.parse(this.responseText);
          } catch (error) {

            errorBody = {
              text: 'JSON parse error',
              type: 'PARSE_ERROR',
              errorURL: url,
              status: this.status,
              response: response,
              statusText: this.statusText
            };
          }
        } else {
          response = this.responseText;
        }

        if (response === null || response['Error:'] || response.result === 'error') {

          errorBody = {
            text: 'Smth wrong with response',
            type: 'AJAX_ERROR',
            errorURL: url,
            response: JSON.stringify(response),
            status: this.status,
            statusText: this.statusText
          };

          options.onerror.call(this, errorBody, this.status);

          return;
        }

        options.onload.call(this, response, this.status);
        client = null;
      };
    }

    client.onerror = options.onerror;
    client.ontimeout = options.ontimeout;

    // actual request
    // client.send(this.encode(options.data));

    client.send(options.data ? options.data : null);

    return client;
  }

  return false;
};

/**
 * Serializes the given data for sending to the server via ajax call.
 *
 * @param {Object} data Plain object to serialize
 * @return {string} null if no data to encode
 *
 * @example
 * TODO: add
 */
request.encode = function (data) {
  var result = [],
    i, keys;

  // input plain object validation
  if (data && typeof data === 'object') {
    keys = Object.keys(data);

    // apply encoding
    for (i = 0; i < keys.length; i++) {
      result.push(encodeURIComponent(keys[i]) + '=' + encodeURIComponent(data[keys[i]]));
    }

    // build the list of params
    if (result.length > 0) {
      return result.join('&');
    }
  }

  return null;
};

// public
module.exports = request;

},{}],45:[function(require,module,exports){
//@TODO create function update HASH


/**
 * Singleton for page navigation with history.
 *
 * All page modules should be in the directory `app/js/pages`.
 * Page module name and the corresponding file name should be the same.
 *
 * Include module to start working:
 *
 * ```js
 * var router = require('stb/router');
 * ```
 *
 * Init with page modules:
 *
 * ```js
 * router.data([
 *     require('./pages/other/init'),
 *     require('./pages/other/main'),
 *     require('./pages/help')
 * ]);
 * ```
 *
 * Each page has its ID. The same ID should be used in HTML.
 *
 * Make some page active/visible by its ID:
 *
 * ```js
 * router.navigate('pageMovies');
 * ```
 *
 * This will hide the current page, activate the `pageMovies` page and put it in the tail of the history list.
 *
 * All subscribers of the current and `pageMovies` page will be notified with `show/hide` events.
 *
 * Also the router emits `navigate` event to all subscribers.
 *
 *
 * To get to the previous active page use:
 *
 * ```js
 * router.back();
 * ```
 *
 * The module also has methods to parse location hash address and serialize it back:
 *
 * ```js
 * router.parse('#pageMovies/some/additional/data');
 * router.stringify('pageMovies', ['some', 'additional', 'data']);
 * ```
 *
 * Direct modification of the URL address should be avoided.
 * The methods `router.navigate` and `router.back` should be used instead.
 *
 * @module core/router
 * @author Stanislav Kalashnik <sk@infomir.eu>
 * @license GNU GENERAL PUBLIC LICENSE Version 3
 */

'use strict';

var Emitter = require('./emitter'),
    keys = require('vendor/aura/keys'),
    router;

/**
 * @instance
 * @type {Emitter}
 */
router = new Emitter();

/**
 * Current active/visible page.
 *
 * @readonly
 * @type {Page}
 */
router.current = null;

/**
 * List of all visited pages.
 *
 * @readonly
 * @type {Page[]}
 */
router.history = [];

/**
 * List of all stored pages.
 *
 * @readonly
 * @type {Page[]}
 */
router.pages = [];

/**
 * Hash table of all pages ids with links to pages.
 *
 * @readonly
 * @type {Object.<string, Page>}
 */
router.ids = {};

router.stopHashChange = true;

/**
 * Set router data event.
 *
 * @event module:core/router#init
 *
 * @type {Object}
 * @property {Page[]} pages new page list
 */

/**
 * Clear and fill the router with the given list of pages.
 *
 * @param {Page[]} pages list of pages to add
 * @return {boolean} operation status
 *
 * @fires module:core/router#init
 */
router.init = function(pages) {
  var i, l, item;

  if (pages) {
    // reset page list
    this.pages = [];

    // apply list
    this.pages = pages;

    // extract ids
    for (i = 0, l = pages.length; i < l; i++) {
      item = pages[i];
      this.ids[item.id] = item;

      // find the currently active page
      if (item.active) {
        this.current = item;
      }
    }

    // there are some listeners
    if (this.events['init']) {
      // notify listeners
      this.emit('init', {
        pages: pages,
      });
    }

    return true;
  }

  return false;
};

/**
 * Extract the page name and data from url hash.
 *
 * @param {string} hash address hash part to parse
 *
 * @return {{name: string, data: string[]}} parsed data
 *
 * @example
 * router.parse('#main/some/additional/data');
 * // execution result
 * {name: 'main', data: ['some', 'additional', 'data']}
 */
router.parse = function(hash) {
  var page = {
    name: '',
    data: [],
  };

  // get and decode all parts
  page.data = hash.split('/').map(decodeURIComponent);

  // the first part is a page id
  // everything else is optional path
  page.name = page.data.shift().slice(1);

  return page;
};

/**
 * Convert the given page name and its data to url hash.
 *
 * @param {string} name page name
 * @param {string[]} [data=[]] page additional parameters
 *
 * @return {string} url hash
 *
 * @example
 * router.stringify('main', ['some', 'additional', 'data']);
 * // execution result
 * '#main/some/additional/data'
 */
 //need REFACTOR
router.stringify = function(name, data) {
  // validation
	data =  data || [];

	// encode all parts
	name = encodeURIComponent(name);
	data = data.map(encodeURIComponent);
	// add encoded name to the beginning
	data.unshift(name);

	// build an uri
	return data.join('/');
};

/**
 * Make the given inactive/hidden page active/visible.
 * Pass some data to the page and trigger the corresponding event.
 *
 * @param {Page} page item to show
 * @param {*} [data] data to send to page
 *
 * @return {boolean} operation status
 */
router.show = function(page, data) {
  // page available and can be hidden
  if (page && !page.active) {
    // apply visibility
    page.$node.classList.add('active');
    page.active = true;
    this.current = page;

    // there are some listeners
    if (page.events['show']) {
      // notify listeners
      page.emit('show', {
        page: page,
        data: data,
      });
    }

    return true;
  }

  // nothing was done
  return false;
};

/**
 * Make the given active/visible page inactive/hidden and trigger the corresponding event.
 *
 * @param {Page} page item to hide
 *
 * @return {boolean} operation status
 */
router.hide = function(page, pageTo) {
  // page available and can be hidden
  if (page && page.active) {
    // apply visibility
    page.$node.classList.remove('active');
    page.active = false;
    this.current = null;

    // there are some listeners
    if (page.events['hide']) {
      // notify listeners
      page.emit('hide', {
        page: page,
        pageTo: pageTo
      });
    }

    return true;
  }
  // nothing was done
  return false;
};

/**
 * Browse to a page with the given name.
 * Do nothing if the name is invalid. Otherwise hide the current, show new and update history.
 *
 * @param {string} name page id
 * @param {*} [data] options to pass to the page on show
 *
 * @return {boolean} operation status
 */
router.navigate = function(name, data) {


  var path = name || 'pageMain',
    pageFrom = this.current,
    pageTo = this.ids[path];

  if (pageTo) {
    // update url
    changeLocationHash(this.stringify(path, data));

    pageTo.hash = location.hash;

    this.hide(this.current, pageTo);

    this.show(pageTo, data);

    // there are some listeners
    if (this.events['navigate']) {
      // notify listeners
      this.emit('navigate', {
        from: pageFrom,
        to: pageTo
      });
    }

    pageTo.url_params = data;
    /**
     !!! pages with the same id is not uniqe in history, it just link to one page
     url_params is uniqe id for pages in history,
     url_params was added because its imposimble to clone pageTo object, for add it in history
    */

    this.history.push({page: pageTo, url_params: data});

    return true;
  }

  // nothing was done
  return false;
};

/**
 * Go back one step in the history.
 * If there is no previous page, go to main page.
 *
 * @return {boolean} operation status
 */
router.back = function(data) {

  var pageFrom, pageTo, url_params;

  // there are some pages in the history
  if (this.history.length > 1) {
    // remove the current
    pageFrom = this.history.pop();

    pageTo = this.history[this.history.length - 1].page;
    url_params = this.history[this.history.length - 1].url_params || {};

    if (pageTo) {
      if (pageTo.url_params == url_params) {
        url_params = {navigateBack: true};
      }
      if(data) {
        url_params.data = data;
      }

      // apply visibility
      this.hide(this.current, pageTo);

      this.show(pageTo, [url_params]);

      if(pageTo.hash) {
        changeLocationHash(pageTo.hash);
      }

      // there are some listeners
      if (this.events['navigate']) {
        // notify listeners
        this.emit('navigate', {
          from: pageFrom,
          to: pageTo
        });
      }
    }
  } else {
    if(getHelpFunctions().getParameterByName('titleid')) {
      getHelpFunctions().goPrevPage();
    } else {
      router.navigate();
    }
  }
  return true;
};

router.redirect = function(pageTo, data) {
  setTimeout(function(){
    router.history.pop();
    router.navigate(pageTo, data);
  }, 0);
};

router.firstNavigate = function() {
  var deeplink_data = null,
      hash = this.parse(location.hash),
      navigate_data = {page: hash.name, id: hash.data};

  if(mainConfigMgg.deviceInfo.vendor == 'tizen') {
    if(deeplink_data = this.getTizenDeepLinkData()) {
      navigate_data = deeplink_data;
    }
  } else if(mainConfigMgg.deviceInfo.vendor == 'lg' || mainConfigMgg.deviceInfo.vendor == 'browser') {
    if(deeplink_data = this.getLGDeepLinkData()) {
      navigate_data = deeplink_data;
      var statInfoService = getStatInfoService();
      statInfoService.sendGATrackEvent('fromBanner_' + navigate_data.page, navigate_data.id[0]);
      if(navigate_data.campaignName){
        statInfoService.sendGATrackEvent('deeplink_visit', navigate_data.campaignName);
      }
    }
  }
  this.navigate(navigate_data.page, navigate_data.id);

  this.showApp();
};

router.getTizenDeepLinkData = function() {
  var requestedAppControl = tizen.application.getCurrentApplication().getRequestedAppControl();
  var appControlData, tizen_diplink_data, tizen_deeplink_movie_id;

  if (requestedAppControl) {
    appControlData = requestedAppControl.appControl.data;

    for (var i = 0; i < appControlData.length; i++) {
      if (appControlData[i].key == 'PAYLOAD') {
        tizen_diplink_data = JSON.parse(appControlData[i].value[0]).values;

        if(tizen_diplink_data && JSON.parse(tizen_diplink_data)) {
          tizen_deeplink_movie_id = JSON.parse(tizen_diplink_data).videoId;

          if(tizen_deeplink_movie_id) {
            //if app was already loaded
            if(getApp().loaded == true) {
              router.navigate('pageMovie', [tizen_deeplink_movie_id]);
              return;
            } else {
              return {page: 'pageMovie', id: [tizen_deeplink_movie_id]};
            }
          }
        }
      }
    }
  } else {
    console.log("no req app control");
  }
  return null;
};

router.getLGDeepLinkData = function() {
  var helpFunctions = getHelpFunctions();
  var lg_deeplink_data = null,
      lg_deeplink_id = helpFunctions.getParameterByName('titleid'),
      lg_deeplink_page = helpFunctions.getParameterByName('pageid') || 'pageMovie',//@TODO for example
      lg_deeplink_app_id = helpFunctions.getParameterByName('appID')|| '',
      lg_deeplink_campaign = helpFunctions.getParameterByName('campaign_name') || '';

  if(lg_deeplink_id) {
    lg_deeplink_data = {
      page: lg_deeplink_page,
      id: [lg_deeplink_id],
      appID: lg_deeplink_app_id,
      campaignName: lg_deeplink_campaign
    };
  }

  return lg_deeplink_data
};

router.showApp = function() {
  document.getElementsByTagName('body')[0].classList.remove('init');
};

function isUniquePage(data) {
  if(data && data.length) {
    for(var i = 0; i < router.history.length; i++) {
      if(router.history[i].url_params && router.history[i].url_params.length) {
        console.log(data[0], router.history[i].url_params[0]);
        if(data[0] == router.history[i].url_params[0]) {
          return false;
        }
      }
    }
  }
  return true;
}

function getHelpFunctions() {
  return require('core/lib/helpFunctions');
}

function getApp() {
  return require('core/app');
}

function getStatInfoService() {
  return require('core/tools/statInfoService');
}

function changeLocationHash(hash) {
  //uncomment if need to use foxxum @TODO uncomment if need to use history API
  //router.stopHashChange = true;
  location.hash = hash;
  //setTimeout(function(){router.stopHashChange = false;},0)
}

/**
solution for foxxum where back button work like back arrow in browser
use this when open popup
router.stopHashChange = true;
location.hash = location.hash + '?popup-show';
setTimeout(function(){router.stopHashChange = false;},0)
*/

/* @TODO uncomment if need to use history API
window.addEventListener("hashchange", function(data){
  if(!router.stopHashChange) {
    if(router.current && router.current.activeComponent) {
      router.current.activeComponent.emit('keydown', {
        keyCode: keys.RETURN,
        event: {}
      });
    }
  }
}, false);
*/

// public
module.exports = router;

},{"./emitter":32,"core/app":16,"core/lib/helpFunctions":34,"core/tools/statInfoService":53,"vendor/aura/keys":133}],46:[function(require,module,exports){
/**
 * @author Stanislav Kalashnik <sk@infomir.eu>
 * @license GNU GENERAL PUBLIC LICENSE Version 3
 */

'use strict';

/* eslint-disable */

if (!('classList' in document.documentElement)) {
  var prototype = Array.prototype,
  indexOf = prototype.indexOf,
  slice = prototype.slice,
  push = prototype.push,
  splice = prototype.splice,
  join = prototype.join;

  window.DOMTokenList = function(el) {
    this._element = el;
    if (el.className !== this._classCache) {
      this._classCache = el.className;
      if (!this._classCache) { return; }

      var classes = this._classCache.replace(/^\s+|\s+$/g, '').split(/\s+/),
      i;
      for (i = 0; i < classes.length; i++) {
        push.call(this, classes[i]);
      }
    }
  };

  window.DOMTokenList.prototype = {
    add: function(token) {
      if (this.contains(token)) { return; }

      push.call(this, token);
      this._element.className = slice.call(this, 0).join(' ');
    },

    contains: function(token) {
      return indexOf.call(this, token) !== -1;
    },

    item: function(index) {
      return this[index] || null;
    },

    remove: function(token) {
      var i = indexOf.call(this, token);
      if (i === -1) {
        return;
      }

      splice.call(this, i, 1);
      this._element.className = slice.call(this, 0).join(' ');
    },

    toString: function() {
      return join.call(this, ' ');
    },

    toggle: function(token) {
      if (!this.contains(token)) {
        this.add(token);
      } else {
        this.remove(token);
      }

      return this.contains(token);
    },
  };

  Object.defineProperty(Element.prototype, 'classList', {
    get: function() {
      return new window.DOMTokenList(this);
    },
  });
}

},{}],47:[function(require,module,exports){
var Emitter = require('core/emitter');

if (!window.localStorage) {
  Object.defineProperty(window, 'localStorage', new(function () {
    var aKeys = [],
      oStorage = {};

    Object.defineProperty(oStorage, 'getItem', {
      value: function (sKey) {
        return sKey ? this[sKey] : null;
      },
      writable: false,
      configurable: false,
      enumerable: false
    });

    Object.defineProperty(oStorage, 'key', {
      value: function (nKeyId) {
        return aKeys[nKeyId];
      },
      writable: false,
      configurable: false,
      enumerable: false
    });
    Object.defineProperty(oStorage, 'setItem', {
      value: function (sKey, sValue) {
        if (!sKey) {
          return;
        }
        document.cookie = escape(sKey) + '=' + escape(sValue) + '; expires=Tue, 19 Jan 2038 03:14:07 GMT; path=/';//MAYEBE NEED REFACTOR
      },
      writable: false,
      configurable: false,
      enumerable: false
    });

    Object.defineProperty(oStorage, 'length', {
      get: function () {
        return aKeys.length;
      },
      configurable: false,
      enumerable: false
    });

    Object.defineProperty(oStorage, 'removeItem', {
      value: function (sKey) {
        if (!sKey) {
          return;
        }
        document.cookie = escape(sKey) + '=; expires=Thu, 01 Jan 1970 00:00:00 GMT; path=/';
      },
      writable: false,
      configurable: false,
      enumerable: false
    });

    this.getData = function () {
      var iThisIndx;
      for (var sKey in oStorage) {
        iThisIndx = aKeys.indexOf(sKey);
        if (iThisIndx === -1) {
          oStorage.setItem(sKey, oStorage[sKey]);
        } else {
          aKeys.splice(iThisIndx, 1);
        }
        delete oStorage[sKey];
      }
      for (aKeys; aKeys.length > 0; aKeys.splice(0, 1)) {
        oStorage.removeItem(aKeys[0]);
      }
      for (var aCouple, iKey, nIdx = 0, aCouples = document.cookie.split(/\s*;\s*!/); nIdx < aCouples.length; nIdx++) {
        aCouple = aCouples[nIdx].split(/\s*=\s*/);
        if (aCouple.length > 1) {
          oStorage[iKey = unescape(aCouple[0])] = unescape(aCouple[1]);
          aKeys.push(iKey);
        }
      }
      return oStorage;
    };

    this.configurable = false;
    this.enumerable = true;
  })());
}

/**
 * localStorage wrapper
 * @method Storage
 */
function Storage() {
  Emitter.call(this);

  this.get = function (key) {
    var value = window.localStorage.getItem(key);
    try {
      value = eval(value);
    } catch (e) {}
    return value;
  };

  this.has = function (key) {
    return localStorage.getItem(key) !== null;
  };

  this.set = function (key, value) {
    if (this.get(key) !== value) {
      if (typeof value === 'object') {
        value = JSON.stringify(value);
      }
      window.localStorage.setItem(key, value);
      this.emit('changed:' + key, value);
    }
    return this;
  };

  this.remove = function (key) {
    var value = this.get(key);
    window.localStorage.removeItem(key);
    this.emit('removed:' + key, value);
    return value;
  };
};

Storage.prototype = Object.create(Emitter.prototype);
Storage.prototype.constructor = Storage;

module.exports = new Storage();

},{"core/emitter":32}],48:[function(require,module,exports){
'use strict';
var keys = require('vendor/aura/keys'),
  router = require('core/router')
;

var colorButtonsHandle = {
  pressRed: function() {
    if(router.current.activeComponent) {
      if(router.current.activeComponent && router.current.activeComponent.keys
        && !router.current.activeComponent.keys['RED']) {
        if(leftMenu().visible) {
          if(leftMenu().container.visible) {
            leftMenu().hideMenu();
          } else {
            leftMenu().showMenu();
          }
        } else {
          router.current.activeComponent.emit('keydown', {
            keyCode: keys.RETURN,
            event: {}
          });
        }
      }
    }
  }
};

function leftMenu() {
  return require('widgets/menu-left');
}

module.exports = colorButtonsHandle;

},{"core/router":45,"vendor/aura/keys":133,"widgets/menu-left":150}],49:[function(require,module,exports){
var subscriptionService = require('core/tools/subscriptionService'),
  Loader = require('widgets/loader'),
  helpFunctions = require('core/lib/helpFunctions'),
  api = require('core/api'),
  router = require('core/router');

var menuNavigateService = {
  navigateMenuItem: function (menuItem) {
    var url = null;
    var params = [];

    if (menuItem && menuItem.type && menuItem.meta && menuItem.meta.length) {
      if (menuItem.type == 'category') {
        if (menuItem.meta[0].type == 'category_id' && menuItem.meta[0].value) {
          url = 'pageMoviesCategory';
          params.push(menuItem.meta[0].value);
        }
      } else if (menuItem.type == 'featured') {
        if (menuItem.meta[0].type == 'featured_id' && menuItem.meta[0].value) {
          url = 'pageMoviesCategory';
          params.push('collections');
          params.push(menuItem.meta[0].value);
          params.push({openFromMenu: true});
        }
      } else if (menuItem.type == 'static') {
        var url_params = {};
        menuItem.meta.forEach(function (item) {
          if (item.type == 'static_id') {
            url = mainConfigMgg.menuRoutePage[item.value];
          }
          if (item.type == 'vod') {
            url_params.vod = item.value;
          }
          if (item.type == 'slider_category_id') {
            url_params.slider_category_id = item.value;
          }
          if (item.type == 'featured_group_id') {
            url_params.featured_group_id = item.value;
          }
          if (item.type == 'featured_group_id') {
            url_params.featured_group_id = item.value;
          }
          if (item.type == 'subscription_id') {
            url_params.subscription_id = item.value;
          }
        });
        if (url == 'pageMoviesCategory') {
          //params.push('collections');
        } else if (url == 'pageSubscription') {
          subscriptionService.hasAvailableChannels().then(function (data) {
            if (data == 'play') {
              router.navigate('pagePlayer', ['tv']);
            } else {
              router.navigate(url, params);
            }
          });
          return;
        } else {
          if (Object.keys(url_params).length) {
            params.push(JSON.stringify(url_params));
          }
        }
      } else if (menuItem.type == 'profile') {
        url = 'pageProfile';
      } else if (menuItem.type == 'search') {
        url = 'pageSearch';
      } else if (menuItem.type == 'iwatch') {
        url = 'pageIWatch';
      }
      if (url) {
        router.navigate(url, params);
      }
    } else {
      console.log('WRONG MenuItem');
    }
  },
  checkAdLink: function (linkUrl) {
    var url = linkUrl.split('/');
    return ['collection',
        'video',
        'movie',
        'movietariffs',
        'actor',
        'premieres',
        'subscriptions',
        'tvchannels',
        'tvchannel',
        'category',
        'profile',
        'subscription',
        'subscriptiontariffs',
        'promocode',
        'main',
        'player',
        'landing'].indexOf(url[0]) !== -1;
  },
  navigateAdLink: function (navigateType, linkUrl) {
    var url = linkUrl.split('/');
    switch (url[0]) {
      case 'collection':
        router[navigateType]('pageMoviesCategory', ['collections', url[1]]);
        break;
      case 'video':
        router[navigateType]('pageMovie', [url[1]]);
        break;
      case 'movie':
        router[navigateType]('pageMovie', [url[1]]);
        break;
      case 'movietariffs':
        var routeOptions = [url[1], 'tariffs'];
        if (url[2]) {
          routeOptions.push(url[2]);
        }
        router[navigateType]('pageMovie', routeOptions);
        break;
      case 'actor':
        router[navigateType]('pageActorDetailed', [url[1]]);
        break;
      case 'premieres':
        router[navigateType]('pageMoviesCategory', ['premiere']);
        break;
      case 'subscriptions':
        router[navigateType]('pageSubscriptionMovies');
        break;
      case 'tvchannels':
        subscriptionService.hasAvailableChannels().then(function (data) {
          if (data == 'play') {
            router[navigateType]('pageTvChannels');
          } else {
            router.navigate('pageSubscription');
          }
        });
        break;
      case 'tvchannel':
        subscriptionService.hasAvailableChannels().then(function (data) {
          if (data == 'play') {
            var routeOptions = ['tv'];
            if (url[1]) {
              routeOptions.push(url[1]);
            }
            router[navigateType]('pagePlayer', routeOptions);
          } else {
            router.navigate('pageSubscription');
          }
        });
        break;
      case 'category':
        router[navigateType]('pageMoviesCategory', [url[1]]);
        break;
      case 'profile':
        if (url[1] == 'pair')
          router[navigateType]('pageLogin');
        else if (url[1] == 'subscriptions')
          router[navigateType]('pageSubscriptionsProfile');
        else
          router[navigateType]('pageProfile');
        break;
      case 'subscription':
        router[navigateType]('pageSubscriptionDetailed', [url[1]]);
        break;
      case 'subscriptiontariffs':
        router[navigateType]('pageSubscriptionDetailed', [url[1], 'tariffs']);
        break;
      case 'promocode':
        if (url[1]) {
          var routeOptions = ['redeem', url[1]];
          if (url[2]) {
            routeOptions.push(url[2]);
          }
          router[navigateType]('pageCertificate', routeOptions);
        } else {
          router[navigateType]('pageCertificate', ['redeem']);
        }
        break;
      case 'main':
        router[navigateType]('pageMain');
        break;
      case 'player':
        router[navigateType]('pagePlayer', [url[1]]);
        break;
      case 'landing':
        var routeOptions = [url[1]];
        if (url[2]) {
          routeOptions.push(url[2]);
        }else{
          routeOptions.push('slide1');
        }
        router[navigateType]('pageLandingInner', routeOptions);
        break;
    }
  },
  navigateToSalesLanding: function (subsID, type) {
    var subscription = subscriptionService.getSubscriptionById(subsID);
    var isTryAndBuy = subscriptionService.getFirstSubscriptionTariff(subscription).is_try_and_buy;
    var salesLandingID = subscription.subscription_meta && subscription.subscription_meta.smart_tv_landing_collection_id;
    if (isTryAndBuy && salesLandingID) {
      router.navigate('pageLandingInner', [
        subscription.subscription_meta.smart_tv_landing_collection_id, 'slide1'
      ]);
    } else {
      var routerUrlData = [subsID];
      if (type) {
        routerUrlData.push(type);
      }
      router.navigate('pageSubscriptionDetailed', routerUrlData);
    }

  }
};
module.exports = menuNavigateService;

},{"core/api":15,"core/lib/helpFunctions":34,"core/router":45,"core/tools/subscriptionService":54,"widgets/loader":149}],50:[function(require,module,exports){
var api = require('core/api'),
  app = require('core/app'),
  helpFunctions = require('core/lib/helpFunctions'),
  PopUpPincode = require('widgets/popup/popup-pincode'),
  paymentModel = require('core/paymentModel'),
  Tariffs = require('widgets/popup/popup-tariffs-tvod-dto'),
  wParentalControlSet = require('widgets/popup/popup-parental-control-set'),
  LeftMenu = require('widgets/menu-left'),
  subscriptionService = require('core/tools/subscriptionService'),
  menuNavigateService = require('core/tools/menuNavigateService'),
  router = require('core/router');

var movieService = {
  clickWatchButton: function (movie, page, isFromEpisode, episodeID) {
    if (movie) {
      if (movie.is_available) {
        var playerMovieID = isFromEpisode ? episodeID : movie.id;
        if (!isFromEpisode && movie.series_last_watched){
          playerMovieID = movie.series_last_watched.episode_id;
        }
        api.PC_Check().then(function (data) {

          var pcInfo = app.dataStorage.pc_info;
          var parentalControlMaxAge = helpFunctions.getAgeTitlesByID(pcInfo.age_limit_id).maxAge;
          var nowTime = Math.floor(new Date().getTime() / 1000);
          var pcCookieTime = nowTime - mainConfigMgg.parentalControlTimer;
          var pcLifetime = app.dataStorage.configuration.parental_controls_lifetime;
          var movieAgeLimit = parseInt(movie.age_limit);

          // if Parental Control is set
          if (pcInfo.status) {
            if ((mainConfigMgg.parentalControlTimer == -1 || pcCookieTime > pcLifetime) &&
              (movieAgeLimit >= parentalControlMaxAge)) {
              PopUpPincode.show({
                title: movie.title,
                pinCode: pcInfo.code,
                type: 'video-pin',
                ageLimit: movieAgeLimit,
                text: i18nMgg('pc_video_pin'),
                buttonText: i18nMgg('watch')
              });
            } else {
              router.navigate('pagePlayer', [
                playerMovieID
              ]);
            }
          } else {
            if (movieAgeLimit >= 18 && !pcInfo.notification_shown) {
              api.load('pcNotificationShown', {});
              wParentalControlSet.show({
                type: 'ask-to-set',
                playerID: movie.id,
                title: movie.title,
                text: i18nMgg('pc_set_ask'),
                page: page
              });
            } else {
              router.navigate('pagePlayer', [
                playerMovieID
              ]);
            }
          }
        });

      } else {
        paymentModel.init(paymentModel.getDefaultData());
        paymentModel.set('objectID', movie.id);

        paymentModel.set('isVideoObject', true);

        // if Movie is available by svod
        if (movie.isSvod) {
          var subsID = movie.purchase_info.svod.subscriptions[0];
          menuNavigateService.navigateToSalesLanding(subsID, 'movie');
        }

        // if Movie is available by tvod || dto
        if (movie.isPaid) {
          page.hide();

          Tariffs.show({
            leftMenu: LeftMenu,
            movieData: movie,
            page: page
          });

        }
      }
    }
  },
  clickAdsFreeButton: function(movie, saleSubscription){
    paymentModel.init(paymentModel.getDefaultData());
    paymentModel.set('objectID', movie.id);
    paymentModel.set('isVideoObject', true);

    if(saleSubscription){
      menuNavigateService.navigateToSalesLanding(saleSubscription.subscription_id, 'movie');
    }
  },
  clickWatchTrailerButton: function (movie, page) {
    if (movie) {
      var playerObject = {
        type: 'trailer',
        videoId: movie.id
      };
        api.PC_Check().then(function (data) {
          var pcInfo = app.dataStorage.pc_info;
          var parentalControlMaxAge = helpFunctions.getAgeTitlesByID(pcInfo.age_limit_id).maxAge;
          var nowTime = Math.floor(new Date().getTime() / 1000);
          var pcCookieTime = nowTime - mainConfigMgg.parentalControlTimer;
          var pcLifetime = app.dataStorage.configuration.parental_controls_lifetime;
          var movieAgeLimit = parseInt(movie.age_limit);

          // if Parental Control is set
          if (pcInfo.status) {
            if ((mainConfigMgg.parentalControlTimer == -1 || pcCookieTime > pcLifetime) &&
              (movieAgeLimit >= parentalControlMaxAge)) {
              PopUpPincode.show({
                title: movie.title,
                pinCode: pcInfo.code,
                type: 'video-pin',
                ageLimit: movieAgeLimit,
                text: i18nMgg('pc_video_pin'),
                buttonText: i18nMgg('watch')
              });
            } else {
              router.navigate('pagePlayer', [
                movie.trailer_id, playerObject
              ]);
            }
          } else {

            if (movieAgeLimit >= 18 && !pcInfo.notification_shown) {
              api.load('pcNotificationShown', {});
              wParentalControlSet.show({
                type: 'ask-to-set',
                isTrailer: true,
                trailerID:  movie.trailer_id,
                playerObject: playerObject,
                title: movie.title,
                text: i18nMgg('pc_set_ask'),
                page: page
              });
            } else {
              router.navigate('pagePlayer', [
                movie.trailer_id, playerObject
              ]);
            }
          }
        });
    }
  }

};

module.exports = movieService;

},{"core/api":15,"core/app":16,"core/lib/helpFunctions":34,"core/paymentModel":41,"core/router":45,"core/tools/menuNavigateService":49,"core/tools/subscriptionService":54,"widgets/menu-left":150,"widgets/popup/popup-parental-control-set":157,"widgets/popup/popup-pincode":158,"widgets/popup/popup-tariffs-tvod-dto":161}],51:[function(require,module,exports){
var subscriptionService = require('core/tools/subscriptionService'),
  Loader = require('widgets/loader'),
  api = require('core/api'),
  PopUpResults = require('widgets/popup/popup-results'),
  helpFunctions = require('core/lib/helpFunctions'),
  router = require('core/router'),
  wTariffsSubscription = require('widgets/popup/popup-tariffs-subscription'),
  statInfoService = require('core/tools/statInfoService'),
  channelActions = require('state/channel_actions'),
  paymentModel = require('core/paymentModel');

var routes_for_remove = ['pagePaymentChoice', 'pageCertificate',
  'pagePaymentCardToken', 'pagePaymentCardNew'];

var paymentService = {
  getResultText: function (type) {
    var resultText = '';
    switch (type) {
      case 'movie':
        if (paymentModel.get('vodRulesType') == 'subs') {
          var subscription = subscriptionService.getSubscriptionById(paymentModel.get('serviceID'));
          var subsTitle = subscription.title;
          var subsExpiration = subscriptionService.getExpirationDate(subscription);
          resultText = i18nMgg('cer_get_access_subs') + ' ' + subsTitle + ' <br>' + i18nMgg('until') + ' ' + subsExpiration + '. ' + i18nMgg('congratulations') + '!'
        }

        if (paymentModel.get('vodRules') == 'tvod') {
          resultText = i18nMgg('payment_ok_movie_1') + ' ' + paymentModel.get('period') + ' ' + helpFunctions.getValueText(paymentModel.get('period'), 'day') + ' ' + i18nMgg('payment_ok_movie_2');
        }

        if (paymentModel.get('vodRules') == 'dto') {
          resultText = i18nMgg('bought_dto_big_text');
        }
        break;
      case 'subscription':
        var subscription = subscriptionService.getSubscriptionById(paymentModel.get('serviceID'));
        var subsTitle = subscription.title;
        var subsExpiration = subscriptionService.getExpirationDate(subscription);

        resultText = i18nMgg('cer_get_access_subs') + ' ' + subsTitle + ' <br>' + i18nMgg('until') + ' ' + subsExpiration + '. ' + i18nMgg('congratulations') + '!'
        break;

    }

    return resultText;
  },
  successfulPaymentHandler: function (orderID) {
    if (paymentModel.get('objectID') && paymentModel.get('isVideoObject')) { // покупка с фильма либо подписки либо ТВОД/ДТО
      if (paymentModel.get('vodRulesType') == 'subs') { // video by subscribtion

        api.load('subscriptionInfo', {}, {setToStorageKey: 'subscriptionInfo'}).then(function (dataSubs) {
          api.load('user', {}, {setToStorageKey: 'user'});
          channelActions.fetch();

          statInfoService.sendGAEcommerce(
            orderID,
            paymentModel.get('paymentSystem') + ': ',
            "Subscribtion: " + paymentModel.get('serviceID'),
            paymentModel.get('serviceID'),
            paymentModel.get('price'),
            paymentModel.defaultEvents.getGACurrencyFormat()
          );

          paymentService.removePaymentRoutes();
          router.navigate('pageMovie', [paymentModel.get('objectID')]);

          PopUpResults.show({
            title: paymentModel.get('title'),
            subTitle: paymentModel.get('subTitle'),
            type: 'success',
            text: paymentService.getResultText('movie'),
            buttonText: i18nMgg('continue_button'),
            buttonLink: ''
          });

          Loader.hide();

        });

      } else {

        statInfoService.sendGAEcommerce( //покупка по ТВОД/ДТО
          orderID,
          paymentModel.get('paymentSystem') + ': ',
          paymentModel.get('vodRules').toUpperCase() + " Movie ID: " + paymentModel.get('objectID'),
          paymentModel.get('objectID'),
          paymentModel.get('price'),
          paymentModel.defaultEvents.getGACurrencyFormat()
        );

        paymentService.removePaymentRoutes();
        router.navigate('pageMovie', [paymentModel.get('objectID')]);
        PopUpResults.show({
          title: paymentModel.get('title'),
          subTitle: paymentModel.get('subTitle'),
          type: 'success',
          text: paymentService.getResultText('movie'),
          buttonText: i18nMgg('continue_button'),
          buttonLink: ''
        });
      }


    } else {  //покупка подписки с канала или профиля или со страницы ТВ

      statInfoService.sendGAEcommerce(
        orderID,
        paymentModel.get('paymentSystem') + ': ',
        "Subscribtion: " + paymentModel.get('serviceID'),
        paymentModel.get('serviceID'),
        paymentModel.get('price'),
        paymentModel.defaultEvents.getGACurrencyFormat()
      );

      api.load('subscriptionInfo', {}, {setToStorageKey: 'subscriptionInfo'}).then(function (data) {
        api.load('user', {}, {setToStorageKey: 'user'});
        channelActions.fetch();

        paymentService.removePaymentRoutes();
        var subscription_id = paymentModel.get('serviceID');
        if(router.history[router.history.length - 1].page.id == 'pageSubscription'){
          var subscriptionPage = paymentService.getSubscriptionPage();
          subscriptionPage.updateData(subscription_id);
        }
        router.navigate('pageSubscriptionDetailed', [subscription_id, 'bought']);

        PopUpResults.show({
          title: paymentModel.get('title'),
          subTitle: paymentModel.get('subTitle'),
          type: 'success',
          text: paymentService.getResultText('subscription'),
          buttonText: i18nMgg('continue_button'),
          buttonLink: ''
        });
        Loader.hide();

      });


    }
  },
  getSubscriptionActionHandler: function(subscription, lastFocus){
    paymentModel.set('vodRulesType', 'subs');
    paymentModel.set('title', subscription.title);
    paymentModel.set('currency', subscription.currency);
    paymentModel.set('currencyID', subscription.currency_id);
    paymentModel.set('vodRules', 'svod');
    paymentModel.set('serviceID', subscription.subscription_id);

    if (subscription.tariffs.length > 1) {
      wTariffsSubscription.show({
        title: paymentModel.get('title'),
        subscriptionInfo: subscription,
        componentToFocus: lastFocus
      });

    } else {

      paymentModel.set('tariffID', subscription.tariffs[0].tariff_id);
      paymentModel.set('tariffTitle', subscription.tariffs[0].title);
      paymentModel.set('price', subscription.tariffs[0].price);
      paymentModel.set('period', subscription.tariffs[0].period);
      paymentModel.set('isPromoCode', subscription.tariffs[0].is_promocode);
      paymentModel.defaultEvents.setSubtitleText();

      var tariffInfo = {
        vodRule: 'svod',
        subscriptionID: subscription.subscription_id,
        tariffs: subscription.tariffs,
        currency: subscription.currency,
        currencyID: subscription.currency_id
      };

      var renderData = {
        title: paymentModel.get('title'),
        tariffInfo: tariffInfo,
        subTitle: paymentModel.get('subTitle')
      };

      router.navigate('pagePaymentChoice', [
        renderData
      ]);
    }
  },
  removePaymentRoutes: function() {
    for(var i = router.history.length - 1; i >= 0; i--) {
      if(routes_for_remove.indexOf(router.history[i].page.id) !== -1) {
        router.history.splice(i, 1);
      }
    }
    router.history.pop();
  },
  getSubscriptionPage: function(){
    return require('pages/subscription/list');
  }
};

module.exports = paymentService;

},{"core/api":15,"core/lib/helpFunctions":34,"core/paymentModel":41,"core/router":45,"core/tools/statInfoService":53,"core/tools/subscriptionService":54,"pages/subscription/list":106,"state/channel_actions":109,"widgets/loader":149,"widgets/popup/popup-results":159,"widgets/popup/popup-tariffs-subscription":160}],52:[function(require,module,exports){
/**
 * Format time
 * @method format
 * @param  {number} sec
 * @param  {string} separator
 * @return {string} HTML
 */
function format(sec, separator) {
  var parsed = parse(sec);
  var result = [];

  if (typeof separator !== 'string') {
    separator = ':'
  }

  if (parsed.hour > 0) {
    result.push('<span class="hour">' + parsed.hour + '</span>');
  }

  result.push('<span class="min">' + parsed.min + '</span>');
  result.push('<span class="sec">' + parsed.sec + '</span>');

  return result.join('<span class="separator">' + separator + '</span>');
}

/**
 * Parse time
 * @method parse
 * @param  {number} sec Seconds
 * @return {object}
 */
function parse(sec) {
  var h, m, s;

  sec = Math.floor(sec);

  if (sec >= 0) {
    h = Math.floor(sec / 3600);
    m = Math.floor((sec - h * 3600) / 60);
    s = sec - h * 3600 - m * 60;
    if (h < 10) {
      h = '0' + h;
    }
    if (s < 10) {
      s = '0' + s;
    }
    if (m < 10) {
      m = '0' + m;
    }
  } else {
    sec = Math.abs(sec);
    h = Math.floor(sec / 3600);
    m = Math.floor((sec - h * 3600) / 60);
    s = sec - h * 3600 - m * 60;
    if (h < 10) {
      h = '0' + h;
    }
    if (s < 10) {
      s = '0' + s;
    }
    if (m < 10) {
      m = '0' + m;
    }
    h = '-' + h;
  }
  return {
    hour: h,
    min: m,
    sec: s,
  };
}

module.exports = {
  format: format,
  parse: parse
};

},{}],53:[function(require,module,exports){
/**
 * Created by LadyBo on 6/1/16.
 */


'use strict';
var app = require('core/app'),
  request = require('core/request');

// helpFunctions = require('core/lib/helpFunctions');

var statInfoService = {
  sendStatLog: function () {
    var config = mainConfigMgg;
    var userInfo = app.dataStorage.user;
    var deviceInfo = config.deviceInfo;

    var log_json = {
      "text": 'STAT_LOG',
      "data": '{\
        "app_version":       	"' + config.app.version + '",\
        "current_url": 	      "' + encodeURIComponent(window.location.href) + '",\
        "user_id": 	        	"' + ( userInfo && userInfo.user_id ? userInfo.user_id : false ) + '",\
        "deviceVendor":	 			"' + deviceInfo.vendor + '",\
        "device_id":	 			  "' + deviceInfo.deviceID + '",\
        "hasStorage":	 			  "' + deviceInfo.hasStorage + '",\
        "rnd":	         			"' + Math.random() + '",\
        "device_serial_number": 	 "' + deviceInfo.serialNumber + '",\
        "device_mac_address":	"' + deviceInfo.deviceMacAddress + '",\
        "user_email": 	    	"' + (userInfo && userInfo.email ? userInfo.email : false ) + '",\
        "device_model":				"' + deviceInfo.name + '",\
        "device_width":				"' + ((window.screen.deviceWidth) ? window.screen.deviceWidth : 0) + '",\
        "screen_width":				"' + window.screen.width + '",\
        "screen_height":			"' + window.screen.height + '",\
        "support_uhd":  			"' + deviceInfo.supportUHD + '",\
        "support_hdr":  			"' + deviceInfo.supportHDR + '",\
        "support_3d":  			  "' + deviceInfo.support3d + '",\
        "support_webSocket":  "' + deviceInfo.supportWebSocket + '",\
        "platformName":  			  "' + deviceInfo.platformName + '",\
        "chipset":  			  "' + deviceInfo.chipset + '",\
        "is_webos":  			    "' + deviceInfo.isWebos + '",\
        "support_localstorage":	    "' + deviceInfo.hasStorage + '",\
        "device_firmware_version": 	"' + deviceInfo.firmware + '",\
        "locale":					    "' + config.app.lang + '",\
        "api_version":				"' + config.api.version + '",\
        "api_public_key":			"' + config.api.keys.publicKey + '"\
                    }'
    };
    var sendData = {
      "method": 'POST',
      "data": log_json
    };
    statInfoService.POSTRequest(config.logs.statLogUrl, sendData);
  },
  sendDebugErrorLog: function (type, str, msg, url, line, col, error) {
    var config = mainConfigMgg;
    var deviceInfo = config.deviceInfo;
    var userInfo = app.dataStorage && app.dataStorage.user ? app.dataStorage.user : false;
    var debug_json = {
      "text": type,
      "data": '{\
                        "app_version":       		"' + config.app.version + '",\
                        "user_id": 	        	  "' + ( userInfo && userInfo.user_id ? userInfo.user_id : false ) + '",\
                        "deviceVendor":	 			"' + deviceInfo.vendor + '",\
                        "device_id":	 			"' + deviceInfo.deviceID + '",\
                        "errorContent":	 			"' + msg + '",\
                        "errorUrl":	 			    "' + ((url) ? url : 'n/a') + '",\
                        "errorLine": 			    "' + ((line) ? line : 'n/a') + '",\
                        "errorCol":	 			    "' + ((col) ? col : 'n/a') + '",\
                        "errorText": 			    "' + ((error) ? error : 'n/a') + '",\
                        "errorLocation":		    "' + encodeURIComponent(window.location.href) + '",\
                        "errorMessage":			    "' + str + '"\
                    }'
    };
    var sendData = {
      "method": 'POST',
      "data": debug_json
    };
    statInfoService.POSTRequest(config.logs.debugLogUrl, sendData);
  },
  sendStreamError: function (errorType, streamUrl, currentPosition, errorCode, errorTitle, vsServer) {
    var config = mainConfigMgg;
    var deviceInfo = config.deviceInfo;
    var userInfo = app.dataStorage && app.dataStorage.user ? app.dataStorage.user : false;

    var error_json = {
      "text": errorType,
      "data": '{\
        "app_version":       		"' + config.app.version + '",\
        "error_occured_url": 		"' + encodeURIComponent(window.location.href) + '",\
        "user_id": 	        	  "' + ( userInfo && userInfo.user_id ? userInfo.user_id : false ) + '",\
        "deviceVendor":	 		  	"' + deviceInfo.vendor + '",\
        "device_id":	 		    	"' + deviceInfo.deviceID + '",\
        "streamUrl": 	    	   	"' + streamUrl + '",\
        "vsServer": 	    		  "' + vsServer + '",\
        "errorCode": 	    		  "' + errorCode + '",\
        "currentPosition":    	"' + currentPosition + '",\
        "user_email": 	    		"' + (userInfo && userInfo.email ? userInfo.email : false ) + '",\
        "error_type":				    "' + errorType + '",\
        "error_title":				  "' + errorTitle + '",\
        "device_model":				  "' + deviceInfo.name + '",\
        "device_firmware_version": 	"' + deviceInfo.firmware + '",\
        "locale":				      	"' + config.app.lang + '",\
        "api_public_key":		  	"' + config.api.keys.publicKey + '"\
      }'
    };
    var sendData = {
      "method": 'POST',
      "data": error_json
    };
    statInfoService.POSTRequest(config.logs.streamErrorLogUrl, sendData);
  },
  sendLogMessage: function (text, message, id, rnd) {
    var config = mainConfigMgg;
    var deviceInfo = config.deviceInfo;
    var userInfo = app.dataStorage && app.dataStorage.user ? app.dataStorage.user : false;

    var log_json = {
      "text": text,
      "data": '{\
        "app_version":       	"' + config.app.version + '",\
        "current_url": 	      "' + encodeURIComponent(window.location.href) + '",\
        "user_id": 	        	"' + ( userInfo && userInfo.user_id ? userInfo.user_id : false ) + '",\
        "deviceVendor":	 			"' + deviceInfo.vendor + '",\
        "device_id":	 			  "' + deviceInfo.deviceID + '",\
        "item_id":  	 		  	"' + id + '",\
        "message":  	 		  	"' + message + '",\
        "rnd":        	 			"' + Math.random() + '",\
        "device_serial_number": 	 "' + deviceInfo.serialNumber + '",\
        "device_mac_address":	"' + deviceInfo.deviceMacAddress + '",\
        "user_email": 	    	"' + (userInfo && userInfo.email ? userInfo.email : false ) + '",\
        "device_model":				"' + deviceInfo.name + '",\
        "device_firmware_version": 	"' + deviceInfo.firmware + '",\
        "locale":					    "' + config.app.lang + '",\
        "api_version":				"' + config.api.version + '",\
        "api_public_key":			"' + config.api.keys.publicKey + '"\
      }'
    };

    var sendData = {
      "method": 'POST',
      "data": log_json
    };
    statInfoService.POSTRequest(config.logs.messageLogUrl, sendData);

  },
  sendAJAXErrorLog: function (url, apiMethodName, statusCode, statusText, errorText, errorType, errorResponse) {

    var config = mainConfigMgg;
    var deviceInfo = config.deviceInfo;
    var userInfo = app.dataStorage && app.dataStorage.user ? app.dataStorage.user : false;
    var tries = 'N/A';

    var error_json = {
      "text": 'AJAX_ERROR',
      "data": '{\
        "app_version":       	"' + config.app.version + '",\
        "error_occured_url": 	"' + encodeURIComponent(window.location.href) + '",\
        "deviceVendor":	 			"' + deviceInfo.vendor + '",\
        "device_id":	 			  "' + deviceInfo.deviceID + '",\
        "device_model":				"' + deviceInfo.name + '",\
        "device_firmware_version": 	"' + deviceInfo.firmware + '",\
        "tryCount": 	 		  	"' + tries + '",\
        "request_url": 	      "' + url + '",\
        "apiMethod": 	    		"' + apiMethodName + '",\
        "statusCode": 	      "' + statusCode + '",\
        "statusText": 	      "' + statusText + '",\
        "error_type":			  		"' + errorType + '",\
        "error_text":			  	"' + errorText + '",\
        "error_response":			"' + (errorResponse ? errorResponse.replace(/['"]+/g, '') : '') + '",\
        "rnd":        	 			"' + Math.random() + '",\
        "user_id": 	        	"' + ( userInfo && userInfo.user_id ? userInfo.user_id : false ) + '",\         "user_email": 	    	"' + (userInfo && userInfo.email ? userInfo.email : false ) + '",\
        "locale":					    "' + config.app.lang + '",\
        "api_public_key":			"' + config.api.keys.publicKey + '"\
      }'
    };
    var sendData = {
      "method": 'POST',
      "data": error_json
    };
    statInfoService.POSTRequest(config.logs.ajaxErrorLogUrl, sendData);
  },
  sendBufferingEvent: function (streamUrl, cdn_host, video_id, auto_quality, video_quality, buffering_time, drm_type, stream_type, current_player_buffer) {
    var config = mainConfigMgg;
    var deviceInfo = config.deviceInfo;
    var userInfo = app.dataStorage && app.dataStorage.user ? app.dataStorage.user : false;

    var dataJson = {
      "platform": "SmartTV",
      "url": encodeURIComponent(window.location.href),
      "device": deviceInfo,
      "app_version": config.app.version,
      "locale": config.app.lang,
      "api_public_key": config.api.keys.publicKey,
      "user_id": ( userInfo && userInfo.user_id ? userInfo.user_id : false ),
      "src": streamUrl,
      "cdn_host": cdn_host,
      "video_id": video_id,
      "auto_quality": auto_quality,
      "video_quality": video_quality,
      "buffering_time": buffering_time,
      "drm_type": drm_type,
      "stream_type": stream_type,
      "current_player_buffer": current_player_buffer
    };

    var buffer_json = {
      "text": 'buffering',
      "data": JSON.stringify(dataJson)
    };

    var sendData = {
      "method": 'POST',
      "data": buffer_json
    };

    statInfoService.POSTRequest(config.logs.bufferingLogUrl, sendData);
  },

  sendGATrackEvent: function (category, action) {
    var userInfo = app.dataStorage.user;
    var userID = userInfo.user_id;
    var lang = mainConfigMgg.app.lang;

    if (mainConfigMgg.deviceInfo.vendor == 'samsung' || mainConfigMgg.deviceInfo.vendor == 'tizen') {
      var label = userInfo.is_autouser ? userID + '_NotLinkedDevice' : userID + '_LinkedDevice';
      statInfoService.sendGASamsungEvent(category, action, label)
    } else {
      if (!userInfo.is_autouser) {
        ga('send', 'event', category, action + '_' + lang, userID + '_LinkedDevice');
      } else {
        ga('send', 'event', category, action + '_' + lang, userID + '_NotLinkedDevice');
      }
    }
  },
  sendGAPlayerTrackEvent: function (category, action, label) {

    if (action && typeof action == 'object') {
      action = JSON.stringify(action);
    }

    if (mainConfigMgg.deviceInfo.vendor == 'samsung' || mainConfigMgg.deviceInfo.vendor == 'tizen') {
      statInfoService.sendGASamsungEvent(category, action, label)
    } else {
      ga('send', 'event', category, action, label);
    }
  },
  sendGAEcommerce: function (order_id, paymentType, itemName, categoryName, price, currencyCode) {
    if (mainConfigMgg.deviceInfo.vendor == 'samsung' || mainConfigMgg.deviceInfo.vendor == 'tizen') {
      statInfoService.sendGASamsungEcommerce(order_id, paymentType, itemName, categoryName, price, currencyCode);
    } else {
      ga('ecommerce:addTransaction', {
        'id': order_id,
        'affiliation': 'Megogo',
        'revenue': price,
        'currency': currencyCode
      });
      ga('ecommerce:addItem', {
        'id': order_id,
        'sku': paymentType + order_id,
        'name': itemName,
        'category': categoryName,
        'price': price,
        'quantity': '1',
        'currency': currencyCode
      });
      ga('ecommerce:send');
    }

  },

  sendGASamsungEvent: function (category, action, label) {
    var url = 'https://www.google-analytics.com/collect';
    var commonGAData = this.getDefaultGAData();
    var dataJson = {
      t: 'event',
      ec: category,
      ea: action,
      el: label
    };

    for (var n in commonGAData) {
      dataJson[n] = commonGAData[n]
    }

    var sendData = {
      "method": 'POST',
      "data": dataJson
    };

    statInfoService.POSTRequest(url, sendData);
  },
  sendGASamsungEcommerce: function (order_id, paymentType, itemName, categoryName, price, currencyCode) {
    var url = 'https://www.google-analytics.com/collect';
    var commonGAData = this.getDefaultGAData();

    var transactionJSON = {
      t: 'transaction',
      ti: order_id,
      ta: 'Megogo',
      tr: price,
      cu: currencyCode
    };
    var itemJSON = {
      t: 'item',
      ti: order_id,
      cu: currencyCode,
      ic: paymentType + order_id,
      iv: categoryName,
      ip: price,
      iq: '1'
    };

    itemJSON['in'] = itemName; //for LG-2011 cause IN is reserved

    for (var n in commonGAData) {
      transactionJSON[n] = commonGAData[n];
      itemJSON[n] = commonGAData[n];
    }

    var transactionData = {
      "method": 'POST',
      "data": transactionJSON
    };

    var itemData = {
      "method": 'POST',
      "data": itemJSON
    };

    statInfoService.POSTRequest(url, transactionData);
    statInfoService.POSTRequest(url, itemData);
  },
  trackGAPageView:function(urlDP){
    var url = 'https://www.google-analytics.com/collect';
    var commonGAData = this.getDefaultGAData();

    var dataJson = {
      t: 'pageview',
      dp: urlDP
    };

    for (var n in commonGAData) {
      dataJson[n] = commonGAData[n]
    }

    var sendData = {
      "method": 'POST',
      "data": dataJson
    };

    statInfoService.POSTRequest(url, sendData);
  },
  getDefaultGAData: function () {
    return {
      v: 1,
      tid: 'UA-27184289-6',
      cid: mainConfigMgg.deviceInfo.deviceID,
      uid: app.dataStorage.user.user_id,
      dl: 'samsung-app',
      ul: mainConfigMgg.app.lang,
      cd1: mainConfigMgg.deviceInfo.vendor,
      cd2: mainConfigMgg.deviceInfo.name,
      cd3: mainConfigMgg.deviceInfo.deviceID,
      cd4: mainConfigMgg.app.version,
      cd5: app.dataStorage.user.is_autouser,
      cd6: app.dataStorage.user.user_id
    }

  },
  POSTRequest: function (url, options) {
    if (typeof options !== 'object') {
      options = {};
    }
    if (options.method.toLowerCase() == 'post') {
      options.data = request.encode(options.data);
      options.headers = {'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8'}
    }
    return request.ajax(url, options);
  }
};


module.exports = statInfoService;

},{"core/app":16,"core/request":44}],54:[function(require,module,exports){
'use strict';
var app = require('core/app'),
  Promise = require('core/promise'),
  helpFunctions = require('core/lib/helpFunctions');

var subscriptionService = {
  hasSubscriptionByType: function (type, id) {
    if (app.dataStorage.subscriptionInfo) {
      return app.dataStorage.subscriptionInfo.some(function (subscription) {
        if (!subscription.restriction) {
          if (id) {
            return (subscription.expiration_date && subscription.products.indexOf(type) !== -1 && subscription.subscription_id == id);
          } else {
            return (subscription.expiration_date && subscription.products.indexOf(type) !== -1);
          }
        }
      });
    }
    return false;
  },
  hasAvailableChannels: function (subsArray) {
    return new Promise(function (resolve, reject) {
      if (subscriptionService.hasSubscriptionByType('tv')) {
        if (subsArray) {

          var resultArray = [];
          for (var i = 0; i < subsArray.length; i++) {
            resultArray[i] = subscriptionService.hasSubscriptionByType('tv', subsArray[i])
          }
          if (resultArray.some(function (el) {
              return el == true
            })) {
            resolve('play');
          } else {
            for (var j = 0; j < resultArray.length; j++) {
              if (!resultArray[j]) {
                resolve(subsArray[j]);
              }
            }
          }
        } else {
          resolve('play');
        }
      } else {
        getApi().load('tvChannels').then(function (data) {
          if (data && data.channels && data.channels.length) {
            resolve('play');
          } else {
            resolve('buy');
          }
        }, function (e) {
          console.log('ERROR ', e);
          resolve('buy');
        });
      }
    });
  },
  getSaleSubscriptionId: function (subscription) {
    var sale_collection_id = null;
    if (subscription && subscription.subscription_meta && subscription.subscription_meta.collections
      && subscription.subscription_meta.collections.length) {
      for (var i = 0, len = subscription.subscription_meta.collections.length; i < len; i++) {
        if (subscription.subscription_meta.collections[i].type == 'sale') {
          sale_collection_id = subscription.subscription_meta.collections[i].collection_id;
          break;
        }
      }
    }
    return sale_collection_id;
  },
  isAnySubscriptionBought: function () {
    if (app.dataStorage.subscriptionInfo) {
      return app.dataStorage.subscriptionInfo.some(function (subscription) {
        return (subscription.expiration_date);
      });
    }
    return false;
  },
  hasMoviesSubscription: function () {
    if (app.dataStorage.subscriptionInfo) {
      return app.dataStorage.subscriptionInfo.some(function (subscription) {
        return;
      });
    }
    return false;
  },
  sortSubscriptionsByType: function () {
    var subscriptionsByTypeArr = [];
    var boughtSubs = {type: i18nMgg('my_subs_label'), data: []};
    var bundleSubs = {type: i18nMgg('bundle_label'), data: []};
    var otherSubs = {type: i18nMgg('other_subs_label'), data: []};


    var subscriptions = app.dataStorage.subscriptionInfo;
    if (subscriptions) {
      for (var i = 0; i < subscriptions.length; i++) {
        if (subscriptions[i].expiration_date) {
          boughtSubs.data.push(subscriptions[i])
        } else if (subscriptions[i].products.indexOf('tv') !== -1 && subscriptions[i].products.indexOf('main') !== -1
          && subscriptions[i].option_type.toLowerCase() == 'primary') {
          bundleSubs.data.push(subscriptions[i])
        } else if (subscriptions[i].products.indexOf('main') !== -1 || subscriptions[i].products.indexOf('tv') !== -1) {
          otherSubs.data.push(subscriptions[i])
        }
        /*else if (subscriptions[i].products.indexOf('tv') !== -1) {
         tvSubs.push(subscriptions[i])
         }*/
      }
    }
    // console.log([boughtSubs, Object.keys(boughtSubs).length > 1]);

    if (boughtSubs.data.length) {
      subscriptionsByTypeArr.push(boughtSubs);
    }
    if (bundleSubs.data.length) {
      subscriptionsByTypeArr.push(bundleSubs);
    }
    /*  if (Object.keys(mainSubs).length) {
     subscriptionsByTypeArr.push(mainSubs);
     }*/
    if (otherSubs.data.length) {
      subscriptionsByTypeArr.push(otherSubs);
    }

    return subscriptionsByTypeArr;
  },
  getSubscriptionById: function (id, subscriptions_array) {
    subscriptions_array = subscriptions_array || app.dataStorage.subscriptionInfo;

    var subscription = null;

    if (id && parseInt(id) && subscriptions_array && subscriptions_array.length) {
      for (var i = 0; i < subscriptions_array.length; i++) {
        if (id == subscriptions_array[i].subscription_id) {
          subscription = subscriptions_array[i];
          break;
        }
      }
    }

    return subscription;
  },
  getSubscriptionTariffById: function (subscription, tariff_id) {
    var subscription_tariff = null;

    if (subscription && tariff_id && subscription.tariffs && subscription.tariffs.length) {
      for (var i = 0; i < subscription.tariffs.length; i++) {
        if (subscription.tariffs[i].tariff_id == tariff_id) {
          subscription_tariff = subscription.tariffs[i];
          break;
        }
      }
    }
    return subscription_tariff;
  },
  getFirstSubscriptionTariff: function (subscription) {
    var subscription_tariff = null;

    if (subscription.tariffs && subscription.tariffs.length) {
      return subscription.tariffs[0]
    }
    return subscription_tariff;
  },
  isCurrentTariffPromo: function (subs_id, tarrif_id) {
    var subscriptionsArray = app.dataStorage.subscriptionInfo;
    var subscription = this.getSubscriptionById(subs_id, subscriptionsArray);
    var chosenTariff = this.getSubscriptionTariffById(subscription, tarrif_id);
    this.isTryBuy = chosenTariff && chosenTariff.is_try_and_buy ? chosenTariff.is_try_and_buy : false;
    return this.isTryBuy != undefined ? this.isTryBuy : false;
  },
  getSubscriptionType: function (subs_id) {
    var type = '';
    var subscription = this.getSubscriptionById(subs_id);
    if (subscription && subscription.products) {
      if (subscription.products.length > 1) {
        type = 'bundle';
      } else {
        if (subscription.products.indexOf('main') != -1) {
          type = 'main';
        }
        if (subscription.products.indexOf('tv') != -1) {
          type = 'tv';
        }
      }
    }
    return type;
  },
  getSubscriptionTitle: function (subs_id) {
    var subscription = this.getSubscriptionById(subs_id);
    return subscription.title || '';
  },
  getExpirationDate: function (subscription) {
    if (subscription && subscription.expiration_date) {
      return subscriptionService.getCorrectTime2011Support(subscription.expiration_date);
    }
    return '';
  },
  getCorrectTime2011Support: function (expirationDate) {
    var data = expirationDate.split('T');
    var YearMonthDay = data[0].split('-');
    return YearMonthDay[2] + '.' + YearMonthDay[1] + '.' + YearMonthDay[0];
  },
  getCorrectTime: function (data) {
    var date_string = '', day, month, year;
    if (data) {
      day = data.getDate() + '';
      month = data.getMonth() + 1 + '';
      year = data.getFullYear() + '';
      if (day.length == 1) {
        day = '0' + day;
      }
      if (month.length == 1) {
        month = '0' + month;
      }
      date_string = day + '.' + month + '.' + year;
    }

    return date_string;
  },
  getPeriodInMonth: function (period) {
    var daysInMonth = 30;
    var months = Math.floor(period / daysInMonth);
    var days = period % daysInMonth;

    if (months !== 0) {
      return {
        period: months,
        name: helpFunctions.getValueText(months, 'month')
      }
    } else {
      return {
        period: days,
        name: helpFunctions.getValueText(days, 'day')
      }
    }

  },
  getSubscriptionMetaImage: function (subscription) {
    var img_url = null;
    if (subscription.subscription_meta && subscription.subscription_meta.images && subscription.subscription_meta.images.length) {
      var imagesArray = subscription.subscription_meta.images;
      for(var i = 0; i < imagesArray.length; i++){
        if(imagesArray[i] && imagesArray[i].type == 'logo' && imagesArray[i].image){
          img_url = imagesArray[i].image;
        }
      }
    }
    return img_url;
  },
  getFirstSalesSubscription: function () {
    if (app.dataStorage.subscriptionInfo) {
      var subsArray = app.dataStorage.subscriptionInfo
      for(var i = 0, len = subsArray.length; i < len; i++){
        if(!subsArray[i].is_bought){
          return subsArray[i];
        }
      }
    }
    return false;
  },
  getBoughtSubscriptions: function() {
    var bought_subs = [];
    if (app.dataStorage.subscriptionInfo) {
      for(var i = 0, len = app.dataStorage.subscriptionInfo.length; i < len; i++){
        if(app.dataStorage.subscriptionInfo[i].expiration_date){
          bought_subs.push(app.dataStorage.subscriptionInfo[i]);
        }
      }
    }
    return bought_subs;
  },
  getSubscriptionsLeftDays : function () {
    var bought_subs = this.getBoughtSubscriptions();
    var ending_subscription = [];
    var timeDiff, diffDays, i, len;
    if (bought_subs && bought_subs.length) {
      for(i = 0, len = bought_subs.length; i < len; i++){
        if(!bought_subs[i].is_renew && !bought_subs[i].restriction) {

          timeDiff = Math.abs(new Date(bought_subs[i].expiration_date) - helpFunctions.getTimeNow());
          diffDays = Math.ceil(timeDiff / (1000 * 3600 * 24));

          if(diffDays >= 0 && diffDays < 8) {
            ending_subscription.push({
              subscription : bought_subs[i],
              days_left: diffDays,
              icon: this.getSubscriptionMetaImage(bought_subs[i])
            });
          }
        }
      }
    }
    return ending_subscription;
  }
};

function getApi() {
  return require('core/api');
}

module.exports = subscriptionService;

},{"core/api":15,"core/app":16,"core/lib/helpFunctions":34,"core/promise":43}],55:[function(require,module,exports){
/**
 * @module core/tools/transform.element
 * @license GNU GENERAL PUBLIC LICENSE Version 3
 */

'use strict';

module.exports = function(element, type, value) {
  value = value+'px';
  element.style.webkitTransform = type + '(' + value + ')';
  element.style.MozTransform = type + '(' + value + ')';
  element.style.msTransform = type + '(' + value + ')';
  element.style.OTransform = type + '(' + value + ')';
  element.style.transform = type + '(' + value + ')';
};

},{}],56:[function(require,module,exports){
'use strict';

var api = require('core/api'),
  app = require('core/app'),
  config = require('config/config'),
  helpFunctions = require('core/lib/helpFunctions'),
  keys = require('vendor/aura/keys'),
  LeftMenu = require('widgets/menu-left'),
  router = require('core/router'),
  statInfoService = require('core/tools/statInfoService'),
  storage = require('core/storage');

// Main application eventdoc
app.addListeners({
  // all resources are loaded
  load: function () {

    app.dataStorage = []; //init data storage for keeping api answers
    // set pages
    router.init([
      require('pages/other/init'),
      require('pages/other/tv_channels'),
      require('pages/other/main'),
      require('pages/other/landing_inner'),
      require('pages/movie/iwatch'),
      require('pages/movie/reviews'),
      require('pages/movie/films'),
      require('pages/movie/detailed'),
      require('pages/movie/item'),
      require('pages/movie/premiere'),
      require('pages/movie/category'),
      require('pages/movie/collection'),
      require('pages/movie/seasons'),
      require('pages/movie/actor'),
      require('pages/movie/cartoons'),
      require('pages/movie/series'),
      require('pages/profile/profile'),
      require('pages/profile/agreement'),
      require('pages/profile/parental_control'),
      require('pages/profile/report_info'),
      require('pages/profile/settings'),
      require('pages/profile/certificate'),
      require('pages/profile/login'),
      require('pages/profile/loyalty'),
      require('pages/profile/subscriptions'),
      require('pages/subscription/list'),
      require('pages/subscription/detailed'),
      require('pages/subscription/restriction'),
      require('pages/subscription/movies'),
      require('pages/payment/choice'),
      require('pages/payment/card_new'),
      require('pages/payment/card_token'),
      require('pages/payment/mobile'),
      require('pages/payment/settings'),
      require('pages/search/search'),
      require('pages/search/all_results'),
      require('pages/player')
    ]);

    /* @TODO
     !!!!
     !!!!!!!!! need to remove HTML in correct way, not innerHTML = ''
     */
  }
});

window.i18nMgg = function (msgId) {
  var lang = mainConfigMgg.app.lang || 'ru';



  if (msgId && app.dataStorage && app.dataStorage.configurationInterface) {
    return app.dataStorage.configurationInterface[msgId] || msgId;
  }

  if (msgId == 'error_try_later') {
    msgId = getErrorBaseTransltions('error_try_later', lang);
  }
  if (msgId == 'error_sent') {
    msgId = getErrorBaseTransltions('error_sent', lang);

  }
  if (msgId == 'exit_app_button') {
    msgId = getErrorBaseTransltions('exit_app_button', lang);
  }



  return msgId;
};

function getErrorBaseTransltions(phraseID, lang) {
  var errorBaseTranslations = {
    error_try_later: {
      ru: 'Произошла ошибка, попробуйте позже',
      ua: 'Виникла помилка, спробуйте пізніше',
      en: 'An error occurred, try again later',
      by: 'Адбылася памылка, паспрабуйце пазней',
      lt: 'Įvyko klaida, bandykite vėliau',
      lv: 'Notikusi kļūda, mēģiniet vēlāk',
      ee: 'Tekkis viga, palun proovige hiljem uuesti',
      cz: 'Došlo k chybě, zkuste to prosím později',
      sk: 'Došlo k chybe, skúste neskôr'
    },
    error_sent: {
      ru: 'Информация об ошибке успешно отправлена разработчикам',
      ua: 'Інформація про помилку успішно надіслана ​​розробникам',
      en: 'Error information was successfully sent to developers',
      by: 'Інфармацыя пра памылку паспяхова адпраўлена распрацоўнікам',
      lt: 'Informacija apie klaidą sėkmingai išsiųsta kūrėjams',
      lv: 'Informācija par kļūdu veiksmīgi nosūtīta izstrādātājiem',
      ee: 'Veateade on edukalt saadetud tarkvarainseneridele',
      cz: 'Informace o chybě je úspěšně odeslaná v technické oddělení',
      sk: 'Informácia o chybe bola úspešne odoslaná vývojárom'
    },
    exit_app_button: {
      ru: 'Выйти из приложения',
      ua: 'Вийти з програми',
      en: 'Exit the application',
      by: 'Выйсці з дастасоўнай праграмы',
      lt: 'Išeiti iš programos',
      lv: 'Iziet no programmas',
      ee: 'Logi välja',
      cz: 'Odhlásit se',
      sk: 'Odhlásiť sa z aplikácie'
    }
  };
  return errorBaseTranslations[phraseID][lang];
}

window.onerror = function (msg, url, line, col, error) {

  console.error({msg:msg, url:url, line:line, col:col, error:error});
  if ((!url || url == '') && (!line || line == 0)) {
    return false;
  }

  if (url && (/http:\/\//.test(url) || /https:\/\//.test(url)) && !/megogo\.net/.test(url)) {
    return false;
  }

  var extra = !col ? '' : '; column: ' + col;
  extra += !error ? '' : '; error: ' + error;
  var str = "Error: " + msg + "; url: " + url + "; line: " + line + extra;

  statInfoService.sendDebugErrorLog('DEBUG', str, msg, url, line, col, error);
  return true;
};

},{"config/config":12,"core/api":15,"core/app":16,"core/lib/helpFunctions":34,"core/router":45,"core/storage":47,"core/tools/statInfoService":53,"pages/movie/actor":57,"pages/movie/cartoons":58,"pages/movie/category":59,"pages/movie/collection":60,"pages/movie/detailed":61,"pages/movie/films":62,"pages/movie/item":63,"pages/movie/iwatch":64,"pages/movie/premiere":65,"pages/movie/reviews":66,"pages/movie/seasons":67,"pages/movie/series":68,"pages/other/init":69,"pages/other/landing_inner":70,"pages/other/main":71,"pages/other/tv_channels":72,"pages/payment/card_new":73,"pages/payment/card_token":74,"pages/payment/choice":75,"pages/payment/mobile":76,"pages/payment/settings":77,"pages/player":88,"pages/profile/agreement":94,"pages/profile/certificate":95,"pages/profile/login":96,"pages/profile/loyalty":97,"pages/profile/parental_control":98,"pages/profile/profile":99,"pages/profile/report_info":100,"pages/profile/settings":101,"pages/profile/subscriptions":102,"pages/search/all_results":103,"pages/search/search":104,"pages/subscription/detailed":105,"pages/subscription/list":106,"pages/subscription/movies":107,"pages/subscription/restriction":108,"vendor/aura/keys":133,"widgets/menu-left":150}],57:[function(require,module,exports){
/**
 * ActorDetailed page implementation.
 */

'use strict';


var id = 'pageActorDetailed',
  Page = require('core/components/page'),
  animate = require('core/animate'),
  Background = require('widgets/background'),
  keys = require('vendor/aura/keys'),
  dom = require('core/dom'),
  api = require('core/api'),
  router = require('core/router'),
  app = require('core/app'),
  Panel = require('core/components/panel'),
  ScrollBar = require('core/components/scroll.bar'),
  Button = require('core/components/button'),
  List = require('core/components/list'),
  Loader = require('widgets/loader'),
  helpFunctions = require('core/lib/helpFunctions'),
  FilmItemRender = require('ui/film-item'),
  scrollValue, $scrollContainer;

var page = new Page({
  $node: dom.tag('div', {id: id}),
  $body: dom.tag('div', {id: id + 'Container'},
    $scrollContainer = dom.tag('div', {id: 'actorScrollContainer'}),
    dom.tag('div', {id: 'actorPageScroll'})
  ),
  append_to_body: true,
  header: '',
  arrows: {left: {config: {paddingTop: 50}}, right: {config: {paddingTop: 50}}},
  arrowsUpdate: showHideArrows,
  back_button: {
    'clickCallBack': function () {
      router.back();
    }
  }
});

page.addListener('load', function () {

  page.scrollBar = new ScrollBar({
    focusable: true,
    keys: {
      UP: function () {
        scrollValue = this.value - 150 >= 0 ? this.value - 150 : 0;
        if (!scrollValue) {
          page.header.shadeOff();
        }
        this.scrollTo(scrollValue);
      },

      DOWN: function () {
        if (scrollValue >= this.realSize - this.viewSize) {
          page.filmsList.focus();
        }

        if (this.realSize - this.viewSize > this.value + (this.viewSize * 0.33)) {
          scrollValue = this.value + (this.viewSize * 0.33 + 15);
        } else {
          scrollValue = this.realSize - this.viewSize;

        }
        this.scrollTo(scrollValue);
        page.header.shadeOn();
      },
      LEFT: function () {
        page.backButton.focusButton(this);
      },
      RETURN: function () {
        page.backButton.emit('click');
      }
    },
    events: {
      change: function (data) {
        animate(page.info.$body, mainConfigMgg.animation.duration.speed2, {
          marginTop: '-' + data.curr
        });
      },
      focus: function () {
        page.$$lastFocus = this;
      },
      'done': function (data) {
      },
      mousewheel: function (event) {
        emitMouseWheel(event);
      }
    }
  });

  page.actorInfoContainer = new Panel({
    $node: dom.tag('div', {
        className: 'actor-page__info'
      },

      page.actorImg = dom.tag('div', {
          className: 'actor-page__img'
        },

        page.cover = dom.tag('div', {
            className: 'cover'
          }
        ),
        page.coverDefault = dom.tag('div', {
          className: 'coverDefault'

        })
      )
    )

  });

  page.info = new Panel({
    $node: dom.tag('div', {
        className: 'actor-page__description'
      },
      page.descriptionWrapper = dom.tag('div', {
          className: 'description-wrapper'
        },
        page.description = dom.tag('div', {
            className: 'description'
          }
        )))
  });

  page.moreInfoBtn = new Button({
    className: "more_btn",
    events: {
      'click': function (data) {
        page.moreInfoBtn.hide();
        page.descriptionWrapper.classList.add('enable');
        page.scrollBar.focus();
      },
      focus: function () {
        page.$$lastFocus = this;
      },
      mousewheel: function (event) {
        if (event.deltaY > 0) {
          this.emit('keydown', {
            keyCode: keys.DOWN,
            event: {}
          });
        }
      }
    },
    keys: {
      LEFT: function () {
        page.backButton.focusButton(this);
      },
      DOWN: function () {
        page.filmsList.focus();
      },
      RIGHT: function () {
        page.moreInfoBtn.focus();
      },
      RETURN: function () {
        page.backButton.emit('click');
      }
      , UP: function () {
        page.backButton.focusButton(this);
      }
    }
  });

  page.filmsListContainer = new Panel({
    $node: dom.tag('div', {
        className: 'container'
      },
      page.movies_on_megogo = dom.tag('div', {
        className: 'actor-page__title'
      }))
  });

  page.filmsList = new List({
    type: List.prototype.TYPE_HORIZONTAL,
    className: 'filmsList',
    scrollList: {
      startIndex: 2,
      stopIndex: 2,
      scrollSize: 5,
      speed: mainConfigMgg.animation.duration.speed2
    },
    events: {
      'click:item': function (data) {
        router.navigate('pageMovie', [
          data.$item.data.id
        ]);
      },
      'overflow': function (data) {
        if (data.direction === keys.LEFT && data.type !== 'mousewheel') {
          page.backButton.focusButton(this);
        }

      },
      'focus': function () {
        page.$$lastFocus = this;
        page.header.shadeOn();
        page.scrollTop(page.actorInfoContainer.$node.offsetHeight + 50);
      },
      mouseover: function (data) {
        this.focusItem(data.$item, {no_emit: true});
        showHideArrows();
      },
      mousewheel: function (event) {
        emitMouseWheel(event);
      }
    },
    keys: {
      UP: function () {
        page.header.shadeOff();
        page.scrollTop(0);

        if (page.moreInfoBtn.visible) {
          page.moreInfoBtn.focus();
        } else {
          page.scrollBar.focus();

        }
      },
      RETURN: function () {
        page.backButton.emit('click');
      }
    },
    render: function ($item, data) {
      FilmItemRender($item, data);
    }
  });

  page.actorInfoContainer.add(page.scrollBar);
  page.info.add(page.moreInfoBtn);
  page.actorInfoContainer.add(page.info);
  page.filmsListContainer.add(page.filmsList);

  page.add(page.actorInfoContainer);
  page.add(page.filmsListContainer);

  $scrollContainer.appendChild(
    page.scrollBar.$node
  );


  // load video info
  page.addListener('show', function (data) {
    page.arrowsWidget.addClass('page-back-button');
    page.backButton.addClass('short');
    Loader.show();
    page.moreInfoBtn.focusable = true;

    if (helpFunctions.isNavigateBack(data)) {
      Loader.hide();
      return;
    }
    page.scrollTop(0);

    var category_id = data && data.data ? data.data[0] : null;
    page.descriptionWrapper.classList.remove('enable');
    page.moreInfoBtn.setValue(i18nMgg('more_info_button'));
    page.movies_on_megogo.textContent = i18nMgg('movies_on_megogo');

    page.$$lastFocus = page.moreInfoBtn.visible ? page.moreInfoBtn : page.scrollBar;

    if (category_id) {
      api.load('people', {
        id: category_id
      }).then(function (data) {
        page.header.setTitle(data.name);
        page.cover.style.backgroundImage = 'url(' + data.avatar.image_360x360 + ')';
        page.description.innerHTML = data.description.length ? data.description : i18nMgg('no_info_actor');

        page.filmsList.init({
          data: data.filmography,
          focusIndex: 0
        });

        page.scrollBar.scrollTo(0);
        scrollValue = 0;
        page.scrollBar.init({
          viewSize: page.actorInfoContainer.$node.offsetHeight,
          value: 0,
          realSize: page.description.offsetHeight - 10,
          visible: true
        });

        if (data.description.length > 500) {
          page.descriptionWrapper.classList.remove('enable');
          page.moreInfoBtn.show();
          page.moreInfoBtn.focus();
        } else {
          page.moreInfoBtn.hide();
          page.scrollBar.focus();
          page.descriptionWrapper.classList.add('enable');
        }
        Loader.hide();
      });
    } else {
      page.backButton.focusButton(page.$$lastFocus);
    }
    showHideArrows();
  });

  page.addListener('hide', function show(data) {
    page.arrowsWidget.removeClass('page-back-button');
    page.backButton.removeClass('short');
  });
});

function showHideArrows() {
  setTimeout(function () {
    var info_top = page.info.$node.style.marginTop ? parseInt(page.info.$node.style.marginTop) : 0;
    if (page.scrollTopValue || info_top) {
      page.arrowsWidget.up.show();
    } else {
      page.arrowsWidget.up.hide();
    }
    if (page.filmsList == page.$$lastFocus) {
      page.arrowsWidget.down.hide();
      if (page.filmsList.size > 5) {
        var left_offset = page.filmsList.$node.style.left ? parseInt(page.filmsList.$node.style.left) : 0;
        var total_offset = -((page.filmsList.$focusItem.offsetWidth) * (page.filmsList.size) - 1160);

        if (!left_offset) {
          page.arrowsWidget.left.hide();
        } else {
          page.arrowsWidget.left.show();
        }
        if (left_offset > total_offset) {
          page.arrowsWidget.right.show();
        } else {
          page.arrowsWidget.right.hide();
        }
      }
    } else {
      page.arrowsWidget.down.show();
      page.arrowsWidget.left.hide();
      page.arrowsWidget.right.hide();
    }
  }, 0);
}

function emitMouseWheel(event) {

  if (event.deltaY < 0) {
    page.activeComponent.emit('keydown', {
      keyCode: keys.UP,
      event: {}
    });
  }
  if (event.deltaY > 0) {
    page.activeComponent.emit('keydown', {
      keyCode: keys.DOWN,
      event: {}
    });
  }
}

// public
module.exports = page;

},{"core/animate":14,"core/api":15,"core/app":16,"core/components/button":19,"core/components/list":23,"core/components/page":25,"core/components/panel":26,"core/components/scroll.bar":28,"core/dom":31,"core/lib/helpFunctions":34,"core/router":45,"ui/film-item":119,"vendor/aura/keys":133,"widgets/background":141,"widgets/loader":149}],58:[function(require,module,exports){
'use strict';

var id = 'pageCartoons',
  api = require('core/api'),
  app = require('core/app'),
  Button = require('core/components/button'),
  dom = require('core/dom'),
  ErrorBlock = require('widgets/popup/popup-error'),
  FilmItemRender = require('ui/film-item'),
  helpFunctions = require('core/lib/helpFunctions'),
  statInfoService = require('core/tools/statInfoService'),
  menuNavigateService = require('core/tools/menuNavigateService'),
  keys = require('vendor/aura/keys'),
  LeftMenu = require('widgets/menu-left'),
  Loader = require('widgets/loader'),
  List = require('core/components/list'),
  Page = require('core/components/page'),
  Panel = require('core/components/panel'),
  router = require('core/router'),
  Slider = require('ui/slider-item'),
  Widget = require('core/components/widget'),
  featured_analytics_info = [],
  isServe = false
  ;

//@TODO need to combine premiere films and cartoons
var active_list;
var page = new Page({
  $node: dom.tag('div', {id: id}),
  $body: dom.tag('div', {id: id+ 'Container'}),
  append_to_body: true,
  arrows: {down: {config: {top: 480, paddingTop: 170}}},
  arrowsUpdate: showHideArrows,
  header: ''
});

page.info = {};

page.addListener('load', function () {
  page.filter_vod = 'single,subscription,free';
  setDefaultParams(page);

  page.content = new List({
    type: List.prototype.TYPE_VERTICAL,
    data: [],
    viewSize: 3,
    focusIndex: 0,
    keys: {
      RETURN: function () {
        pressBack();
      }
    },
    events: {
      'overflow': function (data) {
        if (data.direction === keys.DOWN) {
          if (page.feature_load_complete) {
            $$watchAllCartoons.focus();
            active_list.classList.add('active')
          }
        }
      },
      'focus': function (data) {
        if (this.$focusItem) {
          this.$focusItem.list.focus();
        }
      },
      'focus:item': function (data) {
        var top = 0;
        var $item = data.$curr;
        $item.list.focus();
        if ($item.index) {
          top = $item.getBoundingClientRect().top - parseInt(page.scrollTopValue || 0);
          top -= 85;
        }

        ///@TODO for testing
        var next_row_list = this.$node.children[$item.index + 1];
        var next_next_row_list = this.$node.children[$item.index + 2];

        lazyLoadCollection($item);
        lazyLoadCollection(next_row_list);
        lazyLoadCollection(next_next_row_list);
        lazyLoadFeaturedGroup($item);

        if (data.$curr.index) {
          page.header.shadeOn();
          page.arrowsWidget.up.show();
          page.arrowsWidget.down.show();
        } else {
          page.header.shadeOff();
          page.arrowsWidget.up.hide();
        }

        if (data.$curr.index == page.content.size - 1) {
          page.arrowsWidget.down.hide();
        }

        page.scrollTop(top);
        active_list = $item.list.$node;
        active_list.classList.add('active')
      },
      'mouseover': function (data) {
        this.focus();
        this.focusItem(data.$item, {
          no_emit: true
        });
        data.$item.list.focus();
        showHideArrows();
      }
    },
    render: function ($item, data) {
      if (data.type === mainConfigMgg.itemTypes.ITEM_FILM_LIST) {
        var offset_film_item = 0;
        $item.list = new List({
          type: List.prototype.TYPE_HORIZONTAL,
          size: data.data.length || 7,
          data: data.data,
          //viewSize: 7,
          focusIndex: 0,
          className: 'filmsList',
          total_items: data.total_items,
          dataType: data.type,
          scrollList: {
            startIndex: 2,
            stopIndex: 2,
            speed: mainConfigMgg.animation.duration.speed2,
            scrollSize: 3
          },
          events: {
            'click:item': function (listData) {
              statInfoService.sendGATrackEvent(page.id + '_collection_' + data.category_id, listData.$item.data.id);

              router.navigate('pageMovie', [
                listData.$item.data.id
              ]);
            },
            'mouseover': function (data) {
              this.focus();
              this.focusItem(data.$item, {
                no_emit: true
              });
              showHideArrows();
            },
            'overflow': function (data) {
              if (data.direction === keys.LEFT && data.type !== 'mousewheel') {
                LeftMenu.showMenu({
                  'componentToFocus': page.content
                });
              }
            },
            'focus:item': function (itemData) {
              if ((offset_film_item + page.film_list_limit <= this.total_items) && (itemData.$curr.index >= this.size - page.start_loading_films_list_index)) {
                offset_film_item += page.film_list_limit;
                api.load('videoCollection', {
                  id: data.category_id,
                  offset: offset_film_item,
                  limit: page.film_list_limit,
                  vod: page.filter_vod
                }).then(function (data) {
                  $item.list.addData(data.video_list);
                })
              }
            },
            'mousewheel': function (event) {
              if (event.deltaY < 0) {
                page.content.move(keys.UP);
              }
              if (event.deltaY > 0) {
                page.content.move(keys.DOWN);
              }
            }
          },
          keys: {
            UP: function () {
              if(active_list) {
                active_list.classList.remove('active');
              }
              page.content.move(keys.UP);
            },
            DOWN: function () {
              if(active_list) {
                active_list.classList.remove('active');
              }
              page.content.move(keys.DOWN);
            },
            RETURN: function() {
              pressBack();
            }
          },
          render: function ($listItem, listData) {
            FilmItemRender($listItem, listData);
          }
        });

        $item.listItemTitle = new Panel({
          $node: dom.add(dom.tag('div', {
            className: 'panelTitle'
          }), data.title),
          focusable: false
        });
        //need refactor, create component  FilmItem
        $item.appendChild($item.listItemTitle.$node);
        $item.appendChild($item.list.$node);

      } else if (data.type === mainConfigMgg.itemTypes.ITEM_CAROUSEL) {
        $item.list = new List({
          type: List.prototype.TYPE_HORIZONTAL,
          data: data.data,
          className: 'slider',
          viewSize: 3,
          focusIndex: 0,
          dataType: data.type,
          scrollList: {
            startIndex: 0,
            scrollSize: 1,
            speed: mainConfigMgg.animation.duration.speed2
          },
          events: {
            'click:item': function (data) {

              statInfoService.sendGATrackEvent(page.id + '_slider', data.$item.data.id);

              if (data.$item.data.slider_type == "feature") {
                router.navigate('pageMoviesCategory', [
                  'collections', data.$item.data.object_id
                ]);
              }

              if (data.$item.data.slider_type == "object") {
                router.navigate('pageMovie', [
                  data.$item.data.object_id
                ]);
              }

              if (data.$item.data.slider_type == "url") {
                menuNavigateService.navigateAdLink('navigate', data.$item.data.link);
              }
            },
            'overflow': function (data) {
              if (data.direction === keys.LEFT && data.type !== 'mousewheel') {
                LeftMenu.showMenu({
                  'componentToFocus': page.content
                });
              }
            },
            'focus:item': function (data) {
            },
            'mousewheel': function (event) {
              if (event.deltaY < 0) {
                page.content.move(keys.UP);
              }
              if (event.deltaY > 0) {
                page.content.move(keys.DOWN);
              }
            },
            'mouseover': function (data) {
              this.focus();
              this.focusItem(data.$item, {
                no_emit: true
              });
              showHideArrows();
            },
            'keydown': function (data) {
              if(data.keyCode == keys.LEFT || data.keyCode == keys.RIGHT) {
                this.move(data.keyCode);
              } else if(data.keyCode == keys.PAGE_UP) {
                this.move(keys.LEFT);
              } else if(data.keyCode == keys.PAGE_DOWN) {
                this.move(keys.RIGHT);
              } else if(data.keyCode == keys.UP) {
                page.content.move(keys.UP);
              } else if(data.keyCode == keys.DOWN) {
                if(active_list) {
                  active_list.classList.remove('active');
                }
                page.content.move(keys.DOWN);
              } else if(data.keyCode == keys.RETURN) {
                pressBack();
              } else if(data.keyCode == keys.ENTER) {
                this.emit('click:item', {
                  $item: this.$focusItem
                });
              }
            }
          },
          render: function ($item, data) {
            new Slider($item, data);
          }
        });

        $item.appendChild($item.list.$node);
      }
    }
  });

  var $$watchAllCartoonsContainer = new Panel({
    $node: dom.add(dom.tag('div', {
      className: 'watchAllPremiereContainer'
    })),
    focusable: false
  });

  var $$watchAllCartoons = new Button({
    'className': 'watchAllPremiere',
    events: {
      'click': function (event) {
        statInfoService.sendGATrackEvent(page.id + '_button', 'all_cartoons');
        router.navigate('pageMoviesCategory', [6]);
      },
      'focus': function () {
        if(isServe){
          var uniqueArray = helpFunctions.removeDuplicates(featured_analytics_info, "id");
          console.log([uniqueArray.length, page.feature_list_total]);
          console.log(JSON.stringify(uniqueArray));
        }
      }
    },
    keys: {
      UP: function () {
        page.content.focus();
      },
      LEFT: function () {
        LeftMenu.showMenu({
          'componentToFocus': $$watchAllCartoons
        });
      },
      RETURN: function() {
        pressBack();
      }
    }
  });
  $$watchAllCartoonsContainer.add($$watchAllCartoons);
  page.add(page.content);
  page.add($$watchAllCartoonsContainer);

  /**
   * Listeners
   */
  page.addListener('show', function (data) {
    //@TODO small hack for prevent focus on first carousel while mouseover
    if (page.arrowsWidget.mouse_used) {
      page.arrowsWidget.showArrows();
      page.arrowsWidget.down.show();
    }
    page.content.focus();
    showHideArrows();
    page.header.setTitle(i18nMgg('cartoons_noun'));

    $$watchAllCartoons.setValue(i18nMgg('all_cartoons'));

    if (helpFunctions.isNavigateBack(data)) {
      Loader.hide();
      var movie_data = helpFunctions.isRouteHasData(data);
      if(movie_data) {
        helpFunctions.updateWatchedHistory(page.activeComponent, movie_data);
      }
      return;
    }

    setDefaultParams(page);

    Loader.show();
    if (data && data.data && data.data[0]) {
      page.info = JSON.parse(data.data[0]);

      if (page.info.slider_category_id) {
        api.load('slider', {
          category_id: page.info.slider_category_id,
          size: "big",
          vod: page.filter_vod
        }).then(function (data) {
          if (data && data.sliders) {
            featuredGroup(data.sliders);
          }
        }, function (e) {
          return {
            error: e
          };
        }).catchError(function (e) {
          console.log(e);
        });
      } else {
        featuredGroup();
      }
    } else {
      alert('error no data in url');
      page.content.clear(); //@TODO refactor BACK-CLEAR
      router.back();
      Loader.hide();
    }
  });

  page.addListener('hide', function (data) {
    page.arrowsWidget.removeClass('arrow-slider');
  });

  function updateData(data) {
    if(!page.active) {
      return;
    }
    page.content.clear();
    page.resetScroll();
    if (data && data.length) {
      page.content.init({
        data: data,
        viewSize: 3,
        focusIndex: 0
      });
      $$watchAllCartoons.show();
    } else {
      ErrorBlock.show({
        backLable: function () {
          router.back();
        },
        text: i18nMgg('nothing_found'),
        buttons: [
          {
            text: i18nMgg('close'), callback: function () {
            router.back();
          }
          }
        ]
      });
    }

    Loader.hide();
  }

  function featuredGroup(slider) {
    if (page.info.featured_group_id) {
      var features = [],
        features_init = [],
        initData = [];

      api.load('featuredGroup', {
        group_id: page.info.featured_group_id,
        required: 1,
        vod: page.filter_vod,
        limit: page.feature_list_limit,
        offset: page.feature_list_offset
      }).then(function (data) {
        page.feature_list_total = data.total;
        if (data.group && data.group.sub_featured) {
          features = data.group.sub_featured;
        }

        if (slider && slider.length) {
          var supportedSliders = helpFunctions.filterSupportedSliders(slider);

          if (supportedSliders.length) {
            initData.push({
              data: supportedSliders,
              type: mainConfigMgg.itemTypes.ITEM_CAROUSEL
            });
          }
        }


        features.forEach(function (feature) {
          features_init.push({
            category_id: feature.id,
            data: [],
            type: mainConfigMgg.itemTypes.ITEM_FILM_LIST,
            title: feature.title,
            total_items: feature.video_total
          });
        });

        if (features_init.length) {
          //add data for first feature
          api.load('videoCollection', {
            id: features_init[0].category_id,
            limit: page.film_list_limit,
            vod: page.filter_vod
          }).then(function (video) {

            if(isServe) {
              collectAnalyticsFeatureInfo(features_init[0].category_id, features_init[0].title, video.video_list)
            }

            features_init[0].data = video.video_list;
            initData = initData.concat(features_init);

            updateData(initData);
          })
        } else {
          updateData(initData);
        }
      })
    } else {
      updateData();
    }
  }
});

function pressBack() {
  Loader.hide();
  page.content.clear() //@TODO refactor BACK-CLEAR
  router.back();
}

function setDefaultParams(env) {
  env.start_loading_feature_list_index = 3;
  env.start_loading_films_list_index = 5;
  env.film_list_limit = 6;
  env.feature_list_limit = 5;
  env.feature_list_offset = '0';
  env.feature_list_total = 0;
  env.feature_load_complete = false;
}

function lazyLoadFeaturedGroup($item) {
  if ((page.feature_list_offset + page.feature_list_limit <= page.feature_list_total)
    && ($item.index == page.content.size - page.start_loading_feature_list_index)
    && ($item.list.dataType == mainConfigMgg.itemTypes.ITEM_FILM_LIST)) {
    //@TODO need to use one load for basic load and lazy load
    page.feature_list_offset = parseInt(page.feature_list_offset) + page.feature_list_limit;
    api.load('featuredGroup', {
      group_id: page.info.featured_group_id,
      required: 1,
      vod: page.filter_vod,
      limit: page.feature_list_limit,
      offset: page.feature_list_offset
    }).then(function(data) {
      var initLoadData = [];
      page.feature_list_total = data.total;
      if (data.group && data.group.sub_featured) {
        data.group.sub_featured.forEach(function(feature) {
          initLoadData.push({
            category_id: feature.id,
            data: [],
            type: mainConfigMgg.itemTypes.ITEM_FILM_LIST,
            title: feature.title,
            total_items: feature.video_total
          });
        });
      }

      page.content.addData(initLoadData);
      if(page.feature_list_offset + page.feature_list_limit >= page.feature_list_total) {
        page.feature_load_complete = true;
      }
    });
  }
}

function lazyLoadCollection(item) {
  if (item && item.list && item.list.data && !item.list.data.length) {
    api.load('videoCollection', {
      id: item.data.category_id,
      limit: page.film_list_limit,
      vod: page.filter_vod
    }).then(function (video) {
      //setTimeout(function(){next_row_list.list.init({data:video.video_list, focusIndex:0});},3000);

      if(isServe) {
        collectAnalyticsFeatureInfo(item.data.category_id, item.data.title, video.video_list)
      }

      item.list.init({
        data: video.video_list,
        focusIndex: 0
      });
    })
  }
}

function showHideArrows() {
  page.arrowsWidget.up.hide();
  page.arrowsWidget.left.hide();
  setTimeout(function () {
    var focusItem = page.content ? page.content.$focusItem : null;

    if (focusItem && focusItem.list && focusItem.list.$focusItem) {
      var left_offset = focusItem.list.$node.style.left ? parseInt(focusItem.list.$node.style.left) : 0;
      var list_size = focusItem.list.total_items || focusItem.list.size;
      var diff_offset = focusItem.list.dataType == mainConfigMgg.itemTypes.ITEM_FILM_LIST ? 2 : 0;
      var total_offset = -focusItem.list.$focusItem.offsetWidth * (list_size - focusItem.list.scrollList.scrollSize - diff_offset);

      if (!left_offset) {
        page.arrowsWidget.left.hide();
      } else {
        page.arrowsWidget.left.show();
      }
      if (left_offset > total_offset) {
        page.arrowsWidget.right.show();
      } else {
        page.arrowsWidget.right.hide();
      }
      if (focusItem.index >= page.content.size - 1) {
        page.arrowsWidget.down.hide();
      } else {
        page.arrowsWidget.down.show();
      }
      if (!page.scrollTopValue) {
        page.arrowsWidget.up.hide();
        page.arrowsWidget.addClass('arrow-slider');
      } else {
        page.arrowsWidget.removeClass('arrow-slider');
        page.arrowsWidget.up.show();
      }
    } else {
      page.arrowsWidget.up.hide();
      page.arrowsWidget.down.hide();
      page.arrowsWidget.right.hide();
      page.arrowsWidget.left.hide();
    }
  }, 0);
}

function collectAnalyticsFeatureInfo(featureID, title, videos){
  var feature = {
    id: featureID,
    title: 'Подборка - ' + featureID + ' ' + title,
    video_items: []
  };
  videos.forEach(function (video, key) {
    feature.video_items.push(key + 1 + ' ' + video.id + ' ' + video.title);
  });

  featured_analytics_info.push(feature);
}
// public
module.exports = page;

},{"core/api":15,"core/app":16,"core/components/button":19,"core/components/list":23,"core/components/page":25,"core/components/panel":26,"core/components/widget":30,"core/dom":31,"core/lib/helpFunctions":34,"core/router":45,"core/tools/menuNavigateService":49,"core/tools/statInfoService":53,"ui/film-item":119,"ui/slider-item":127,"vendor/aura/keys":133,"widgets/loader":149,"widgets/menu-left":150,"widgets/popup/popup-error":153}],59:[function(require,module,exports){
/**
 * MoviesCategory page implementation.
 *
 * @license GNU GENERAL PUBLIC LICENSE Version 3
 */

'use strict';

var id = 'pageMoviesCategory',
  app = require('core/app'),
  Page = require('core/components/page'),
  Button = require('core/components/button'),
  BackButton = require('widgets/back-lable'),
  Grid = require('core/components/grid'),
  keys = require('vendor/aura/keys'),
  router = require('core/router'),
  FilmItemRender = require('ui/film-item'),
  statInfoService = require('core/tools/statInfoService'),
  rightMenu = require('widgets/menu-right'),
  LeftMenu = require('widgets/menu-left'),
  dom = require('core/dom'),
  Panel = require('core/components/panel'),
  Loader = require('widgets/loader'),
  PopUpList = require('widgets/popup/popup-list'),
  helpFunctions = require('core/lib/helpFunctions'),
  api = require('core/api'),
  greedData, filter_content, selected_item_id, backButtonComponent, RightMenu;

var page = new Page({
  $node: dom.tag('div', {id: id}),
  $body: dom.tag('div', {id: id+ 'Container'}),
  append_to_body: true,
  header: '',
  arrows: {up: {config: {paddingBottom: 50}}},
  arrowsUpdate: showHideArrows
});

page.addListener('load', function () {
  this.collection_id = 0;
  this.category_id = 0;
  this.total = 0;
  this.filters = null;
  this.right_menu_focus_index = 0;
  this.items_per_row = 5;
  this.total_rows = 0;
  page.header.addClass('short');
  setDefaultParams(this);

  page.sortResults = new Panel({
    className: 'sort-results-container',
    visible: false
  });

  page.sortResultsText = new Panel({
    className: 'sort-results-text'
  });

  page.sortResultsButton = new Button({
    className: 'sort-results-button',
    visible: true,
    focusable: true,
    events: {
      click: function (data) {
        statInfoService.sendGATrackEvent(page.id + '_' + page.category_id + '_filter', 'clear_all');
        setDefaultParams(page);
        page.sortResults.hide();
        page.loadData();
      },
      mouseover: function () {
        this.focus();
        if (RightMenu.visible && RightMenu.active) {
          RightMenu.deActivate();
        }
      }
    },
    keys: {
      UP: function () {
        if (RightMenu.visible) {
          RightMenu.activate();
        }
      },
      LEFT: function () {
        LeftMenu.showMenu();
      },
      RIGHT: function () {
        if (RightMenu.visible) {
          RightMenu.activate();
        }
      },
      DOWN: function () {
        if (page.content.map.length) {
          page.content.focus();
        }
      },
      RETURN: function () {
        pressBack();
      }
    }
  });

  page.sortResults.add(page.sortResultsText, page.sortResultsButton);
  RightMenu = new rightMenu();

  page.$node.appendChild(RightMenu.$node);
  page.add(page.sortResults);

  page.content = new Grid({
    cycleX: false,
    cycleY: false,
    viewSize: 3,
    className: 'movie-grid',
    events: {
      'click:item': function (data) {

        var collectionID = page.collection_id ? '_' + page.collection_id : '';
        statInfoService.sendGATrackEvent(page.id + '_' + page.category_id + collectionID, data.$item.data.id);

        if (page.category_id == 'collections' && !page.collection_id) {
          router.navigate('pageMoviesCategory', [
            'collections', data.$item.data.id
          ]);
        } else {
          router.navigate('pageMovie', [
            data.$item.data.id
          ]);
        }
      },
      mouseover: function (data) {
        if (page.activeComponent != page.content) {
          page.content.focus();
        }

        this.focusItem(data.$item, {
          no_animate: true
        });
        if (RightMenu.visible && RightMenu.active) {
          RightMenu.deActivate();
        }
        showHideArrows();
      },
      overflow: function (data) {
        if (data.direction === keys.LEFT && data.type !== 'mousewheel') {
          if(backButtonComponent) {
            backButtonComponent.focusButton(page.content);
          } else {
            LeftMenu.showMenu();
          }
        } else if (data.direction === keys.RIGHT && data.type !== 'mousewheel') {
          if (RightMenu.visible) {
            RightMenu.activate();
          }
        } else if (data.direction === keys.UP && data.type !== 'mousewheel') {
          if (page.sortResultsActivated) {
            page.sortResultsButton.focus();
          } else {
            if (RightMenu.visible) {
              RightMenu.activate();
            }
          }
        }
      },
      'focus:item': function (data) {
        if (data.$curr && data.$prev && data.$curr.y == data.$prev.y) {
          return;
        }
        var height = data.$curr.parentElement.offsetHeight;
        var top = height * data.$curr.y;


        if (top) {
          page.header.shadeOn();

          if (page.filter_genres || page.filter_countries || page.filter_years) {
            top -= height * 0.05;
          } else {
            top -= height * 0.1;
          }


        } else {

          page.header.shadeOff();
        }

        page.scrollTop(top);
        data.$curr.parentNode.classList.add('active');
        if ((page.content.map.length - data.$curr.y) == 2) {
          if (page.total > page.offset + page.limit) {
            page.offset += page.limit;
            page.loadData({
              offset: page.offset,
              lazy_load: true
            })
          }
        }


        if ((page.total <= page.offset + page.limit) && (page.content.map.length - 1 == page.content.$focusItem.y)) {
          page.arrowsWidget.down.hide();
        } else {
          page.arrowsWidget.down.show();
        }
        page.$$lastFocus = this;
      }
    },
    keys: {
      RETURN: function () {
        pressBack();
      },
      BLUE: function () {
        RightMenu.activate();
      }
    }
  });

  /**
   * Listeners
   */

  //@TODO need to global fix data format. when router back event data format different then navigate!!!
  page.addListener('show', function (data) {
    page.arrowsWidget.addClass('short-up-arrow');
    page.arrowsWidget.focusCallback = rightMenuPressLeft;
    PopUpList.addListener('change', popUpListChange);
    PopUpList.addListener('hide', popUpListHide);
    PopUpList.addListener('show', popUpListShow);
    RightMenu.list.addListener('click:item', rightMenuClickItem);
    RightMenu.list.addListener('key:left', rightMenuPressLeft);

    if (helpFunctions.isNavigateBack(data)) {
      page.updateView();
      if (page.filters) {
        page.filtersRender(page.filters);
      } else {
        RightMenu.deActivate();
        RightMenu.hide();
      }

      var movie_data = helpFunctions.isRouteHasData(data);
      if(movie_data) {
        helpFunctions.updateWatchedHistory(page.activeComponent, movie_data);
      }
      return;
    }

    var category_id = data && data.data ? data.data[0] : null;
    var collection_id = data.data[1];

    page.openFromMenu = false;
    if(data && data.data && data.data.length) {
      if(data.data[2] && data.data[2].openFromMenu){
        page.openFromMenu = true;
      } else if(Array.isArray(data.data[0]) && data.data[0][2] && data.data[0][2].openFromMenu) {
        page.openFromMenu = true;
      }
    }


    if (category_id) {

      if(Array.isArray(category_id)) {
        collection_id = category_id[1];
        category_id = category_id[0];
      }
      setDefaultParams(this);

      page.category_id = category_id;
      page.collection_id = collection_id;
      page.updateView();

      this.loadData();
    }
  });

  page.addListener('hide', function () {
    page.arrowsWidget.removeClass('short-up-arrow');
    page.arrowsWidget.focusCallback = null;
    RightMenu.deActivate();
    RightMenu.hide();
    removeBackButton();
    PopUpList.removeListener('change', popUpListChange);
    PopUpList.removeListener('hide', popUpListHide);
    PopUpList.removeListener('show', popUpListShow);
    RightMenu.list.removeListener('click:item', rightMenuClickItem);
    RightMenu.list.removeListener('key:left', rightMenuPressLeft);
  });

  page.updateView = function () {
    page.content.focus();

    if (page.category_id) {
      page.content.removeClass('collectionGrid');
      page.content.addClass('movie-grid');

      if (page.category_id == 'premiere') {
        page.header.setTitle(i18nMgg('all_premieres'));
      } else if (page.category_id == 'collections' && !page.openFromMenu) {
        addBackButton();
      } else {
        var title = helpFunctions.getCategoryById(page.category_id) ? helpFunctions.getCategoryById(page.category_id).title : '';
        if(title) {
          page.header.setTitle(title);
        }


        if (page.category_id != 'collections') {
          RightMenu.show();
        }
      }
    }
  };

  page.filtersRender = function (filters) {

    var config = prepareConfig({});
    var filters_arr = [];

    if (page.is_avaliable_filter_sort) {
      filters_arr = [{
        title: i18nMgg(page.filter_sort.title),
        mark: page.filter_sort && page.filter_changed,
        data: {
          header_title: i18nMgg('sort_title'),
          type: 'filter_sort',
          mark: page.filter_sort.id,
          content: [{
            id: 'popular',
            title: i18nMgg('popular')
          }, {
            id: 'recommended',
            title: i18nMgg('recommended')
          }, {
            id: 'add',
            title: i18nMgg('newest')
          }]
        }
      }];
    }

    for (var p in filters) {

      if (!filters[p] || !filters[p].length) break;

      if (p == 'genres') {
        filter_content = [{
          id: 0,
          title: i18nMgg('all_genres')
        }];
        filter_content = filter_content.concat(helpFunctions.getConfigurationInfo('genres', filters[p]));
        selected_item_id = page.filter_genres ? page.filter_genres.id : 0;
        filters_arr.push({
          title: config.filter_genres_title,
          mark: page.filter_genres,
          data: {
            header_title: i18nMgg('filter_genre'),
            type: 'filter_' + p,
            mark: selected_item_id,
            content: filter_content
          }
        })
      } else if (p == 'countries') {
        filter_content = [{
          id: 0,
          title: i18nMgg('all_countries')
        }];
        filter_content = filter_content.concat(helpFunctions.getConfigurationInfo('video_country_filters', filters[p]));
        selected_item_id = page.filter_countries ? page.filter_countries.id : 0;
        filters_arr.push({
          title: config.filter_countries_title,
          mark: page.filter_countries,
          data: {
            header_title: i18nMgg('filter_country'),
            type: 'filter_' + p,
            mark: selected_item_id,
            content: filter_content
          }
        });

      } else if (p == 'years') {
        filter_content = [{
          id: 0,
          title: i18nMgg('all_years')
        }];
        filter_content = filter_content.concat(helpFunctions.getConfigurationInfo('video_year_filters', filters[p]));

        selected_item_id = page.filter_years ? page.filter_years.id : 0;
        filters_arr.push({
          title: config.filter_years_title,
          mark: page.filter_years,
          data: {
            header_title: i18nMgg('filter_year'),
            type: 'filter_' + p,
            mark: selected_item_id,
            content: filter_content
          }
        })
      }
    }

    if (filters_arr.length) {
      if (page.category_id != 'collections') {
        RightMenu.init(filters_arr, page.right_menu_focus_index);
        if (page.active) {
          RightMenu.show();
        }
      }
    }
  };

  page.loadData = function (params) {
    params = params || {};

    var config = prepareConfig(params);
    var callback = 'init';

    if (params.lazy_load) {
      callback = 'addData';
    } else {
      page.content.clear();
      page.filters = null;
      Loader.show();
      page.resetScroll();
    }

    api.load(config.url, config.query).then(function (data) {
      if(!page.active) {
        return;
      }
      if (data.custom_html) {
        var landindCollectionID = config.query.id;
        router.redirect('pageLandingInner', [landindCollectionID, data]);
        Loader.hide();
        return;
      }
      page.total = data.total;
      Loader.hide();
      page.activateFilterResults();
      var resp_data = data.video_list;
      greedData = helpFunctions.formatDataForGreed(resp_data, page.items_per_row);

      page.content[callback]({
        data: greedData,
        render: config.item_render
      });

      if (config.url == 'videoCollection') {
        page.header.setTitle(data.title);
      }

      if (!params.lazy_load) {
        loadFilters(config.filter_query);
      }

      if (!greedData.length) {
        page.content.$node.textContent = i18nMgg('nothing_found');
        RightMenu.deActivate();
        if (page.sortResultsActivated) {
          page.sortResultsButton.focus();
        } else {
          addBackButton();
          backButtonComponent.focusButton();
        }
        page.resetScroll();
      } else {
        if (params.show_right_menu) {
          RightMenu.list.focus();
          if (page.content.map && page.content.map.length && page.content.map[0].length) {
            page.content.focusItem(page.content.map[0][page.content.map[0].length - 1]);
          }
        } else {
          page.content.focus();
        }
      }
      page.total_rows = Math.ceil(page.total / page.items_per_row);
      showHideArrows();
    })
  };

  page.activateFilterResults = function () {
    if (page.filter_genres || page.filter_countries || page.filter_years) {
      page.sortResultsActivated = true;
      page.sortResults.show();
      page.sortResultsButton.setValue(i18nMgg('filter_clear'));
      page.sortResultsText.$node.textContent = getCorrectResultText(page.total, page.category_id);
    } else {
      page.deActivateFilterResults();
    }
  };

  page.deActivateFilterResults = function () {
    page.sortResultsActivated = false;
    page.sortResults.hide();
  };

  function getCorrectResultText (totalNumber, categoryID) {
    var categoryText = 'movie';

    switch (parseInt(categoryID)) {
      case 4:
        categoryText = 'series';
        break;
      case 6:
        categoryText = 'cartoon';
        break;
      case 9:
        categoryText = 'show';
        break;
      case 16:
        categoryText = 'movie';
        break;
    }

    return helpFunctions.getValueText(totalNumber, 'found_' + categoryText).replace('[n]', totalNumber);
  }

  function setDefaultParams(env) {
    env.limit = 20;
    env.offset = 0;
    env.filter_genres = 0;
    env.sortResultsActivated = false;
    env.is_avaliable_filter_sort = true;
    env.filter_sort = {
      title: 'popular',
      id: 'popular'
    };
    env.filter_countries = 0;
    env.filter_years = 0;
    env.filter_changed = false;
  }

  function prepareConfig(params) {
    var config = {
      url: '',
      item_render: function ($item, data) {
        FilmItemRender($item, data);
      },
      query: {
        limit: page.limit
      },
      filter_genres_title: i18nMgg('filter_genre'),
      filter_countries_title: i18nMgg('filter_country'),
      filter_years_title: i18nMgg('filter_year'),
      filter_query: {
        types: 'genre,country,year'
      }
    };

    if (page.filter_genres) {
      config.query.genre = page.filter_genres.id;
      config.filter_query.genre = page.filter_genres.id;
      config.filter_genres_title = page.filter_genres.title;
    }

    if (page.filter_countries) {
      config.query.country = page.filter_countries.id;
      config.filter_query.country = page.filter_countries.id;
      config.filter_countries_title = page.filter_countries.title;
    }

    if (page.filter_years) {
      if (page.filter_years.year_from) {
        config.query.year_min = page.filter_years.year_from;
        config.filter_query.year_min = page.filter_years.year_from;
      }
      if (page.filter_years.year_to) {
        config.query.year_max = page.filter_years.year_to;
        config.filter_query.year_max = page.filter_years.year_to;
      }

      config.filter_years_title = page.filter_years.title;
    }

    if (params.offset) {
      config.query.offset = params.offset;
    }

    if (page.category_id == 'premiere') {
      page.is_avaliable_filter_sort = false;
      config.query.sort = page.filter_sort.id;
      config.url = 'premiere';
      config.item_render = function ($item, data) {
        FilmItemRender($item, data, {
          className: 'premiere'
        });
      }
    } else if (page.category_id == 'collections' && page.collection_id) {
      config.url = 'videoCollection';
      config.query.id = page.collection_id;
    } else {
      config.url = 'video';
      config.query.category_id = page.category_id;
      config.query.sort = page.filter_sort.id;
    }

    if (page.category_id == 'premiere') {
      config.query.vod = 'single';
    } else if (page.category_id != 'collections') {
      config.query.vod = 'subscription,free';
    }
    if (config.query.vod) {
      config.filter_query.vod = config.query.vod;
    }
    if (config.query.category_id) {
      config.filter_query.category_id = config.query.category_id;
    }

    return config;
  }

  page.add(page.content);
});

function addBackButton() {
  backButtonComponent = new BackButton({
    'clickCallBack': function () {
      router.back();
    }
  });
  page.$node.appendChild(backButtonComponent.$node);
  LeftMenu.hide();
}

function removeBackButton() {
  if(backButtonComponent) {
    backButtonComponent.remove();
    backButtonComponent = null;
    LeftMenu.show();
  }
}

function loadFilters(config) {

  if (config.vod) {

    var apiCategoryUrl = 'videoFilters';

    if (page.category_id == 'premiere') {
      apiCategoryUrl = 'premieresFilters'
    }

    api.load(apiCategoryUrl, config).then(function (data) {
      if (data.filters) {
        page.filters = data.filters;
        page.filtersRender(page.filters);
      } else {
        page.filters = null;
        RightMenu.hide();
      }
    }, function (e) {
      console.log('ERROR in videoFilters', e);
      page.filters = null;
      RightMenu.hide();
    });
  }
}

function popUpListChange(data) {
  page.offset = 0;
  if (!page.filter_changed) {
    page.filter_changed = (data.type == 'filter_sort');
  }

  if (data.type) {
    page[data.type] = data.data;
    if (!data.data.id) {
      page[data.type] = null;
    }

    page.loadData({
      show_right_menu: true
    });
  }
}

function popUpListHide() {
  if (RightMenu.active) {
    RightMenu.list.focus();
  } else {
    page.content.focus();
  }
  page.arrowsWidget.focusCallback = rightMenuPressLeft;
}

function popUpListShow() {
  page.arrowsWidget.focusCallback = null;
}

function rightMenuClickItem(data) {
  page.right_menu_focus_index = data.$item.index;
  var statItem = data.$item.data.data;
  //TODO-Inna think about sendind this info AFTER choice, not before
  statInfoService.sendGATrackEvent(page.id + '_' + page.category_id + '_filter', statItem.type + '_' + statItem.mark);

  PopUpList.show(data.$item.data.data);
}

function rightMenuPressLeft() {
  RightMenu.deActivate();
  if (page.content.map.length) {
    page.content.focus();
  } else {
    if (page.sortResultsActivated) {
      page.sortResultsButton.focus();
    } else {
      addBackButton();
      backButtonComponent.focusButton();
    }
  }
}

function pressBack() {
  Loader.hide();
  page.content.clear();
  router.back();
}

function showHideArrows() {
  setTimeout(function () {
    if (page.content.$focusItem) {
      if (!page.content.$focusItem.y) {
        page.arrowsWidget.up.hide();
      } else {
        page.arrowsWidget.up.show();
      }
      if (page.content.$focusItem.y >= page.total_rows - 1) {
        page.arrowsWidget.down.hide();
      } else {
        page.arrowsWidget.down.show();
      }
    }
  }, 0);
}
// public
module.exports = page;

},{"core/api":15,"core/app":16,"core/components/button":19,"core/components/grid":21,"core/components/page":25,"core/components/panel":26,"core/dom":31,"core/lib/helpFunctions":34,"core/router":45,"core/tools/statInfoService":53,"ui/film-item":119,"vendor/aura/keys":133,"widgets/back-lable":140,"widgets/loader":149,"widgets/menu-left":150,"widgets/menu-right":151,"widgets/popup/popup-list":155}],60:[function(require,module,exports){
/**
 * MoviesCollection page implementation.
 *
 * @license GNU GENERAL PUBLIC LICENSE Version 3
 */

'use strict';

var id = 'pageMoviesCollection',
  api = require('core/api'),
  CollectionItem = require('ui/collection-item'),
  dom = require('core/dom'),
  ErrorBlock = require('widgets/popup/popup-error'),
  Grid = require('core/components/grid'),
  helpFunctions = require('core/lib/helpFunctions'),
  keys = require('vendor/aura/keys'),
  LeftMenu = require('widgets/menu-left'),
  Loader = require('widgets/loader'),
  Page = require('core/components/page'),
  router = require('core/router'),
  greedData;

var page = new Page({
  $node: dom.tag('div', {id: id}),
  $body: dom.tag('div', {id: id+ 'Container'}),
  append_to_body: true,
  arrows: {right: {show:false}, left: {show: false}, up: {}, down: {}},
  arrowsUpdate: showHideArrows,
  header: ''
});

page.addListener('load', function() {

  page.content = new Grid({
    cycleX: false,
    cycleY: false,
    //viewSize: 3,
    className: 'collectionGrid',
    events: {
      'click:item': function(data) {
        router.navigate('pageMoviesCategory', [
          'collections', data.$item.data.id
        ]);
      },
      mouseover: function(data) {
        if(page.activeComponent != page.content) {
          page.content.focus();
        }
        this.focusItem(data.$item, {
          no_emit: true
        });
        showHideArrows();
      },
      overflow: function(data) {
        if (data.direction === keys.LEFT && data.type !== 'mousewheel') {
          LeftMenu.showMenu();
        }
      },
      'focus:item': function(data) {
        var height = data.$curr.parentElement.offsetHeight;
        var top = height * data.$curr.y;

        if (top) {
          top -= height * 0.1;
          page.header.shadeOn();
        } else {
          page.header.shadeOff();
        }

        if ((page.content.map.length - data.$curr.y) == 2) {
          if (page.total > page.offset + page.limit) {
            page.offset += page.limit;
            page.loadData({
              offset: page.offset,
              lazy_load: true
            })
          }
        }
        if(data.$curr.parentNode && data.$curr.parentNode.nextSibling) {
          data.$curr.parentNode.classList.add('active')
          data.$curr.parentNode.nextSibling.classList.add('active')
        }

        page.scrollTop(top);
        page.$$lastFocus = this;
      },
    },
    keys: {
      RETURN: function() {
        page.content.clear() //@TODO refactor BACK-CLEAR
        router.back();
      }
    }
  });

  /**
   * Listeners
   */
  page.addListener('show', function(data) {
    page.content.focus();
    if (helpFunctions.isNavigateBack(data)) {
      return;
    }
    setDefaultParams(this);
    page.header.setTitle(i18nMgg('featured'));
    page.limit = 18;

    this.loadData();
  });

  page.addListener('hide', function() {

  });

  page.loadData = function(params) {
    params = params || {};

    var config = prepareConfig(params);
    var callback = 'init';

    if (params.lazy_load) {
      callback = 'addData';
    } else {
      page.content.clear();
      Loader.show();
      page.resetScroll();
    }

    api.load(config.url, config.query).then(function(data) {
      page.total = data.total;
      page.total_rows = Math.ceil(page.total / config.items_per_row);
      Loader.hide();

      var resp_data = data.collections;
      greedData = helpFunctions.formatDataForGreed(resp_data, config.items_per_row);

      page.content[callback]({
        data: greedData,
        render: config.item_render
      });

      if(!greedData.length) {
        ErrorBlock.show({
          backLable: function () {
            router.back();
          },
          text: i18nMgg('nothing_found'),
          buttons: [
            {
              text: i18nMgg('close'), callback: function () {
              router.back();
            }
            }
          ]
        });
      }
    })
  };

  function setDefaultParams(env) {
    env.limit = 18;
    env.offset = 0;
  }

  function prepareConfig(params) {
    var config = {
      url: 'collections',
      items_per_row: 3,
      item_render: function($item, data) {
        new CollectionItem($item, data);
      },
      query: {
        limit: page.limit
      }
    };

    if (params.offset) {
      config.query.offset = params.offset;
    }

    return config;
  }
  page.add(page.content);
});

function showHideArrows() {
  setTimeout(function(){
    if(page.content.$focusItem) {
      if(!page.scrollTopValue) {
        page.arrowsWidget.up.hide();
      } else {
        page.arrowsWidget.up.show();
      }
      if(page.content.$focusItem.y >= page.total_rows - 1) {
        page.arrowsWidget.down.hide();
      } else {
        page.arrowsWidget.down.show();
      }
    }
  }, 0);
}

// public
module.exports = page;

},{"core/api":15,"core/components/grid":21,"core/components/page":25,"core/dom":31,"core/lib/helpFunctions":34,"core/router":45,"ui/collection-item":115,"vendor/aura/keys":133,"widgets/loader":149,"widgets/menu-left":150,"widgets/popup/popup-error":153}],61:[function(require,module,exports){
'use strict';


var id = 'pageMovieDetailed',
  Page = require('core/components/page'),
  animate = require('core/animate'),
  keys = require('vendor/aura/keys'),
  dom = require('core/dom'),
  api = require('core/api'),
  Panel = require('core/components/panel'),
  router = require('core/router'),
  ScrollBar = require('core/components/scroll.bar'),
  MovieInfo = require('ui/movie-info'),
  scrollValue;

var page = new Page({
  $node: dom.tag('div', {id: id}),
  $body: dom.tag('div', {id: id + 'Container'}),
  append_to_body: true,
  header: '',
  arrows: {},
  arrowsUpdate: showHideArrows,
  events: {
    mouseover: function (data) {
      if (page.scrollBar.visible) {
        page.scrollBar.focus();
      }
    }
  },
  back_button: {
    'clickCallBack': function() {
      router.back();
    }
  }
});

page.addListener('load', function () {
  var $$translations, $$subtitles, $$description, $$description_info, $$description_text;

  page.$description_container = new Panel({
    $node: dom.tag('div', {
        className: 'description_container'
      },
      $$description = dom.tag('div', {
          className: 'description'
        },
        $$description_info = dom.tag('div', {
          className: 'description_info'
        }),
        $$description_text = dom.tag('div', {
          className: 'description_text'
        })
      )
    )
  });

  page.$movieInfo = new MovieInfo();
  $$description_info.appendChild(page.$movieInfo.container);

  page.scrollBar = new ScrollBar({
    focusable: true,
    keys: {
      UP: function () {
        scrollValue = this.value - 150 >= 0 ? this.value - 150 : 0;
        if (!scrollValue) {
          page.header.shadeOff();
        }

        this.scrollTo(scrollValue);
      },
      DOWN: function () {
        if (this.realSize - this.viewSize > this.value + 150) {
          scrollValue = this.value + 150;
        } else {
          scrollValue = this.realSize - this.viewSize;
        }
        this.scrollTo(scrollValue);
        page.header.shadeOn();
      },
      LEFT: function () {
        page.backButton.focusButton(this);
      },
      RETURN: function () {
        page.backButton.emit('click');
      }
    },
    events: {
      change: function (data) {
        animate($$description, mainConfigMgg.animation.duration.speed2, {
          marginTop: '-' + data.curr
        });
        showHideArrows();
      },
      done: function (data) {

      },
      mousewheel: function () {
        this.emit('keydown', {
          'keyCode': event.deltaY < 0 ? keys.UP : keys.DOWN
        });
      }
    }
  });

  page.$rightMovieInfo = new Panel({
    className: 'movie_info_container'
  });

  page.$description_container.add(page.scrollBar);
  page.add(page.$description_container, page.$rightMovieInfo);

  page.addListener('show', function (data) {

    var movie_data = data && data.data && data.data[0] ? data.data[0] : null;

    if (movie_data) {
      page.$movieInfo.setData(movie_data);
      page.setRightContainerData(movie_data);

      page.header.setTitle(movie_data.title);

      $$description_text.innerHTML = movie_data.description || '';

      page.scrollBar.scrollTo(0);
      if (page.$description_container.$node.offsetHeight > $$description.offsetHeight) {
        page.scrollBar.hide();
        page.backButton.focusButton();
      } else {
        page.scrollBar.init({
          viewSize: page.$description_container.$node.offsetHeight,
          realSize: $$description.offsetHeight
        });
        page.scrollBar.show();
        page.scrollBar.focus();
      }
    }
  });

  //
  page.addListener('hide', function show(data) {
  });

  page.setRightContainerData = function (data) {
    var translations = data.audio_list ? data.audio_list.join(', ') : null;
    var subtitles = data.subtitles ? data.subtitles.join(', ') : null;

    if (page.$translations) {
      page.$translations.remove();
      page.$translations = null;
    }
    if (page.$subtitles) {
      page.$subtitles.remove();
      page.$subtitles = null;
    }

    if (translations && !data.is_wvdrm) {
      page.$translations = new Panel({
        $node: dom.tag('div', {
            className: 'movie_info_item'
          },
          dom.tag('div', {
            className: 'title'
          }, i18nMgg('translations_title')),
          dom.tag('div', {
            className: 'text'
          }, translations)
        )
      });
      page.$rightMovieInfo.add(page.$translations);
    }

    if (subtitles) {
      page.$subtitles = new Panel({
        $node: dom.tag('div', {
            className: 'movie_info_item'
          },
          dom.tag('div', {
            className: 'title'
          }, i18nMgg('subtitles_title')),
          dom.tag('div', {
            className: 'text'
          }, subtitles)
        )
      });
      page.$rightMovieInfo.add(page.$subtitles);
    }
  }

});
function showHideArrows() {
  setTimeout(function () {
    if (!page.scrollBar.value) {
      page.arrowsWidget.up.hide();
    } else {
      page.arrowsWidget.up.show();
    }
    if (page.scrollBar.visible) {
      if (page.scrollBar.realSize - page.scrollBar.viewSize <= page.scrollBar.value) {
        page.arrowsWidget.down.hide();
      } else {
        page.arrowsWidget.down.show();
      }
    }
  }, 0);
}
// public
module.exports = page;

},{"core/animate":14,"core/api":15,"core/components/page":25,"core/components/panel":26,"core/components/scroll.bar":28,"core/dom":31,"core/router":45,"ui/movie-info":122,"vendor/aura/keys":133}],62:[function(require,module,exports){
'use strict';

var id = 'pageMovies',
  animate = require('core/animate'),
  api = require('core/api'),
  app = require('core/app'),
  Background = require('widgets/background/background'),
  Button = require('core/components/button'),
  dom = require('core/dom'),
  FilmItemRender = require('ui/film-item'),
  helpFunctions = require('core/lib/helpFunctions'),
  keys = require('vendor/aura/keys'),
  LeftMenu = require('widgets/menu-left'),
  List = require('core/components/list'),
  Loader = require('widgets/loader'),
  menuNavigateService = require('core/tools/menuNavigateService'),
  statInfoService = require('core/tools/statInfoService'),
  router = require('core/router'),
  Page = require('core/components/page'),
  Panel = require('core/components/panel'),
  Slider = require('ui/slider-item'),
  Widget = require('core/components/widget'),
  page_info, featured_analytics_info = [],
  isServe = false
  ;
var carussel, active_list;
var page = new Page({
  $node: dom.tag('div', {id: id}),
  $body: dom.tag('div', {id: id + 'Container'}),
  append_to_body: true,
  header: '',
  arrows: {},
  arrowsUpdate: showHideArrows
});

page.$lastFocus = null;

page.addListener('load', function () {
  page.slider_category_id = 16;
  page.featured_group_id = 5955;

  setDefaultParams(this);

  page.content = new List({
    cycle: false,
    viewSize: 3,
    keys: {
      RETURN: function () {
        pressBack();
      }
    },
    events: {
      'overflow': function (data) {
        if (data.direction === keys.UP && data.type !== 'mousewheel') {
          page.sortButtons.list.focus();
        } else if (data.direction === keys.DOWN && page.categoryList.list.size && data.type !== 'mousewheel') {
          if (page.feature_load_complete) {
            page.categoryList.list.focus();
          }
        }
      },
      'focus': function () {
        page.$lastFocus = this;
        if (page.content.$focusItem) page.content.$focusItem.list.focus();
      },
      'focus:item': function (event) {
        var $item = event.$curr;
        var top = 0;

        $item.list.focus();


        if ($item.index && $item.list.dataType != mainConfigMgg.itemTypes.ITEM_CAT_LIST) {
          if(carussel) {
            carussel.removeClass('active');
          }
          top = $item.getBoundingClientRect().top - parseInt(page.scrollTopValue || 0);

          top = top ? top - 85 : 0;
          page.header.shadeOn();

        } else {
          page.header.shadeOff();
        }

        page.scrollTop(top);
        active_list = $item.list.$node;

        active_list.classList.add('active');

        if($item.list.dataType === mainConfigMgg.itemTypes.ITEM_CAT_LIST) {
          if(carussel) {
            carussel.addClass('active');
          }
        }

        ///@TODO for testing
        var next_row_list = this.$node.children[$item.index + 1];
        var next_next_row_list = this.$node.children[$item.index + 2];

        lazyLoadCollection($item);
        lazyLoadCollection(next_row_list);
        lazyLoadCollection(next_next_row_list);
        lazyLoadFeaturedGroup($item);
      },
      'mouseover': function (data) {
        this.focus();
        this.focusItem(data.$item, {
          no_emit: true
        });
        data.$item.list.focus();
        showHideArrows();
      }
    },
    render: function ($itemList, dataList) {
      var itemListData = dataList.data && dataList.data.length ? dataList.data : [];

      if ($itemList.list) {
        $itemList.list.remove();
      }

      if (dataList.type === mainConfigMgg.itemTypes.ITEM_FILM_LIST) {
        var offset_film_item = 0;
        var size = dataList.data && dataList.data.length ? dataList.data.length : 7;
        $itemList.list = new List({
          type: List.prototype.TYPE_HORIZONTAL,
          className: 'filmsList',
          data: itemListData,
          size: size,
          //viewSize: 7,
          focusIndex: 0,
          total_items: dataList.total_items,
          dataType: dataList.type,
          scrollList: {
            startIndex: 2,
            stopIndex: 2,
            scrollSize: 3,
            speed: mainConfigMgg.animation.duration.speed2
          },
          events: {
            'click:item': function (listData) {
              statInfoService.sendGATrackEvent(page.id + '_collection_' + dataList.category_id, listData.$item.data.id);
              router.navigate('pageMovie', [
                listData.$item.data.id
              ]);
            },
            'mouseover': function (listData) {
              if (page.activeComponent.$focusItem == listData.$item) {
                return;
              }
              this.focus();
              this.focusItem(listData.$item, {
                no_emit: true
              });
              showHideArrows();
            },
            'mousewheel': function (event) {
              if (event.deltaY < 0) {
                page.content.move(keys.UP);
              }
              if (event.deltaY > 0) {
                page.content.move(keys.DOWN);
              }
            },
            overflow: function (data) {
              if (data.direction === keys.LEFT && data.type !== 'mousewheel') {
                LeftMenu.showMenu({
                  'componentToFocus': $itemList.list
                });
              }
            },
            'focus:item': function (itemData) {
              if ((offset_film_item + page.film_list_limit <= this.total_items) && (itemData.$curr.index >= this.size - page.start_loading_films_list_index)) {
                offset_film_item += page.film_list_limit;
                api.load('videoCollection', {
                  id: dataList.category_id,
                  vod: page.filter,
                  limit: page.film_list_limit,
                  offset: offset_film_item
                }).then(function (data) {
                  $itemList.list.addData(data.video_list);
                })
              }
            }
          },
          keys: {
            UP: function () {
              if(active_list) {
                active_list.classList.remove('active');
              }
              page.content.move(keys.UP);
            },
            DOWN: function () {
              if(active_list) {
                active_list.classList.remove('active');
              }
              page.content.move(keys.DOWN);
            },
            RETURN: function () {
              pressBack();
            }
          },
          render: function ($item, data) {
            FilmItemRender($item, data);
          }
        });

        $itemList.list.category_id = dataList.category_id;
        $itemList.listItemTitle = new Panel({
          $node: dom.add(dom.tag('div', {
            className: 'panelTitle'
          }), dataList.title),
          focusable: false
        });

        $itemList.appendChild($itemList.listItemTitle.$node);
        $itemList.appendChild($itemList.list.$node);
        //$item.appendChild($item.btnScrollRight.$node);
        //$item.appendChild($item.btnScrollLeft.$node);

      } else if (dataList.type === mainConfigMgg.itemTypes.ITEM_CAROUSEL) {
        carussel = $itemList.list = new List({
          type: List.prototype.TYPE_HORIZONTAL,
          data: itemListData,
          className: 'slider',
          dataType: dataList.type,
          focusIndex: 0,
          viewSize: 3,
          scrollList: {
            startIndex: 0,
            scrollSize: 1,
            speed: mainConfigMgg.animation.duration.speed2
          },
          events: {
            'click:item': function (data) {
              var itemData = data.$item.data;

              statInfoService.sendGATrackEvent(page.id + '_slider', data.$item.data.id);


              if (itemData.slider_type == "feature") {
                router.navigate('pageMoviesCategory', [
                  'collections', itemData.object_id
                ]);
              }

              if (itemData.slider_type == 'object') {
                router.navigate('pageMovie', [
                  data.$item.data.object_id
                ]);
              }

              if (itemData.slider_type == "url") {
                menuNavigateService.navigateAdLink('navigate', itemData.link);
              }
            },
            'overflow': function (data) {
              if (data.direction === keys.LEFT && data.type !== 'mousewheel') {
                LeftMenu.showMenu({
                  'componentToFocus': $itemList.list
                });
              }
            },
            'mouseover': function (data) {
              this.focus();
              this.focusItem(data.$item, {
                no_emit: true
              });
              showHideArrows();
            },
            'focus:item': function (data) {
            },
            'mousewheel': function (event) {
              if (event.deltaY < 0) {
                page.content.move(keys.UP);
              }
              if (event.deltaY > 0) {
                page.content.move(keys.DOWN);
                page.content.move(keys.DOWN); //for disable focus on categories
              }
            },
            'keydown': function (data) {
              if(data.keyCode == keys.LEFT || data.keyCode == keys.RIGHT) {
                this.move(data.keyCode);
              } else if(data.keyCode == keys.PAGE_UP) {
                this.move(keys.LEFT);
              } else if(data.keyCode == keys.PAGE_DOWN) {
                this.move(keys.RIGHT);
              } else if(data.keyCode == keys.UP) {
                page.content.move(keys.UP);
              } else if(data.keyCode == keys.DOWN) {
                page.content.move(keys.DOWN);
              } else if(data.keyCode == keys.RETURN) {
                pressBack();
              } else if(data.keyCode == keys.ENTER) {
                this.emit('click:item', {
                  $item: this.$focusItem
                });
              }
            }
          },
          render: function ($item, data) {
            new Slider($item, data);
          }
        });

        $itemList.appendChild($itemList.list.$node);

      } else if (dataList.type === mainConfigMgg.itemTypes.ITEM_CAT_LIST) {
        $itemList.list = new List({
          type: List.prototype.TYPE_HORIZONTAL,
          data: itemListData,
          className: 'categories',
          focusIndex: 0,
          dataType: dataList.type,
          scrollList: {
            startIndex: 2,
            stopIndex: 0,
            speed: mainConfigMgg.animation.duration.speed2
          },
          events: {
            'focus': function(){
              if(isServe){
                var uniqueArray = helpFunctions.removeDuplicates(featured_analytics_info, "id");
                console.log([uniqueArray.length, page.feature_list_total])
                console.log(JSON.stringify(uniqueArray));
              }
            },
            'click:item': function (data) {
              clickCategory(data);
            },
            'overflow': function (data) {
              if (data.direction === keys.LEFT && data.type !== 'mousewheel') {
                LeftMenu.showMenu({
                  'componentToFocus': $itemList.list
                });
              }
            },
            'mouseover': function (data) {
              this.focus();
              this.focusItem(data.$item, {
                no_emit: true
              });
            },
            'mousewheel': function (event) {
              if (event.deltaY < 0) {
                page.content.move(keys.UP);
              }
              if (event.deltaY > 0) {
                page.content.move(keys.DOWN);
              }
            }
          },
          keys: {
            UP: function () {
              page.content.move(keys.UP);
            },
            DOWN: function () {
              page.content.move(keys.DOWN);
            },
            RETURN: function () {
              pressBack();
            }
          },
          render: function ($listItem, listData) {
            if (!$listItem.rendered) {
              $listItem.rendered = true;
              $listItem.appendChild(
                $listItem.cat = dom.tag('div', {
                  className: 'category'
                })
              );
            }
            $listItem.cat.textContent = listData.title || '';
          }
        });
        $itemList.appendChild($itemList.list.$node);
      }
    }
  });

  page.sortButtons = new Widget({
    visible: true,
    className: 'sort-buttons-widget'
  });


  page.sortButtons.list = new List({
    type: List.prototype.TYPE_HORIZONTAL,
    focusIndex: 0,
    className: 'sort-buttons-list',
    events: {
      'click:item': function (data) {


        if (page.sortButtons.list.activeBlock) {
          page.sortButtons.list.activeBlock.classList.remove('active');
        }
        page.sortButtons.list.activeBlock = data.$item;
        page.sortButtons.list.activeBlock.classList.add('active');
        page.filter = data.$item.data.filter;

        if (!data.no_load) {
          statInfoService.sendGATrackEvent(page.id + '_filter', data.$item.data.filter);
          setDefaultParams(page);
          loadData();
        }
      },
      'overflow': function (data) {
        if (data.direction === keys.LEFT && data.type !== 'mousewheel') {
          LeftMenu.showMenu({
            'componentToFocus': page.sortButtons.list
          });
        }
      },
      'mouseover': function (data) {
        this.focus();
        this.focusItem(data.$item);
      },
      'mousewheel': function (event) {
        this.emit('keydown', {
          'keyCode': event.deltaY < 0 ? keys.UP : keys.DOWN
        });
      }
    },
    keys: {
      DOWN: function () {
        page.content.focus();
      },
      RETURN: function () {
        pressBack();
      }
    },
    render: function ($item, data) {
      $item.textContent = data.title;
    }
  });
  //@TODO need to create component categoryList!!!
  page.categoryList = new Panel({
    visible: true,
    className: 'movie-category-list'
  });

  page.categoryList.list = new List({
    type: List.prototype.TYPE_HORIZONTAL,
    focusIndex: 0,
    className: 'categories',
    events: {
      'click:item': function (data) {
        clickCategory(data);
      },
      'overflow': function (data) {
        if (data.direction === keys.LEFT && data.type !== 'mousewheel') {
          LeftMenu.showMenu({
            'componentToFocus': page.categoryList.list
          });
        }
      },
      'mousewheel': function (event) {
        this.emit('keydown', {
          'keyCode': event.deltaY < 0 ? keys.UP : keys.DOWN
        });
      },
      'mouseover': function (data) {
        this.focus();
        this.focusItem(data.$item);
      },
      'focus': function () {
        page.$lastFocus = this;
      }
    },
    keys: {
      UP: function () {
        page.content.focus();
      },
      RETURN: function () {
        pressBack();
      }
    },
    render: function ($item, data) {
      $item.appendChild(
        $item.cat = dom.tag('div', {
          className: 'category'
        })
      );
      $item.cat.textContent = data.title || '';
    }
  });


  page.categoryList.add(page.categoryList.list);
  page.sortButtons.add(page.sortButtons.list);
  page.add(page.content, page.sortButtons, page.categoryList);


  function updateData(data) {
    if(!page.active) {
      return;
    }
    page.content.clear();
    page.content.init({
      data: data,
      size: data.length,
      viewSize: 3,
      focusIndex: 0
    });
  }

  function clickCategory(data) {
    var metaArr = data.$item.data.meta;
    var statItemID = data.$item.data.id;
    for (var n in metaArr) {
      if (metaArr[n].type == "category_id") {
        statItemID = metaArr[n].value;
      }
    }
    statInfoService.sendGATrackEvent(page.id + '_button', 'category_' + statItemID);

    if (LeftMenu.leftMenu.catList.$focusItem && LeftMenu.leftMenu.catList.$focusItem.subMenu) {
      LeftMenu.leftMenu.catList.blur();
      LeftMenu.leftMenu.catList.$focusItem.subMenu.focus();
      LeftMenu.leftMenu.catList.$focusItem.subMenu.focusIndex(data.$item.index);
    }
    LeftMenu.addSelectedClass(data.$item.data.id);
    menuNavigateService.navigateMenuItem(data.$item.data);
  }

  page.addListener('show', function (data) {
    //@TODO small hack for prevent focus on first carousel while mouseover
    if (page.arrowsWidget.mouse_used) {
      page.arrowsWidget.showArrows();
      page.arrowsWidget.down.show();
    }
    carussel = null;
    if (page.$lastFocus) {
      page.$lastFocus.focus();
    } else {
      page.content.focus();
    }
    LeftMenu.openSubMenu('movies_section');

    page.header.setTitle(i18nMgg('movies_section_title'));
    if (helpFunctions.isNavigateBack(data)) { //hardcoded
      var movie_data = helpFunctions.isRouteHasData(data);
      if(movie_data) {
        helpFunctions.updateWatchedHistory(page.activeComponent, movie_data);
      }
      return;
    }

    page.filter = 'subscription,free';

    if (data && data.data && data.data[0]) {
      try {
        page_info = JSON.parse(data.data[0]);
        page.slider_category_id = page_info.slider_category_id || page.slider_category_id;
        page.featured_group_id = page_info.featured_group_id || page.featured_group_id;
        page.filter = page_info.vod || page.filter;
      } catch (e) {
        console.log(e);
      }
    }
    page.initSortButtons();

    setDefaultParams(this);
    loadData();
  });

  page.addListener('hide', function () {
    page.arrowsWidget.removeClass('arrow-slider');
  });

  page.initSortButtons = function () {
    var sortButtons = [{
      title: i18nMgg('filter_all'),
      filter: 'subscription,free'
    }, {
      title: i18nMgg('filter_free'),
      filter: 'free'
    }, {
      title: i18nMgg('filter_subs'),
      filter: 'subscription'
    }];

    var sortButtonsIndex = 0;

    sortButtons.forEach(function (sortButton, i) {
      if (sortButton.filter == page.filter) {
        sortButtonsIndex = i;
      }
    });
    page.sortButtons.list.init({data: sortButtons, focusIndex: sortButtonsIndex});

    page.sortButtons.list.emit('click:item', {
      '$item': page.sortButtons.list.$focusItem,
      no_load: true
    });
  };

  function loadData() {
    var features = [],
      features_init = [],
      initData = [],
      current_menu_item,
      sub_menu_items,
      slider;

    Loader.show();
    page.resetScroll();
    //@TODO need to refactor queries
    api.load('slider', {
      category_id: page.slider_category_id,
      size: "big",
      vod: page.filter
    }).then(function (data) {
      slider = data.sliders;
    }, function (e) {
      return {
        error: e
      };
    }).then(function () {
      api.load('featuredGroup', {
        group_id: page.featured_group_id,
        required: 1,
        limit: page.feature_list_limit,
        offset: page.feature_list_offset,
        vod: page.filter
      }).then(function (data) {

        if (data.group && data.group.sub_featured) {
          features = data.group.sub_featured;
        }
        page.feature_list_total = data.total;

        if (slider && slider.length) {
          var supportedSliders = helpFunctions.filterSupportedSliders(slider);

          if (supportedSliders.length) {
            initData.push({
              data: supportedSliders,
              type: mainConfigMgg.itemTypes.ITEM_CAROUSEL
            });
          }
        }

        current_menu_item = app.dataStorage.categoriesMenu.filter(function (menu) {
          return menu.path == 'movies_section'; //here must be current path
        });

        sub_menu_items = [];
        if (current_menu_item.length && current_menu_item[0].children && current_menu_item[0].children.length) {
          sub_menu_items = current_menu_item[0].children.slice(0, 3);
        }

        if (sub_menu_items.length) {
          initData.push({
            data: sub_menu_items,
            type: mainConfigMgg.itemTypes.ITEM_CAT_LIST
          });
        }

        features.forEach(function (feature) {
          features_init.push({
            category_id: feature.id,
            data: [],
            type: mainConfigMgg.itemTypes.ITEM_FILM_LIST,
            title: feature.title,
            total_items: feature.video_total
          });
        });

        if (features_init.length) {
          //add data for first feature
          api.load('videoCollection', {
            id: features_init[0].category_id,
            vod: page.filter,
            limit: page.film_list_limit
          }).then(function (video) {


            if(isServe) {
              collectAnalyticsFeatureInfo(features_init[0].category_id, features_init[0].title, video.video_list)
            }

            features_init[0].data = video.video_list;
            initData = initData.concat(features_init);
            updateData(initData);
            Loader.hide();
          });
          page.categoryList.list.clear();
          if (sub_menu_items.length) {
            page.categoryList.list.init({data: sub_menu_items, focusIndex: 0});
          }
        } else {
          updateData(initData);
          Loader.hide();
        }
      })
    }).catchError(function (e) {
      console.log(e);
    });
  };

  function setDefaultParams(env) {
    env.start_loading_feature_list_index = 3;
    env.start_loading_films_list_index = 5;
    env.film_list_limit = 6;
    env.feature_list_limit = 5;
    env.feature_list_offset = '0';
    env.feature_list_total = 0;
    env.feature_load_complete = false;
  }
});

function pressBack() {
  Loader.hide();
  page.content.clear(); //@TODO refactor BACK-CLEAR
  router.back();
}

function lazyLoadFeaturedGroup($item) {
  if ((page.feature_list_offset + page.feature_list_limit <= page.feature_list_total)
    && ($item.index == page.content.size - page.start_loading_feature_list_index)
    && ($item.list.dataType == mainConfigMgg.itemTypes.ITEM_FILM_LIST)) {
    //@TODO need to use one load for basic load and lazy load
    page.feature_list_offset = parseInt(page.feature_list_offset) + page.feature_list_limit;
    api.load('featuredGroup', {
      group_id: page.featured_group_id,
      required: 1,
      limit: page.feature_list_limit,
      offset: page.feature_list_offset,
      vod: page.filter
    }).then(function (data) {
      var initLoadData = [];
      page.feature_list_total = data.total;
      if (data.group && data.group.sub_featured) {
        data.group.sub_featured.forEach(function (feature) {
          initLoadData.push({
            category_id: feature.id,
            data: [],
            type: mainConfigMgg.itemTypes.ITEM_FILM_LIST,
            title: feature.title,
            total_items: feature.video_total
          });
        });
      }

      page.content.addData(initLoadData);
      if (page.feature_list_offset + page.feature_list_limit >= page.feature_list_total) {
        page.feature_load_complete = true;
      }
    });
  }
}
function lazyLoadCollection(item) {
  if (item && !item.list.data.length && item.list.dataType == mainConfigMgg.itemTypes.ITEM_FILM_LIST) {
    api.load('videoCollection', {
      id: item.data.category_id,
      vod: page.filter,
      limit: page.film_list_limit
    }).then(function (video) {

      if(isServe) {
        collectAnalyticsFeatureInfo(item.data.category_id, item.data.title, video.video_list)
      }

      item.list.init({
        data: video.video_list,
        focusIndex: 0
      });
    })
  }
}

function showHideArrows() {
  setTimeout(function () {
    var focusItem = page.content ? page.content.$focusItem : null;

    if (focusItem && focusItem.list && focusItem.list.$focusItem) {
      var left_offset = focusItem.list.$node.style.left ? parseInt(focusItem.list.$node.style.left) : 0;
      var list_size = focusItem.list.total_items || focusItem.list.size;
      var diff_offset = focusItem.list.dataType == mainConfigMgg.itemTypes.ITEM_FILM_LIST ? 2 : 0;
      var total_offset = -focusItem.list.$focusItem.offsetWidth * (list_size - focusItem.list.scrollList.scrollSize - diff_offset);

      if (!left_offset) {
        page.arrowsWidget.left.hide();
      } else {
        page.arrowsWidget.left.show();
      }

      if (left_offset > total_offset) {
        page.arrowsWidget.right.show();
      } else {
        page.arrowsWidget.right.hide();
      }

      if (focusItem.index >= page.content.size - 1) {
        page.arrowsWidget.down.hide();
      } else {
        page.arrowsWidget.down.show();
      }

      if (!page.scrollTopValue) {
        page.arrowsWidget.up.hide();
        page.arrowsWidget.addClass('arrow-slider');
      } else {
        page.arrowsWidget.removeClass('arrow-slider');
        page.arrowsWidget.up.show();
      }
    }
  }, 0);
}

function collectAnalyticsFeatureInfo(featureID, title, videos){
  var feature = {
    id: featureID,
    title: 'Подборка - ' + featureID + ' ' + title,
    video_items: []
  };
  videos.forEach(function (video, key) {
    feature.video_items.push(key + 1 + ' ' + video.id + ' ' + video.title);
  });

  featured_analytics_info.push(feature);
}

// public
module.exports = page;

},{"core/animate":14,"core/api":15,"core/app":16,"core/components/button":19,"core/components/list":23,"core/components/page":25,"core/components/panel":26,"core/components/widget":30,"core/dom":31,"core/lib/helpFunctions":34,"core/router":45,"core/tools/menuNavigateService":49,"core/tools/statInfoService":53,"ui/film-item":119,"ui/slider-item":127,"vendor/aura/keys":133,"widgets/background/background":141,"widgets/loader":149,"widgets/menu-left":150}],63:[function(require,module,exports){
/**
 * MainMenu page implementation.
 *
 * @license GNU GENERAL PUBLIC LICENSE Version 3
 */

'use strict';

//TODO-Inna need fuuuul refactor!
//TODO-Inna needed tiny bit less refactor after buttons in lists

var id = 'pageMovie',
  LeftMenu = require('widgets/menu-left'),
  Page = require('core/components/page'),
  app = require('core/app'),
  paymentModel = require('core/paymentModel'),
  animate = require('core/animate'),
  Promise = require('core/promise'),
  Background = require('widgets/background'),
  keys = require('vendor/aura/keys'),
  List = require('core/components/list'),
  Panel = require('core/components/panel'),
  dom = require('core/dom'),
  api = require('core/api'),
  router = require('core/router'),
  Button = require('core/components/button'),
  FilmItemRender = require('ui/film-item'),
  ReviewItem = require('ui/review-item'),
  ActorItem = require('ui/actor-item'),
  EpisodeItem = require('ui/episode-item'),
  Loader = require('widgets/loader'),
  Tariffs = require('widgets/popup/popup-tariffs-tvod-dto'),
  helpFunctions = require('core/lib/helpFunctions'),
  subscriptionService = require('core/tools/subscriptionService'),
  PopUpPincode = require('widgets/popup/popup-pincode'),
  PopUpResults = require('widgets/popup/popup-results'),
  MovieInfo = require('ui/movie-info'),
  CoverImage = require('ui/cover-movie-img'),
  movieService = require('core/tools/movieService'),
  wVideoRestrictions = require('widgets/popup/popup-video-restrictions'),
  bubble = require('widgets/bubble'),
  iwatchPage = require('pages/movie/iwatch'),
  statInfoService = require('core/tools/statInfoService'),
  firstListItem, boughtText, isPaid, isSvod, isOnlyOneTariff;


var page = new Page({
  $node: document.getElementById(id),
  $body: document.getElementById(id + 'Container'),
  arrows: {up: {config: {paddingBottom: 90}}},
  className: 'movie-item',
  arrowsUpdate: showHideArrows,
  header: '',
  back_button: {
    'clickCallBack': function () {
      Loader.hide();
      router.back(page.movieRespond);
    }
  }
});

page.people_total = 0;


page.addListener('load', function () {


  var $title = document.getElementById('pageMovieTitle');
  var $cover = document.getElementById('pageMovieCover');

  var $description = document.getElementById('pageMovieDescription');

  var $pageMovieDigitalInfo = document.getElementById('pageMovieDigitalInfo');


  page.movieInfo = new MovieInfo();
  $pageMovieDigitalInfo.appendChild(page.movieInfo.container);

  page.movieCover = new CoverImage();

  $cover.appendChild(page.movieCover.container);

  isPaid = false;
  isSvod = false;
  boughtText = '';
  isOnlyOneTariff = false;

  page.$$watchLater = new Button({
    $node: 'pageMovieWatchLater',
    events: {
      focus: function () {
        page.scrollTop(0);
        page.$$lastFocus = this;
        page.movieCover.container.style.display = 'block';
      },
      click: function (data) {

        bubble.hide();
        bubble.show({
          icon: !page.movieRespond.is_favorite ? 'icon-add-watch-later' : 'icon-remove-watch-later',
          text: i18nMgg(!page.movieRespond.is_favorite ? ('movie_add_watch_later') : ('movie_remove_watch_later')),
        });

        var query = 'userFavoriteAdd';
        var is_favorite = true;
        var watch_button_text = 'favourite_remove';
        page.$$watchLater.addClass('click');

        if (page.movieRespond.is_favorite) {
          query = 'userFavoriteDelete';
          is_favorite = false;
          watch_button_text = 'favourite_add';
          page.$$watchLater.removeClass('click');
        }

        page.movieRespond.is_favorite = is_favorite;
        page.$$watchLater.setValue(i18nMgg(watch_button_text));
        api.load(query, {video_id: page.movieRespond.id}).then(function (data) {
          iwatchPage.toggleIwatchItem(page.movieRespond, query);
        })
      },
      mouseover: function (data) {
        if (page.activeComponent == this) {
          return;
        }
        this.focus();
        showHideArrows();
      },
      'mousewheel': function (event) {
        emitMouseWheel(event);
      }
    },
    keys: {
      RIGHT: function () {
        page.$$detail.focus();
      },
      LEFT: function () {
        page.backButton.focusButton(this);
      },
      UP: function () {
        page.contentTopButtons.focus();
      },
      DOWN: function () {
        if (page.contentBottom.data.length) {
          page.movieCover.container.style.display = 'none';
          page.contentBottom.focus();
        }
      },
      RETURN: function () {
        page.backButton.emit('click');
      }
    }
  });

  page.$$detail = new Button({
    $node: 'pageMovieDetail',
    events: {
      focus: function () {
        page.$$lastFocus = this;
        page.movieCover.container.style.display = 'block';
      },
      'click': function (event) {
        router.navigate('pageMovieDetailed', [
          page.movieRespond
        ]);
      },
      mouseover: function (data) {
        if (page.activeComponent == this) {
          return;
        }
        this.focus();
        showHideArrows();
      },
      'mousewheel': function (event) {
        emitMouseWheel(event);
      }
    },
    keys: {
      LEFT: function () {
        page.$$watchLater.focus();
      },
      RIGHT: function () {
        page.$$like.focus();
      },
      UP: function () {
        page.contentTopButtons.focus();
      },
      DOWN: function () {
        if (page.contentBottom.data.length) {
          page.movieCover.container.style.display = 'none';
          page.contentBottom.focus();
        }
      },
      RETURN: function () {
        page.backButton.emit('click');
      }
    }
  });

  page.$$like = new Button({
    $node: 'pageMovieLike',
    events: {
      focus: function () {
        page.$$lastFocus = this;
        page.movieCover.container.style.display = 'block';
      },
      click: function () {
        var $curr = [];
        for (var n in this.$node.classList) {
          $curr.push(this.$node.classList[n]);
        }

        if ($curr.indexOf('click') == -1) {
          page.$$like.$node.classList.add('click');
          api.load('addVote', {
            video_id: page.movieRespond.id,
            like: 1
          }).then(function (data) {
            page.$$like.$text.textContent = data.like;
            page.$$dislike.$node.classList.remove('click');
            page.$$dislike.$text.textContent = data.dislike;
          });
        }
      },
      mouseover: function () {
        if (page.activeComponent == this) {
          return;
        }
        this.focus();
        showHideArrows();
      },
      'mousewheel': function (event) {
        emitMouseWheel(event);
      }
    },
    keys: {
      LEFT: function () {
        page.$$detail.focus();
      },
      RIGHT: function () {
        page.$$dislike.focus();
      },
      UP: function () {
        page.contentTopButtons.focus();
      },
      DOWN: function () {
        if (page.contentBottom.data.length) {
          page.movieCover.container.style.display = 'none';
          page.contentBottom.focus();
        }
      },
      RETURN: function () {
        page.backButton.emit('click');
      }
    }
  });

  page.$$dislike = new Button({
    $node: 'pageMovieDislike',
    events: {
      focus: function () {
        page.$$lastFocus = this;
        page.movieCover.container.style.display = 'block';
      },
      click: function () {
        var $curr = [];
        for (var n in this.$node.classList) {
          $curr.push(this.$node.classList[n]);
        }

        if ($curr.indexOf('click') == -1) {
          page.$$dislike.$node.classList.add('click');
          api.load('addVote', {
            video_id: page.movieRespond.id,
            like: -1
          }).then(function (data) {
            page.$$like.$text.textContent = data.like;
            page.$$like.$node.classList.remove('click');
            page.$$dislike.$text.textContent = data.dislike;
          });
        }
      },
      mouseover: function (data) {
        if (page.activeComponent == this) {
          return;
        }
        this.focus();
        showHideArrows();
      },
      'mousewheel': function (event) {
        emitMouseWheel(event);
      }
    },
    keys: {
      LEFT: function () {
        page.$$like.focus();
      },
      UP: function () {
        page.contentTopButtons.focus();
      },
      DOWN: function () {
        if (page.contentBottom.data.length) {
          page.movieCover.container.style.display = 'none';
          page.contentBottom.focus();
        }
      },
      RETURN: function () {
        page.backButton.emit('click');
      }
    }
  });

  page.contentTop = new Panel({
    $node: 'pageMovieTop',
    focusable: true
  });

  page.contentTopButtons = new List({
    $node: 'pageMovieWatch',
    type: List.prototype.TYPE_HORIZONTAL,
    className: 'clearfix',
    keys: {
      UP: function () {
        page.backButton.focusButton(this);
      },
      DOWN: function () {
        page.$$watchLater.focus();
      },
      RETURN: function () {
        page.backButton.emit('click');
      }
    },
    events: {
      'click:item': function (data) {
        // statInfoService.sendGATrackEvent(page.id, data.$item.data.action);
        this.emit(data.$item.data.action);
      },
      'overflow': function (data) {
        if (data.direction === keys.LEFT && data.type !== 'mousewheel') {
          page.backButton.focusButton(this);
        }
        if (data.direction === keys.RIGHT) {
          page.$$detail.focus();
        }
      },
      mouseover: function (data) {
        this.focus();
        this.focusItem(data.$item, {no_emit: true});
        showHideArrows();
      },
      'focus': function (data) {
        page.movieCover.container.style.display = 'block';
        page.scrollTop(0);
        page.$$lastFocus = this;
      },
      'mousewheel': function (event) {
        if (event.deltaY > 0) {
          this.emit('keydown', {
            'keyCode': keys.DOWN
          });
        }
      }
    },
    render: function ($item, data) {
      $item.classList.add('button');
      $item.appendChild(dom.tag('div', {className: "text"}, data.title));
    }
  });

  page.contentBottom = new List({
    $node: 'pageMovieBottom',
    className: 'movie_bottom__list',
    type: List.prototype.TYPE_VERTICAL,
    focusIndex: 0,
    cycle: false,
    visible: true,
    keys: {
      RETURN: function () {
        page.backButton.emit('click');
      }
    },
    events: {
      'focus': function (data) {
        page.scrollTop(530);
        if (this.$focusItem) {
          this.$focusItem.list.focus();
        } else {
          this.focusIndex(0);
          this.$focusItem.list.focus();
        }

        //page.header.shadeOn();

        firstListItem.classList.remove('first-item')
      },
      'focus:item': function (data) {
        if(data.$prev && data.$prev.list) {
          data.$prev.list.removeClass('active')
        }
        data.$curr.list.addClass('active')
        data.$curr.list.focus();

        switch (data.$curr.index) {
          case 0 :
            page.scrollTop(530);
            break;
          case 1 :
            page.scrollTop(1100);
            break;
          case 2 :
            page.scrollTop(1670);
            break;
          case 3 :
            page.scrollTop(2240);
            break;
        }
        if (data.$curr.index == this.size - 1) {
          page.arrowsWidget.down.hide();
        } else {
          page.arrowsWidget.down.show();
        }
      },
      'click:item': function (data) {
      },
      'mouseover': function (data) {
        this.focusItem(data.$item, {no_emit: true});
      },
      overflow: function (data) {
        if (data.direction === keys.UP) {
          this.$focusItem.classList.remove('focus');
          console.log(this.$focusItem)
          this.$focusItem.list.removeClass('active');
          this.$focusItem = null;
          page.$$watchLater.focus();
          page.header.shadeOff();
          firstListItem.classList.add('first-item');

        }
      }
    },
    render: function ($item, data) {
      if (!$item.index) {
        firstListItem = $item;
        firstListItem.classList.add('first-item')
      }

      if (data.type == 'series') {
        var episodes_list = data.renderData.episode_list;
        if (episodes_list && episodes_list.length
          && page.movieRespond.season_list.length > 1) {
          episodes_list = JSON.parse(JSON.stringify(data.renderData.episode_list));//clone array
          episodes_list.push({
            id: 'all_episodes',
            title: i18nMgg('all_episodes')
          })
        }

        page.activeSeason = data.renderData.id;

        $item.list = new List({
          $node: dom.add(dom.tag('div', {
            id: 'pageMovieEpisodes'
          })),
          className: 'episodesList',
          type: List.prototype.TYPE_HORIZONTAL,
          data: episodes_list,
          focusIndex: data.focusIndex || 0,
          cycle: false,
          dataType: 'episodes',
          scrollList: {
            startIndex: 0,
            stopIndex: 2,
            scrollSize: 1,
            speed: mainConfigMgg.animation.duration.speed2
          },
          keys: {
            UP: function () {
              page.contentBottom.move(keys.UP);
            },
            DOWN: function () {
              page.contentBottom.move(keys.DOWN);
            },
            RETURN: function () {
              page.backButton.emit('click');
            }
          },
          events: {
            'mouseover': function (data) {
              this.focus();
              this.focusItem(data.$item, {no_emit: true});
              showHideArrows();
            },
            'mousewheel': function (event) {
              emitMouseWheel(event);
            },
            'click:item': function (data) {
              var episodeID = data.$item.data.id;
              if (episodeID == 'all_episodes') {
                page.contentTopButtons.emit('episodes');
              } else {
                movieService.clickWatchButton(page.movieRespond, page, true, episodeID);
              }

            },
            focus: function () {
              page.$$lastFocus = this;
            },
            overflow: function (data) {
              if (data.direction === keys.LEFT && data.type !== 'mousewheel') {
                page.backButton.focusButton(this);
              }
            }
          },
          render: function ($item, data) {
            if (data.id == "all_episodes") {
              $item.classList.add('episode-item');
              $item.appendChild(dom.tag('div', {className: "all_series"}, data.title));
            }
            else {
              new EpisodeItem($item, data);
            }
          }
        });

        var sectionTitle = '';

        if (data.renderData.fullTitle) {
          sectionTitle = dom.tag('span', {className: 'grey-label'}, data.renderData.fullTitle)
        }

        $item.listItemTitle = new Panel({
          $node: dom.add(dom.tag('div', {
            className: 'panelTitle'
          }), data.renderData.title + ' ', sectionTitle),
          focusable: false
        });

      } else if (data.type == 'people') {

        var itemIndex = 0;

        var renderData = data.renderData;

        for (var i = 0, itemsPeople = renderData.length; i < itemsPeople; i++) {
          for (var j = 0, itemPeople = renderData[i].items.length; j < itemPeople; j++) {
            renderData[i].items[j].itemIndex = itemIndex;
            itemIndex++;
          }
        }

        page.people_total = itemIndex;

        page.people_list = $item.list = new List({
          type: List.prototype.TYPE_HORIZONTAL,
          $node: dom.add(dom.tag('div', {
            id: 'pageMovieActors'
          })),
          data: data.renderData,
          focusIndex: 0,
          events: {
            'mouseover': function (data) {
              this.focusItem(data.$item, {no_emit: true});
            },
            'focus': function (data) {
              page.$$lastFocus = this;

              if (this.$focusItem) {
                this.$focusItem.list.focus();
              }
            },
            'focus:item': function (data) {
              data.$curr.list.focus();

            },
            overflow: function (data) {
              if (data.direction === keys.LEFT && data.type !== 'mousewheel') {
                page.backButton.focusButton(this);
              }
            }
          },
          render: function ($peopleItem, data) {
            $peopleItem.classList.add('actorList');
            $peopleItem.peopleTitle = dom.tag('div', {
              className: 'peopleTitle'
            }, data.type);


            $peopleItem.list = new List({
              type: List.prototype.TYPE_HORIZONTAL,
              data: data.items,
              size: data.items.length,
              className: 'peopleList',
              focusIndex: 0,
              cycle: false,
              dataType: 'people',
              visible: true,
              keys: {
                UP: function () {
                  page.contentBottom.move(keys.UP);
                },
                DOWN: function () {
                  page.contentBottom.move(keys.DOWN);
                },
                RETURN: function () {
                  page.backButton.emit('click');
                },
                PAGE_DOWN: function () {
                  this.move(keys.RIGHT);
                },
                PAGE_UP: function () {
                  this.move(keys.LEFT);
                }
              },
              events: {
                'focus': function (data) {
                },
                'focus:item': function (data) {
                  var actorsContainer = document.getElementById('pageMovieActors');
                  if (!actorsContainer) return;

                  var $people_item = data.$curr;
                  var value = 0;
                  if ($people_item.data.itemIndex < (page.people_total - 1)) {
                    var margin = parseInt(window.getComputedStyle($people_item).marginRight) || 0;
                    value = $people_item.data.itemIndex > 3 ? -1 * (($people_item.data.itemIndex - 3) * ($people_item.clientWidth + margin)) : 0;
                    animate(actorsContainer, mainConfigMgg.animation.duration.speed2, {
                      left: value
                    });
                  }

                },
                'mouseover': function (data) {
                  this.focus();
                  this.focusItem(data.$item, {no_emit: true});
                  showHideArrows();
                },
                'mousewheel': function (event) {
                  emitMouseWheel(event);
                },
                'overflow': function (data) {
                  if (data.direction === keys.RIGHT) {
                    if ($item.list.$focusItem.index < ($item.list.size - 1)) {
                      $item.list.move(keys.RIGHT);
                      $item.list.$focusItem.list.focusIndex(0);
                    }
                  } else if (data.direction === keys.LEFT) {
                    //if ($item.list.$focusItem.index){

                    $item.list.move(keys.LEFT);
                    //$item.list.$focusItem.peopleList.focusIndex(list.$focusItem.list.size);
                    //}
                  }
                  else if (data.direction === keys.UP) {

                  }

                  $item.list.$focusItem.list.emit('focus:item', {
                    $curr: $item.list.$focusItem.list.$focusItem
                  });
                },
                'click:item': function (data) {
                  router.navigate('pageActorDetailed', [
                    data.$item.data.id
                  ]);
                }
              },
              render: function ($item, data) {
                $item.classList.add('actor-item');
                new ActorItem($item, data);
              }
            });

            $peopleItem.appendChild($peopleItem.peopleTitle);
            $peopleItem.appendChild($peopleItem.list.$node);
          }
        });
      } else if (data.type == 'reviews') {
        data.renderData.push({
          id: 'all_rewies',
          text: i18nMgg('all_rewies')
        });
        $item.list = new List({
          $node: dom.add(dom.tag('div', {
            id: 'pageMovieReviewsWrap'
          })),
          // $node: 'pageMovieReviewsWrap',
          className: 'movie-comments__list',
          type: List.prototype.TYPE_HORIZONTAL,
          cycle: false,
          data: data.renderData,
          dataType: 'reviews',
          focusIndex: 0,
          scrollList: {
            startIndex: 0,
            stopIndex: 1,
            scrollSize: 1,
            speed: mainConfigMgg.animation.duration.speed2
          },
          visible: true,
          keys: {
            UP: function () {
              page.contentBottom.move(keys.UP);
            },
            DOWN: function () {
              page.contentBottom.move(keys.DOWN);
            },
            RETURN: function () {
              page.backButton.emit('click');
            }
          },
          events: {
            'mouseover': function (data) {
              this.focus();
              this.focusItem(data.$item, {no_emit: true});
              showHideArrows();
            },
            'mousewheel': function (event) {
              emitMouseWheel(event);
            },
            'focus': function (data) {
              page.$$lastFocus = this;
            },
            'focus:item': function (data) {
            },
            'click:item': function (data) {
              router.navigate('pageReviews', [
                page.movieRespond.id, data.$item.index
              ]);

            },
            overflow: function (data) {
              if (data.direction === keys.LEFT && data.type !== 'mousewheel') {
                page.backButton.focusButton(this);
              }
            }
          },
          render: function ($item, data) {
            $item.classList.add('comment');
            if (data.id != "all_rewies") {
              new ReviewItem($item, data, 'small');
            }
            else {
              $item.innerHTML = "<div class='all_rewies'>" + data.text + "</div>";
            }

          }
        });
        $item.listTitle = dom.tag('div', {
          className: 'listTitle'
        }, i18nMgg('reviews'));

      } else if (data.type == 'recommended') {
        $item.list = new List({
          $node: dom.add(dom.tag('div', {
              id: 'pageMovieRelated'
            },
            $item.listTitle = dom.tag('div', {
              className: 'listTitle'
            }, i18nMgg('related'))
          )),
          //  $node: 'pageMovieRelated',
          className: 'filmsList',
          type: List.prototype.TYPE_HORIZONTAL,
          size: data.renderData.length,
          data: data.renderData,
          dataType: 'movieRelated',
          focusIndex: 0,
          keys: {
            UP: function () {
              page.contentBottom.move(keys.UP);
            },
            DOWN: function () {
              page.contentBottom.move(keys.DOWN);
            },
            RETURN: function () {
              page.backButton.emit('click');
            }
          },
          events: {
            'mouseover': function (data) {
              this.focus();
              this.focusItem(data.$item, {no_emit: true});
            },
            'mousewheel': function (event) {
              emitMouseWheel(event);
            },
            'click:item': function (data) {
              router.navigate('pageMovie', [
                data.$item.data.id
              ]);
            },
            focus: function () {
              page.$$lastFocus = this;
            },
            overflow: function (data) {
              if (data.direction === keys.LEFT && data.type !== 'mousewheel') {
                page.backButton.focusButton(this);
              }
            }
          },
          render: function ($item, data) {
            FilmItemRender($item, data);
          }
        });
        $item.listTitle = dom.tag('div', {
          className: 'listTitle'
        }, i18nMgg('related'));
      }
      if ($item.listTitle) {
        $item.list.$node.appendChild($item.listTitle);
      }
      if ($item.listItemTitle) {
        $item.appendChild($item.listItemTitle.$node);
      }
      $item.appendChild($item.list.$node);

    }

  });

  page.contentTop.add(page.contentTopButtons);
  page.add(page.contentTop);
  page.add(page.contentBottom);

// load video info
  page.addListener('show', function show(data) {
    page.arrowsWidget.addClass('page-back-button');
    page.backButton.addClass('short');

    page.focusSeasonIndex = 0;
    page.focusEpisodeIndex = 0;
    page.seasonRespond = null;

    PopUpPincode.addListener('hide', hidePinPopUpCallback);
    PopUpResults.addListener('hide', hidePopUpResultsCallback);
    PopUpPincode.addListener('correctPinVideoAge', correctPinVideoAgeCallback);

    var description = document.getElementById('payment-choice__title');
    description.innerHTML = i18nMgg('select_pay_type_text');
    page.$$detail.setValue(i18nMgg('more_info_button'));
    page.header.shadeOff();
    //Background.show();

    if (helpFunctions.isNavigateBack(data)) {
      var isFromPlayer = data.data[0].data && data.data[0].data.fromPlayer || false;

      if (isFromPlayer) {
        updateWatchedHistoryInfo(page.movieRespond.id).then(function () {
          api.load('userFavoritesByIds', {video_ids: page.movieRespond.id})
            .then(function (data) {
              if(!page.active) {
                return;
              }
              if (Array.isArray(data.video_ids) && data.video_ids.indexOf(page.movieRespond.id) >= 0) {
                page.$$watchLater.setValue(i18nMgg('favourite_remove'));
                page.$$watchLater.addClass('click');
              } else {
                page.$$watchLater.setValue(i18nMgg('favourite_add'));
                page.$$watchLater.removeClass('click');
              }
            });

          if (PopUpResults.visible) {
            page.$$lastFocus = page.contentTopButtons.focus();
          } else {
            if (page.$$lastFocus) {
              page.$$lastFocus.focus();
            } else {
              page.contentTopButtons.focus();
            }

          }
          if (page.isTrailerPlayed) {
            page.isTrailerPlayed = false;
            page.emit('watchTrailerPayment');
          }
          Loader.hide();
          showHideArrows();
        });
      } else {
        if (PopUpResults.visible) {
          page.$$lastFocus = page.contentTopButtons.focus();
        } else {
          if (page.$$lastFocus) {
            page.$$lastFocus.focus();
          } else {
            page.contentTopButtons.focus();
          }
        }
        if (page.isTrailerPlayed) {
          page.isTrailerPlayed = false;
          page.emit('watchTrailerPayment');
        }
     //   Loader.hide();
        showHideArrows();
      }
      return;
    }


    if (data && data.data) {
      page.isTrailerPlayed = false;

      var film_id = data.data.id ? data.data.id : data.data[0];
      var isShowTariffs = data.data[1] && data.data[1] == 'tariffs';
      var chosenTariff;
      if (isShowTariffs) {
        chosenTariff = data.data[2] || '';
      }

      Loader.show();
      api.load('videoInfo', {
        id: film_id
      }).then(function (data) {
        if(!page.active) {
          return;
        }
        if (data.restriction && data.restriction == 'invalid') {
          wVideoRestrictions.show({
            title: data.title
          });
          Loader.hide();
        } else {
          page.movieRespond = data;
          page.movieInfo.setData(page.movieRespond);
          page.movieCover.setData(page.movieRespond);

          page.movieCover.setWatchedHistoryData(page.movieRespond.watched_history);

          $title.textContent = page.movieRespond.title || '';

          var movieButtonsData = getMovieButtonsList(page.movieRespond);
          page.contentTopButtons.clear();
          page.contentTopButtons.init({
            data: movieButtonsData,
            focusIndex: 0
          });

          //var backgroundImageURl = page.movieRespond.image && page.movieRespond.image.big.length ? page.movieRespond.image.big : page.movieRespond.image.small;
          //Background.setImage(backgroundImageURl, true);

          // For movieService.clickWatchButton
          page.movieRespond.isSvod = isSvod;
          page.movieRespond.isPaid = isPaid;

          page.movieCover.setBoughtTextData(boughtText);

          setDescriptionLikeDislikeData(page.movieRespond, $title, $description);

          if (page.movieRespond.is_favorite) {
            page.$$watchLater.setValue(i18nMgg('favourite_remove'));
            page.$$watchLater.addClass('click');
          } else {
            page.$$watchLater.setValue(i18nMgg('favourite_add'));
            page.$$watchLater.removeClass('click');
          }

          getWatchedEpisodes(page.movieRespond).then(function (data) {
            if(!page.active) {
              return;
            }
            if (data) page.seasonRespond = data;

            api.load('videoReviews', {
              video_id: page.movieRespond.id,
              limit: 10
            }).then(function (data) {
              if(!page.active) {
                return;
              }
              page.reviewsRespond = data;

              var wssInfo = {};

              if (page.movieRespond.series_last_watched) wssInfo.series_last_watched = page.movieRespond.series_last_watched;
              if (page.movieRespond.watched_history) wssInfo.watched_history = page.movieRespond.watched_history;


              var bottomPageData = getBottomDataList(page.movieRespond, page.reviewsRespond, page.seasonRespond, wssInfo);
              page.contentBottom.clear();
              page.contentBottom.init({
                data: bottomPageData
              });

              page.contentTopButtons.focus();
              showHideArrows();
              if (PopUpResults.visible) {
                PopUpResults.resultButton.focus();
              }

              if (chosenTariff) {
                page.emit('watchTrailerPayment', {tariffID: chosenTariff});
              } else if (isShowTariffs) {
                page.emit('watchTrailerPayment');
                Loader.hide();
              }else{
                Loader.hide();
              }

            });
          });
        }
      });
    } else {
      Loader.hide();
    }
  });

  page.addListener('hide', function () {
    page.arrowsWidget.removeClass('page-back-button');
    page.backButton.removeClass('short');
    wVideoRestrictions.hide('no_emit');
    PopUpPincode.removeListener('hide', hidePinPopUpCallback);
    PopUpResults.removeListener('hide', hidePopUpResultsCallback);
    PopUpPincode.removeListener('correctPinVideoAge', correctPinVideoAgeCallback);
  });

  page.addListener('watchTrailerPayment', watchTrailerPaymentCallback);

  page.contentTopButtons.addListener('watch', function () {
    movieService.clickWatchButton(page.movieRespond, page, false);
  });

  page.contentTopButtons.addListener('trailer', function () {
    var movie = page.movieRespond;
    page.isTrailerPlayed = true;
    movieService.clickWatchTrailerButton(movie, page);
  });

  page.contentTopButtons.addListener('episodes', function () {
    var movie = page.movieRespond;
    movie.season_list[0].episode_list = [];

    if (movie.series_last_watched) {
      movie.season_list.some(function (item, index) {
        if (item.id == movie.series_last_watched.season_id) {
          page.focusSeasonIndex = index;
          return index;
        }
      });
    }

    var seasonsInfo = {
      movieInfo: movie,
      movieTitle: movie.title,
      seasons: movie.season_list,
      isAvailable: movie.is_available,
      focusSeasonIndex: page.focusSeasonIndex,
      focusEpisodeIndex: page.focusEpisodeIndex
    };
    router.navigate('pageMovieSeasons', [
      movie.id, seasonsInfo
    ]);

  });

  page.contentTopButtons.addListener('advert_free', function () {
    var saleSubscription = subscriptionService.getFirstSalesSubscription();
    var movie = page.movieRespond;
    statInfoService.sendGATrackEvent('no_ads_button', 'click_no_ads_button');
    movieService.clickAdsFreeButton(movie, saleSubscription);
  });

  page.clearPaymentData = function () {
    var movie = page.movieRespond;
    if (!movie.is_available) {
      paymentModel.init(paymentModel.getDefaultData());
    }
  };


});


function sortPeopleByType(items) {
  var sortedPeopleCollection = {};
  var sortedPeopleArray = [];

  for (var i = 0; i < items.length; i++) {
    if (i < items.length) {
      var type = items[i].type;
      sortedPeopleCollection[type] = sortedPeopleCollection[type] || [];
      sortedPeopleCollection[type].push(items[i]);
    }
  }

  for (var n in sortedPeopleCollection) {
    var item = {
      type: i18nMgg('movie_' + n.toLowerCase() + '_title'),
      items: sortedPeopleCollection[n]
    };
    sortedPeopleArray.push(item)
  }

  sortedPeopleArray.sort(function (a, b) {
    return b.items.length - a.items.length;
  });

  return sortedPeopleArray;
};

function getBottomDataList(movieData, reviewsData, seasonData, wssInfo) {
  var bottomDataList = [];

  if (movieData.is_series && movieData.season_list.length) {
    var seriesData = [];
    var seasonIndex = 0;
    seriesData[seasonIndex] = movieData.season_list[0];

    if (wssInfo.series_last_watched) {
      movieData.season_list.some(function (item, index) {
        if (item.id == wssInfo.series_last_watched.season_id) {
          seasonIndex = index;
          return index;
        }
      });

      if (seasonData) {
        seriesData[seasonIndex] = {};
        seriesData[seasonIndex].episode_list = seasonData;
        seriesData[seasonIndex].title = wssInfo.series_last_watched.season_title;
        seriesData[seasonIndex].season_last_watched = wssInfo.series_last_watched.season_id;
        seriesData[seasonIndex].id = wssInfo.series_last_watched.season_id;
      }

      if (seriesData[seasonIndex] && seriesData[seasonIndex].episode_list) {
        seriesData[seasonIndex].episode_list.some(function (item, index) {
          if (item.id == wssInfo.series_last_watched.episode_id) {
            item.isCurrentWatched = true;
            page.focusEpisodeIndex = index;
            return index;
          }
        });
      }
    }

    var seasonListLength = movieData.season_list.length;

    if (seasonListLength == 1) {
      seriesData[seasonIndex].fullTitle = '(' + i18nMgg('total_of') + ' ' + seriesData[seasonIndex].episode_list.length + ' ' + helpFunctions.getValueText(seriesData[seasonIndex].episode_list.length, 'episode_number') + ')';
    }

    if (seasonListLength > 1) {
      seriesData[seasonIndex].fullTitle = '(' + i18nMgg('total_of') + ' ' + seasonListLength + ' ' + helpFunctions.getValueText(seasonListLength, 'season') + ')';
    }

    bottomDataList.push({
      type: 'series',
      renderData: seriesData[seasonIndex],
      focusIndex: page.focusEpisodeIndex
    })
  }

  if (movieData.people && movieData.people.length) {
    var sortedPeopleData = sortPeopleByType(movieData.people);
    bottomDataList.push({
      type: 'people',
      renderData: sortedPeopleData
    })
  }

  if (reviewsData && reviewsData.total > 0) {
    bottomDataList.push({
      type: 'reviews',
      renderData: reviewsData.comments
    })
  }

  if (movieData.recommended_videos && movieData.recommended_videos.length) {
    bottomDataList.push({
      type: 'recommended',
      renderData: movieData.recommended_videos
    })
  }

  return bottomDataList;
}
function getMovieButtonsList(movieData) {
  var movieButtonsData = [{
    title: getWatchMovieButtonText(),
    className: 'icon-watch',
    action: 'watch'
  }];

  var hasTrailer = movieData.trailer_id;
  var hasSeries = movieData.is_series && movieData.season_list.length > 0;

  if (hasTrailer) {
    movieButtonsData.push({
      title: i18nMgg('trailer'),
      className: 'icon-trailer',
      action: 'trailer'
    })
  }

  if (hasSeries) {

    var buttonText = i18nMgg('episodes');

    if (movieData.season_list && movieData.season_list.length) {
      var seasonList = movieData.season_list;
      var seasonListLenght = seasonList.length;

      if (seasonListLenght == 1) {
        if (seasonList[0].episode_list && seasonList[0].episode_list.length)
          buttonText = seasonList[0].episode_list.length + ' ' + helpFunctions.getValueText(seasonList[0].episode_list.length, 'episode_number')
      }

      if (seasonListLenght > 1) {
        buttonText = seasonListLenght + ' ' + helpFunctions.getValueText(seasonListLenght, 'season');
      }

    }

    movieButtonsData.push({
      title: buttonText, //i18nMgg('episodes'),
      className: 'icon-episodes',
      action: 'episodes'
    })
  }

  // STV-892 ONLY for LG vendor
  if (mainConfigMgg.deviceInfo.vendor == 'lg' && !(hasTrailer && hasSeries) && !subscriptionService.hasSubscriptionByType('main') && !page.movieRespond.is_selling && page.movieRespond.is_available) {
    movieButtonsData.push({
      title: i18nMgg('advert_free'),
      className: 'icon-advert_free',
      action: 'advert_free'
    })
  }

  return movieButtonsData;
}
function setDescriptionLikeDislikeData(movieData, $title, $description) {
  page.$$like.$node.classList.remove('click');
  page.$$dislike.$node.classList.remove('click');

  if (movieData.vote == 1) {
    page.$$like.$node.classList.add('click');
  }

  if (movieData.vote == -1) {
    page.$$dislike.$node.classList.add('click');
  }

  page.$$like.$text.textContent = movieData.like || '0';
  page.$$dislike.$text.textContent = movieData.dislike || '0';

  if (movieData.description) {
    if ($title.getBoundingClientRect().height > 70) {

      if (movieData.description.length > 170) {
        $description.innerHTML = movieData.description.slice(0, 167) + '...';
      } else {
        $description.innerHTML = movieData.description;
      }
    } else {

      if (movieData.description.length > 260) {
        $description.innerHTML = movieData.description.slice(0, 257) + '...';
      } else {
        $description.innerHTML = movieData.description;
      }
    }
  }
}
function getWatchMovieButtonText() {
  var textButton = i18nMgg('watch');
  var deliveryRules = page.movieRespond.delivery_rules;
  var isAvailable = page.movieRespond.is_available;

  var tvod = false, dto = false, svod = false;

  for (var n in deliveryRules) {
    if (deliveryRules[n] == 'tvod') tvod = true;
    if (deliveryRules[n] == 'dto') dto = true;
    if (deliveryRules[n] == 'svod') svod = true;
  }

  boughtText = '';

  if (isAvailable && svod) {
    var subsIDs = page.movieRespond.purchase_info['svod'].subscriptions;
    if (subsIDs) {
      var boughtSubscription = getFirstBoughtSubscription(subsIDs);
      if (boughtSubscription) {
        boughtText = i18nMgg('subscription') + ' "' + boughtSubscription.title + '" ' + i18nMgg('until') + ' ' + boughtSubscription.expires
      }
    }
  }

  if (isAvailable && (tvod || dto)) {
    if (page.movieRespond.purchase_info['tvod'] && page.movieRespond.purchase_info['tvod'].period) {
      boughtText = getLeftTimeText('tvod', page.movieRespond.purchase_info['tvod'].expires);
    } else if (page.movieRespond.purchase_info['dto'] && page.movieRespond.purchase_info['dto'].expires) {
      boughtText = getLeftTimeText('dto');
    }
  }

  if (!isAvailable && svod) {
    isSvod = true;
    isPaid = false;
    boughtText = '';
    return i18nMgg('by_subs');
  }

  if (!isAvailable && (tvod || dto)) {
    isPaid = true;
    isSvod = false;
    boughtText = '';
    var cheapestTariff = getCheapestTariffPrice();
    var price = paymentModel.defaultEvents.getGeoPriceFromData(cheapestTariff.price, cheapestTariff.currency, cheapestTariff.currencyID);

    if (tvod && dto) {
      return i18nMgg('watch_from') + ' ' + price;
    } else {
      if (isOnlyOneTariff) {
        return i18nMgg('watch_for') + ' ' + price;
      } else {
        return i18nMgg('watch_from') + ' ' + price;
      }
    }
  }
  return textButton;
}
function getCheapestTariffPrice() {
  var prices = [];
  var currencyID, currency;
  var purchaseInfo = page.movieRespond.purchase_info;

  function sortNumber(a, b) {
    return a - b;
  }

  for (var i in purchaseInfo) {
    currencyID = purchaseInfo[i].subscriptions[0].currency_id;
    currency = purchaseInfo[i].subscriptions[0].currency;
    for (var j in purchaseInfo[i].subscriptions[0].tariffs) {
      prices.push(purchaseInfo[i].subscriptions[0].tariffs[j].price);
    }
  }

  isOnlyOneTariff = (prices.length == 1);

  prices.sort(sortNumber);
  return {
    price: prices[0],
    currencyID: currencyID,
    currency: currency
  };
}
function getFirstBoughtSubscription(subscriptionsIDs) {
  for (var i = 0; i < subscriptionsIDs.length; i++) {
    var subscription = subscriptionService.getSubscriptionById(subscriptionsIDs[i]);
    var expirationDate = subscription.expiration_date;
    if (expirationDate) {
      return {
        title: subscription.title,
        expires: subscriptionService.getExpirationDate(subscription)
      }
    }
  }
}
function getLeftTimeText(tvodRule, leftData) {
  var leftTimeText = '';

  if (tvodRule == 'svod') {

  } else if (tvodRule == 'tvod') {
    var dayInSec = 86400;
    var hoursInSec = 3600;
    var days, remDays, remHours, hours, minutes;
    days = Math.floor(leftData / dayInSec);
    remDays = leftData % dayInSec;
    hours = Math.floor(remDays / hoursInSec);
    remHours = remDays % hoursInSec;
    minutes = Math.floor(remHours / 60);

    var period = page.movieRespond.purchase_info['tvod'].period;

    if (days !== 0 && hours !== 0) {
      return i18nMgg('open_access_for') + ' ' + days + ' ' + helpFunctions.getValueText(days, 'day') + ' '
        + i18nMgg('and') + ' ' + hours + ' ' + helpFunctions.getValueText(hours, 'hour');
    }
    if (days !== 0 && hours === 0) {
      return i18nMgg('open_access_for') + ' ' + days + ' ' + helpFunctions.getValueText(days, 'day');
    }
    if (days === 0 && hours !== 0 && minutes !== 0) {
      return i18nMgg('open_access_for') + ' ' + hours + ' ' + helpFunctions.getValueText(hours, 'hour') + ' '
        + i18nMgg('and') + ' ' + minutes + ' ' + helpFunctions.getValueText(minutes, 'minute');
    }
    if (days === 0 && hours !== 0 && minutes === 0) {
      return i18nMgg('open_access_for') + ' ' + hours + ' ' + helpFunctions.getValueText(hours, 'hour');
    }
    if (days === 0 && hours === 0 && minutes !== 0) {
      return i18nMgg('open_access_for') + ' ' + minutes + ' ' + helpFunctions.getValueText(minutes, 'minute');
    }

    if (days === 0 && hours === 0 && minutes === 0) {
      return i18nMgg('will_open_access_1') + ' ' + period + ' ' + helpFunctions.getValueText(period, 'day') + ' ' + i18nMgg('will_open_access_2');
    }
  } else if (tvodRule == 'dto') {
    leftTimeText = i18nMgg('bought_dto_movie_text');
  }

  return leftTimeText

}


function getWatchedEpisodes(data) {
  var movieData = data;
  return new Promise(function (resolve) {
    var wssInfo = movieData.series_last_watched;

    if (wssInfo && movieData.is_series && movieData.season_list.length > 1 && !(movieData.season_list[0].id == wssInfo.season_id)) {
      //get last watched season
      api.load('videoEpisodes', {
        id: wssInfo.season_id
      }).then(function (data) {
        resolve(data);
      });
    } else {
      resolve(false)
    }
  });
}
function correctPinVideoAgeCallback() {

  if (page.isTrailerPlayed) {
    var movie = page.movieRespond;
    var playerObject = {
      type: 'trailer',
      videoId: movie.id
    };
    router.navigate('pagePlayer', [
      movie.trailer_id, playerObject
    ]);
  } else {
    var playerMovieID = page.movieRespond.id;
    router.navigate('pagePlayer', [
      playerMovieID
    ]);
  }
}
function watchTrailerPaymentCallback(data) {
  var movie = page.movieRespond;

  if (!movie.is_available && isPaid) {
    var isChosenTariff = false;

    if (data && data.tariffID) {
      var tariffID = data.tariffID;
      var movieTariffs = movie.purchase_info;

      for (var n in movieTariffs) {
        for(var i = 0; i < movieTariffs[n].subscriptions.length; i++ ){
          var tariffs = movieTariffs[n].subscriptions[i].tariffs;
          isChosenTariff = tariffs.some(function (tariff) {
            return tariff.tariff_id == tariffID;
          });
          if(isChosenTariff) break;
        }
        if(isChosenTariff) break;
      }
    }

    paymentModel.init(paymentModel.getDefaultData());
    paymentModel.set('objectID', movie.id);
    paymentModel.set('isVideoObject', true);

    // if Movie is available by tvod || dto
    if (isPaid) {
      page.hide();
      Tariffs.show({
        leftMenu: LeftMenu,
        movieData: movie,
        tariffID: isChosenTariff ? tariffID : '',
        page: page
      });
    }
  }


}
function hidePinPopUpCallback(data) {
  page.$$lastFocus.focus();
}
function hidePopUpResultsCallback(data) {
  page.$$lastFocus.focus();
}

function updateWatchedHistoryInfo(videoID) {

  return new Promise(function (resolve) {
    Loader.show();
    api.load('userHistory', {video_ids: videoID}).then(function (data) {
      if (data && data.video_list && data.video_list.length && data.video_list[0].watched_history) {
        var movieInfo = data.video_list[0];
        var movieWH = movieInfo.watched_history;
        var movieSLW = movieInfo.series_last_watched;
        var wssInfo = {
          series_last_watched: movieSLW,
          watched_history: movieWH
        };

        if (movieWH) {
          page.movieRespond.watched_history = movieWH;
          page.movieCover.setWatchedHistoryData(movieWH);
        }

        if (movieSLW) {
          page.movieRespond.series_last_watched = movieSLW;
          var lastWatchedSeason = movieSLW.season_id;
          var lastWatchedEpisode = movieSLW.episode_id;

          api.load('videoEpisodes', {
            id: lastWatchedSeason
          }).then(function (data) {
            if(!page.active) {
              return;
            }
            if (data) page.seasonRespond = data;
            var bottomPageData = getBottomDataList(page.movieRespond, page.reviewsRespond, page.seasonRespond, wssInfo);
            page.contentBottom.clear();
            page.contentBottom.init({
              data: bottomPageData
            });

            if (page.$$lastFocus.id == 'pageMovieEpisodes') {
              page.movieCover.container.style.display = 'none';
              page.contentBottom.focus();
            }

            resolve(true);

          });
        } else {
          resolve(true);

        }
      } else {
        resolve(false);
      }
    })
  });

}


//@TODO maybe use this emit global for all components
function emitMouseWheel(event) {

  if (event.deltaY < 0) {
    page.activeComponent.emit('keydown', {
      keyCode: keys.UP,
      event: {}
    });
  }
  if (event.deltaY > 0) {
    page.activeComponent.emit('keydown', {
      keyCode: keys.DOWN,
      event: {}
    });
  }
}
function showHideArrows() {
  var left_offset = 0;
  var total_offset = 0;

  if (!page.activeComponent) return;
  if (page.activeComponent == page.contentTopButtons ||
    page.activeComponent == page.$$watchLater || page.activeComponent == page.$$detail || page.activeComponent == page.$$like || page.activeComponent == page.$$dislike) {
    page.arrowsWidget.left.hide();
    page.arrowsWidget.right.hide();
    page.arrowsWidget.up.hide();
    if (page.contentBottom.size) {
      page.arrowsWidget.down.show();
    }
    page.arrowsWidget.setArrowProperty('down', {paddingTop: 50, top: 600, left: 0, width: 1280});
  } else if (page.activeComponent.dataType == 'people' || page.activeComponent.dataType == 'movieRelated' || page.activeComponent.dataType == 'reviews'
    || page.activeComponent.dataType == 'episodes') {
    page.arrowsWidget.setArrowProperty('down', {paddingTop: 110, top: 540, left: 0, width: 1280});
    page.arrowsWidget.up.show();
    page.arrowsWidget.down.show();
    if (page.activeComponent.dataType == 'people') {
      left_offset = page.people_list.$node.style.left ? parseInt(page.people_list.$node.style.left) : 0;
      total_offset = -((page.activeComponent.$focusItem.offsetWidth + 12) * (page.people_total) - 1160);
      if (!left_offset) {
        page.arrowsWidget.left.hide();
      } else {
        page.arrowsWidget.left.show();
      }

      if (left_offset > total_offset) {
        page.arrowsWidget.right.show();
      } else {
        page.arrowsWidget.right.hide();
      }
    } else if (page.activeComponent.dataType == 'reviews' || page.activeComponent.dataType == 'episodes') {
      left_offset = page.activeComponent.$node.style.left ? parseInt(page.activeComponent.$node.style.left) : 0;
      total_offset = -((page.activeComponent.$focusItem.offsetWidth) * (page.activeComponent.size) - 1160);

      if (!left_offset) {
        page.arrowsWidget.left.hide();
      } else {
        page.arrowsWidget.left.show();
      }
      if (left_offset > total_offset) {
        page.arrowsWidget.right.show();
      } else {
        page.arrowsWidget.right.hide();
      }
    } else if (page.activeComponent.dataType == 'movieRelated') {
      page.arrowsWidget.left.hide();
      page.arrowsWidget.right.hide();
      page.arrowsWidget.down.hide();
    }
  }
}

// public
module.exports = page;

},{"core/animate":14,"core/api":15,"core/app":16,"core/components/button":19,"core/components/list":23,"core/components/page":25,"core/components/panel":26,"core/dom":31,"core/lib/helpFunctions":34,"core/paymentModel":41,"core/promise":43,"core/router":45,"core/tools/movieService":50,"core/tools/statInfoService":53,"core/tools/subscriptionService":54,"pages/movie/iwatch":64,"ui/actor-item":113,"ui/cover-movie-img":116,"ui/episode-item":117,"ui/film-item":119,"ui/movie-info":122,"ui/review-item":125,"vendor/aura/keys":133,"widgets/background":141,"widgets/bubble":144,"widgets/loader":149,"widgets/menu-left":150,"widgets/popup/popup-pincode":158,"widgets/popup/popup-results":159,"widgets/popup/popup-tariffs-tvod-dto":161,"widgets/popup/popup-video-restrictions":162}],64:[function(require,module,exports){
/**
 * iWatch page implementation.
 *
 * @license GNU GENERAL PUBLIC LICENSE Version 3
 */

'use strict';

var id = 'pageIWatch',
  Page = require('core/components/page'),
  Button = require('core/components/button'),
  Grid = require('core/components/grid'),
  List = require('core/components/list'),
  Loader = require('widgets/loader'),
  keys = require('vendor/aura/keys'),
  dom = require('core/dom'),
  helpFunctions = require('core/lib/helpFunctions'),
  router = require('core/router'),
  Panel = require('core/components/panel'),
  animate = require('core/animate'),
  FilmItemSmall = require('ui/film-item-small'),
  ChannelItem = require('ui/channel-item'),
  subscriptionService = require('core/tools/subscriptionService'),
  IWatchButtonRender = require('ui/ui_generator').IWatchButton,
  api = require('core/api'),
  greedData, query_config, DeleteIWatchItems,
  delete_iwatch_focus_from,
  $$no_data_image, $$no_data_title;

var page = new Page({
  $node: dom.tag('div', {id: id}),
  $body: dom.tag('div', {id: id + 'Container'}),
  append_to_body: true,
  header: '',
  $$lastFocus: null,
  arrows: {down: {config: {paddingTop: 150, top: 500}}, up:{config:{paddingBottom: 155}}},
  arrowsUpdate: showHideArrows,
  back_button: {
    'clickCallBack': function () {
      if (edit_view) {
        DeleteIWatchItems.emit('click');
      } else {
        router.back();
      }
    }
  },
  keys: {
    BLUE: function () {
      if (DeleteIWatchItems.visible) {
        DeleteIWatchItems.emit('click');
      }
    }
  }
});


var response_data_raw_array = [];
//var delete_iwatch_items_id_array = []; //@TODO maybe someday api will make multiply delete
var edit_view = false;
var disable_loading = false;

var action_view = {
  'userFavoritesTvDelete': 'favourite-tv',
  'userFavoriteAddTv': 'favourite-tv',
  'userFavoriteDelete': 'favourite-movies',
  'userFavoriteAdd': 'favourite-movies',
  'userHistoryDelete': 'watch-progress'
};

page.addListener('load', function () {
  page.no_data_container = new Panel({
    visible: false,
    $node: dom.tag('div', {
        className: 'no_data_container'
      },
      $$no_data_image = dom.tag('div', {}),
      $$no_data_title = dom.tag('div', {
        className: 'no-data-title'
      })
    )
  });

  var edit_shade = new Panel({
    visible: false,
    $node: dom.tag('div', {className: 'iwatch_edit_shade'})
  });

  DeleteIWatchItems = new Button({
    visible: false,
    className: 'delete_iwatch_items',
    events: {
      click: function () {
        edit_view = !edit_view;
        if (edit_view) {
          this.addClass('selected');
          this.setValue(i18nMgg('done'));
          page.content.addClass('edit');
          edit_shade.show();
          page.content.focus();
        } else {
          this.removeClass('selected');
          this.setValue(i18nMgg('change'));
          page.content.removeClass('edit');
          edit_shade.hide();
          if(!response_data_raw_array.length) {
            this.hide();
            if(this.focused) {
              page.watchBlocks.focus();
            }
          }
        }
      }
    },
    keys: {
      DOWN: function () {
        if(delete_iwatch_focus_from) {
          delete_iwatch_focus_from.focus();
        } else if (edit_view) {
          page.content.focus();
        } else {
          page.watchBlocks.focus();
        }
      },
      LEFT: function () {
        if(delete_iwatch_focus_from) {
          delete_iwatch_focus_from.focus();
        } else {
          page.backButton.focusButton(this);
        }
      },
      RETURN: function () {
        pressReturn()
      }
    }
  });

  page.content = new Grid({
    cycleX: false,
    cycleY: false,
    events: {
      'click:item': function (data) {
        var current_item_data = data && data.$item;
        if (current_item_data) {
          if (edit_view) {
            removeItem(current_item_data);
          } else {
            handleContentClickItem(current_item_data);
          }
        }
      },
      'mouseover': function (data) {
        page.content.focus();
        page.content.focusItem(data.$item, true);
      },
      overflow: function (data) {
        if (data.direction === keys.LEFT) {
          page.backButton.focusButton(this);
        } else if (data.direction === keys.UP && data.type !== 'mousewheel') {
          if (edit_view) {
            delete_iwatch_focus_from = this;
            DeleteIWatchItems.focus();
          } else {
            page.watchBlocks.focus();
          }
        } else if(data.direction === keys.RIGHT) {
          if (DeleteIWatchItems.visible) {
            delete_iwatch_focus_from = this;
            DeleteIWatchItems.focus();
          }
        }
      },
      'focus': function () {
        page.$$lastFocus = this;
      },
      'focus:item': function (data) {
        if (data.$prev && data.$curr.y != data.$prev.y) {
          scrollPage(data.$curr);
          if ((page.content.map.length - data.$curr.y) <= 2 && !disable_loading) {
            if (query_config.total > query_config.now_loaded) {
              addData();
            }
          }
          showHideArrows();
        }
      }
    },
    keys: {
      RETURN: function () {
        pressReturn();
      }
    }
  });

  page.watchBlocks = new List({
    type: List.prototype.TYPE_HORIZONTAL,
    className: 'watchBlocks',
    events: {
      'click:item': function (data) {
        if (data.$item === this.$selectedItem) {
          return false;
        }
        page.content.clear();

        this.selectItem(data.$item);

        resetQueryConfig(data.$item.data);

        updateArrowsSize(data.$item.data.type);

        if (data.$item.data.type === 'bought-movies') {
          if (edit_view) {
            DeleteIWatchItems.emit('click');
          }
        }

        loadData();
      },
      'overflow': function (data) {
        if (data.direction === keys.LEFT && data.type !== 'mousewheel') {
          page.backButton.focusButton(this);
        } else if(data.direction === keys.RIGHT) {
          if (DeleteIWatchItems.visible) {
            delete_iwatch_focus_from = this;
            DeleteIWatchItems.focus();
          }
        }
      },
      'mouseover': function (data) {
        page.watchBlocks.focus();
        page.watchBlocks.focusItem(data.$item);
      },
      'focus:item': function () {
        page.$$lastFocus = this;
      }
    },
    keys: {
      DOWN: function () {
        if (page.content.map.length) {
          page.content.focus();
        }
      },
      UP: function () {
        if (DeleteIWatchItems.visible) {
          delete_iwatch_focus_from = this;
          DeleteIWatchItems.focus();
        } else {
          page.backButton.focusButton(this);
        }
      },
      RETURN: function () {
        pressReturn();
      }
    },
    render: IWatchButtonRender
  });

  document.getElementsByTagName('body')[0].appendChild(DeleteIWatchItems.$node);// @TODO refactor later
  page.add(page.watchBlocks, page.content);
  page.$node.appendChild(edit_shade.$node);

  /**
   * Listeners
   */
  page.addListener('show', function (data) {
    page.watchBlocks.focus();
    Loader.addClass('iwatch_loader');
    DeleteIWatchItems.setValue(i18nMgg('change'));
    if (helpFunctions.isNavigateBack(data)) {
      showHideDeleteIWatchItemsButton();
      if (page.content.map.length) {
        page.content.focus();
        scrollPage(page.content.$focusItem);
      } else {
        initWatchButtons();
      }
      var movie_data = helpFunctions.isRouteHasData(data);
      if(movie_data) {
        helpFunctions.updateWatchedHistory(page.activeComponent, movie_data);
      }
      return;
    }
    page.header.setTitle(i18nMgg('i_watch'));

    initWatchButtons();

    page.arrowsWidget.clickUpCallback = function() {
      page.content.emit('keydown', {
        keyCode: keys.UP,
        event: {}
      });
    };
    page.arrowsWidget.clickDownCallback = function() {
      page.content.emit('keydown', {
        keyCode: keys.DOWN,
        event: {}
      });
    };
  });

  page.addListener('hide', function () {
    DeleteIWatchItems.hide();
    Loader.removeClass('iwatch_loader');
    page.arrowsWidget.clickUpCallback = null;
    page.arrowsWidget.clickDownCallback = null;
  });
});

/**
 * @TODO need to move in component/grid
 * @param item - {} film-item or id (Number) videoInfo
 * @param type - 'userFavoritesTvDelete', 'userFavoriteAddTv', 'userFavoriteDelete', 'userFavoriteAdd'
 */
page.toggleIwatchItem = function (item, type) {

  if (item && response_data_raw_array && response_data_raw_array.length &&
    page.watchBlocks.$selectedItem && (page.watchBlocks.$selectedItem.data.type == action_view[type] || !type)) {
    page.content.clear();

    if (parseInt(item)) {
      api.load('videoInfo', {id: parseInt(item)}).then(function (data) {
        updateContent(data, type);
      })
    } else {
      updateContent(item, type);
    }
  }
};

function updateContent(item, type) {
  if (type == 'userFavoriteAdd' || type == 'userFavoriteAddTv') {
    response_data_raw_array.unshift(item);
  } else {
    for (var i = 0; i < response_data_raw_array.length; i++) {
      var obj = response_data_raw_array[i];
      if (obj.id == item.id) {
        response_data_raw_array.splice(i, 1);
        query_config.total_rows = Math.ceil(response_data_raw_array.length / 6);
        break;
      }
    }
  }
  if (response_data_raw_array.length) {
    var focusItem = page.content.$focusItem;

    renderData(response_data_raw_array, 'init');

    if (focusItem) {
      page.content.focusItem(focusItem);
    }
    if (page.content.map[page.content.focusY]) {
      if (page.content.map[page.content.focusY][page.content.focusX]) {
        page.content.focusItem(page.content.map[page.content.focusY][page.content.focusX]);
      } else if (page.content.map[page.content.focusY][page.content.focusX - 1]) {
        page.content.focusItem(page.content.map[page.content.focusY][page.content.focusX - 1]);
      }
    } else if (page.content.map[page.content.focusY - 1]) {
      if (page.content.map[page.content.focusY - 1][page.content.focusX]) {
        page.content.focusItem(page.content.map[page.content.focusY - 1][page.content.focusX]);
      } else if (page.content.map[page.content.focusY - 1][page.content.focusX - 1]) {
        page.content.focusItem(page.content.map[page.content.focusY - 1][page.content.focusX - 1]);
      }
    }

    scrollPage(page.content.$focusItem);
  }
}

function removeItem(currentItem) {
  //@TODO maybe someday api will make multiply delete
  //delete_iwatch_items_id_array.push(currentItem.data.id);

  page.toggleIwatchItem(currentItem.data);
  page.content.addClass('edit');
  page.content.focus();
  deleteIWatchItemsFromApi(currentItem.data.id);
  if (!response_data_raw_array.length) {
    DeleteIWatchItems.emit('click');
    page.watchBlocks.focus();
    page.watchBlocks.focusItem(page.watchBlocks.$selectedItem);
    showNoData();
  }

  if (response_data_raw_array.length <= 12) {
    addData();
  }
}

function addData() {
  if(query_config.total > query_config.now_loaded) {
    query_config.type = 'addData';
    query_config.query_params.offset = query_config.query_params.offset || 0;
    query_config.query_params.offset += query_config.query_params.limit;
    loadData();
  }
}

function handleContentClickItem(currentItem) {
  var currentWatchBlock = page.watchBlocks.$selectedItem.data;
  var current_item_data = currentItem.data;
  var subscriptionsArr;
  if (current_item_data.purchase_info && current_item_data.purchase_info['svod']) {
    subscriptionsArr = current_item_data.purchase_info['svod'].subscriptions;
  }

  if (currentWatchBlock.type == 'favourite-tv') {
    subscriptionService.hasAvailableChannels(subscriptionsArr).then(function (data) {

      if (data == 'play') {
        router.navigate('pagePlayer', ['tv', current_item_data.id]);
      } else if (data == 'buy') {
        router.navigate('pageSubscription');
      } else if (subscriptionsArr.indexOf(data) != -1) {
        router.navigate('pageSubscriptionDetailed', [data]);
      } else {
        router.navigate('pageSubscription');
      }
    });
  } else {
    router.navigate('pageMovie', [
      current_item_data.id
    ]);
  }
}

function scrollPage(item) {
  if (item) {
    var itemHeight = item.parentNode.offsetHeight;
    var top = itemHeight * item.y;

    if (item.y > query_config.visible_rows - 1) {
      page.header.shadeOn();
      if (page.watchBlocks.$selectedItem && page.watchBlocks.$selectedItem.data.type == 'favourite-tv') {
        top -= 25;
      }
    } else {
      page.header.shadeOff();
      top = 0;
    }
    page.scrollTop(top);
  }
}

function initWatchButtons() {
  page.watchBlocks.clear();

  var watchBlocksData = [
    {
      title: i18nMgg('watch_progress_title'),
      no_data_title: i18nMgg('empty_watch_progress'),
      type: 'watch-progress',
      url: 'userHistory'
    }, {
      title: i18nMgg('favourite_movies_title'),
      no_data_title: i18nMgg('favourite_splash'),
      type: 'favourite-movies',
      url: 'userFavorite'
    }, {
      title: i18nMgg('favourite_tv_title'),
      no_data_title: i18nMgg('favourite_tv_splash'),
      type: 'favourite-tv',
      url: 'userFavoritesTv'
    }, {
      title: i18nMgg('bought_movies'),
      no_data_title: i18nMgg('find_bought_movies'),
      type: 'bought-movies',
      url: 'userTvod'
    }
  ];

  page.watchBlocks.init({data: watchBlocksData, focusIndex: 0});

  page.watchBlocks.emit('click:item', {
    '$item': page.watchBlocks.$focusItem
  });
}

function loadData() {
  disable_loading = true;
  Loader.show();
  api.load(query_config.url, query_config.query_params).then(function (data) {
    disable_loading = false;
    var response_data = data[query_config.data_type];

    if (!response_data || !response_data.length) {
      if(query_config.type == 'init') {
        showNoData();
        response_data_raw_array = [];
      }
    } else {
      query_config.total = data.total;
      query_config.now_loaded = data.limit + data.offset;
      response_data_raw_array = response_data_raw_array.concat(response_data);
      query_config.total_rows = Math.ceil(response_data_raw_array.length / 6);
      renderData(response_data, query_config.type);
    }
    showHideArrows();
    showHideDeleteIWatchItemsButton();
    Loader.hide();
  }).catchError(function (e) {
    disable_loading = false;
    console.log(e);
  });

}

function renderData(response_data, type) {

  greedData = helpFunctions.formatDataForGreed(response_data, 6);

  page.content[type]({
    data: greedData,
    render: query_config.render_function,
    newClassName: query_config.grid_class_name
  });
}

function showNoData() {
  var selected_button_data = page.watchBlocks.$selectedItem ? page.watchBlocks.$selectedItem.data : null;
  if (selected_button_data) {
    page.content.add(page.no_data_container);
    page.no_data_container.show();
    $$no_data_image.className = 'js-no-data-image ' + selected_button_data.type;
    $$no_data_title.innerHTML = selected_button_data.no_data_title;
  }
}

function showHideDeleteIWatchItemsButton() {
  if(response_data_raw_array && response_data_raw_array.length) {
    if(query_config.url !== 'userTvod') {
      DeleteIWatchItems.show();
    } else {
      DeleteIWatchItems.hide();
    }
  } else {
    DeleteIWatchItems.hide();
  }
}

function resetQueryConfig(data) {
  response_data_raw_array = [];
  query_config = {
    url: data.url,
    type: 'init',
    data_type: 'video_list',
    grid_class_name: 'movie-grid',
    render_function: FilmItemSmall,
    total: 0,
    now_loaded: 0,
    total_rows: 0,
    visible_rows: 1,
    query_params: {
      limit: 18
    }
  };

  if (data.type === 'favourite-tv') {
    query_config.data_type = 'channels';
    query_config.render_function = function ($item, data) {
      new ChannelItem($item, data, {className: 'big'});
    };
    query_config.grid_class_name = 'channels-grid';
  }
}

function pressReturn() {
  if (edit_view) {
    DeleteIWatchItems.emit('click');
  } else {
    page.backButton.emit('click');
  }
}

function deleteIWatchItemsFromApi(id) {
  //@TODO maybe someday api will make multiply delete
  //var ids = delete_iwatch_items_id_array.join(',');
  //delete_iwatch_items_id_array = [];


  if (id) {
    var local_query_param = query_config.url === 'userHistory' ? {id: id} : {video_id: id};

    api.load(query_config.url + 'Delete', local_query_param).then(function (data) {
      //console.log(data);
    }).catchError(function (e) {
      console.log(e)
    });
  }
}

function showHideArrows() {
  if (!query_config.total) {
    page.arrowsWidget.up.hide();
    page.arrowsWidget.down.hide();
    return;
  }
  if (page.content.$focusItem) {
    if (!page.scrollTopValue) {
      page.arrowsWidget.up.hide();
    } else {
      page.arrowsWidget.up.show();
    }

    if (page.content.$focusItem.y >= query_config.total_rows - 1) {
      page.arrowsWidget.down.hide();
    } else {
      page.arrowsWidget.down.show();
    }
  }
}

function updateArrowsSize(type) {

  if (type == 'favourite-tv') {
    page.arrowsWidget.setArrowProperty('up', {
      paddingBottom: 0
    });
    page.arrowsWidget.setArrowProperty('down', {
      paddingTop: 20, top: 630
    });

    query_config.visible_rows = 2;
  } else {
    page.arrowsWidget.setArrowProperty('up', {
      paddingBottom: 155
    });
    page.arrowsWidget.setArrowProperty('down', {
      paddingTop: 150, top: 500
    });
  }
}

// public
module.exports = page;



},{"core/animate":14,"core/api":15,"core/components/button":19,"core/components/grid":21,"core/components/list":23,"core/components/page":25,"core/components/panel":26,"core/dom":31,"core/lib/helpFunctions":34,"core/router":45,"core/tools/subscriptionService":54,"ui/channel-item":114,"ui/film-item-small":118,"ui/ui_generator":130,"vendor/aura/keys":133,"widgets/loader":149}],65:[function(require,module,exports){
'use strict';

var id = 'pagePremiere',
  api = require('core/api'),
  app = require('core/app'),
  animate = require('core/animate'),
  Button = require('core/components/button'),
  dom = require('core/dom'),
  FilmItemRender = require('ui/film-item'),
  helpFunctions = require('core/lib/helpFunctions'),
  statInfoService = require('core/tools/statInfoService'),
  menuNavigateService = require('core/tools/menuNavigateService'),
  keys = require('vendor/aura/keys'),
  LeftMenu = require('widgets/menu-left'),
  Loader = require('widgets/loader'),
  List = require('core/components/list'),
  Page = require('core/components/page'),
  Panel = require('core/components/panel'),
  router = require('core/router'),
  Slider = require('ui/slider-item'),
  Widget = require('core/components/widget'),
  featured_analytics_info = [],
  isServe = false
  ;

//@TODO need to combine premiere films and cartoons
var active_list;
var page = new Page({
  $node: dom.tag('div', {id: id}),
  $body: dom.tag('div', {id: id + 'Container'}),
  append_to_body: true,
  arrows: {down: {config: {top: 480, paddingTop: 170}}},
  arrowsUpdate: showHideArrows,
  header: ''
});

page.addListener('load', function () {
  page.filter_vod = 'single';
  page.film_list_limit = 6;
  page.start_loading_films_list_index = 5;
  page.content = new List({
    type: List.prototype.TYPE_VERTICAL,
    data: [],
    viewSize: 3,
    focusIndex: 0,
    keys: {
      RETURN: function () {
        pressBack();
      }
    },
    events: {
      'overflow': function (data) {
        if (data.direction === keys.DOWN) {
          if (page.feature_load_complete) {
            $$watchAllPremiere.focus();
            active_list.classList.add('active')
          }
        }
      },
      'focus': function (data) {
        if (this.$focusItem) {
          this.$focusItem.list.focus();
        }
      },
      'focus:item': function (data) {
        var top = 0;
        var $item = data.$curr;
        $item.list.focus();
        if ($item.index) {
          top = $item.getBoundingClientRect().top - parseInt(page.scrollTopValue || 0);
          top -= 85;
        }

        ///@TODO for testing
        var next_row_list = this.$node.children[$item.index + 1];
        var next_next_row_list = this.$node.children[$item.index + 2];
        lazyLoadCollection($item);
        lazyLoadCollection(next_row_list);
        lazyLoadCollection(next_next_row_list);
        lazyLoadFeaturedGroup($item);

        if (data.$curr.index) {
          page.header.shadeOn();
        } else {
          page.header.shadeOff();
        }

        page.scrollTop(top);

        active_list = $item.list.$node;
        active_list.classList.add('active')
      },
      'mouseover': function (data) {
        this.focus();
        this.focusItem(data.$item, {
          no_emit: true
        });
        data.$item.list.focus();
        showHideArrows();
      }
    },
    render: function ($item, data) {
      if (data.type === mainConfigMgg.itemTypes.ITEM_FILM_LIST) {
        var offset_film_item = 0;
        $item.list = new List({
          type: List.prototype.TYPE_HORIZONTAL,
          size: data.data.length || 7,
          data: data.data,
          //viewSize: 7,
          focusIndex: 0,
          className: 'filmsList',
          total_items: data.total_items,
          dataType: data.type,
          scrollList: {
            startIndex: 2,
            stopIndex: 2,
            speed: mainConfigMgg.animation.duration.speed2,
            scrollSize: 3
          },
          events: {
            'click:item': function (listData) {
              statInfoService.sendGATrackEvent(page.id + '_collection_' + data.category_id, listData.$item.data.id);

              router.navigate('pageMovie', [
                listData.$item.data.id
              ]);
            },
            'mouseover': function (data) {
              this.focus();
              this.focusItem(data.$item, {
                no_emit: true
              });
              showHideArrows();
            },
            'overflow': function (data) {
              if (data.direction === keys.LEFT && data.type !== 'mousewheel') {
                LeftMenu.showMenu({
                  'componentToFocus': page.content
                });
              }
            },
            'focus:item': function (itemData) {
              if ((offset_film_item + page.film_list_limit <= this.total_items) && (itemData.$curr.index >= this.size - page.start_loading_films_list_index)) {
                offset_film_item += page.film_list_limit;
                api.load('videoCollection', {
                  id: data.category_id,
                  offset: offset_film_item,
                  limit: page.film_list_limit,
                  vod: page.filter_vod
                }).then(function (data) {
                  $item.list.addData(data.video_list);
                })
              }
            },
            'mousewheel': function (event) {
              if (event.deltaY < 0) {
                page.content.move(keys.UP);
              }
              if (event.deltaY > 0) {
                page.content.move(keys.DOWN);
              }
            }
          },
          keys: {
            UP: function () {
              if(active_list) {
                active_list.classList.remove('active');
              }
              page.content.move(keys.UP);
            },
            DOWN: function () {
              if(active_list) {
                active_list.classList.remove('active');
              }
              page.content.move(keys.DOWN);
            },
            RETURN: function () {
              pressBack();
            }
          },
          render: function ($listItem, listData) {
            FilmItemRender($listItem, listData);
          }
        });

        $item.listItemTitle = new Panel({
          $node: dom.add(dom.tag('div', {
            className: 'panelTitle'
          }), data.title),
          focusable: false
        });
        //need refactor, create component  FilmItem
        $item.appendChild($item.listItemTitle.$node);
        $item.appendChild($item.list.$node);

      } else if (data.type === mainConfigMgg.itemTypes.ITEM_CAROUSEL) {
        $item.list = new List({
          type: List.prototype.TYPE_HORIZONTAL,
          data: data.data,
          className: 'slider',
          //size: 3,
          viewSize: 3,
          focusIndex: 0,
          dataType: data.type,
          scrollList: {
            startIndex: 0,
            scrollSize: 1,
            speed: mainConfigMgg.animation.duration.speed2
          },
          events: {
            'click:item': function (data) {

              statInfoService.sendGATrackEvent(page.id + '_slider', data.$item.data.id);

              if (data.$item.data.slider_type == "feature") {
                router.navigate('pageMoviesCategory', [
                  'collections', data.$item.data.object_id
                ]);
              }

              if (data.$item.data.slider_type == "object") {
                router.navigate('pageMovie', [
                  data.$item.data.object_id
                ]);
              }

              if (data.$item.data.slider_type == "url") {
                menuNavigateService.navigateAdLink('navigate', data.$item.data.link);
              }
            },
            'overflow': function (data) {
              if (data.direction === keys.LEFT && data.type !== 'mousewheel') {
                LeftMenu.showMenu({
                  'componentToFocus': page.content
                });
              }
            },
            'focus:item': function (data) {
            },
            'mousewheel': function (event) {
              if (event.deltaY < 0) {
                page.content.move(keys.UP);
              }
              if (event.deltaY > 0) {
                page.content.move(keys.DOWN);
              }
            },
            'mouseover': function (data) {
              this.focus();
              this.focusItem(data.$item, {
                no_emit: true
              });
              showHideArrows();
            },
            'keydown': function (data) {
              if(data.keyCode == keys.LEFT || data.keyCode == keys.RIGHT) {
                this.move(data.keyCode);
              } else if(data.keyCode == keys.PAGE_UP) {
                this.move(keys.LEFT);
              } else if(data.keyCode == keys.PAGE_DOWN) {
                this.move(keys.RIGHT);
              } else if(data.keyCode == keys.UP) {
                page.content.move(keys.UP);
              } else if(data.keyCode == keys.DOWN) {
                if(active_list) {
                  active_list.classList.remove('active');
                }
                page.content.move(keys.DOWN);
              } else if(data.keyCode == keys.RETURN) {
                pressBack();
              } else if(data.keyCode == keys.ENTER) {
                this.emit('click:item', {
                  $item: this.$focusItem
                });
              }
            }
          },
          render: function ($item, data) {
            new Slider($item, data);
          }
        });

        $item.appendChild($item.list.$node);
      }
    }
  });

  var $$watchAllPremiereContainer = new Panel({
    $node: dom.add(dom.tag('div', {
      className: 'watchAllPremiereContainer'
    })),
    focusable: false
  });

  var $$watchAllPremiere = new Button({
    //value: i18nMgg('all_premieres'),
    'className': 'watchAllPremiere',
    events: {
      'click': function (event) {
        statInfoService.sendGATrackEvent(page.id + '_button', 'all_premieres');
        router.navigate('pageMoviesCategory', [
          'premiere'
        ]);
      },
      'focus': function () {
        if(isServe){
          var uniqueArray = helpFunctions.removeDuplicates(featured_analytics_info, "id");
          console.log([uniqueArray.length, page.feature_list_total])
          console.log(JSON.stringify(uniqueArray));
        }
      }
    },
    keys: {
      UP: function () {
        page.content.focus();
      },
      LEFT: function () {
        LeftMenu.showMenu({
          'componentToFocus': $$watchAllPremiere
        });
      },
      RETURN: function () {
        pressBack();
      }
    }
  });

  $$watchAllPremiereContainer.add($$watchAllPremiere);
  page.add(page.content);
  page.add($$watchAllPremiereContainer);

  /**
   * Listeners
   */
  page.addListener('show', function (data) {
    //@TODO small hack for prevent focus on first carousel while mouseover
    if (page.arrowsWidget.mouse_used) {
      page.arrowsWidget.showArrows();
      page.arrowsWidget.down.show();
    }

    page.content.focus();

    showHideArrows();

    LeftMenu.openSubMenu('premium_section');

    page.header.setTitle(i18nMgg('premium_section_title'));

    $$watchAllPremiere.setValue(i18nMgg('all_premieres'));

    if (helpFunctions.isNavigateBack(data)) {
      Loader.hide();
      var movie_data = helpFunctions.isRouteHasData(data);
      if(movie_data) {
        helpFunctions.updateWatchedHistory(page.activeComponent, movie_data);
      }
      return;
    }

    page.arrowsWidget.up.hide();
    page.arrowsWidget.left.hide();

    Loader.show();
    if (data && data.data && data.data[0]) {
      var page_info;
      try {
        page_info = JSON.parse(data.data[0]);
      } catch (e) {
        handleError('error while parsing JSON in movie_premiere: ' + e);
      }
      if (page_info) {
        page.featured_group_id = page_info.featured_group_id;
        page.slider_category_id = page_info.slider_category_id;
        setDefaultParams(this);
        loadData();
      } else {
        handleError('error while parsing JSON in movie_premiere');
      }
    } else {
      handleError('error no data in url');
    }
  });

  page.addListener('hide', function () {
    page.arrowsWidget.removeClass('arrow-slider');
  });

});

function lazyLoadCollection(item) {
  if (item && !item.list.data.length && item.list.dataType == mainConfigMgg.itemTypes.ITEM_FILM_LIST) {
    api.load('videoCollection', {
      id: item.data.category_id,
      vod: page.filter_vod,
      limit: page.film_list_limit
    }).then(function (video) {
      if(isServe) {
        collectAnalyticsFeatureInfo(item.data.category_id, item.data.title, video.video_list)
      }
      item.list.init({
        data: video.video_list,
        focusIndex: 0
      });
    })
  }
}

function lazyLoadFeaturedGroup($item) {
  if ((page.feature_list_offset + page.feature_list_limit <= page.feature_list_total)
    && ($item.index == page.content.size - page.start_loading_feature_list_index)
    && ($item.list.dataType == mainConfigMgg.itemTypes.ITEM_FILM_LIST)) {
    //@TODO need to use one load for basic load and lazy load
    page.feature_list_offset = parseInt(page.feature_list_offset) + page.feature_list_limit;
    api.load('featuredGroup', {
      group_id: page.featured_group_id,
      required: 1,
      vod: page.filter_vod,
      limit: page.feature_list_limit,
      offset: page.feature_list_offset
    }).then(function (data) {
      var initLoadData = [];
      page.feature_list_total = data.total;
      if (data.group && data.group.sub_featured) {
        data.group.sub_featured.forEach(function (feature) {
          initLoadData.push({
            category_id: feature.id,
            data: [],
            type: mainConfigMgg.itemTypes.ITEM_FILM_LIST,
            title: feature.title,
            total_items: feature.video_total
          });
        });
      }

      page.content.addData(initLoadData);
      if(page.feature_list_offset + page.feature_list_limit >= page.feature_list_total){
        page.feature_load_complete = true;
      }
    });
  }
}

function handleError(error_text) {
  console.log(error_text);
  Loader.hide();
  page.content.clear();
  router.back();
}

function loadData() {
  var features = [],
    features_init = [],
    initData = [],
    slider;

  api.load('slider', {
    category_id: page.slider_category_id, //hrdcoded
    size: "big",
    vod: page.filter_vod
  }).then(function (data) {
    slider = data.sliders;
  }, function (e) {
    return {
      error: e
    };
  }).then(function () {
    api.load('featuredGroup', {
      group_id: page.featured_group_id,
      required: 1,
      vod: page.filter_vod,
      limit: page.feature_list_limit,
      offset: page.feature_list_offset
    }).then(function (data) {
      page.feature_list_total = data.total;
      if (data.group && data.group.sub_featured) {
        features = data.group.sub_featured;
      }

      if (slider && slider.length) {
        var supportedSliders = helpFunctions.filterSupportedSliders(slider);

        if (supportedSliders.length) {
          initData.push({
            data: supportedSliders,
            type: mainConfigMgg.itemTypes.ITEM_CAROUSEL
          });
        }
      }


      features.forEach(function (feature) {
        features_init.push({
          category_id: feature.id,
          data: [],
          type: mainConfigMgg.itemTypes.ITEM_FILM_LIST,
          title: feature.title,
          total_items: feature.video_total
        });
      });

      if (features_init.length) {
        //add data for first feature
        api.load('videoCollection', {
          id: features_init[0].category_id,
          vod: page.filter_vod,
          limit: page.film_list_limit
        }).then(function (video) {
          if(isServe) {
            collectAnalyticsFeatureInfo(features_init[0].category_id, features_init[0].title, video.video_list)
          }
          features_init[0].data = video.video_list;
          initData = initData.concat(features_init);

          updateData(initData);
        })
      } else {
        page.feature_load_complete = true;
        updateData(initData);
      }
    })
  }).catchError(function (e) {
    console.log(e);
  });
}

function updateData(data) {
  if(!page.active) {
    return;
  }
  page.content.clear();
  page.resetScroll();
  page.content.init({
    data: data,
    viewSize: 3,
    focusIndex: 0
  });

  Loader.hide();
}

function setDefaultParams(env) {
  env.start_loading_feature_list_index = 3;
  env.start_loading_films_list_index = 5;
  env.film_list_limit = 6;
  env.feature_list_limit = 5;
  env.feature_list_offset = '0';
  env.feature_list_total = 0;
  env.feature_load_complete = false;
}

function pressBack() {
  Loader.hide();
  page.content.clear(); //@TODO refactor BACK-CLEAR
  router.back();
}

function showHideArrows() {
  setTimeout(function () {
    var focusItem = page.content ? page.content.$focusItem : null;

    if (focusItem && focusItem.list && focusItem.list.$focusItem) {
      var left_offset = focusItem.list.$node.style.left ? parseInt(focusItem.list.$node.style.left) : 0;
      var list_size = focusItem.list.total_items || focusItem.list.size;
      var diff_offset = focusItem.list.dataType == mainConfigMgg.itemTypes.ITEM_FILM_LIST ? 2 : 0;
      var total_offset = -focusItem.list.$focusItem.offsetWidth * (list_size - focusItem.list.scrollList.scrollSize - diff_offset);

      if (!left_offset) {
        page.arrowsWidget.left.hide();
      } else {
        page.arrowsWidget.left.show();
      }
      if (left_offset > total_offset) {
        page.arrowsWidget.right.show();
      } else {
        page.arrowsWidget.right.hide();
      }
      if (focusItem.index >= page.content.size - 1) {
        page.arrowsWidget.down.hide();
      } else {
        page.arrowsWidget.down.show();
      }
      if (!page.scrollTopValue) {
        page.arrowsWidget.up.hide();
        page.arrowsWidget.addClass('arrow-slider');
      } else {
        page.arrowsWidget.removeClass('arrow-slider');
        page.arrowsWidget.up.show();
      }
    }
  }, 0);
}

function collectAnalyticsFeatureInfo(featureID, title, videos){
  var feature = {
    id: featureID,
    title: 'Подборка - ' + featureID + ' ' + title,
    video_items: []
  };
  videos.forEach(function (video, key) {
    feature.video_items.push(key + 1 + ' ' + video.id + ' ' + video.title);
  });

  featured_analytics_info.push(feature);
}

// public
module.exports = page;

},{"core/animate":14,"core/api":15,"core/app":16,"core/components/button":19,"core/components/list":23,"core/components/page":25,"core/components/panel":26,"core/components/widget":30,"core/dom":31,"core/lib/helpFunctions":34,"core/router":45,"core/tools/menuNavigateService":49,"core/tools/statInfoService":53,"ui/film-item":119,"ui/slider-item":127,"vendor/aura/keys":133,"widgets/loader":149,"widgets/menu-left":150}],66:[function(require,module,exports){
'use strict';

var id = 'pageReviews',
  app = require('core/app'),
  animate = require('core/animate'),
  Page = require('core/components/page'),
  router = require('core/router'),
  keys = require('vendor/aura/keys'),
  List = require('core/components/list'),
  dom = require('core/dom'),
  Panel = require('core/components/panel'),
  Widget = require('core/components/widget'),
  ScrollBar = require('core/components/scroll.bar'),
  ReviewItem = require('ui/review-item'),
  Loader = require('widgets/loader'),
  Background = require('widgets/background/background'),
  helpFunctions = require('core/lib/helpFunctions'),
  api = require('core/api');
  var scrollTopValue = 0;

var page = new Page({
  $node: document.getElementById(id),
  $body: document.getElementById(id + 'Container'),
  arrows: {},
  arrowsUpdate: showHideArrows,
  header: '',
  back_button: {
    'clickCallBack': function() {
      router.back();
    }
  }
});

page.addListener('load', function() {

  page.content = new List({
    $node: 'pageReviewsList',
    className: 'comments__list',
    type: List.prototype.TYPE_VERTICAL,
    cycle: false,
    keys: {
      LEFT: function() {
        page.backButton.focusButton(this);
      },
      RETURN: function() {
        page.backButton.emit('click');
      }
    },
    visible: true,
    events: {
      'focus': function(data) {
        this.focusItem(this.$focusItem || this.$node.firstChild);
      },
      'focus:item': function(data) {
        var top = -((data.$curr.getBoundingClientRect().top + (-page.content.$node.getBoundingClientRect().top)));
        if (top != 0) {
          page.header.shadeOn();
        } else {
          page.header.shadeOff();
        }
        if (data.$config && data.$config.no_animate) {
          page.content.$node.style.marginTop = top + 'px';
        } else {
          animate(page.content.$node, mainConfigMgg.animation.duration.speed2, {
            marginTop: top
          });
        }
        scrollTopValue = top;
      },
      mouseover: function(data) {
        this.focus();
        this.focusItem(data.$item, {
          no_emit: true
        });
        showHideArrows();
      },
      'click:item': function(data) {},
      overflow: function(data) {}
    },
    render: function($item, data) {
      $item.classList.add('comment');
      new ReviewItem($item, data, 'big');
    }
  });

  /**
   * Listeners
   */
  page.addListener('show', function(data) {

    page.header.setTitle(i18nMgg('reviews'));
    page.content.clear();
    page.content.focus();

    if (data && data.data) {

      var focusIndex = data.data[1] ? data.data[1] : 0; //
      var video_id = data.data.id ? data.data.id : data.data[0];
      Loader.show();
      api.load('videoReviews', {
        video_id: video_id,
        limit: 60
      }).then(function(data) {

        page.reviewsRespond = data.comments;
        page.emit('data', page);
        focusIndex = focusIndex < page.reviewsRespond.length  ? focusIndex : 0;
        page.content.init({
          data: page.reviewsRespond,
          focusIndex: focusIndex
        });
        Loader.hide();
      });
    } else {
      console.log('NO DATA!!!');
    }
  });

  page.addListener('hide', function() {
  });

});

function showHideArrows() {
  setTimeout(function() {
    if (page.content.$focusItem) {
      if (!scrollTopValue) {
        page.arrowsWidget.up.hide();
      } else {
        page.arrowsWidget.up.show();
      }

      if (page.content.$focusItem.index >= page.content.size - 1) {
        page.arrowsWidget.down.hide();
      } else {
        page.arrowsWidget.down.show();
      }
    }
  }, 0);
}
// public
module.exports = page;

},{"core/animate":14,"core/api":15,"core/app":16,"core/components/list":23,"core/components/page":25,"core/components/panel":26,"core/components/scroll.bar":28,"core/components/widget":30,"core/dom":31,"core/lib/helpFunctions":34,"core/router":45,"ui/review-item":125,"vendor/aura/keys":133,"widgets/background/background":141,"widgets/loader":149}],67:[function(require,module,exports){
'use strict';

var id = 'pageMovieSeasons',
  app = require('core/app'),
  animate = require('core/animate'),
  Page = require('core/components/page'),
  router = require('core/router'),
  keys = require('vendor/aura/keys'),
  List = require('core/components/list'),
  dom = require('core/dom'),
  Loader = require('widgets/loader'),
  EpisodeItem = require('ui/episode-item'),
  helpFunctions = require('core/lib/helpFunctions'),
  PopUpPincode = require('widgets/popup/popup-pincode'),
  movieService = require('core/tools/movieService'),
  api = require('core/api');


var page = new Page({
  $node: dom.tag('div', {id: id}),
  $body: dom.tag('div', {id: id + 'Container'}),
  append_to_body: true,
  header: '',
  arrows: {
    right: {
      config: {
        marginTop: -80
      }
    },
    left: {
      config: {
        height: 365,
        paddingBottom: 255
      }
    },
    up: {},
    down: {
      config: {
        top: 450,
        paddingTop: 200,
        left: 0,
        width: 1280
      }
    }
  },
  arrowsUpdate: showHideArrows,
  back_button: {
    'clickCallBack': function () {
      router.back(page.backOptions);
    }
  }
});

page.addListener('load', function () {
  page.content = new List({
    $node: 'pageMovieSeasonsContainer',
    type: List.prototype.TYPE_VERTICAL,
    cycle: false,
    visible: true,
    events: {
      'focus': function (data) {
        if (this.$focusItem) {
          this.$focusItem.list.focus();
        }
      },
      overflow: function (data) {
        if (data.direction === keys.UP && data.type !== 'mousewheel') {
          page.backButton.focusButton(this);
        }
      },
      'focus:item': function (data) {

        var $item = data.$curr;
        var top = 0;
        $item.list.focus();
        page.seasonID = $item.data.id;

        if ($item.index) {
          top = $item.getBoundingClientRect().top - parseInt(page.scrollTopValue || 0);
          top -= 125;
          page.header.shadeOn();
        } else {
          page.header.shadeOff();
        }

        page.scrollTop(top);

        var next_row_list = this.$node.children[$item.index + 1];
        var prev_row_list = this.$node.children[$item.index - 1];
        var current_row_list = this.$node.children[$item.index];

        if (next_row_list && !next_row_list.list.data.length) {
          api.load('videoEpisodes', {
            id: next_row_list.data.id
          }).then(function (video) {
            next_row_list.list.init({
              data: video,
              focusIndex: 0
            });
          });
        }

        if (current_row_list && !current_row_list.list.data.length) {
          page.focusEpisodeIndex = 0;
          api.load('videoEpisodes', {
            id: current_row_list.data.id
          }).then(function (video) {
            var movieData = page.movieInfo;
            if(movieData.series_last_watched){
              video.some(function (item, index) {
                if (item.id == movieData.series_last_watched.episode_id) {
                  item.isCurrentWatched = true;
                  page.focusEpisodeIndex = index;
                  return index;
                }
              });
            }
            current_row_list.list.init({
              data: video,
              focusIndex: page.focusEpisodeIndex || 0
            });
            //TODO refactor, fix bug with mouseover on rendering list
            setTimeout(function () {
              Loader.hide();
            }, 0);
          });
        }

        if (prev_row_list && !prev_row_list.list.data.length) {
          api.load('videoEpisodes', {
            id: prev_row_list.data.id
          }).then(function (video) {
            prev_row_list.list.init({
              data: video,
              focusIndex: 0
            });
          });
        }
      }
    },
    render: function ($item, data) {
      var size = data.episode_list && data.episode_list.length ? data.episode_list.length : 7;
      $item.list = new List({
        $node: dom.add(dom.tag('div', {
          id: 'pageMovieEpisodes'
        })),
        className: 'episodesList',
        type: List.prototype.TYPE_HORIZONTAL,
        data: data.episode_list,
        focusIndex:  page.episodeIndex || 0,
        size: size,
        cycle: false,
        scrollList: {
          startIndex: 0,
          stopIndex: 1,
          scrollSize: 3,
          speed: mainConfigMgg.animation.duration.speed2
        },
        keys: {
          UP: function () {
            page.content.move(keys.UP);
          },
          DOWN: function () {
            page.content.move(keys.DOWN);
          },
          RETURN: function () {
            page.content.clear(); //@TODO refactor BACK-CLEAR
            router.back(page.backOptions);
          }
        },
        events: {
          'mouseover': function (data) {
            this.focus();
            this.focusItem(data.$item, {
              no_emit: true
            });
          },
          'click:item': function (data) {
            page.episodeID = data.$item.data.id;
            movieService.clickWatchButton(page.movieInfo, page, true, page.episodeID);
          },
          overflow: function (data) {
            if (data.direction === keys.LEFT && data.type !== 'mousewheel') {
              page.backButton.focusButton(this);
            }
          },
          'focus:item': function () {
            page.$$lastFocus = this;
          },
          'mousewheel': function (event) {
            if (event.deltaY < 0) {
              page.content.move(keys.UP);
            }
            if (event.deltaY > 0) {
              page.content.move(keys.DOWN);
            }
          }
        },
        render: function ($item, data) {
          new EpisodeItem($item, data);
        }
      });
      $item.listTitle = dom.tag('div', {
        className: 'listTitle'
      }, data.title);
      $item.appendChild($item.listTitle);
      $item.appendChild($item.list.$node);
    }
  });
  /**
   * Listeners
   */
  page.addListener('show', function (data) {
    page.arrowsWidget.addClass('page-back-button');
    page.backButton.addClass('short');

    page.backOptions = {};

    Loader.show();

    if (helpFunctions.isNavigateBack(data)) {
      Loader.show();

      var isFromPlayer = data.data[0].data && data.data[0].data.fromPlayer || false;
      if(isFromPlayer){
        page.backOptions.fromPlayer = true;
      }

      api.load('userHistory', {video_ids: page.movieInfo.id}).then(function (data) {

        if (data && data.video_list && data.video_list.length && data.video_list[0].watched_history) {
          var movieInfo = data.video_list[0];
          var movieWH = movieInfo.watched_history;
          var movieSLW = movieInfo.series_last_watched;
          page.movieInfo.series_last_watched = movieInfo.series_last_watched;

          page.content.clear();

          page.seasonList.some(function (item, index) {
            if (item.id == movieSLW.season_id) {
              page.seasonIndex = index;
              return index;
            }
          });

          if(page.seasonList[page.seasonIndex].episode_list && page.seasonList[page.seasonIndex].episode_list.length){
            var seriesData = page.seasonList[page.seasonIndex].episode_list;

            seriesData.some(function (item, index) {
              if (item.id == movieSLW.episode_id) {
                item.isCurrentWatched = true;
                page.episodeIndex = index;
                return index;
              }
            });
          }

          page.content.init({
            data: page.seasonList,
            focusIndex: page.seasonIndex || 0
          });
        }else{
          page.content.focus();
          Loader.hide();

        }
      });
      return;
    }

    if (data && data.data && data.data[1]) {

      Loader.show();

      page.seasonList = data.data[1].seasons;
      page.aviability = data.data[1].isAvailable;
      page.movieInfo = data.data[1].movieInfo;
      page.seasonIndex = data.data[1].focusSeasonIndex;
      page.episodeIndex = data.data[1].focusEpisodeIndex;

      page.header.setTitle(data.data[1].movieTitle);
      page.content.clear();

      if (!page.seasonList) {
        alertError();
        Loader.hide();
        return;
      }

      page.content.init({
        data: page.seasonList,
        focusIndex: page.seasonIndex || 0
      });
    //  Loader.hide();

    } else {
      alertError();
      Loader.hide();
    }

    PopUpPincode.addListener('hide', hidePinPopUpCallback);
    PopUpPincode.addListener('correctPinVideoAge', correctPinVideoAgeCallback);

  });

  page.addListener('hide', function () {
    page.arrowsWidget.removeClass('page-back-button');
    page.backButton.removeClass('short');
    PopUpPincode.removeListener('hide', hidePinPopUpCallback);
    PopUpPincode.removeListener('correctPinVideoAge', correctPinVideoAgeCallback);
  });


  function correctPinVideoAgeCallback() {
    router.navigate('pagePlayer', [
      page.episodeID
    ]);
  }

  function hidePinPopUpCallback() {
    page.content.focus();
  }

  function alertError() {
    alert('ERROR');
    router.navigate();
  }
});

function showHideArrows() {
  setTimeout(function () {
    var focusItem = page.content ? page.content.$focusItem : null;

    if (focusItem && focusItem.list && focusItem.list.$focusItem) {
      var left_offset = focusItem.list.$node.style.left ? parseInt(focusItem.list.$node.style.left) : 0;
      var list_size = focusItem.list.size;
      //@TODO need to change html of focusItem.list.$focusItem + 8 - is margin offsetWidth must be prop with margin idont want to calculate it!
      var total_offset = -(focusItem.list.$focusItem.offsetWidth + 8) * (list_size - focusItem.list.scrollList.scrollSize - 1);

      if (!left_offset) {
        page.arrowsWidget.left.hide();
      } else {
        page.arrowsWidget.left.show();
      }
      if (left_offset > total_offset) {
        page.arrowsWidget.right.show();
      } else {
        page.arrowsWidget.right.hide();
      }
      if (focusItem.index >= page.content.size - 1) {
        page.arrowsWidget.down.hide();
      } else {
        page.arrowsWidget.down.show();
      }
      if (!page.scrollTopValue) {
        page.arrowsWidget.up.hide();
      } else {
        page.arrowsWidget.up.show();
      }
    }
  }, 0);
}
// public
module.exports = page;

},{"core/animate":14,"core/api":15,"core/app":16,"core/components/list":23,"core/components/page":25,"core/dom":31,"core/lib/helpFunctions":34,"core/router":45,"core/tools/movieService":50,"ui/episode-item":117,"vendor/aura/keys":133,"widgets/loader":149,"widgets/popup/popup-pincode":158}],68:[function(require,module,exports){
'use strict';

var id = 'pageSeries',
  api = require('core/api'),
  app = require('core/app'),
  Button = require('core/components/button'),
  dom = require('core/dom'),
  ErrorBlock = require('widgets/popup/popup-error'),
  FilmItemRender = require('ui/film-item'),
  helpFunctions = require('core/lib/helpFunctions'),
  statInfoService = require('core/tools/statInfoService'),
  menuNavigateService = require('core/tools/menuNavigateService'),
  keys = require('vendor/aura/keys'),
  LeftMenu = require('widgets/menu-left'),
  Loader = require('widgets/loader'),
  List = require('core/components/list'),
  Page = require('core/components/page'),
  Panel = require('core/components/panel'),
  router = require('core/router'),
  Slider = require('ui/slider-item'),
  Widget = require('core/components/widget'),
  featured_analytics_info = [],
  isServe = false
  ;

//@TODO need to combine premiere films and cartoons
var active_list;
var page = new Page({
  $node: dom.tag('div', {id: id}),
  $body: dom.tag('div', {id: id+ 'Container'}),
  append_to_body: true,
  arrows: {down: {config: {top: 480, paddingTop: 170}}},
  arrowsUpdate: showHideArrows,
  header: ''
});

page.info = {};

page.addListener('load', function () {
  page.filter_vod = 'single,subscription,free';
  setDefaultParams(page);

  page.content = new List({
    type: List.prototype.TYPE_VERTICAL,
    data: [],
    viewSize: 3,
    focusIndex: 0,
    keys: {
      RETURN: function () {
        pressBack();
      }
    },
    events: {
      'overflow': function (data) {
        if (data.direction === keys.DOWN) {
          if (page.feature_load_complete) {
            $$watchAllCartoons.focus();
            active_list.classList.add('active')
          }
        }
      },
      'focus': function (data) {
        if (this.$focusItem) {
          this.$focusItem.list.focus();
        }
      },
      'focus:item': function (data) {
        var top = 0;
        var $item = data.$curr;
        $item.list.focus();
        if ($item.index) {
          top = $item.getBoundingClientRect().top - parseInt(page.scrollTopValue || 0);
          top -= 85;
        }

        ///@TODO for testing
        var self = this;
        var next_row_list = this.$node.children[$item.index + 1];
        if (next_row_list && !next_row_list.list.data.length) {
          api.load('videoCollection', {
            id: next_row_list.data.category_id,
            vod: page.filter_vod
          }).then(function (video) {
            //setTimeout(function(){next_row_list.list.init({data:video.video_list, focusIndex:0});},3000);

            if(isServe) {
              collectAnalyticsFeatureInfo(next_row_list.data.category_id, next_row_list.data.title, video.video_list)
            }

            next_row_list.list.init({
              data: video.video_list,
              focusIndex: 0
            });
          })
        }

        lazyLoadFeaturedGroup($item)

        if (data.$curr.index) {
          page.header.shadeOn();
          page.arrowsWidget.up.show();
          page.arrowsWidget.down.show();
        } else {
          page.header.shadeOff();
          page.arrowsWidget.up.hide();
        }

        if (data.$curr.index == page.content.size - 1) {
          page.arrowsWidget.down.hide();
        }

        page.scrollTop(top);

        active_list = $item.list.$node;
        active_list.classList.add('active')

      },
      'mouseover': function (data) {
        this.focus();
        this.focusItem(data.$item, {
          no_emit: true
        });
        data.$item.list.focus();
        showHideArrows();
      }
    },
    render: function ($item, data) {
      if (data.type === mainConfigMgg.itemTypes.ITEM_FILM_LIST) {
        var offset_film_item = 0;
        $item.list = new List({
          type: List.prototype.TYPE_HORIZONTAL,
          size: data.data.length || 7,
          data: data.data,
          //viewSize: 7,
          focusIndex: 0,
          className: 'filmsList',
          total_items: data.total_items,
          dataType: data.type,
          scrollList: {
            startIndex: 2,
            stopIndex: 2,
            speed: mainConfigMgg.animation.duration.speed2,
            scrollSize: 3
          },
          events: {
            'click:item': function (listData) {
              statInfoService.sendGATrackEvent(page.id + '_collection_' + data.category_id, listData.$item.data.id);

              router.navigate('pageMovie', [
                listData.$item.data.id
              ]);
            },
            'mouseover': function (data) {
              this.focus();
              this.focusItem(data.$item, {
                no_emit: true
              });
              showHideArrows();
            },
            'overflow': function (data) {
              if (data.direction === keys.LEFT && data.type !== 'mousewheel') {
                LeftMenu.showMenu({
                  'componentToFocus': page.content
                });
              }
            },
            'focus:item': function (itemData) {
              if ((offset_film_item + page.film_list_limit <= this.total_items) && (itemData.$curr.index >= this.size - page.start_loading_films_list_index)) {
                offset_film_item += page.film_list_limit;
                api.load('videoCollection', {
                  id: data.category_id,
                  offset: offset_film_item,
                  vod: page.filter_vod
                }).then(function (data) {
                  $item.list.addData(data.video_list);
                })
              }
            },
            'mousewheel': function (event) {
              if (event.deltaY < 0) {
                page.content.move(keys.UP);
              }
              if (event.deltaY > 0) {
                page.content.move(keys.DOWN);
              }
            }
          },
          keys: {
            UP: function () {
              if(active_list) {
                active_list.classList.remove('active');
              }
              page.content.move(keys.UP);
            },
            DOWN: function () {
              if(active_list) {
                active_list.classList.remove('active');
              }
              page.content.move(keys.DOWN);
            },
            RETURN: function() {
              pressBack();
            }
          },
          render: function ($listItem, listData) {
            FilmItemRender($listItem, listData);
          }
        });

        $item.listItemTitle = new Panel({
          $node: dom.add(dom.tag('div', {
            className: 'panelTitle'
          }), data.title),
          focusable: false
        });
        //need refactor, create component  FilmItem
        $item.appendChild($item.listItemTitle.$node);
        $item.appendChild($item.list.$node);

      } else if (data.type === mainConfigMgg.itemTypes.ITEM_CAROUSEL) {
        $item.list = new List({
          type: List.prototype.TYPE_HORIZONTAL,
          data: data.data,
          className: 'slider',
          //viewSize: 3,
          focusIndex: 0,
          dataType: data.type,
          scrollList: {
            startIndex: 0,
            scrollSize: 1,
            speed: mainConfigMgg.animation.duration.speed2
          },
          events: {
            'click:item': function (data) {

              statInfoService.sendGATrackEvent(page.id + '_slider', data.$item.data.id);

              if (data.$item.data.slider_type == "feature") {
                router.navigate('pageMoviesCategory', [
                  'collections', data.$item.data.object_id
                ]);
              }

              if (data.$item.data.slider_type == "object") {
                router.navigate('pageMovie', [
                  data.$item.data.object_id
                ]);
              }

              if (data.$item.data.slider_type == "url") {
                menuNavigateService.navigateAdLink('navigate', data.$item.data.link);
              }
            },
            'overflow': function (data) {
              if (data.direction === keys.LEFT && data.type !== 'mousewheel') {
                LeftMenu.showMenu({
                  'componentToFocus': page.content
                });
              }
            },
            'focus:item': function (data) {
            },
            'mousewheel': function (event) {
              if (event.deltaY < 0) {
                page.content.move(keys.UP);
              }
              if (event.deltaY > 0) {
                page.content.move(keys.DOWN);
              }
            },
            'mouseover': function (data) {
              this.focus();
              this.focusItem(data.$item, {
                no_emit: true
              });
              showHideArrows();
            }
          },
          keys: {
            UP: function () {
              page.content.move(keys.UP);
            },
            DOWN: function () {
              if(active_list) {
                active_list.classList.remove('active');
              }
              page.content.move(keys.DOWN);
            },
            RETURN: function() {
              pressBack();
            }
          },
          render: function ($item, data) {
            new Slider($item, data);
          }
        });

        $item.appendChild($item.list.$node);
      }
    }
  });

  var $$watchAllCartoonsContainer = new Panel({
    $node: dom.add(dom.tag('div', {
      className: 'watchAllPremiereContainer'
    })),
    focusable: false
  });

  var $$watchAllCartoons = new Button({
    'className': 'watchAllPremiere',
    events: {
      'click': function (event) {
        statInfoService.sendGATrackEvent(page.id + '_button', 'all_series');
        router.navigate('pageMoviesCategory', [4]);
      },
      'focus': function () {
        if(isServe){
          var uniqueArray = helpFunctions.removeDuplicates(featured_analytics_info, "id");
          console.log([uniqueArray.length, page.feature_list_total]);
          console.log(JSON.stringify(uniqueArray));
        }
      }
    },
    keys: {
      UP: function () {
        page.content.focus();
      },
      LEFT: function () {
        LeftMenu.showMenu({
          'componentToFocus': $$watchAllCartoons
        });
      },
      RETURN: function() {
        pressBack();
      }
    }
  });
  $$watchAllCartoonsContainer.add($$watchAllCartoons);
  page.add(page.content);
  page.add($$watchAllCartoonsContainer);

  /**
   * Listeners
   */
  page.addListener('show', function (data) {
    //@TODO small hack for prevent focus on first carousel while mouseover
    if (page.arrowsWidget.mouse_used) {
      page.arrowsWidget.showArrows();
      page.arrowsWidget.down.show();
    }
    page.content.focus();
    showHideArrows();
    page.header.setTitle(i18nMgg('series_noun'));

    $$watchAllCartoons.setValue(i18nMgg('all_series'));

    if (helpFunctions.isNavigateBack(data)) {
      Loader.hide();
      return;
    }

    setDefaultParams(page);

    Loader.show();
    if (data && data.data && data.data[0]) {
      page.info = JSON.parse(data.data[0]);

      if (page.info.slider_category_id) {
        api.load('slider', {
          category_id: page.info.slider_category_id,
          size: "big",
          vod: page.filter_vod
        }).then(function (data) {
          if (data && data.sliders) {
            featuredGroup(data.sliders);
          }
        }, function (e) {
          return {
            error: e
          };
        }).catchError(function (e) {
          console.log(e);
        });
      } else {
        featuredGroup();
      }
    } else {
      alert('error no data in url');
      page.content.clear(); //@TODO refactor BACK-CLEAR
      router.back();
      Loader.hide();
    }
  });

  page.addListener('hide', function (data) {
    page.arrowsWidget.removeClass('arrow-slider');
  });

  function updateData(data) {
    if(!page.active) {
      return;
    }
    page.content.clear();
    page.resetScroll();
    if (data && data.length) {
      page.content.init({
        data: data,
        viewSize: 3,
        focusIndex: 0
      });
      $$watchAllCartoons.show();
    } else {
      ErrorBlock.show({
        backLable: function () {
          router.back();
        },
        text: i18nMgg('nothing_found'),
        buttons: [
          {
            text: i18nMgg('close'), callback: function () {
            router.back();
          }
          }
        ]
      });
    }

    Loader.hide();
  }

  function featuredGroup(slider) {
    if (page.info.featured_group_id) {
      var features = [],
        features_init = [],
        initData = [];

      api.load('featuredGroup', {
        group_id: page.info.featured_group_id,
        required: 1,
        vod: page.filter_vod,
        limit: page.feature_list_limit,
        offset: page.feature_list_offset
      }).then(function (data) {
        page.feature_list_total = data.total;
        if (data.group && data.group.sub_featured) {
          features = data.group.sub_featured;
        }

        if (slider && slider.length) {
          var supportedSliders = helpFunctions.filterSupportedSliders(slider);

          if (supportedSliders.length) {
            initData.push({
              data: supportedSliders,
              type: mainConfigMgg.itemTypes.ITEM_CAROUSEL
            });
          }
        }


        features.forEach(function (feature) {
          features_init.push({
            category_id: feature.id,
            data: [],
            type: mainConfigMgg.itemTypes.ITEM_FILM_LIST,
            title: feature.title,
            total_items: feature.video_total
          });
        });

        if (features_init.length) {
          //add data for first feature
          api.load('videoCollection', {
            id: features_init[0].category_id,
            vod: page.filter_vod
          }).then(function (video) {

            if(isServe) {
              collectAnalyticsFeatureInfo(features_init[0].category_id, features_init[0].title, video.video_list)
            }

            features_init[0].data = video.video_list;
            initData = initData.concat(features_init);

            updateData(initData);
          })
        } else {
          updateData(initData);
        }
      })
    } else {
      updateData();
    }
  }
});

function pressBack() {
  Loader.hide();
  page.content.clear() //@TODO refactor BACK-CLEAR
  router.back();
}

function setDefaultParams(env) {
  env.start_loading_feature_list_index = 2;
  env.start_loading_films_list_index = 5;
  env.film_list_limit = 6;
  env.feature_list_limit = 5;
  env.feature_list_offset = '0';
  env.feature_list_total = 0;
  env.feature_load_complete = false;
}

function lazyLoadFeaturedGroup($item) {
  if ((page.feature_list_offset + page.feature_list_limit <= page.feature_list_total)
    && ($item.index == page.content.size - page.start_loading_feature_list_index)
    && ($item.list.dataType == mainConfigMgg.itemTypes.ITEM_FILM_LIST)) {
    //@TODO need to use one load for basic load and lazy load
    page.feature_list_offset = parseInt(page.feature_list_offset) + page.feature_list_limit;
    api.load('featuredGroup', {
      group_id: page.info.featured_group_id,
      required: 1,
      vod: page.filter_vod,
      limit: page.feature_list_limit,
      offset: page.feature_list_offset
    }).then(function(data) {
      var initLoadData = [];
      page.feature_list_total = data.total;
      if (data.group && data.group.sub_featured) {
        data.group.sub_featured.forEach(function(feature) {
          initLoadData.push({
            category_id: feature.id,
            data: [],
            type: mainConfigMgg.itemTypes.ITEM_FILM_LIST,
            title: feature.title,
            total_items: feature.video_total
          });
        });
      }

      page.content.addData(initLoadData);
      if(page.feature_list_offset + page.feature_list_limit >= page.feature_list_total) {
        page.feature_load_complete = true;
      }
    });
  }
}

function showHideArrows() {
  page.arrowsWidget.up.hide();
  page.arrowsWidget.left.hide();
  setTimeout(function () {
    var focusItem = page.content ? page.content.$focusItem : null;

    if (focusItem && focusItem.list && focusItem.list.$focusItem) {
      var left_offset = focusItem.list.$node.style.left ? parseInt(focusItem.list.$node.style.left) : 0;
      var list_size = focusItem.list.total_items || focusItem.list.size;
      var diff_offset = focusItem.list.dataType == mainConfigMgg.itemTypes.ITEM_FILM_LIST ? 2 : 0;
      var total_offset = -focusItem.list.$focusItem.offsetWidth * (list_size - focusItem.list.scrollList.scrollSize - diff_offset);

      if (!left_offset) {
        page.arrowsWidget.left.hide();
      } else {
        page.arrowsWidget.left.show();
      }
      if (left_offset > total_offset) {
        page.arrowsWidget.right.show();
      } else {
        page.arrowsWidget.right.hide();
      }
      if (focusItem.index >= page.content.size - 1) {
        page.arrowsWidget.down.hide();
      } else {
        page.arrowsWidget.down.show();
      }
      if (!page.scrollTopValue) {
        page.arrowsWidget.up.hide();
        page.arrowsWidget.addClass('arrow-slider');
      } else {
        page.arrowsWidget.removeClass('arrow-slider');
        page.arrowsWidget.up.show();
      }
    } else {
      page.arrowsWidget.up.hide();
      page.arrowsWidget.down.hide();
      page.arrowsWidget.right.hide();
      page.arrowsWidget.left.hide();
    }
  }, 0);
}

function collectAnalyticsFeatureInfo(featureID, title, videos){
  var feature = {
    id: featureID,
    title: 'Подборка - ' + featureID + ' ' + title,
    video_items: []
  };
  videos.forEach(function (video, key) {
    feature.video_items.push(key + 1 + ' ' + video.id + ' ' + video.title);
  });

  featured_analytics_info.push(feature);
}
// public
module.exports = page;

},{"core/api":15,"core/app":16,"core/components/button":19,"core/components/list":23,"core/components/page":25,"core/components/panel":26,"core/components/widget":30,"core/dom":31,"core/lib/helpFunctions":34,"core/router":45,"core/tools/menuNavigateService":49,"core/tools/statInfoService":53,"ui/film-item":119,"ui/slider-item":127,"vendor/aura/keys":133,"widgets/loader":149,"widgets/menu-left":150,"widgets/popup/popup-error":153}],69:[function(require,module,exports){
/**
 * Init page implementation.
 *
 */

'use strict';

var padeId = 'pageInit',
  api = require('core/api'),
  gulp_api_keys = require('vendor/aura/api_keys'),
  app = require('core/app'),
  Background = require('widgets/background'),
  dom = require('core/dom'),
  Page = require('core/components/page'),
  helpFunctions = require('core/lib/helpFunctions'),
  ErrorBlock = require('widgets/popup/popup-error'),
  LeftMenu = require('widgets/menu-left'),
  router = require('core/router'),
  mainPage = require('pages/other/main'),
  Promise = require('core/promise'),
  Ad = require('widgets/ad'),
  bubbleSubscription = require('widgets/bubble-subscription'),
  bubbleBadConnection = require('widgets/bubble-bad-connection'),
  statInfoService = require('core/tools/statInfoService'),
  subscriptionService = require('core/tools/subscriptionService'),
  userInfo, page_name, networkMonitorTimeout;

var page = new Page({
  $node: dom.tag('div', {id: padeId, className: 'active'}),
  $body: dom.tag('div', {id: padeId + 'Container'}),
  append_to_body: true
});

page.addListener('load', function () {

  setBaseConfigSettings().then(function () {

    app.emit('ready');

    api.loadBaseData()
      .then(function () {
        app.dataStorage.timeLocalDiff = getTimeLocalDiff();

        page.initMenu();
        ga('create', 'UA-27184289-6', {
         'clientId': mainConfigMgg.deviceInfo.deviceID,
          'userId': app.dataStorage.user.user_id
         });
        ga('require', 'ecommerce');

        router.addListener('navigate', function (data) {
          if (LeftMenu.container.visible) {
            LeftMenu.hideMenu('no_animate');
          }
          var routerHash = data.to.hash;
          var url = mainConfigMgg.app.lang + "/" + routerHash.slice(1, routerHash.length);

          if(mainConfigMgg.deviceInfo.vendor == 'samsung' || mainConfigMgg.deviceInfo.vendor == 'tizen'){
            statInfoService.trackGAPageView(url);
          }else{
            ga('set', 'checkProtocolTask', null);
            ga('set', 'dimension1', mainConfigMgg.deviceInfo.vendor);
            ga('set', 'dimension2', mainConfigMgg.deviceInfo.name);
            ga('set', 'dimension3', mainConfigMgg.deviceInfo.deviceID);
            ga('set', 'dimension4', mainConfigMgg.app.version);
            ga('set', 'dimension5', app.dataStorage.user.is_autouser);
            ga('set', 'dimension6', app.dataStorage.user.user_id);
            ga('send', 'pageview', url);
          }
        });

        router.firstNavigate();

        if (router.current.id == 'pageMain') {
          var adUrl = api.getUrl('appadvert', {first_start: mainConfigMgg.app.firstTimeUser.toString()}, {method: 'get'});
          player.addEventListener("ad:external:vastData", handleAdVastData, false);
          player.addEventListener("ad:external:vastEvent", handleAdVastEvent, false);
          player.addEventListener("ad:external:adComplete", handleAdComplete, false);
          player.showAnotherAd(adUrl.url, 'startscreen');
        }

        app.loaded = true;
        app.emit('loaded');

        if (mainConfigMgg.deviceInfo.vendor == 'samsung') {
          setInterval(function () {
            samsungNetworkMonitor();
          }, 2500);
        }

      });
  }).catchError(function(e){
    ErrorBlock.show({
      backLable: function () {
        router.back();
      },
      text: e,
      buttons: [
        {
          text: i18nMgg('exit_app_button'), callback: function () {
          helpFunctions.deviceExit();
        }
        }
      ]
    });
  });

});


var setBaseConfigSettings = function () {

  return new Promise(function (resolve, reject) {
    mainConfigMgg.deviceInfo.hasStorage = helpFunctions.hasStorage();
    mainConfigMgg.deviceInfo.vendor = helpFunctions.getDeviceVendor();
    mainConfigMgg.deviceInfo.isWebos = helpFunctions.iswebOS();
    mainConfigMgg.deviceInfo.supportWebSocket = helpFunctions.supportWebSocket();

    if (helpFunctions.getCookie('settings.animation') && helpFunctions.getCookie('settings.animation') != 'undefined') {
      mainConfigMgg.animation.animated = parseInt(helpFunctions.getCookie('settings.animation'));
    }

    var updateText = 'Доступна новая версия приложения. <br> Пожалуйста, обновите ваше приложение в LG Store.' +
      '<br> <br> New version of application is available. <br> Please update your app in LG Store.'

    if (mainConfigMgg.deviceInfo.isWebos) {
      helpFunctions.getWebOSLocalizationLanguage().then(function (data) {
        if (data.error) {
          ErrorBlock.hide();
          ErrorBlock.show({
            backLable: function () {
              router.back();
            },
            type: 'update',
            // text: data.errorText,
            text: updateText,
            buttons: [
              {
                text: i18nMgg('exit_app_button'), callback: function () {
                helpFunctions.deviceExit(false, true);
              }
              }
            ]
          });
        } else {
          mainConfigMgg.app.lang = data.lang;
        }
      });
      helpFunctions.getWebOSDeviceId().then(function (data) {
        if (data.error) {
          ErrorBlock.hide();
          ErrorBlock.show({
            backLable: function () {
              router.back();
            },
            type: 'update',
            //  text: data.errorText,
            text: updateText,
            buttons: [
              {
                text: i18nMgg('exit_app_button'), callback: function () {
                helpFunctions.deviceExit(false, true);
              }
              }
            ]
          });
        } else {
          setCorrectApiKeys(mainConfigMgg.deviceInfo.vendor);
          resolve('Success');
        }

      });
    } else {
      mainConfigMgg.deviceInfo.deviceID = helpFunctions.getDeviceId();
      mainConfigMgg.deviceInfo.name = helpFunctions.getDeviceName();
      mainConfigMgg.deviceInfo.firmware = helpFunctions.getDeviceFirmware();
      mainConfigMgg.deviceInfo.support3d = helpFunctions.support3d();
      mainConfigMgg.deviceInfo.supportUHD = helpFunctions.supportUHD();
      mainConfigMgg.app.lang = helpFunctions.getLocalizationLanguage();
      setCorrectApiKeys(mainConfigMgg.deviceInfo.vendor);
      resolve('Success');
    }
  });

};

var setCorrectApiKeys = function (vendor) {

  var gulpKeys = gulp_api_keys;
  var gulpKeysVendor = Object.keys(gulpKeys);

  var vendorKeys = gulpKeys[gulpKeysVendor];

  if (vendor == gulpKeysVendor) {
    switch (vendor) {
      case 'lg':
        mainConfigMgg.deviceInfo.lgOldModel = helpFunctions.lgOldModel();

        if (mainConfigMgg.deviceInfo.noAdKey) {
          if (mainConfigMgg.deviceInfo.lgOldModel) {
            if (mainConfigMgg.deviceInfo.support3d) {
              mainConfigMgg.api.keys.publicKey = vendorKeys.lg_tv_old_3d_noad.public_key;
              mainConfigMgg.api.keys.privateKey = vendorKeys.lg_tv_old_3d_noad.private_key;
            } else {
              mainConfigMgg.api.keys.publicKey = vendorKeys.lg_tv_old_noad.public_key;
              mainConfigMgg.api.keys.privateKey = vendorKeys.lg_tv_old_noad.private_key;
            }
          } else {
            if (mainConfigMgg.deviceInfo.supportUHD) {
              if (mainConfigMgg.deviceInfo.support3d) {
                if (mainConfigMgg.deviceInfo.supportHDR) {
                  mainConfigMgg.api.keys.publicKey = vendorKeys.lg_tv_3d_uhd_hdr_noad.public_key;
                  mainConfigMgg.api.keys.privateKey = vendorKeys.lg_tv_3d_uhd_hdr_noad.private_key;
                } else {
                  mainConfigMgg.api.keys.publicKey = vendorKeys.lg_tv_3d_uhd_noad.public_key;
                  mainConfigMgg.api.keys.privateKey = vendorKeys.lg_tv_3d_uhd_noad.private_key;
                }
              } else {
                if (mainConfigMgg.deviceInfo.supportHDR) {
                  mainConfigMgg.api.keys.publicKey = vendorKeys.lg_tv_uhd_hdr_noad.public_key;
                  mainConfigMgg.api.keys.privateKey = vendorKeys.lg_tv_uhd_hdr_noad.private_key;
                } else {
                  mainConfigMgg.api.keys.publicKey = vendorKeys.lg_tv_uhd_noad.public_key;
                  mainConfigMgg.api.keys.privateKey = vendorKeys.lg_tv_uhd_noad.private_key;
                }
              }
            } else {
              if (mainConfigMgg.deviceInfo.support3d) {
                mainConfigMgg.api.keys.publicKey = vendorKeys.lg_tv_3d_noad.public_key;
                mainConfigMgg.api.keys.privateKey = vendorKeys.lg_tv_3d_noad.private_key;
              } else {
                mainConfigMgg.api.keys.publicKey = vendorKeys.lg_tv_noad.public_key;
                mainConfigMgg.api.keys.privateKey = vendorKeys.lg_tv_noad.private_key;
              }
            }
          }
        } else {
          if (mainConfigMgg.deviceInfo.lgOldModel) {
            if (mainConfigMgg.deviceInfo.support3d) {
              mainConfigMgg.api.keys.publicKey = vendorKeys.lg_tv_old_3d.public_key;
              mainConfigMgg.api.keys.privateKey = vendorKeys.lg_tv_old_3d.private_key;
            } else {
              mainConfigMgg.api.keys.publicKey = vendorKeys.lg_tv_old.public_key;
              mainConfigMgg.api.keys.privateKey = vendorKeys.lg_tv_old.private_key;
            }
          } else {
            if (mainConfigMgg.deviceInfo.supportUHD) {
              if (mainConfigMgg.deviceInfo.support3d) {
                if (mainConfigMgg.deviceInfo.supportHDR) {
                  mainConfigMgg.api.keys.publicKey = vendorKeys.lg_tv_3d_uhd_hdr.public_key;
                  mainConfigMgg.api.keys.privateKey = vendorKeys.lg_tv_3d_uhd_hdr.private_key;
                } else {
                  mainConfigMgg.api.keys.publicKey = vendorKeys.lg_tv_3d_uhd.public_key;
                  mainConfigMgg.api.keys.privateKey = vendorKeys.lg_tv_3d_uhd.private_key;
                }
              } else {
                if (mainConfigMgg.deviceInfo.supportHDR) {
                  mainConfigMgg.api.keys.publicKey = vendorKeys.lg_tv_uhd_hdr.public_key;
                  mainConfigMgg.api.keys.privateKey = vendorKeys.lg_tv_uhd_hdr.private_key;
                } else {
                  mainConfigMgg.api.keys.publicKey = vendorKeys.lg_tv_uhd.public_key;
                  mainConfigMgg.api.keys.privateKey = vendorKeys.lg_tv_uhd.private_key;
                }
              }
            } else {
              if (mainConfigMgg.deviceInfo.support3d) {
                mainConfigMgg.api.keys.publicKey = vendorKeys.lg_tv_3d.public_key;
                mainConfigMgg.api.keys.privateKey = vendorKeys.lg_tv_3d.private_key;
              } else {
                mainConfigMgg.api.keys.publicKey = vendorKeys.lg_tv.public_key;
                mainConfigMgg.api.keys.privateKey = vendorKeys.lg_tv.private_key;
              }
            }
          }
        }


        break;
      case 'samsung':
        if (mainConfigMgg.deviceInfo.supportUHD) {
          if (mainConfigMgg.deviceInfo.support3d) {
            mainConfigMgg.api.keys.publicKey = vendorKeys.samsung_tv_3d_uhd.public_key;
            mainConfigMgg.api.keys.privateKey = vendorKeys.samsung_tv_3d_uhd.private_key;
          } else {
            mainConfigMgg.api.keys.publicKey = vendorKeys.samsung_tv_uhd.public_key;
            mainConfigMgg.api.keys.privateKey = vendorKeys.samsung_tv_uhd.private_key;
          }
        } else {
          mainConfigMgg.deviceInfo.bdDevice = helpFunctions.isBD();
          if (mainConfigMgg.deviceInfo.bdDevice) {
            mainConfigMgg.api.keys.publicKey = vendorKeys.samsung_bd.public_key;
            mainConfigMgg.api.keys.privateKey = vendorKeys.samsung_bd.private_key;
            mainConfigMgg.deviceInfo.support3d = false;
          } else {
            if (mainConfigMgg.deviceInfo.support3d) {
              mainConfigMgg.api.keys.publicKey = vendorKeys.samsung_tv_3d.public_key;
              mainConfigMgg.api.keys.privateKey = vendorKeys.samsung_tv_3d.private_key;
            } else {
              mainConfigMgg.api.keys.publicKey = vendorKeys.samsung_tv.public_key;
              mainConfigMgg.api.keys.privateKey = vendorKeys.samsung_tv.private_key;
            }
          }
        }
        break;
      case 'tizen':
        if (mainConfigMgg.deviceInfo.supportUHD) {
          if (mainConfigMgg.deviceInfo.support3d) {
            if (mainConfigMgg.deviceInfo.supportHDR) {
              mainConfigMgg.api.keys.publicKey = vendorKeys.samsung_tv_tizen_3d_uhd_hdr.public_key;
              mainConfigMgg.api.keys.privateKey = vendorKeys.samsung_tv_tizen_3d_uhd_hdr.private_key;
            } else {
              mainConfigMgg.api.keys.publicKey = vendorKeys.samsung_tv_tizen_3d_uhd.public_key;
              mainConfigMgg.api.keys.privateKey = vendorKeys.samsung_tv_tizen_3d_uhd.private_key;
            }
          } else {
            if (mainConfigMgg.deviceInfo.supportHDR) {
              mainConfigMgg.api.keys.publicKey = vendorKeys.samsung_tv_tizen_uhd_hdr.public_key;
              mainConfigMgg.api.keys.privateKey = vendorKeys.samsung_tv_tizen_uhd_hdr.private_key;
            } else {
              mainConfigMgg.api.keys.publicKey = vendorKeys.samsung_tv_tizen_uhd.public_key;
              mainConfigMgg.api.keys.privateKey = vendorKeys.samsung_tv_tizen_uhd.private_key;
            }
          }
        } else {
          if (mainConfigMgg.deviceInfo.support3d) {
            mainConfigMgg.api.keys.publicKey = vendorKeys.samsung_tv_tizen_3d.public_key;
            mainConfigMgg.api.keys.privateKey = vendorKeys.samsung_tv_tizen_3d.private_key;
          } else {
            mainConfigMgg.api.keys.publicKey = vendorKeys.samsung_tv_tizen.public_key;
            mainConfigMgg.api.keys.privateKey = vendorKeys.samsung_tv_tizen.private_key;
          }
        }
        break;
      case 'browser':
      case 'sony':
      case 'philips':
      case 'toshiba':
      case 'panasonic':
      case 'netrange':
      case 'opera':
      case 'oppo':
      case 'aura':
      case 'smart':
      case 'sony_ps':
      case 'foxxum':
      case 'dune':
        mainConfigMgg.api.keys.publicKey = vendorKeys.public_key;
        mainConfigMgg.api.keys.privateKey = vendorKeys.private_key;
        break;
    }
  } else {

    if (!vendorKeys.public_key) {
      vendorKeys = vendorKeys[Object.keys(vendorKeys)[0]];
    }

    mainConfigMgg.api.keys.publicKey = vendorKeys.public_key;
    mainConfigMgg.api.keys.privateKey = vendorKeys.private_key;
  }

};


page.initMenu = function () {
  app.dataStorage.categoriesMenu = [];

  if (app.dataStorage.configurationMenu) {
    app.dataStorage.categoriesMenu = app.dataStorage.configurationMenu ? app.dataStorage.configurationMenu.menu_items : [];
    buildLeftMenu(app.dataStorage.categoriesMenu);
    buildMainMenu(app.dataStorage.configurationMainMenu);
  }
};

function handleAdVastData(event) {
  Ad.setVastData(event.data);
}

var startScreenIsShowed = false;

function handleAdVastEvent(event) {
  if (event.data.vastEvent == 'start' && event.data.type == "startscreen") {
    Ad.show(event.data);
    Ad.controlsShowed();
    startScreenIsShowed = true;
  }
}

function handleAdComplete() {
  player.removeEventListener("ad:external:adComplete", handleAdComplete);
  player.removeEventListener("ad:external:vastData", handleAdVastData);
  player.removeEventListener("ad:external:vastEvent", handleAdVastEvent);
  showLeftDaysBubble();
  if (!startScreenIsShowed) return;
  Ad.hide();
  Ad.controlsHided();
  //TODO add initialFocus to pages
  var current = router.current;
  if (current.initialFocus) {
    current.initialFocus();
  } else if (current.$$lastFocus) {
    current.$$lastFocus.focus();
  } else if (current.content) {
    current.content.focus();
  }
}

function buildLeftMenu(data) {

  var app_menu = [{
    id: 'profile',
    title: i18nMgg('profile'),
    'class': 'icon-item',
    subClass: 'icon-profile',
    type: 'profile',
    meta: [{}],
    sub_menu: []
  }, {
    id: 'search',
    title: i18nMgg('search'),
    'class': 'icon-item',
    subClass: 'icon-search',
    type: 'search',
    meta: [{}],
    sub_menu: []
  }, {
    id: 'iwatch',
    title: i18nMgg('i_watch'),
    'class': 'icon-item',
    subClass: 'icon-watch',
    type: 'iwatch',
    meta: [{}],
    sub_menu: []
  }];

  //validate menu items
  var menu_items = validateMenuItems(data);

  var left_menu = app_menu.concat(menu_items);
  LeftMenu.leftMenu.catList.clear();
  LeftMenu.leftMenu.catList.init({
    data: left_menu,
    focusIndex: 0
  });
  LeftMenu.show();

  if (app.dataStorage.user) {
    userInfo = app.dataStorage.user;
    if (userInfo.avatars) {
      LeftMenu.updateProfile({
        title: userInfo.nickname,
        image: userInfo.avatars.user_pic_normal
      });
    }
    if (userInfo.is_autouser) {
      LeftMenu.updateProfile({
        title: i18nMgg('profile')
      });
    }
  }

  return left_menu;
}

function buildMainMenu(data) {

  var menu_items = data && data.menu_items ? validateMenuItems(data.menu_items) : [];

  menu_items.forEach(function (menu_item) {
    if (menu_item.images && menu_item.images.length) {
      menu_item.bg_image_index = Math.floor(Math.random() * menu_item.images.length);
    }
  });

  if (menu_items && menu_items.length) {
    mainPage.content.clear();
    mainPage.content.init({data: menu_items, focusIndex: 0});
  }

  return menu_items;
}

function validateMenuItems(menu_items) {
  var available_flag;

  if (menu_items && menu_items.length) {
    for (var i = 0; i < menu_items.length; i++) {
      if (menu_items[i].type == 'static' && menu_items[i].meta && menu_items[i].meta.length) {
        available_flag = false;
        for (var y = 0; y < menu_items[i].meta.length; y++) {
          if (menu_items[i].meta[y].type == 'static_id' && mainConfigMgg.menuRoutePage[menu_items[i].meta[y].value]) {
            available_flag = true;
          }
        }
        if (!available_flag) {
          menu_items.splice(i, 1);
        }
      }
    }
  }
  return menu_items;
}

function getTimeLocalDiff() {
  var nowTime = new Date();
  var nowLocal = Math.floor(nowTime.getTime() / 1000);
  var nowEPG = app.dataStorage.time.timestamp;
  return (nowLocal - nowEPG);
}

function showLeftDaysBubble() {
  var ending_subscription = subscriptionService.getSubscriptionsLeftDays();
  if (ending_subscription && ending_subscription.length) {
    bubbleSubscription.show(ending_subscription);
  }
}
function samsungNetworkMonitor() {
  var networkPlugin = document.getElementById('pluginObjectNetwork');
  var cType = networkPlugin.GetActiveType();
  var phyConnection = networkPlugin.CheckPhysicalConnection(cType);
  if (phyConnection == 0) {
    networkMonitorTimeout = setTimeout(function () {
      bubbleBadConnection.show();
    }, 3000);
  } else if (phyConnection == 1) {
    bubbleBadConnection.hide();
    if (networkMonitorTimeout) {
      clearTimeout(networkMonitorTimeout);
    }
  }
}

// public
module.exports = page;

},{"core/api":15,"core/app":16,"core/components/page":25,"core/dom":31,"core/lib/helpFunctions":34,"core/promise":43,"core/router":45,"core/tools/statInfoService":53,"core/tools/subscriptionService":54,"pages/other/main":71,"vendor/aura/api_keys":131,"widgets/ad":138,"widgets/background":141,"widgets/bubble-bad-connection":142,"widgets/bubble-subscription":143,"widgets/menu-left":150,"widgets/popup/popup-error":153}],70:[function(require,module,exports){
'use strict';

var id = 'pageLandingInner',
  api = require('core/api'),
  app = require('core/app'),
  dom = require('core/dom'),
  keys = require('vendor/aura/keys'),
  request = require('core/request'),
  LeftMenu = require('widgets/menu-left'),
  Page = require('core/components/page'),
  router = require('core/router'),
  menuNavigateService = require('core/tools/menuNavigateService'),
  Loader = require('widgets/loader')
  ;

window.Megogo = null;


var landingPage = new Page({
  $node: dom.tag('div', {
    id: id
  }),
  $body: dom.tag('div', {
    id: id + 'Container'
  }),
  events: {
    'mouseover': function (e) {
      if (!e) e = window.event;
      var target = e.event.target || e.srcElement;
      if (target.nodeName != 'A') return;
      target.focus();
      return false;
    },
    'mousedown': function (e) {
      if (!e) e = window.event;
      var target = e.event.target || e.srcElement;
      if (target.nodeName != 'A') return;
    }
  },
  keys: {
    RETURN: function () {
      landingPage.clickClose();
    },
    RED: function () {
      landingPage.clickClose();
    }
  }
});

landingPage.addListener('load', function () {

  landingPage.addListener('show', function (data) {
    LeftMenu.hide();
    landingPage.request = request;
    landingPage.user = app.dataStorage.user;
    landingPage.$body.innerHTML = '';


    if (data && data.data) {
      if (data.data[1] && data.data[1].custom_html) {
        var custom_html = data.data[1].custom_html;
        appendCustomHtml(landingPage.$body, custom_html);
        setVisibleSlide(1);
        setListeners();
      } else {
        var collectionID = data.data[0];
        var sliderNumber = 1;
        if(data.data[1] && data.data[1].indexOf('slide') != -1){
          sliderNumber = data.data[1].replace("slide", "");
        }
        api.load('videoCollection', {id: collectionID}).then(function (data) {
          if (data.custom_html) {
            appendCustomHtml(landingPage.$body, data.custom_html);
            setVisibleSlide(sliderNumber);
            setListeners();
          } else {
            //ADD Kibana Event - no Landing
            landingPage.clickClose();
          }
        });
      }
    } else {
      landingPage.clickClose();
    }

    landingPage.addListener('keydown', keydownHandler);
    landingPage.addListener('click', clickHandler);
    Loader.hide();
  });

  landingPage.addListener('hide', function () {
    LeftMenu.show();
    landingPage.removeListener('keydown', keydownHandler);
    landingPage.removeListener('click', clickHandler);
    delete landingPage.request;
    delete landingPage.user;
    landingPage.clear();
  });

  landingPage.generalLinkNavigation = function (target) {
    var linkUrl = target.getAttribute('href');
    menuNavigateService.navigateAdLink('redirect', linkUrl);
  };

  landingPage.directLinkNavigation = function (linkUrl) {
    menuNavigateService.navigateAdLink('redirect', linkUrl);
  };

  landingPage.clickClose = function () {
    router.back();
  };


});

function appendCustomHtml(bodyDiv, customHTML) {
  var regex = /<script[^>]*>([\s\S]*?)<\/script>/ig;
  var res = regex.exec(customHTML);
  var script_node = document.createElement('script');
  var dom_node = document.createElement('div');
  if (res && res[1]) {
    script_node.innerHTML = res[1];
    bodyDiv.appendChild(script_node);
  }
  customHTML = customHTML.replace(regex, '');
  dom_node.innerHTML = customHTML;
  bodyDiv.appendChild(dom_node);
}

function clickHandler(e) {

  if (!e) e = window.event;

  var target = e.event.target;

  if (target.nodeName != 'A') return;

  e.event.preventDefault();

  var classNames = target.classList;

  if (classNames.contains('generalLink')) {
    landingPage.generalLinkNavigation(target);
  }

  if (classNames.contains('actionLink')) {
    if (typeof buttonEnterAction === "function") {
      buttonEnterAction(target);
    }
  }

  if (classNames.contains('close-button')) {
    landingPage.clickClose();
  }

  return false;
}
function keydownHandler(e) {
  if (!e) e = window.event;

  var keyCode = e.event.keyCode;

  if (keyCode == keys.LEFT) {
    if (typeof buttonLeftAction === "function") {
      buttonLeftAction();
    }
  } else if (keyCode == keys.RIGHT) {
    if (typeof buttonRightAction === "function") {
      buttonRightAction();
    }
  } else if (keyCode == keys.UP) {
    if (typeof buttonUpAction === "function") {
      buttonUpAction();
    }
  } else if (keyCode == keys.DOWN) {
    if (typeof buttonDownAction === "function") {
      buttonDownAction();
    }
  } else if (keyCode == keys.ENTER) {
    if (typeof buttonEnterAction === "function") {
      buttonEnterAction(e.event.target);
    }
  }
}

function setVisibleSlide(slideNumber) {
  var sliders = document.getElementsByClassName('adv-slide');
  var bullets = document.getElementsByClassName('bullet');
  if (sliders) {

    if(slideNumber > sliders.length || slideNumber < 1){
      slideNumber = 1;
    }

    if (sliders.length) {
      sliders[slideNumber - 1].style.display = 'block';
    }
    if (bullets && bullets.length) {
      bullets[slideNumber - 1].classList.add("active");
    }
    if (typeof changeSlideRoute === "function") {
      changeSlideRoute(slideNumber);
    }
    var elementToFocus = sliders[slideNumber - 1].querySelector('a[data-focus]');

    if (elementToFocus) {
      elementToFocus.focus();
    }

  }
}

function setListeners() {
  var leftArrow = document.getElementsByClassName('leftSliderArrow')[0];
  var rightArrow = document.getElementsByClassName('rightSliderArrow')[0];
  if (leftArrow) {
    leftArrow.addEventListener('click', function (e) {
      e.preventDefault();
      if (typeof leftArrowAction === "function") {
        leftArrowAction();
      }
    }, false);
  }
  if (rightArrow) {
    rightArrow.addEventListener('click', function (e) {
      e.preventDefault();
      if (typeof rightArrowAction === "function") {
        rightArrowAction();
      }
    }, false);
  }
}

// public
module.exports = window.landingPage = landingPage;

},{"core/api":15,"core/app":16,"core/components/page":25,"core/dom":31,"core/request":44,"core/router":45,"core/tools/menuNavigateService":49,"vendor/aura/keys":133,"widgets/loader":149,"widgets/menu-left":150}],71:[function(require,module,exports){
/**
 * MainMenu page implementation.
 */

'use strict';

var page_id = 'pageMain',
  api = require('core/api'),
  app = require('core/app'),
  Background = require('widgets/background'),
  dom = require('core/dom'),
  helpFunctions = require('core/lib/helpFunctions'),
  keys = require('vendor/aura/keys'),
  LeftMenu = require('widgets/menu-left'),
  Loader = require('widgets/loader'),
  List = require('core/components/list'),
  menuNavigateService = require('core/tools/menuNavigateService'),
  Page = require('core/components/page'),
  Panel = require('core/components/panel'),
  PopUpExit = require('widgets/popup/popup-exit'),
  preloader = require('core/preloader'),
  router = require('core/router'),
  statInfoService = require('core/tools/statInfoService'),
  subscriptionService = require('core/tools/subscriptionService'),
  bubbleSubscription = require('widgets/bubble-subscription'),
  channelsAction = require('state/channel_actions'),
  currentItemData
  ;

var page = new Page({
  $node: dom.tag('div', {id: page_id}),
  $body: dom.tag('div', {id: page_id + 'Container'}),
  append_to_body: true,
  header: ''
});

page.addListener('load', function load() {

  page.contentListDescr = new Panel({
    className: 'mainMenuListDescr',
    focusable: false
  });

  page.contentWrapperOut = new Panel({
    className: 'contentWrapperOut',
    focusable: false
  });

  page.contentWrapperMid = new Panel({
    className: 'contentWrapperMid',
    focusable: false
  });

  page.content = new List({
    className: 'mainMenuList',
    keys: {
      LEFT: function () {
        LeftMenu.showMenu({
          'componentToFocus': page.content
        });
      },
      RETURN: function () {
        PopUpExit.show({
          'componentToFocus': page.content
        });
      }
    },
    events: {
      'focus:item': function (data) {
        if (data && data.$curr) {
          currentItemData = data.$curr.data;
          if (currentItemData.images && currentItemData.images.length) {
            //Background.setImage(currentItemData.images[currentItemData.bg_image_index].url);
          }
          page.contentListDescr.$node.innerHTML = currentItemData.promo_phrase || '';
        }
      },
      'mouseover': function (data) {
        this.focus();
        this.focusItem(data.$item);
      },
      'click:item': function (data) {
        if (LeftMenu.activeElement) {
          LeftMenu.activeElement.deActivate();
        }
        statInfoService.sendGATrackEvent(page_id + '_menuItem', data.$item.data.id);
        menuNavigateService.navigateMenuItem(data.$item.data);
      },
      overflow: function(data) {
        if (data.direction === keys.UP) {
          if(bubbleSubscription.visible) {
            bubbleSubscription.focus();
          } else {
            this.focusIndex(this.size - 1);
          }
        } else if(data.direction === keys.DOWN) {
          if(bubbleSubscription.visible) {
            bubbleSubscription.focus();
          } else {
            this.focusIndex(0);
          }
        }
      },
      mousewheel: function() {
        this.emit('keydown', {
          'keyCode': event.deltaY < 0 ? keys.UP : keys.DOWN
        });
        LeftMenu.container.emit('mouseout');
      }
    },
    render: function ($item, data) {

      var image_links = [];
      if (data.images && data.images.length && data.images[data.bg_image_index]) {
        if (data.images[data.bg_image_index] && data.images[data.bg_image_index].url) {
          image_links.push(data.images[data.bg_image_index].url);
        }
      }
      preloader.add(image_links);

      if (data['class']) {
        $item.classList.add(data['class']);
      } else {
        $item.classList.add('color-main');
      }

      if (data.label && data.label.indexOf('label-free') != -1) {
        $item.classList.add('label-free');
        $item.classList.add(mainConfigMgg.app.lang);
      }

      $item.textContent = data.title || '';
    }
  });

  page.contentWrapperMid.add(page.content);
  page.contentWrapperOut.add(page.contentWrapperMid);
  page.add(page.contentWrapperOut, page.contentListDescr);

  page.addListener('show', function () {
    LeftMenu.openSubMenu('main');

    if (PopUpExit.visible) {
      PopUpExit.hide();
    }
    Background.$node.style.display = 'block';
    Background.shadeFullOff();

    if (mainConfigMgg.deviceInfo.vendor == 'samsung') {
      var widgetAPI = new Common.API.Widget();
      widgetAPI.sendReadyEvent();
    }

    if (page.content.$focusItem && page.content.$focusItem.data && page.content.$focusItem.data.images && page.content.$focusItem.data.images.length) {
      Background.setImage(page.content.$focusItem.data.images[page.content.$focusItem.data.bg_image_index].url);
    }

    if(!bubbleSubscription.disabled) {
      bubbleSubscription.addListener('leave:focus', bubbleSubscriptionLeaveFocus);
    }

    page.content.focus();

  });

  page.addListener('hide', function () {
    Background.shadeFullOn();
    Background.$node.style.display = 'none';
    if(!bubbleSubscription.disabled) {
      bubbleSubscription.disable();
      bubbleSubscription.removeListener('leave:focus', bubbleSubscriptionLeaveFocus);
    }
  });
});

function bubbleSubscriptionLeaveFocus(data) {
  if(data.direction == 'up') {
    page.content.focusIndex(page.content.size - 1);
    page.content.focus();
  } else if(data.direction == 'down') {
    page.content.focusIndex(0);
    page.content.focus();
  } else if(data.direction == 'left') {
    LeftMenu.showMenu({
      'componentToFocus': page.content
    });
  }

}

// public
module.exports = page;

},{"core/api":15,"core/app":16,"core/components/list":23,"core/components/page":25,"core/components/panel":26,"core/dom":31,"core/lib/helpFunctions":34,"core/preloader":42,"core/router":45,"core/tools/menuNavigateService":49,"core/tools/statInfoService":53,"core/tools/subscriptionService":54,"state/channel_actions":109,"vendor/aura/keys":133,"widgets/background":141,"widgets/bubble-subscription":143,"widgets/loader":149,"widgets/menu-left":150,"widgets/popup/popup-exit":154}],72:[function(require,module,exports){
'use strict';

var id = 'pageTvChannels',
  animate = require('core/animate'),
  app = require('core/app'),
  api = require('core/api'),
  ChannelItem = require('ui/channel-item'),
  dom = require('core/dom'),
  ErrorBlock = require('widgets/popup/popup-error'),
  helpFunctions = require('core/lib/helpFunctions'),
  keys = require('vendor/aura/keys'),
  List = require('core/components/list'),
  LeftMenu = require('widgets/menu-left'),
  Loader = require('widgets/loader'),
  Page = require('core/components/page'),
  Panel = require('core/components/panel'),
  subscriptionService = require('core/tools/subscriptionService'),
  router = require('core/router')
  ;

var page = new Page({
  $node: dom.tag('div', {id: id}),
  $body: dom.tag('div', {id: id+ 'Container'}),
  append_to_body: true,
  'header': '',
  arrows: {
    down: {config: {top: 465, paddingTop: 185, left: 70, width: 1210}},
    up: {config: {paddingBottom: 100}},
  },
  arrowsUpdate: showHideArrows
});

page.addListener('load', function() {
  page.content = new List({
    cycle: false,
    focusIndex: 0,
    viewSize: 3,
    className: 'categories-list',
    events: {
      'focus': function() {
        if(page.content.$focusItem) {
          page.content.$focusItem.list.focus();
        }
      },
      'focus:item': function(data) {
        var top = 0;
        if (data.$curr.index) {
          this.$node.classList.remove('active');

          top = data.$curr.getBoundingClientRect().top - parseInt(page.scrollTopValue || 0);
          top -= 90;
          page.header.shadeOn();
        } else {
          this.$node.classList.add('active');
          page.header.shadeOff();
        }
        data.$curr.list.focus();
        page.scrollTop(top);
      },
      'overflow': function(data) {

      }
    },
    render: function($item, dataCategory) {
      var content = [];
      var className = '';
      if (dataCategory.movies) {
        content = dataCategory.movies;
        className = 'movies-list';
      } else {
        content = dataCategory.channels;
        className = 'channels-list';
      }
      $item.list = new List({
        type: List.prototype.TYPE_HORIZONTAL,
        size: content.length,
        data: content,
        className: className,
        focusIndex: 0,
        scrollList: {
          startIndex: 3,
          stopIndex: 2,
          scrollSize: 4,
          speed: mainConfigMgg.animation.duration.speed2,
        },
        events: {
          'click:item': function(channelData) {
            subscriptionService.hasAvailableChannels().then(function(data){
              if (data == 'play') {
                router.navigate('pagePlayer', ['tv', channelData.$item.data.id]);
              } else {
                router.navigate('pageSubscription');
              }
            });
          },
          'mouseover': function(data) {
            this.focus();
            this.focusItem(data.$item, {no_emit:true});
            showHideArrows();
          },
          'mousewheel': function (event) {
            if (event.deltaY < 0) {
              page.content.move(keys.UP);
            }
            if (event.deltaY > 0) {
              page.content.move(keys.DOWN);
            }
          },
          overflow: function(data) {
            if (data.direction === keys.LEFT && data.type !== 'mousewheel') {
              LeftMenu.showMenu({'componentToFocus': page.content});
            }
          }
        },
        keys: {
          UP: function() {
            page.content.move(keys.UP);
          },
          DOWN: function() {
            page.content.move(keys.DOWN);
          },
          RETURN: function() {
            router.back();
            page.content.clear(); //@TODO refactor BACK-CLEAR
          }
        },
        render: function($item, data) {
          if (dataCategory.movies) {
            var filmItem = new FilmItemSmall($item, data);
          } else {
            var channelItem = new ChannelItem($item, data, {
              className: 'big'
            });
          }
        }
      });

      $item.listItemTitle = new Panel({
        $node: dom.add(dom.tag('div', {
          className: 'panelTitle'
        }), dataCategory.title),
      });
      $item.wrapper = new Panel({
        $node: dom.add(dom.tag('div', {
          className: 'item-wrapper'
        }))
      });

      $item.wrapper.add($item.listItemTitle);
      $item.wrapper.add($item.list);
      $item.appendChild($item.wrapper.$node);
    }
  });

  page.add(page.content);
});

/**
 * Listeners
 */
page.addListener('show', function(data) {

  page.header.setTitle(i18nMgg('channels_noun'));

  if (helpFunctions.isNavigateBack(data)) {
    page.content.focus();
    return;
  }

  Loader.show();
  api.load('tvChannels').then(function(data) {
    var tvPackage = {
      title: i18nMgg('channels_noun'),
      channels: data.channels
    };
    if(data.channels && data.channels.length) {
      page.content.clear();
      updateContent(tvPackage);
      page.content.focus();
    } else {
      ErrorBlock.show({
        backLable: function () {
          router.back();
        },
        text: i18nMgg('nothing_found'),
        buttons: [
          {
            text: i18nMgg('close'), callback: function () {
            router.back();
          }
          }
        ]
      });
    }

    Loader.hide();
  });

});

page.addListener('hide', function() {

});

function updateContent(data) {
  var channelsGenres = helpFunctions.groupChannelsByGenres(data);
  page.content.init({
    data: channelsGenres,
    focusIndex: 0
  })
}

function showHideArrows() {
  setTimeout(function(){
    var focusItem = page.content ? page.content.$focusItem : null;

    if(focusItem && focusItem.list && focusItem.list.$focusItem) {
      var left_offset = focusItem.list.$node.style.left ? parseInt(focusItem.list.$node.style.left) : 0;
      var list_size = focusItem.list.total_items || focusItem.list.size;
      var total_offset = -focusItem.list.$focusItem.offsetWidth * (list_size - focusItem.list.scrollList.scrollSize - 2);

      if(!left_offset) {
        page.arrowsWidget.left.hide();
      } else {
        page.arrowsWidget.left.show();
      }

      if(left_offset > total_offset) {
        page.arrowsWidget.right.show();
      } else {
        page.arrowsWidget.right.hide();
      }

      if(focusItem.index >= page.content.size - 1) {
        page.arrowsWidget.down.hide();
      } else {
        page.arrowsWidget.down.show();
      }

      if(!page.scrollTopValue) {
        page.arrowsWidget.setArrowProperty('left', {
          marginTop: 0
        });
        page.arrowsWidget.setArrowProperty('right', {
          marginTop: 0
        });
        page.arrowsWidget.up.hide();
      } else {
        page.arrowsWidget.setArrowProperty('left', {
          marginTop: 0
        });
        page.arrowsWidget.setArrowProperty('right', {
          marginTop: 0
        });
        page.arrowsWidget.up.show();
      }
    }
  }, 0);

}

// public
module.exports = page;

},{"core/animate":14,"core/api":15,"core/app":16,"core/components/list":23,"core/components/page":25,"core/components/panel":26,"core/dom":31,"core/lib/helpFunctions":34,"core/router":45,"core/tools/subscriptionService":54,"ui/channel-item":114,"vendor/aura/keys":133,"widgets/loader":149,"widgets/menu-left":150,"widgets/popup/popup-error":153}],73:[function(require,module,exports){
'use strict';

var id = 'pagePaymentCardNew',
  app = require('core/app'),
  animate = require('core/animate'),
  Page = require('core/components/page'),
  router = require('core/router'),
  keys = require('vendor/aura/keys'),
  dom = require('core/dom'),
  LeftMenu = require('widgets/menu-left'),
  Loader = require('widgets/loader'),
  SupportInfo = require('widgets/support-info'),
  helpFunctions = require('core/lib/helpFunctions'),
  subscriptionService = require('core/tools/subscriptionService'),
  PopUpResults = require('widgets/popup/popup-results'),
  statInfoService = require('core/tools/statInfoService'),
  paymentModel = require('core/paymentModel'),
  Panel = require('core/components/panel'),
  paymentService = require('core/tools/paymentService'),
  api = require('core/api');


var page = new Page({
  $node: document.getElementById(id),
  $body: document.getElementById(id + 'Container'),
  header: '',
  keys: {
    RETURN: function () {
      //   LeftMenu.backLable.hide();
      //   LeftMenu.backLable.hide();
      router.back();
    }
  }
});

/* @TODO uncomment if need to use history API
var fakeComponentFocus = new Panel({
  $node: dom.add(dom.tag('div', {
    className: 'fake-focus'
  })),
  focusable: true,
  visible: false,
  keys: {
    RETURN: function () {
      router.back();//need fix
      // need to use all methods that's in iframe 'close' event, and replace them from there
    }
  }
});
page.add(fakeComponentFocus);
*/

page.addListener('load', function () {
  window.addEventListener("message", function (e) {
    paymentFunction(e)
  }, false);

  page.addListener('show', function (data) {
    //fakeComponentFocus.focus(); @TODO uncomment if need to use history API
    Loader.show();

    page.isSuccessfulPayment = false;
    page.title = paymentModel.get('title');
    page.subTitle = paymentModel.defaultEvents.isPromoTariff() ? paymentModel.get('subTitle') + '*' : paymentModel.get('subTitle');

    page.header.setTitle(page.title);
    page.header.setSubTitle(page.subTitle);

    statInfoService.sendLogMessage('PAYMENT', 'RENDERED: Payment form rendered.', paymentModel.get('objectID'), Math.random());

    LeftMenu.hide();
    fillTemplateData();
    generatePaymentFormData();
    appendiFrameChild();

     page.$errorDiv = document.getElementById('paymentErrorSmall');
     page.$errorDiv.style.display = 'none';
     var $rightSmallTextDiv = document.getElementById('rightSmallText');

     var rightInnerHTML = '<p>' + i18nMgg("payment_agreement_text_1") +
     '<span class="white">' + ' ' + i18nMgg("rules_link").replace("http://", "") + '</span>'+
     i18nMgg("payment_agreement_text_2") +'</p>';


     if (paymentModel.defaultEvents.isPromoTariff()) {
     rightInnerHTML = '<p>' + i18nMgg("promo_tariff_text_1") +
     '<span class="white">' + ' ' + i18nMgg("rules_link").replace("http://", "") + '</span>' +
     '<br>'+ addSubsTitleInString(i18nMgg('promo_tariff_text_2')) + ' ' + paymentModel.defaultEvents.getRegularPrice() +
     '<br>'+ i18nMgg('promo_tariff_text_3') +
     '</p>';
     $rightSmallTextDiv.classList.add('promo');
     // $promoTextDiv.style.display = 'block';
     } else {
     $rightSmallTextDiv.classList.remove('promo');
     //  $promoTextDiv.innerHTML = '';
     //    $promoTextDiv.style.display = 'none';
     }
     $rightSmallTextDiv.innerHTML = rightInnerHTML;


    document.getElementById('payform').submit();
    SupportInfo.show({type: 'payment'});
    PopUpResults.addListener('hide', hidePopUpResultsCallback);
  });

  page.addListener('hide', function () {
    SupportInfo.hide();
    PopUpResults.removeListener('hide', hidePopUpResultsCallback);
  });

});

function hidePopUpResultsCallback(data) {
  if (page.isSuccessfulPayment) {
  } else {
    LeftMenu.hide();
    generatePaymentFormData();
    appendiFrameChild();
    document.getElementById('payform').submit();
  }
  //router.back();
}

function generatePaymentFormData() {

  clearDomElement(document.getElementById("payform"));

  var paymentForm = document.createElement("form");
  paymentForm.id = "payform";
  var fullPaymentHostUrl = mainConfigMgg.payments.hostUrl;

  paymentForm.setAttribute('method', "post");
  paymentForm.setAttribute('action', fullPaymentHostUrl);
  paymentForm.setAttribute('target', "paymentiframe");


  var templateParams = {
    display_autoprolong: false,
    display_savecard: true
  };

  if(paymentModel.get('vodRulesType') == 'subs'){
    templateParams.display_autoprolong = true;
  }

  if(paymentModel.defaultEvents.isPromoTariff()){
    templateParams.display_autoprolong = false;
    templateParams.display_savecard = false;
  }

  var dataToPOST = {
    'service_id' : paymentModel.get('tariffID'),
    'object_id': paymentModel.get('objectID') || 0,
    'user_id': app.dataStorage.user.user_id,
    'partner_id': 1, //Temporary before API did this - JAPI-667
    'geo': app.dataStorage.configuration.geo,
    'language': mainConfigMgg.app.lang,
    'public_key': mainConfigMgg.api.keys.publicKey,
    'device_model': mainConfigMgg.deviceInfo.name,
    'device_mac_address': mainConfigMgg.deviceInfo.deviceMacAddress,
    'device_serial_number': mainConfigMgg.deviceInfo.serialNumber,
    'device_firmware_version': mainConfigMgg.deviceInfo.firmware,
    'did': mainConfigMgg.deviceInfo.deviceID
  };

  dataToPOST.template_params = templateParams;

  addHiddenInput(paymentForm, 'data', JSON.stringify(dataToPOST));
  addHiddenInput(paymentForm, 'script.pay_through_token', 0);
  addHiddenInput(paymentForm, 'script.vendor', mainConfigMgg.deviceInfo.vendor);
  addHiddenInput(paymentForm, 'script.payment_type', paymentModel.get('vodRulesType'));
  page.$body.appendChild(paymentForm);
}

function addHiddenInput(form, name, value) {
  var i = document.createElement("input"); //input element, text
  i.setAttribute('type', "hidden");
  i.setAttribute('name', name);
  i.setAttribute('value', value);
  form.appendChild(i);
}

function appendiFrameChild() {
  clearDomElement(document.getElementById("payment-view"));

  var iFrame = document.createElement("iframe"); //input element, text
  iFrame.id = "payment-view";
  iFrame.width = '1280';
  iFrame.height = '720';
  iFrame.setAttribute('style', "position: absolute; top:0; left:0; z-index: 99; display: block;");
  iFrame.setAttribute('name', 'paymentiframe');
  iFrame.setAttribute('sandbox', 'allow-forms allow-pointer-lock allow-same-origin allow-scripts allow-top-navigation');
  page.$body.appendChild(iFrame);
}

function clearDomElement(child) {
  var parent = page.$body;
  if (child) {
    parent.removeChild(child);
  }
}

function addSubsTitleInString(text) {
  return text.replace('[name]', subscriptionService.getSubscriptionTitle(paymentModel.get('serviceID')));
}

function paymentFunction(e) {
  var self = this;
  var objectID = paymentModel.get('objectID');
  var resultText = '';

  switch (e.data.status) {
    case 'loaded':
      document.getElementById('payment-card').style.display = "block";
      document.getElementById('payment-view').style.top = '0px';
      Loader.hide();
      statInfoService.sendLogMessage('PAYMENT', 'LOADED: Payment form loaded.', objectID, Math.random());
      break;

    case 'close':
      //helpFunctions.sendTrackEvent(e.data.stat_info, objectID);
      statInfoService.sendLogMessage('PAYMENT', 'CLOSED: Payment form closed.', objectID, Math.random());

      clearDomElement(document.getElementById("payment-view"));
      clearDomElement(document.getElementById("payform"));

      window.focus();
      //  page.$$lastFocus.focus();
      // LeftMenu.backLable.hide();
      router.back();

      break;

    case 'submitted':
      if(page.$errorDiv){
        page.$errorDiv.innerHTML = '';
      }
      statInfoService.sendLogMessage('PAYMENT', 'SUBMITTED: Payment form submitted.', objectID, Math.random());
      Loader.show();
      document.getElementById('payment-view').style.top = '-720px';
      document.getElementById('payment-card').style.display = "none";

      break;

    case 'clickPay':
      //helpFunctions.sendTrackEvent(e.data.stat_info, objectID);
      break;

    case 'error': //

      clearDomElement(document.getElementById("payment-view"));
      clearDomElement(document.getElementById("payform"));

      var codeText = e.data.code ? ' [' + e.data.code + ']' : '';

      statInfoService.sendLogMessage('PAYMENT', 'ERROR: ' + e.data.message + codeText, objectID, Math.random());
      document.getElementById('debug').innerHTML = JSON.stringify(e, null, 4)
      window.focus();

      if (e.data.message != 'timeout') {
        //   helpFunctions.sendTrackEvent(e.data.stat_info, objectID);
      }
      Loader.hide();

      PopUpResults.show({
        title: paymentModel.get('title'),
        subTitle: paymentModel.get('subTitle'),
        type: 'error',
        text: e.data.message,
        buttonText: i18nMgg('payment_button_error'),
        buttonLink: ''
      });

      break;

    case 'notFilledData':
      page.$errorDiv.style.display = 'block';
      page.$errorDiv.innerHTML = '<div class="txt">' + i18nMgg('fill_card_data_error_1') + '</div>';
      break;

    case 'notValidCard':
      page.$errorDiv.style.display = 'block';
      page.$errorDiv.innerHTML = '<div class="txt">' + i18nMgg('fill_card_data_error_2') + '</div>';
      break;

    case  'success':
      page.isSuccessfulPayment = true;

      clearDomElement(document.getElementById("payment-view"));
      clearDomElement(document.getElementById("payform"));
      window.focus();


      statInfoService.sendLogMessage('PAYMENT', 'SUCCESS: orderID ' + e.data.order, objectID, Math.random());
      //helpFunctions.sendTrackEvent(e.data.stat_info, objectID);

      paymentService.successfulPaymentHandler(e.data.order);

      Loader.hide();
      break;
  }
}

function fillTemplateData() {
  var $dataTemplateWrapper = document.getElementById('payment-card');

  $dataTemplateWrapper.innerHTML = '';

  var rightPositionDiv = dom.tag('div', {className: 'payment-card__el pos-right'},
    dom.tag('div', {className: 'card-secure'},
      dom.tag('div', {className: 'card-secure__el clearfix'},
        dom.tag('div', {className: 'card-secure__icon safe'}),
        dom.tag('div', {className: 'card-secure__desc'}, i18nMgg('payment_safety_text_1'))
      ),
      dom.tag('div', {className: 'card-secure__el clearfix'},
        dom.tag('div', {className: 'card-secure__icon lock'}),
        dom.tag('div', {className: 'card-secure__desc'},
          dom.tag('p', {}, i18nMgg('payment_safety_text_2')),
          dom.tag('p', {}, i18nMgg('payment_safety_text_3'))
        )
      ),
      dom.tag('div', {className: 'card-secure__el clearfix'},
        dom.tag('div', {id: 'rightSmallText', className: 'card-secure__desc agreement'})
      )
    )
  );

  rightPositionDiv.style.textAlign = 'right';

  var x = dom.fragment(
    dom.tag('div', {className: 'card-info__label card'}, i18nMgg('card_number')),
    dom.tag('div', {className: 'card-info__label exp'}, i18nMgg('card_expire')),
    dom.tag('div', {className: 'card-info__label cvv'}, i18nMgg('card_cvv')),
    dom.tag('div', {className: 'cvv-desc'}, i18nMgg('card_cvv_tip')),
    dom.tag('div', {id: 'paymentErrorSmall', className: 'payment-error'}),
    dom.tag('div', {className: 'payment-card__el'}),
    rightPositionDiv
  );

  $dataTemplateWrapper.appendChild(x);


}

// public
module.exports = page;

},{"core/animate":14,"core/api":15,"core/app":16,"core/components/page":25,"core/components/panel":26,"core/dom":31,"core/lib/helpFunctions":34,"core/paymentModel":41,"core/router":45,"core/tools/paymentService":51,"core/tools/statInfoService":53,"core/tools/subscriptionService":54,"vendor/aura/keys":133,"widgets/loader":149,"widgets/menu-left":150,"widgets/popup/popup-results":159,"widgets/support-info":163}],74:[function(require,module,exports){
'use strict';

var id = 'pagePaymentCardToken',
  app = require('core/app'),
  animate = require('core/animate'),
  Page = require('core/components/page'),
  router = require('core/router'),
  keys = require('vendor/aura/keys'),
  dom = require('core/dom'),
  Button = require('core/components/button'),
  Loader = require('widgets/loader'),
  paymentModel = require('core/paymentModel'),
  SupportInfo = require('widgets/support-info'),
  PopUpResults = require('widgets/popup/popup-results'),
  helpFunctions = require('core/lib/helpFunctions'),
  subscriptionService = require('core/tools/subscriptionService'),
  api = require('core/api');


var page = new Page({
  $node: document.getElementById(id),
  $body: document.getElementById(id + 'Container'),
  header: '',
  back_button: {
    'clickCallBack': function () {
      router.back();
    }
  }
});

page.addListener('load', function () {

  var $$paymentButton = new Button({
    $node: 'paymentButtonCardToken',
    events: {
      focus: function () {
        page.$$lastFocus = this;
      },
      click: function (data) {
        generatePaymentFormData();
        appendiFrameChild();
        document.getElementById('payform').submit();
      }
    },
    keys: {
      LEFT: function () {
        page.backButton.focusButton(this);
      },
      UP: function () {
        page.backButton.focusButton(this);
      },
      DOWN: function () {
        $$changeButton.focus()
      },
      RETURN: function () {
        page.backButton.emit('click');
      }
    }
  });

  var $$changeButton = new Button({
    $node: 'paymentButtonCardChange',
    events: {
      focus: function () {
        page.$$lastFocus = this;
      },
      click: function (data) {
        router.navigate('pagePaymentCardNew');
      }
    },
    keys: {
      LEFT: function () {
        page.backButton.focusButton(this);
      },
      UP: function () {
        $$paymentButton.focus()
      },
      RETURN: function () {
        page.backButton.emit('click');
      }
    }
  });

  /**
   * Listeners
   */
  page.addListener('show', function (data) {
    SupportInfo.show({type: 'payment'});

    if (helpFunctions.isNavigateBack(data)) {
      return;
    }

    page.$$lastFocus = $$paymentButton;

    $$changeButton.setValue(i18nMgg('change_card'));
    $$paymentButton.setValue(i18nMgg('pay'));

    page.header.setTitle(paymentModel.get('title'));
    page.header.setSubTitle(paymentModel.get('subTitle'));

    var $paymentTokenDescription = document.getElementById('paymentTokenDescription');
    $paymentTokenDescription.innerHTML = i18nMgg('pay_card') + '<br><div class="card"><span class="card_type"></span><span class="card_numbers"></span></div>';


    var cardTypeWrap = document.getElementsByClassName('card_type')[0];
    var cardNumberWrap = document.getElementsByClassName('card_numbers')[0];

    cardTypeWrap.innerHTML = helpFunctions.getUserCardText().cardType + ' ';
    cardNumberWrap.innerHTML = helpFunctions.getUserCardText().cardNumber;

    //page.content.$node.innerHTML = '';

    page.add($$paymentButton);
    page.add($$changeButton);

    //TODO-Inna add correct styles for t&b
    // TODO-Inna add autoprolong tip for this view

    var $promoTextDiv = document.getElementById('promo-text');

    var rightInnerHTML = '<p>' + i18nMgg("payment_agreement_text_1") +
      '<span class="white">' + ' ' + i18nMgg("rules_link").replace("http://", "") + '</span>' +
      i18nMgg("payment_agreement_text_2") + '</p>';


    if (paymentModel.defaultEvents.isPromoTariff()) {
      rightInnerHTML = '<p>' + i18nMgg("promo_tariff_text_1") +
        '<span class="white">' + ' ' + i18nMgg("rules_link").replace("http://", "") + '</span>' +
        '<br>' + addSubsTitleInString(i18nMgg('promo_tariff_text_2')) + ' ' + paymentModel.defaultEvents.getRegularPrice() +
        '<br>' + i18nMgg('promo_tariff_text_3') +
        '</p>';
      $promoTextDiv.classList.add('promo');
    } else {
      $promoTextDiv.classList.remove('promo');
    }
    $promoTextDiv.innerHTML = rightInnerHTML;

    if (PopUpResults.visible) {
      PopUpResults.resultButton.focus();
    } else {
      page.$$lastFocus.focus();
    }

    Loader.hide();
    PopUpResults.addListener('hide', hidePopUpResultsCallback);
  });
  page.addListener('hide', function () {
    SupportInfo.hide();
    PopUpResults.removeListener('hide', hidePopUpResultsCallback);
  });


});


function hidePopUpResultsCallback(data) {
  if (page.isSuccessfulPayment) {
  } else {
    page.$$lastFocus.focus();
  }
}

function generatePaymentFormData() {
  clearDomElement(document.getElementById("payform"));

  var paymentForm = document.createElement("form");
  paymentForm.id = "payform";

  var fullPaymentHostUrl = mainConfigMgg.payments.hostUrl;

  paymentForm.setAttribute('method', "post");
  paymentForm.setAttribute('action', fullPaymentHostUrl);
  paymentForm.setAttribute('target', "paymentiframe");

  var templateParams = {
    display_autoprolong: false,
    display_savecard: true
  };

  if(paymentModel.get('vodRulesType') == 'subs'){
    templateParams.display_autoprolong = true;
  }

  if(paymentModel.defaultEvents.isPromoTariff()){
    templateParams.display_autoprolong = false;
    templateParams.display_savecard = false;
  }

  var dataToPOST = {
    'service_id' : paymentModel.get('tariffID'),
    'object_id': paymentModel.get('objectID') || 0,
    'user_id': app.dataStorage.user.user_id,
    'partner_id': 1, //Temporary before API did this - JAPI-667
    'geo': app.dataStorage.configuration.geo,
    'language': mainConfigMgg.app.lang,
    'public_key': mainConfigMgg.api.keys.publicKey,
    'device_model': mainConfigMgg.deviceInfo.name,
    'device_mac_address': mainConfigMgg.deviceInfo.deviceMacAddress,
    'device_serial_number': mainConfigMgg.deviceInfo.serialNumber,
    'device_firmware_version': mainConfigMgg.deviceInfo.firmware,
    'did': mainConfigMgg.deviceInfo.deviceID
  };

  dataToPOST.template_params = templateParams;

  addHiddenInput(paymentForm, 'data', JSON.stringify(dataToPOST));
  addHiddenInput(paymentForm, 'script.pay_through_token', 1);
  addHiddenInput(paymentForm, 'script.vendor', mainConfigMgg.deviceInfo.vendor);
  addHiddenInput(paymentForm, 'script.payment_type', paymentModel.get('vodRulesType'));

  document.getElementById('pagePaymentCardNewContainer').appendChild(paymentForm);
}

function addHiddenInput(form, name, value) {
  var i = document.createElement("input"); //input element, text
  i.setAttribute('type', "hidden");
  i.setAttribute('name', name);
  i.setAttribute('value', value);
  form.appendChild(i);
}

function appendiFrameChild() {
  clearDomElement(document.getElementById("payment-view"));

  var iFrame = document.createElement("iframe"); //input element, text
  iFrame.id = "payment-view";
  iFrame.width = '1280';
  iFrame.height = '720';
  iFrame.setAttribute('style', "position: absolute; top:0; left:0; z-index: 99; display: block;");
  iFrame.setAttribute('name', 'paymentiframe');
  iFrame.setAttribute('sandbox', 'allow-forms allow-pointer-lock allow-same-origin allow-scripts allow-top-navigation');
  document.getElementById('pagePaymentCardNewContainer').appendChild(iFrame);
}

function clearDomElement(child) {
  var parent = page.$body;
  if (child) {
    parent.removeChild(child);
  }
}

function addSubsTitleInString(text) {
  return text.replace('[name]', subscriptionService.getSubscriptionTitle(paymentModel.get('serviceID')));
}

// public
module.exports = page;

},{"core/animate":14,"core/api":15,"core/app":16,"core/components/button":19,"core/components/page":25,"core/dom":31,"core/lib/helpFunctions":34,"core/paymentModel":41,"core/router":45,"core/tools/subscriptionService":54,"vendor/aura/keys":133,"widgets/loader":149,"widgets/popup/popup-results":159,"widgets/support-info":163}],75:[function(require,module,exports){
'use strict';

var id = 'pagePaymentChoice',
  animate = require('core/animate'),
  Page = require('core/components/page'),
  router = require('core/router'),
  keys = require('vendor/aura/keys'),
  List = require('core/components/list'),
  dom = require('core/dom'),
  app = require('core/app'),
  SupportInfo = require('widgets/support-info'),
  helpFunctions = require('core/lib/helpFunctions'),
  paymentModel = require('core/paymentModel'),
  Loader = require('widgets/loader'),
  PaymentChoiceItem = require('ui/payment-choice-item');


var page = new Page({
  $node: document.getElementById(id),
  $body: document.getElementById(id + 'Container'),
  header: '',
  back_button: {
    'clickCallBack': function() {
      router.back();
    }
  }
});

page.addListener('load', function load() {
  page.content = new List({
    $node: 'paymentChoiceWrapList',
    type: List.prototype.TYPE_HORIZONTAL,
    className: 'payment-choice__row',
    events: {
      'click:item': function (data) {
        this.emit(data.$item.data.action);
      },
      'focus:item': function (data) {
        page.$$lastFocus = this;
      },
      mouseover: function (data) {
        this.focus();
        this.focusItem(data.$item, {no_emit: true});
      },
      'overflow': function (data) {
        if ((data.direction === keys.LEFT || data.direction === keys.UP) && data.type !== 'mousewheel') {
          page.backButton.focusButton(this);
        }
      }
    },
    keys:{
      UP: function () {
        page.backButton.focusButton(this);
      },
      RETURN: function () {
        page.backButton.emit('click');
      }
    },
    render: function ($listItem, itemData) {
      new PaymentChoiceItem($listItem, itemData);
    }
  });

  /**
   * Listeners
   */
  page.addListener('show', function (data) {

    SupportInfo.show({type: 'payment'});

    if (helpFunctions.isNavigateBack(data)) {
      page.content.focus();
      Loader.hide();
      return;
    }

    page.content.clear();

    var paymentSystems = getAvailablePayments();

    if (paymentSystems.length == 1) {
      paymentChoiceTitle.textContent = '';
      paymentModel.set('paymentSystem', helpFunctions.getPaymentSystemName());
      if (app.dataStorage.user.credit_card && app.dataStorage.user.credit_card.length) {
        router.redirect('pagePaymentCardToken');
      } else {
        router.redirect('pagePaymentCardNew');
      }
    } else {
      paymentChoiceTitle.textContent = i18nMgg('select_pay_type_text');
      page.header.setTitle(paymentModel.get('title'));
      page.header.setSubTitle(paymentModel.get('subTitle'));

      page.content.init({
        data: paymentSystems,
        size: paymentSystems.length,
        focusIndex: 0
      });
      page.content.focus();
    }
  });

  var paymentChoiceTitle = document.getElementById('payment-choice__title');


  page.content.addListener('card', handleCardClickCallback);
  page.content.addListener('certificate', handleCertificateClickCallback);
  page.content.addListener('mobile', handleMobileClickCallback);


  page.add(page.content);


  page.addListener('hide', function () {
    SupportInfo.hide();
    // page.content.removeListener('card', handleCardClickCallback);
    //page.content.removeListener('certificate', handleCertificateClickCallback);
  });

});


function handleCardClickCallback() {
  paymentModel.set('paymentSystem', helpFunctions.getPaymentSystemName());
  if (app.dataStorage.user.credit_card && app.dataStorage.user.credit_card.length) {
    router.navigate('pagePaymentCardToken');
  } else {
    router.navigate('pagePaymentCardNew');
  }
}


function handleCertificateClickCallback() {
  paymentModel.set('paymentSystem', 'gift');
  router.navigate('pageCertificate');
}


function handleMobileClickCallback() {
  paymentModel.set('paymentSystem', 'mixplat');
  router.navigate('pagePaymentMobile');
}

function getAvailablePayments() {
  var card = {
    title: i18nMgg('payment_type_card'),
    imgSrc: 'design/base/img/icon2.png',
    imgClass: 'payment_item_card',
    action: 'card'
  };

  var mobile = {
    title: i18nMgg('payment_type_mobile'),
    imgSrc: 'design/base/img/icon-sms.png',
    imgClass: 'payment_item_mobile',
    action: 'mobile'
  };

  var certificate = {
    title: i18nMgg('promocode_title'),
    imgSrc: 'design/base/img/icon-sertificat.png',
    imgClass: 'payment_item_certificate',
    action: 'certificate'
  };

  var paymentArray = [];

  paymentArray.push(card);

  if (helpFunctions.isMobilePaymentsAvailable() && !paymentModel.defaultEvents.isPromoTariff()) {
    paymentArray.push(mobile);
  }

  if (paymentModel.get('isPromoCode')) {
    paymentArray.push(certificate);
  }

  return paymentArray;
}

// public
module.exports = page;

},{"core/animate":14,"core/app":16,"core/components/list":23,"core/components/page":25,"core/dom":31,"core/lib/helpFunctions":34,"core/paymentModel":41,"core/router":45,"ui/payment-choice-item":123,"vendor/aura/keys":133,"widgets/loader":149,"widgets/support-info":163}],76:[function(require,module,exports){
'use strict';

var id = 'pagePaymentMobile',
  app = require('core/app'),
  Page = require('core/components/page'),
  router = require('core/router'),
  keys = require('vendor/aura/keys'),
  dom = require('core/dom'),
  Button = require('core/components/button'),
  Loader = require('widgets/loader'),
  paymentModel = require('core/paymentModel'),
  SupportInfo = require('widgets/support-info'),
  PopUpResults = require('widgets/popup/popup-results'),
  helpFunctions = require('core/lib/helpFunctions'),
  KeyboardNum = require('widgets/keyboard-num'),
  List = require('core/components/list'),
  subscriptionService = require('core/tools/subscriptionService'),
  paymentService = require('core/tools/paymentService'),
  api = require('core/api');


var page = new Page({
  $node: document.getElementById(id),
  $body: document.getElementById(id + 'Container'),
  header: '',
  back_button: {
    'clickCallBack': function() {
      router.back();
    }
  }
});

page.addListener('load', function () {

  page.nextButton = new Button({
    $node: 'nextButtonMobile',
    events: {
      focus: function () {
        page.$$lastFocus = this;
      },
      click: function (data) {
        var telephoneNumber = '';
        var telephoneNumberInput = page.mobileNumberInput;

        for (var i = 0; i < telephoneNumberInput.data.length; i++) {
          telephoneNumber += telephoneNumberInput.data[i].value;
        }

        if (telephoneNumber.replace(/\s+/g, '').length < 10 ) {
          telephoneNumberInput.$node.classList.add('error');
        } else {
          KeyboardNum.hide();
          KeyboardNum.keyboard.removeListener('type:char', typeCharCallback);
          KeyboardNum.keyboard.removeListener('close', closeKeyboardCallback);
          KeyboardNum.keyboard.removeListener('type:remove', removeCharCallback);

          page.mobileNumberInput.hide();
          page.nextButton.hide();
          Loader.show();
          var dataToSend = {
            tariff_id: paymentModel.get('tariffID'),
            user_id: app.dataStorage.user.user_id,
            phonenumber: '7'+ telephoneNumber,
            device_vendor: mainConfigMgg.deviceInfo.vendor
          };

          if(paymentModel.get('objectID')){
            dataToSend['video_id'] = paymentModel.get('objectID')
          }
            api.load('createMobileOrder', dataToSend).then(function (data) {
              if(data.status == 'open'){
                Loader.hide();

                paymentModel.set('orderID', data.order_id);

                page.step1TextWrapper.innerHTML = i18nMgg('mobile_pay_step_2_1') + ' ' + '<span class="link">' + formatNumber('7' + telephoneNumber) + '</span>' + '. '
                  + i18nMgg('mobile_pay_step_2_2');
                page.backButton.focusButton();

                page.checkOrederStatus = setInterval(function () {
                  checkOrderStatus()
                }, 3000);

              }else{
                PopUpResults.show({
                  title: paymentModel.get('title'),
                  subTitle: paymentModel.get('subTitle'),
                  type: 'error',
                  text: data.message,
                  buttonText: i18nMgg('payment_button_error'),
                  buttonLink: ''
                });


                Loader.hide();
                // payment error view
              }
            });
        }
      }
    },
    keys: {
      LEFT: function () {
        page.backButton.focusButton(this);
      },
      UP: function () {
        page.mobileNumberInput.focus();
      },
      RETURN: function () {
        page.backButton.emit('click');
      }
    }
  });

  page.mobileNumberInput = new List({
    $node: 'mobileNumberInput',
    type: List.prototype.TYPE_HORIZONTAL,
    cycle: false,
    visible: true,
    focusIndex: 0,
    keys: {
      UP: function () {
        page.backButton.focusButton(this);
      },
      DOWN: function () {
        page.nextButton.focus();
      },
      ZERO: function () {
        handleNumberInput(this, 0)
      },
      ONE: function () {
        handleNumberInput(this, 1)
      },
      TWO: function () {
        handleNumberInput(this, 2)
      },
      THREE: function () {
        handleNumberInput(this, 3)
      },
      FOUR: function () {
        handleNumberInput(this, 4)
      },
      FIVE: function () {
        handleNumberInput(this, 5)
      },
      SIX: function () {
        handleNumberInput(this, 6)
      },
      SEVEN: function () {
        handleNumberInput(this, 7)
      },
      EIGHT: function () {
        handleNumberInput(this, 8)
      },
      NINE: function () {
        handleNumberInput(this, 9)
      },
      RETURN: function () {
        page.backButton.emit('click');
      }
    },
    events: {
      'focus': function (data) {
        page.$$lastFocus = this;
        this.$node.classList.remove('error');
        this.focusItem(this.$node.children[0]);
      },
      'click:item': function (data) {
        this.$node.classList.add('active');
        KeyboardNum.show();
        var coordinates = this.$node.getBoundingClientRect();
        var top = coordinates.top + this.$node.offsetHeight / 2;
        KeyboardNum.setPosition({left: coordinates.right, top: top});
      },
      overflow: function (data) {
        if (data.direction === keys.RIGHT) {
          if (KeyboardNum.visible) {
            KeyboardNum.hide();
            this.$node.classList.remove('active');
          }
          page.nextButton.focus();
        }

        if (data.direction === keys.LEFT && data.type !== 'mousewheel') {
          page.backButton.focusButton(this);
        }
      }
    },
    render: function ($item, data) {
      if (data.className && data.className == 'clear') {
        $item.textContent = '';
        $item.classList.add(data.className);
      }
      if(data.isLastInGroup){
        $item.classList.add('mr-10');
      }

      if (data.value) {
        $item.textContent = data.value;
        $item.classList.remove('clear');
      }
    }
  });



  /**
   * Listeners
   */
  page.addListener('show', function (data) {

    page.isSuccessfulPayment = false;
    Loader.show();

    if (helpFunctions.isNavigateBack(data)) {
      Loader.hide();
      return;
    }

    clearPCInitData();

    page.header.setTitle(paymentModel.get('title'));
    page.header.setSubTitle(paymentModel.get('subTitle'));
    page.nextButton.setValue(i18nMgg('next'));

    page.mobileNumberInput.$node.innerHTML = '';
    page.mobileNumberInput.$body.innerHTML = '';

    page.mobileNumberInput.init({
      size: inputData.length,
      data: inputData
    });

    page.step1TextWrapper = document.getElementById('descriptionTextMobile');
    var step2TextWrapper = document.getElementById('finalTextMobile');
    var smallTextWrapper = document.getElementById('mobileSmallText');

    page.step1TextWrapper.innerHTML = i18nMgg('mobile_pay_step_1');
    smallTextWrapper.innerHTML = i18nMgg('mobile_pay_terms');
    //page.content.$node.innerHTML = '';

    if(!page.nextButton.visible){
      page.nextButton.show();
    }

    if(!page.mobileNumberInput.visible){
      page.mobileNumberInput.show();
    }

    page.add(page.nextButton);
    page.add(page.mobileNumberInput);

    page.mobileNumberInput.focus();
    SupportInfo.show({type: 'payment', mobilePayment: true});
    Loader.hide();

    KeyboardNum.keyboard.addListener('type:char', typeCharCallback);
    KeyboardNum.keyboard.addListener('type:remove', removeCharCallback);
    KeyboardNum.keyboard.addListener('close', closeKeyboardCallback);
    PopUpResults.addListener('hide', hidePopUpResultsCallback);


  });

  page.addListener('hide', function () {
    clearInterval(page.checkOrederStatus);
    SupportInfo.hide();
    KeyboardNum.hide();
    KeyboardNum.keyboard.removeListener('type:char', typeCharCallback);
    KeyboardNum.keyboard.removeListener('close', closeKeyboardCallback);
    KeyboardNum.keyboard.removeListener('type:remove', removeCharCallback);
    PopUpResults.removeListener('hide', hidePopUpResultsCallback);

  });

});

function hidePopUpResultsCallback(data) {
  if (page.isSuccessfulPayment) {

  } else {
   // clearPCInitData();
    page.step1TextWrapper.innerHTML = i18nMgg('mobile_pay_step_1');
    page.mobileNumberInput.show();
    page.nextButton.show();
    page.mobileNumberInput.focus();
  }
  //router.back();
}

var inputData = [
  {value: '', 'className': 'clear', isLastInGroup: false},
  {value: '', 'className': 'clear', isLastInGroup: false},
  {value: '', 'className': 'clear', isLastInGroup: true},
  {value: '', 'className': 'clear', isLastInGroup: false},
  {value: '', 'className': 'clear', isLastInGroup: false},
  {value: '', 'className': 'clear', isLastInGroup: true},
  {value: '', 'className': 'clear', isLastInGroup: false},
  {value: '', 'className': 'clear', isLastInGroup: true},
  {value: '', 'className': 'clear', isLastInGroup: false},
  {value: '', 'className': 'clear', isLastInGroup: false}
];


var handleNumberInput = function (env, number) {
  env.$focusItem.classList.remove('clear');
  env.$focusItem.data.value = number;
  env.$focusItem.innerHTML = number;
  env.move(keys.RIGHT);
};


var clearPCInitData = function () {
  for (var n in inputData) {
    inputData[n].value = '';
    inputData[n].className = 'clear';
  }
};

function typeCharCallback(data) {
  handleNumberInput(page.mobileNumberInput, data.text);
}

function removeCharCallback(data) {
  page.mobileNumberInput.$focusItem.innerHTML = '';
  page.mobileNumberInput.$focusItem.classList.add('clear');
  if (page.mobileNumberInput.$focusItem.index) {
    page.mobileNumberInput.move(keys.LEFT);
  }
}

function closeKeyboardCallback(data) {
  page.mobileNumberInput.$node.classList.remove('active');
  KeyboardNum.hide();
  page.mobileNumberInput.focus();
}

function formatNumber(number) {
  return '+' + number.replace(/(\d{1})(\d{3})(\d{3})(\d{4})/, '$1 $2 $3 $4');
}

function checkOrderStatus(){
  api.load('checkMobileOrder', {'order_id': paymentModel.get('orderID')}).then(function(data){
    if(data.status == 'closed'){
      clearInterval(page.checkOrederStatus);
      page.isSuccessfulPayment = true;
           // add statistics - cover in into separate method (to use here, in card and in certificate)
      paymentService.successfulPaymentHandler(paymentModel.get('orderID'))
    }

    if(data.status == 'error'){
      clearInterval(page.checkOrederStatus);
      PopUpResults.show({
        title: paymentModel.get('title'),
        subTitle: paymentModel.get('subTitle'),
        type: 'error',
        text: data.message,
        buttonText: i18nMgg('payment_button_error'),
        buttonLink: ''
      });

    }
  });
}

// public
module.exports = page;

},{"core/api":15,"core/app":16,"core/components/button":19,"core/components/list":23,"core/components/page":25,"core/dom":31,"core/lib/helpFunctions":34,"core/paymentModel":41,"core/router":45,"core/tools/paymentService":51,"core/tools/subscriptionService":54,"vendor/aura/keys":133,"widgets/keyboard-num":146,"widgets/loader":149,"widgets/popup/popup-results":159,"widgets/support-info":163}],77:[function(require,module,exports){
'use strict';

var id = 'pagePaymentSetting',
  animate = require('core/animate'),
  Page = require('core/components/page'),
  router = require('core/router'),
  keys = require('vendor/aura/keys'),
  Button = require('core/components/button'),
  dom = require('core/dom'),
  Label = require('core/components/label'),
  Background = require('widgets/background/background'),
  helpFunctions = require('core/lib/helpFunctions'),
  subscriptionService = require('core/tools/subscriptionService'),
  paymentModel = require('core/paymentModel'),
  Loader = require('widgets/loader'),
  paymentService = require('core/tools/paymentService'),
  subscriptionPage = require('pages/subscription/detailed'),
  app = require('core/app'),
  api = require('core/api');


var page = new Page({
  $node: document.getElementById(id),
  $body: document.getElementById(id + 'Container'),
  header: '',
  back_button: {
    'clickCallBack': function() {
      router.back();
    }
  }
});

page.addListener('load', function () {
  var $textWrapper = document.getElementById('pagePaymentText');

  var $paymentButtonOn = new Button({
    $node: 'paymentButtonOn',
    className: 'payment-settings__btn',
    focusable: true,
    events: {
      focus: function () {
        page.$$lastFocus = this;
      },
      click: function (data) {
        Loader.show();

        api.load('paymentsSubscriptionRenewAdd', {subscription_id: page.subscriptionInfo.subscription_id})
            .then(function (data) {
              setTimeout(function (ev) {
                api.load('subscriptionInfo', {}, {setToStorageKey: 'subscriptionInfo'}).then(function(){
                  subscriptionPage.renderAutoRenew(true);
                  if(router.history[router.history.length-1].page.id == 'pageSubscriptionDetailed') {//@TODO need refactor
                    router.navigate('pageSubscriptionDetailed', [page.subscriptionInfo.subscription_id]);
                  } else {
                    router.back();
                  }
                  Loader.hide();
                });
              }, 1000);
            });
      }
    },
    keys: {
      DOWN: function () {
        $paymentButtonBuy.focus();
      },
      LEFT: function () {
        page.backButton.focusButton(this);
      },
      RETURN: function () {
        page.backButton.emit('click');
      }
    }
  });

  var $paymentButtonBuy = new Button({
    $node: 'paymentButtonBuy',
    className: 'payment-settings__btn',
    focusable: true,
    events: {
      focus: function () {
        page.$$lastFocus = this;
      },
      click: function (data) {
        paymentService.getSubscriptionActionHandler(page.subscriptionInfo, page.$$lastFocus);
      }
    },
    keys: {
      UP: function () {
        if($paymentButtonOn.visible){
          $paymentButtonOn.focus();
        }
      },
      DOWN: function () {
        if($paymentButtonOff.visible){
          $paymentButtonOff.focus()
        }
      },
      LEFT: function () {
        page.backButton.focusButton(this);
      },
      RETURN: function () {
        page.backButton.emit('click');
      }
    }
  });

  var $paymentButtonOff = new Button({
    $node: 'paymentButtonOff',
    className: 'payment-settings__btn',
    focusable: true,
    events: {
      focus: function () {
        page.$$lastFocus = this;
      },
      click: function (data) {
        Loader.show();
        api.load('paymentsSubscriptionRenewCancel',
          {subscription_id: page.subscriptionInfo.subscription_id})
            .then(function (data) {
              setTimeout(function (ev) {
                api.load('subscriptionInfo', {}, {setToStorageKey: 'subscriptionInfo'}).then(function(){
                  subscriptionPage.renderAutoRenew(false);

                  if(router.history[router.history.length-1].page.id == 'pageSubscriptionDetailed') {
                    router.navigate('pageSubscriptionDetailed', [page.subscriptionInfo.subscription_id]);
                  } else {
                    router.back();
                  }
                  Loader.hide();
                });
              }, 1000);
            });
      }
    },
    keys: {
      UP: function () {
        $paymentButtonBuy.focus()
      },
      LEFT: function () {
        page.backButton.focusButton(this);
      },
      RETURN: function () {
        page.backButton.emit('click');
      }
    }
  });

  var $paymentIcon = new Label({
    $node: 'pagePaymentIcon',
    className: 'payment-settings__icon'

  });

  var $paymentTitle = new Label({
    $node: 'pagePaymentTitle',
    className: 'payment-settings__title'
  });

  page.add($paymentButtonOn);
  page.add($paymentButtonBuy);
  page.add($paymentButtonOff);
  page.add($paymentIcon);
  page.add($paymentTitle);



  page.addListener('show', function (data) {
    Loader.show();

    if (helpFunctions.isNavigateBack(data)) {
      Loader.hide();
      return;
    }
    $paymentButtonOn.setValue(i18nMgg('renew_on'));
    $paymentButtonOff.setValue(i18nMgg('renew_off'));

    page.header.setTitle(i18nMgg('payment_settings'));

    page.$$lastFocus = $paymentButtonOn;
    page.userInfo = app.dataStorage.user;


    api.load('subscriptionInfo', {}, {setToStorageKey: 'subscriptionInfo'}).then(function(){

      var subs_id = data && data.data ? data.data[0] : null;
      page.subscriptionInfo = subscriptionService.getSubscriptionById(subs_id);

      var expirationDatePayment = page.subscriptionInfo.expiration_date;


      if (data.subscription_meta && data.subscription_meta.images && data.subscription_meta.images.length) {
        var imagesArray = data.subscription_meta.images;
        for (var n in imagesArray) {
          if (imagesArray[n].type == 'logo') {
            $paymentIcon.$node.classList.remove('payment-settings__icon');
            $paymentIcon.$node.innerHTML = '<img class="payment-settings__subs-img" src = ' + imagesArray[n].image + '>';
          }else{
            $paymentIcon.$node.innerHTML = '';
            $paymentIcon.$node.classList.add('payment-settings__icon');
          }
        }
      }else{
        $paymentIcon.$node.innerHTML = '';
        $paymentIcon.$node.classList.add('payment-settings__icon');
      }

      var autoRenewButtonText = '',
        autoRenewText = '',
        autoRenewTitle = '';

      if (page.subscriptionInfo.is_renew) {

        $paymentButtonBuy.focus();
        var tariff = subscriptionService.getFirstSubscriptionTariff(page.subscriptionInfo);
        autoRenewText = i18nMgg('auto_renew_text_1') + ' ' + getCorrectTime(expirationDatePayment) + ' ' + i18nMgg('auto_renew_text_2') + ' ('
          + paymentModel.defaultEvents.getGeoPriceFromData(tariff.price, page.subscriptionInfo.currency, page.subscriptionInfo.currencyID)+ ')' + '<br>';

        if (page.userInfo.credit_card) {
          autoRenewText += i18nMgg('auto_renew_text_3') + ' ' +
           helpFunctions.getUserCardText().fullText;
        }

        autoRenewTitle = addSubsTitleInString(i18nMgg('renew_subsname_on'), page.subscriptionInfo.subscription_id)
        $paymentButtonOn.hide();
        $paymentButtonOff.show();
        $paymentButtonBuy.focus();
      } else {
        autoRenewText = addSubsDateInString(i18nMgg('turn_autorenew_on_dates'), getCorrectTime(expirationDatePayment));
        $paymentButtonOff.hide();
        $paymentButtonOn.show();
        $paymentButtonOn.focus();

        if (page.userInfo.credit_card) {
          autoRenewText += ' ' + helpFunctions.getUserCardText().fullText;
        }

        autoRenewTitle = addSubsTitleInString(i18nMgg('renew_subsname_off'), page.subscriptionInfo.subscription_id);
      }

      $paymentButtonBuy.setValue(i18nMgg('renew_subscription'));
      $textWrapper.innerHTML = autoRenewText;
      $paymentTitle.$node.innerHTML = autoRenewTitle;

      Loader.hide();
    });

    //page.subscriptionInfo = data.data[0].subsInfo;


  })

});

function addSubsTitleInString(text, subsID) {
  return text.replace('[name]', '"' + subscriptionService.getSubscriptionTitle(subsID) + '"');
}

function addSubsDateInString(text, expires) {
  return text.replace('[date]', expires);
}

function getCorrectTime(expirationDate) {
  var data = expirationDate.split('T');
  var YearMonthDay = data[0].split('-');
  return YearMonthDay[2] + '.' + YearMonthDay[1] + '.' + YearMonthDay[0];

}
// public
module.exports = page;

},{"core/animate":14,"core/api":15,"core/app":16,"core/components/button":19,"core/components/label":22,"core/components/page":25,"core/dom":31,"core/lib/helpFunctions":34,"core/paymentModel":41,"core/router":45,"core/tools/paymentService":51,"core/tools/subscriptionService":54,"pages/subscription/detailed":105,"vendor/aura/keys":133,"widgets/background/background":141,"widgets/loader":149}],78:[function(require,module,exports){
var state = require('./state');
var progressState = state.get('progress');
var ChannelsList = require('widgets/epg');
var channelsStore = require('state/channels_store');
var epgStore = require('state/epg_store');
var channelActions = require('state/channel_actions');
var api = require('core/api');
var helpFunctions = require('core/lib/helpFunctions');
var playerHelpFunction = require('./playerHelpFunction');
var statInfoService = require('core/tools/statInfoService');
var _ = require('lodash');
var seekTimeout;
var channelsIdList = [];
var loadStreamTimer;
var checkChannelEpgTimer;
var checkPositionInTimeshiftTimer;
var seekStep = 15;
var lastSeekTimestamps = [];
var uptime;
var player;

function checkSeekSteps() {
  var now = Date.now();
  var newTimes = [];
  for (var i in lastSeekTimestamps) {
    if (lastSeekTimestamps[i] > now - 1000)
      newTimes.push(lastSeekTimestamps[i])
  }
  if (newTimes.length >= 3 && seekStep < 180) {
    seekStep = seekStep == 15 ? 30 : (seekStep == 30 ? 60 : 180);
    newTimes = [];
    uptime = now;
  } else if (uptime + 1000 < now && newTimes.length <= 1) {
    seekStep = 15;
    // seekStep = seekStep == 180 ? 60 : (seekStep == 60 ? 30 : 15);
  }
  newTimes.push(now);
  lastSeekTimestamps = newTimes;
}
var actions = {
  setSeekPosition: function (position) {
    if (position == progressState.get('seekPosition')) return;
    position = Math.max(-1, Math.min(progressState.get('duration'), position));
    if (position >= 0) {
      player.set('thumbnailsTime', position + 1);
    }

    if (state.get('type') == 'timeshift' && position > progressState.get('buffer') && channelsStore.get('current_channel').get('is_dvr')) {
      position = progressState.get('buffer');
    }
    progressState.set('seekPosition', parseInt(position));
  },
  prev: function () {
    var gaData = {
      'category': state.get('type'),
      'action': mainConfigMgg.app.lang + '/' + state.get('favorite_id'),
      'label': 'prev'
    };

    if (state.get('type') == 'tv') { // tv_начать сначала
      gaData['label'] = 'start_over';
      actions.startTimeshift(state.get('epg'), 0);
      progressState.set('seekPosition', 0);
      actions.seekTo(0);
    } else {
      if (progressState.get('position') >= 10) { // всё, что не ТВ и мотаем в начало
        gaData['label'] = 'start_over';
        progressState.set('seekPosition', 0);
        actions.seekTo(0);
      } else if (state.get('type') == 'timeshift' || state.get('type') == 'catchup') { // <10 секунд, открываем предыдущий
        var epg_id = channelsStore.get('current_channel').get('epg_id');
        var epgObj = epgStore.getPrev(epg_id, state.get('epg').start_timestamp);
        if (epgObj) {
          actions.playEpg(epgObj);
        }
      } else if (state.get('type') == 'vod') { // предыдущий эпизод
        if (state.get('stream').prev) {
          actions.startVod(state.get('stream').prev);
        }
      }
    }
    statInfoService.sendGAPlayerTrackEvent(gaData['category'], gaData['action'], gaData['label']);
  },
  playEpg: function (epgObj) {
    if (!epgObj) {
      actions.startTv();
    } else if (epgObj.start_timestamp < helpFunctions.getTimestampNow() &&
      epgObj.end_timestamp >= helpFunctions.getTimestampNow() &&
      (channelsStore.get('current_channel').get('vod_channel') || channelsStore.get('current_channel').get('is_dvr'))) {
      // START TIMESHIFT
      actions.stop();
      state.set('object', {
        video_id: channelsStore.get('current_channel').get('vod_channel') || !channelsStore.get('current_channel').get('is_dvr') ? epgObj.object_id : channelsStore.get('current_channel').get('id'),
        virtual_id: null
      });
      var ts = helpFunctions.getTimestampNow() - epgObj.start_timestamp;
      state.set('ts', ts > 1 ? ts : 1);
      progressState.set('seekPosition', 0);
      progressState.set('position', 0);
      actions.startTimeshift(epgObj, 0);
      clearTimeout(loadStreamTimer);
      loadStreamTimer = setTimeout(function () {
        actions.loadStream();
      }, 650);
    } else if (epgObj) {
      actions.startCatchup(epgObj, 0);
      actions.stop();
      state.set('object', {
        video_id: !(epgObj.object_id || (channelsStore.get('current_channel').get('is_dvr') && epgObj.virtual_object_id)) ? null : epgObj.virtual_object_id && channelsStore.get('current_channel').get('is_dvr') ? channelsStore.get('current_channel').get('id') : epgObj.object_id,
        virtual_id: channelsStore.get('current_channel').get('is_dvr') ? epgObj.virtual_object_id : undefined
      });
      actions.stop();
      progressState.set('duration', epgObj.end_timestamp - epgObj.start_timestamp);
      clearTimeout(loadStreamTimer);
      loadStreamTimer = setTimeout(function () {
        actions.loadStream();
      }, 650);
    }
  },
  next: function () {

    var gaData = {
      'category': state.get('type'),
      'action': mainConfigMgg.app.lang + '/' + state.get('favorite_id'),
      'label': 'next'
    };

    if (state.get('type') == 'tv' && channelsStore.get('current_channel').get('vod_channel')) {
      gaData['label'] = 'next_vod_channel';
      actions.playEpg(state.get('epg') && epgStore.getNext(channelsStore.get('current_channel').get('epg_id'), state.get('epg').start_timestamp));
    } else if (state.get('type') == 'timeshift') {
      if (channelsStore.get('current_channel').get('is_dvr') || progressState.get('position') < progressState.get('buffer') - 10 || state.get('ts') > 1 || state.get('paused')) {
        gaData['label'] = 'to_live';
        actions.seekTo(progressState.get('buffer'));
      } else {
        gaData['label'] = 'next_vod';
        actions.playEpg(state.get('epg') && epgStore.getNext(channelsStore.get('current_channel').get('epg_id'), state.get('epg').start_timestamp));
      }
    } else if (state.get('type') == 'catchup') {
      var epgObj = state.get('epg') && epgStore.getNext(channelsStore.get('current_channel').get('epg_id'), state.get('epg').start_timestamp);
      var now = helpFunctions.getTimestampNow();
      if (
        !epgObj ||
        (epgObj.start_timestamp > now && state.get('epg').start_timestamp < now && channelsStore.get('current_channel').get('is_dvr')) ||
        (!channelsStore.get('current_channel').get('is_dvr') && (!epgObj || !epgObj.object_id))) {

        gaData['label'] = 'start_tv';
        actions.startTv();
      } else {
        actions.playEpg(epgObj);
      }
    } else if (state.get('type') == 'vod') {
      if (state.get('stream').next) {
        actions.startVod(state.get('stream').next);
      }
    }

    statInfoService.sendGAPlayerTrackEvent(gaData['category'], gaData['action'], gaData['label']);
  },
  seekTo: function (position, notClearSeekPosition) {
    if (state.get('type') == 'off') return;
    var now = parseInt(helpFunctions.getTimestampNow());
    var epgObj = state.get('epg');
    if (position || position === 0) {
      position = Math.max(-1, Math.min(progressState.get('duration'), position));
    }
    if ((!position && position !== 0 ) || position < 0) {
      position = progressState.get('seekPosition');
    }
    if (state.get('type') == 'timeshift' && epgObj && position + epgObj.start_timestamp >= now - 10) {
      if (channelsStore.get('current_channel').get('is_dvr')) {
        position = now - epgObj.start_timestamp;
        progressState.set('position', position);
        if (state.get('ts')) {
          state.set('ts', 1);
          actions.startPlayer();
        }
        if (!notClearSeekPosition)
          progressState.set('seekPosition', -1);
        return;
      } else {
        progressState.set('position', position);
        state.set('ts', 1);
        player.seekTo(position);
        if (!notClearSeekPosition)
          progressState.set('seekPosition', -1);
        return;
      }
    }
    if (position >= 0) {
      if ((state.get('type') == 'timeshift' || state.get('ts')) && epgObj) {
        var ts = helpFunctions.getTimestampNow() - position - epgObj.start_timestamp;
        state.set('ts', ts > 1 ? ts : 1);
        if (channelsStore.get('current_channel').get('is_dvr')) {
          actions.startPlayer();
        } else {
          player.seekTo(position ? position : 1);
        }
      } else {
        player.seekTo(position ? position : 1);
      }
      progressState.set('position', position);
      if (!notClearSeekPosition)
        progressState.set('seekPosition', -1);
    }
  },
  forward: function () {
    if (state.get('type') == 'tv')
      actions.startTimeshift(state.get('epg'));
    checkSeekSteps();
    var newPosition = progressState.get('seekPosition') >= 0 ? progressState.get('seekPosition') : progressState.get('position');
    newPosition += seekStep;
    this.setSeekPosition(newPosition);
    newPosition = progressState.get('seekPosition');
    clearTimeout(seekTimeout);
    seekTimeout = setTimeout(function () {
      if (progressState.get('seekPosition') == newPosition) {
        actions.seekTo();
      }
    }, 2000);
  },
  rewind: function () {
    if (state.get('type') == 'tv')
      actions.startTimeshift(state.get('epg'));
    checkSeekSteps();
    var newPosition = progressState.get('seekPosition') >= 0 ? progressState.get('seekPosition') : progressState.get('position');
    newPosition -= seekStep;
    newPosition = newPosition < 0 ? 0 : newPosition;
    this.setSeekPosition(newPosition);
    newPosition = progressState.get('seekPosition');
    clearTimeout(seekTimeout);
    seekTimeout = setTimeout(function () {
      if (progressState.get('seekPosition') == newPosition) {
        actions.seekTo();
      }
    }, 2000);
  },
  play: function () {
    player.play();
  },
  pause: function () {
    state.set('last_pause_timestamp', helpFunctions.getTimestampNow());
    player.pause();
  },
  stop: function () {
    player.stop();
  },
  togglePlayPause: function () {
    // if(state.get('type') == 'tv' || state.get('type') == 'timeshift' || ){
    // }
    var gaData = {
      'category': state.get('type'),
      'action': mainConfigMgg.app.lang + '/' + state.get('favorite_id'),
      'label': state.get('paused') ? 'play' : 'pause'
    };
    statInfoService.sendGAPlayerTrackEvent(gaData['category'], gaData['action'], gaData['label']);

    if (state.get('type') == 'tv') {
      actions.startTimeshift(state.get('epg'));
      state.set('ts', 1);
      actions.pause();
    } else if (state.get('type') == 'timeshift' || state.get('ts')) {
      if (state.get('paused')) {
        var ts = state.get('ts');
        ts += helpFunctions.getTimestampNow() - state.get('last_pause_timestamp');
        state.set('ts', ts);
        if (ts > 1 && channelsStore.get('current_channel').get('is_dvr')) {
          actions.startPlayer();
        } else {
          actions.play();
        }
        // player.play();
      } else {
        actions.pause();
      }
    } else
      player.togglePlayPause();
  },
  tvchannels: function () {
    ChannelsList.show({actions: actions});
  },
  startCatchup: function (epgObj, position) {
    state.set('epg', epgObj);
    state.set('type', 'catchup');
    state.set('header', {
      title: epgObj.title,
      subTitle: channelsStore.get('current_channel').get('is_dvr') && epgObj.virtual_object_id ? helpFunctions.getCatchUpSubTitle(epgObj.start) : '',
      className: 'dvr'
    });
    progressState.set('buffer', 0);
    if (typeof position != 'undefined')
      progressState.set('position', position);
    progressState.set('duration', epgObj.end_timestamp - epgObj.start_timestamp);
  },
  loadStream: function () {
    if (state.get('type') == 'off') return;
    var obj = state.get('object');
    if (!obj.video_id) return;
    state.set('buffering', true);
    var requestData = {
      video_id: obj.video_id,
      resolution: document.body.offsetWidth + 'x' + document.body.offsetHeight
    };
    if (obj.virtual_id) {
      requestData.virtual_id = obj.virtual_id;
    }
    state.set('stream_loading', true);
    api.load(obj.virtual_id ? 'virtualStream' : 'stream', requestData).then(function (stream) {
      if (state.get('type') == 'off') return;
      if (obj.video_id == state.get('object').video_id) {
        stream.bitrates = stream.bitrates || [];
        if (stream['is_wvdrm'] == true) {
          stream.audio_tracks = [];
          stream.bitrates = [];
        }
        if (state.get('type') == 'catchup' && state.get('ts') < 1) {
          stream.is_live = false;
          stream.is_tv = false;
        }
        state.set('stream', stream);
        state.set('stream_loading', false);
      } else {
        actions.loadStream();
      }
    }).catchError(function (e) {
      state.set('stream_loading_error', e);
      state.set('stream_loading', false);
    })
  },
  setChannelInfo: function (channel) {
    if (!channel)
      channel = channelsStore.get('current_channel');
    if (!channel)
      return;
    actions.checkChannelEpg();
    progressState.set('buffer', 0);
    progressState.set('position', 0);
    progressState.set('duration', 0);
    state.set('favorite_id', channel.get('id'));
    state.set('is_favorite', channel.get('is_favorite'));
    state.set('type', 'tv');
    state.set('header', {
      title: channel.get('title'),
      subTitle: null,
      className: channel.get('is_dvr') || channel.get('vod_channel') ? 'dvr' : ''
    });
    if (channel.get('vod_channel')) {
      if (state.get('epg')) {
        state.set('object', {video_id: state.get('epg').object_id, virtual_id: null});
      } else {
        state.set('object', {video_id: channel.get('id'), virtual_id: null});
      }
    } else {
      state.set('object', {video_id: channel.get('id'), virtual_id: null});
    }
  },
  startChannel: function (channel) {
    actions.stop();
    clearTimeout(loadStreamTimer);
    clearTimeout(seekTimeout);
    clearTimeout(checkPositionInTimeshiftTimer);
    if (state.get('type') == 'off') return;
    actions.setChannelInfo(channel);
    actions.loadStream();
  },
  checkPositionInTimeshift: function () {
    if (state.get('type') != 'timeshift') return;
    clearTimeout(checkPositionInTimeshiftTimer);
    var epgObj = state.get('epg');
    if (epgObj) {
      var now = parseInt(helpFunctions.getTimestampNow());
      if (parseInt(helpFunctions.getTimestampNow()) <= epgObj.end_timestamp) {
        progressState.set('buffer', now - epgObj.start_timestamp);
      } else {
        if (Math.abs(now - epgObj.start_timestamp - progressState.get('position')) > 5) {
          return actions.startCatchup(epgObj);
        } else {
          var epg_id = channelsStore.get('current_channel').get('epg_id');
          epgObj = epgStore.getNext(epg_id, epgObj.start_timestamp);
          if (!epgObj) {
            return actions.startTv();
          } else {
            if (epgObj.start_timestamp - 1 <= now &&
              epgObj.end_timestamp > now) {
              return actions.startTimeshift(epgObj, 0);
            } else {
              return actions.startCatchup(epgObj, 0);
            }
          }
        }
      }
    }
    checkPositionInTimeshiftTimer = setTimeout(function () {
      actions.checkPositionInTimeshift()
    }, 1000);
  },
  startTimeshift: function (epgObj, position) {
    if (!epgObj) return;
    state.set('type', 'timeshift');
    state.set('epg', epgObj);
    state.set('header', {
      title: epgObj.title,
      subTitle: channelsStore.get('current_channel').get('is_dvr') ? helpFunctions.getStartEndTimeString(epgObj.start, epgObj.end) : '',
      className: 'dvr'
    });
    progressState.set('position', position === 0 || position > 0 ? position : helpFunctions.getTimestampNow() - epgObj.start_timestamp);
    progressState.set('duration', epgObj.end_timestamp - epgObj.start_timestamp);
    actions.checkPositionInTimeshift();
  },
  startVod: function (id) {
    actions.stop();
    clearTimeout(loadStreamTimer);
    state.set('loading', true);
    state.set('type', 'vod');
    state.set('object', {video_id: id, virtual_id: null});
    actions.loadStream();
  },
  channelsListRefresh: function () {
    channelsIdList = [];
    for (var i = 0; i < channelsStore.get('channels').data.length; i++) {
      channelsIdList.push(channelsStore.get('channels').at(i).get('id'));
    }
  },
  startTvAfterLoading: function (channel_id) {
    if (state.get('type') == 'off') return;
    if (channelsStore.get('channels').length > 0) {
      if (epgStore.get('is_init')) {
        actions.channelsListRefresh();
        var ch = channelsStore.get('channels').get(channel_id);
        if (ch) {
          channelActions.setCurrentChannel(ch);
        }
        state.set('loading', false);
        if (!channelsStore.get('current_channel'))
          channelActions.setCurrentChannel();
        actions.startChannel(channelsStore.get('current_channel'));
      } else {
        state.set('loading', true);
        epgStore.once('change', function () {
          actions.startTvAfterLoading(channel_id);
        })
      }
    } else {
      state.set('loading', true);
      channelsStore.once('change', function () {
        actions.startTvAfterLoading(channel_id);
      });
    }
  },
  startTv: function (channel_id) {
    state.set('type', 'tv');
    state.set('ts', 0);
    actions.startTvAfterLoading(channel_id);
  },
  startPlayer: function (pOptions) {

    actions.stop();
    if (state.get('type') == 'off') return;

    //state.set('start', true);
    state.set('last_start', 0);
    if (!state.get('stream')) return;
    pOptions = pOptions || {};
    pOptions.startSeconds = pOptions.startSeconds || 0;

    if (state.get('type') == 'vod') {
      state.set('header', {
        title: state.get('stream').title,
        subTitle: state.get('is_trailer') ? i18nMgg('trailer') : '',
        className: ''
      });
      pOptions.startSeconds = state.get('stream').play_start_time || pOptions.startSeconds;
    }

    if (state.get('type') == 'live') {
      state.set('header', {
        title: state.get('stream').title,
        subTitle: '',
        className: ''
      });
    }

    if (pOptions.startSeconds == 0 && state.get('type') == 'tv' && state.get('epg') && channelsStore.get('current_channel').get('vod_channel')) {
      pOptions.startSeconds = parseInt(helpFunctions.getTimestampNow() - state.get('epg').start_timestamp);
    }
    var defaultQuality = helpFunctions.getDefaultQuality();

    if (defaultQuality > 0)
      pOptions.defaultQuality = defaultQuality;
    var src = state.get('stream').src;
    if (state.get('ts') > 1 && channelsStore.get('current_channel').get('is_dvr')) {
      src = playerHelpFunction.addOffsetInURL(parseInt(state.get('ts') - 1), src); //TODO сверить кадры до и после паузы на ТВ
      pOptions.startSeconds = 0;
    }
    // TODO DELETE AFtER TESt!!!!!!
    // if (channelsStore.get('current_channel').get('id') == 2118461 && (state.get('type') == 'catchup' || state.get('type') == 'timeshift')) {
    //   src = src.replace('://meta', '://testerrorororors');
    //   src = src.replace(/:\/\/vs\d+/, '://testerrorororors');
    // }
    player.load(src, _.assign(_.clone(state.get('stream')), {src: src}), pOptions);
  },
  goToChannel: function (way) {
    actions.stop();
    var index = channelsIdList.indexOf(channelsStore.get('current_channel').get('id'));
    if (way == 'next') {
      index++;
      if (channelsIdList.length <= index) {
        index = 0;
      }
    } else {
      index--;
      if (index < 0) {
        index = channelsIdList.length - 1;
      }
    }
    var channel = channelsStore.get('channels').get(channelsIdList[index]);
    channelActions.setCurrentChannel(channel);
    actions.setChannelInfo(channel);
    clearInterval(loadStreamTimer);
    loadStreamTimer = setTimeout(function () {
      actions.loadStream();
    }, 650);
  },
  checkChannelEpg: function () {
    if (channelsStore.get('current_channel')) {
      var epg_id = channelsStore.get('current_channel').get('epg_id');
      var epgObj = epgStore.getCurrent(epg_id, helpFunctions.getTimestampNow(), channelsStore.get('current_channel').get('id'), false, 6);
      state.set('epg', epgObj);
    } else {
      state.set('epg', null);
    }
    // clearTimeout(checkChannelEpgTimer);
    // var epg = channelsStore.getChannelEpgByTime(channelsStore.get('current_channel'), helpFunctions.getTimestampNow());
    // state.set('epg', epg);
    // var timeout = epg ? parseInt((epg.end_timestamp - helpFunctions.getTimestampNow()) * 1000) : 60000;
    // checkChannelEpgTimer = setTimeout(actions.checkChannelEpg, timeout);
  },
  videoCompleted: function () {
    switch (state.get('type')) {
      case 'tv':
        if (channelsStore.get('current_channel').get('vod_channel')) {
          if (state.get('epg')) {
            var epg_id = channelsStore.get('current_channel').get('epg_id');
            var epgObj = epgStore.getNext(epg_id, state.get('epg').start_timestamp);
            state.set('epg', epgObj);
            if (state.get('epg')) {
              state.set('object', {video_id: state.get('epg').object_id, virtual_id: null});
            } else {
              state.set('object', {video_id: channelsStore.get('current_channel').get('id'), virtual_id: null});
            }
            actions.loadStream();
          } else {
            actions.checkChannelEpg();
            if (state.get('epg')) {
              state.set('object', {video_id: state.get('epg').object_id, virtual_id: null});
            } else {
              state.set('object', {video_id: channelsStore.get('current_channel').get('id'), virtual_id: null});
            }
            actions.loadStream();
          }
        }
        break;
      case 'catchup':
        actions.next();
        break;
      case 'timeshift':
        if (state.get('epg')) {
          var epgObj = epgStore.getNext(channelsStore.get('current_channel').get('epg_id'), state.get('epg').start_timestamp);
          state.set('epg', epgObj);
          actions.playEpg(epgObj);
        } else {
          actions.startTv();
        }
        break;
      case 'vod':
        if (state.get('stream').next) {
          actions.next();
        } else {
          actions.exit();
        }
        break;
    }
  },
  setPlayerPosition: function (pos) {
    var position = pos;
    var now = parseInt(helpFunctions.getTimestampNow());
    if (state.get('type') == 'tv') {
      if ((state.get('epg') && state.get('epg').end_timestamp < now) || (!state.get('epg') && now % 60 === 0)) {
        state.set('epg', epgStore.getCurrent(channelsStore.get('current_channel').get('epg_id'), helpFunctions.getTimestampNow(), channelsStore.get('current_channel').get('id')), false, 6);
      }
    } else if (state.get('type') == 'timeshift') {
      if (channelsStore.get('current_channel').get('is_dvr')) {
        if (state.get('paused')) return;
        if (state.get('ts')) {
          position = helpFunctions.getTimestampNow() - state.get('ts') - state.get('epg').start_timestamp;
        } else {
          position = helpFunctions.getTimestampNow() - state.get('epg').start_timestamp;
        }
      }
    } else if (state.get('type') == 'catchup') {
      if (state.get('ts') && channelsStore.get('current_channel').get('is_dvr')) {
        if (state.get('paused')) return;
        position = helpFunctions.getTimestampNow() - state.get('ts') - state.get('epg').start_timestamp;
        if (position >= progressState.get('duration')) {
          var epg_id = channelsStore.get('current_channel').get('epg_id');
          var epgObj = epgStore.getNext(epg_id, state.get('epg').start_timestamp);
          if (!epgObj) {
            return actions.startTv();
          } else {
            if (epgObj.start_timestamp - 1 < helpFunctions.getTimestampNow() &&
              epgObj.end_timestamp >= helpFunctions.getTimestampNow()) {
              return actions.startTimeshift(epgObj, 0);
            } else {
              return actions.startCatchup(epgObj, 0);
            }
          }
        }
      } else if (channelsStore.get('current_channel').get('vod_channel') && state.get('epg') &&
        state.get('epg').start_timestamp - 1 < helpFunctions.getTimestampNow() &&
        state.get('epg').end_timestamp >= helpFunctions.getTimestampNow()) {
        state.set('type', 'timeshift');
        actions.checkPositionInTimeshift();
      }
    }
    progressState.set('position', position);
  },
  setPlayerDuration: function (dur) {
    if ((state.get('type') != 'timeshift' && !state.get('ts')) || channelsStore.get('current_channel').get('vod_channel')) {
      progressState.set('duration', dur);
    }
  },
  exit: function () {
    state.set('type', 'off');
  },
  setPlayerInstance: function (playerInstance) {
    player = playerInstance;
  },
  back_live: function () {
    var gaData = {
      'category': state.get('type'),
      'action': mainConfigMgg.app.lang + '/' + state.get('favorite_id'),
      'label': 'back_to_live'
    };
    statInfoService.sendGAPlayerTrackEvent(gaData['category'], gaData['action'], gaData['label']);
    actions.startTv();
  }
};
window.state = state;
window.actions = actions;

module.exports = actions;

},{"./playerHelpFunction":89,"./state":92,"core/api":15,"core/lib/helpFunctions":34,"core/tools/statInfoService":53,"lodash":1,"state/channel_actions":109,"state/channels_store":110,"state/epg_store":112,"widgets/epg":145}],79:[function(require,module,exports){
'use strict';

var dom = require('core/dom');
var Panel = require('core/components/panel');
var channelsStore = require('state/channels_store');

var channelLoader = new Panel({
  visible: false,
  className: 'channel_loader',
  focusable: false
});

var $channelImage = dom.tag('div', {
  className: 'channel_image'
});

channelLoader.$body.appendChild($channelImage);

channelsStore.addListener('change', function (e) {
  switch (e.name) {
    case 'current_channel':
      $channelImage.style.backgroundImage = e.curr ? 'url(' + e.curr.get('image').small + ')' : '';
      break;
  }
});

module.exports = channelLoader;

},{"core/components/panel":26,"core/dom":31,"state/channels_store":110}],80:[function(require,module,exports){
var Panel = require('core/components/panel');
var dom = require('core/dom');
var actions = require('../actions');

var channelsArrows = new Panel({
  className: 'channels-arrows',
  focusable: false,
  visible: true
});


channelsArrows.prevChannel = new Panel({
  $node: dom.tag('div', {className: 'channel-arrow'}, dom.tag('div', {className: 'icon-prev-channel'})),
  className: 'prev-channel',
  visible: true,
  focusable: true,
  events: {
    mouseout: function () {
      if (this.focused) {
        this.blur();
        channelsArrows.emit('blur');
      }
    },
    mouseover: function () {
      this.focus();
    },
    click: function () {
      actions.goToChannel('prev');
    },
    keydown: function (e) {
      channelsArrows.emit('keydown', e);
    }
  }
});

channelsArrows.nextChannel = new Panel({
  $node: dom.tag('div', {className: 'channel-arrow'}, dom.tag('div', {className: 'icon-next-channel'})),
  className: 'next-channel',
  visible: true,
  focusable: true,
  events: {
    mouseout: function () {
      if (this.focused) {
        this.blur();
        channelsArrows.emit('blur');
      }
    },
    mouseover: function () {
      this.focus();
    },
    click: function () {
      actions.goToChannel('next');
    },
    keydown: function (e) {
      channelsArrows.emit('keydown', e);
    }
  }
});

channelsArrows.isFocused = function () {
  return channelsArrows.nextChannel.focused || channelsArrows.prevChannel.focused;
};

channelsArrows.add(channelsArrows.prevChannel);
channelsArrows.add(channelsArrows.nextChannel);

module.exports = channelsArrows;

},{"../actions":78,"core/components/panel":26,"core/dom":31}],81:[function(require,module,exports){
'use strict';

var List = require('core/components/list');
var epgStore = require('state/epg_store');
var Component = require('core/component');
var keys = require('vendor/aura/keys');
var actions = require('../actions');
var state = require('../state');
var dom = require('core/dom');
var channelsStore = require('state/channels_store');
var helpFunctions = require('core/lib/helpFunctions');
var _ = require('lodash');
var LeftMenu = require('widgets/menu-left');
var isRealFocused = false;
var router = require('core/router');

var controlsBack = new List({
  type: List.prototype.TYPE_HORIZONTAL,
  className: 'controls',
  cycleX: false,
  focusIndex: 0,
  render: function (item, data) {
    if (data.type == 'tvchannels') {
      item.appendChild(dom.tag('div', {className: 'control-preview'},
        dom.tag('div', {className: 'control-preview__name'}, i18nMgg('controls_tvchannels'))));

    }

    if (data.type == 'back_live') {
      item.appendChild(dom.tag('div', {className: 'control-preview'},
        dom.tag('div', {className: 'control-preview__name'}, i18nMgg('controls_back_live'))));

    }

    if (data.type == 'prev') {
      if (state.get('type') == 'tv' || state.get('progress').get('position') >= 10) {
        item.appendChild(dom.tag('div', {className: 'control-preview'},
          dom.tag('div', {className: 'control-preview__name'}, i18nMgg('controls_start_over'))));

      } else if (data.epg) {
        item.appendChild(dom.tag('div', {className: 'control-preview'},
          data.epg.pictures && data.epg.pictures['125x70'] ? dom.tag('img', {
            className: 'control-preview__icon',
            src: data.epg.pictures['125x70']
          }) : '',
          dom.tag('div', {className: 'control-preview__name'}, data.epg.title)));
      } else if (state.get('type') == 'vod') {
        item.appendChild(dom.tag('div', {className: 'control-preview'},
          dom.tag('div', {className: 'control-preview__name'}, i18nMgg('controls_prev'))));
      }
    } else if (data.type == 'next') {
      if (state.get('type') == 'vod') {
        item.appendChild(dom.tag('div', {className: 'control-preview'},
          dom.tag('div', {className: 'control-preview__name'}, i18nMgg('controls_next'))));
      } else if (state.get('type') == 'timeshift' && (state.get('ts') > 1 || state.get('paused') || state.get('progress').get('position') < state.get('progress').get('buffer') - 10)) {
        item.appendChild(dom.tag('div', {className: 'control-preview'},
          dom.tag('div', {className: 'control-preview__name'}, i18nMgg('controls_back_to_live'))))
      } else if (data.epg) {
        item.appendChild(dom.tag('div', {className: 'control-preview'},
          data.epg.pictures && data.epg.pictures['125x70'] ? dom.tag('img', {
            className: 'control-preview__icon',
            src: data.epg.pictures['125x70']
          }) : '',
          dom.tag('div', {className: 'control-preview__name'}, data.epg.title)));
      }
    }
    this[data.type] = new Component({
      $node: item,
      className: 'icon-player-control-' + data.type,
      visible: data.hasOwnProperty('visible') ? data.visible : true
    });
  }
});

var controls = new List({
  type: List.prototype.TYPE_HORIZONTAL,
  className: 'controls transparent',
  cycleX: false,
  focusIndex: 0,
  events: {
    'mousewheel': function (data) {
      if (state.get('type') == 'tv' && isRealFocused) {
        if (data.deltaY > 0) {
          actions.goToChannel('next');
        } else {
          actions.goToChannel('prev');
        }
      }
    },
    'mouseover': function (data) {
      if (data.$item.data.disabled) return;
      this.focus();
      this.focusItem(data.$item, {no_emit: true});
      addPseudoFocus(data.$item.data.type);
    },
    'blur': function () {
      isRealFocused = false;
      controlsBack.removeClass('pseudo-focus');
    },
    'focus': function (data) {
      var type = ['tv', 'timeshift', 'catchup'].indexOf(state.get('type')) != -1 ? 'tvchannels' : 'play';
      if (this[type]) {
        var isFromRightMenu = data && data.isFromRightMenu || false;
        if (this.$focusItem) {
          this.emit('focus:item', {$curr: this.$focusItem, isFromRightMenu: isFromRightMenu})
        } else {
          this.focusItem(this[type].$node);
          addPseudoFocus(type);
        }
      }
      isRealFocused = true;
    },
    'focus:item': function (data) {
      if (data.$curr.data.disabled) {
        if (!data.$prev || data.$curr.data.index > data.$prev.data.index) {
          if (data.isFromRightMenu) {
            controls.move(keys.LEFT);
          } else {
            controls.move(keys.RIGHT);
          }
        } else {
          controls.move(keys.LEFT);
        }
        return;
      }
      addPseudoFocus(data.$curr.data.type);
    },
    'click:item': function (data) {
      if (data.$item.data.disabled) return;
      var type = data.$item.data.type;
      if (type == 'play')
        type = 'togglePlayPause';
      if (type == 'pause_tv')
        type = 'togglePlayPause';
      actions[type] && actions[type]();
    }
  },
  render: function (item, data) {
    this[data.type] = new Component({
      $node: item,
      className: 'icon-player-control-' + data.type,
      visible: data.hasOwnProperty('visible') ? data.visible : true
    });
  }
});

controls.$node.addEventListener('mousemove', function () {
  controls.emit('mousemove');
}, false);


function render(restore_focus) {
  if (state.get('type') == 'vod' && !state.get('stream')) return;
  var isTv = state.get('type') == 'tv';
  var isTimeshift = state.get('type') == 'timeshift';
  var isCatchup = state.get('type') == 'catchup';
  var controls_data;
  if (isTimeshift || isTv || isCatchup) {
    var channel = channelsStore.get('current_channel');
    var epg = state.get('epg');
    if (!channel) return;
    var isDvr = channel.get('is_dvr');
    var isVod = channel.get('vod_channel');
    var prevEpg = epgStore.getPrev(channel.get('epg_id'), epg ? epg.start_timestamp : helpFunctions.getTimestampNow());
    var nextEpg = epgStore.getNext(channel.get('epg_id'), epg ? epg.start_timestamp : helpFunctions.getTimestampNow());

    controls_data = [];
    controls_data.push({
      type: 'back_live',
      index: 0,
      disabled: !(isCatchup || isTimeshift),
      className: !(isCatchup || isTimeshift) ? 'hidden' : ''
    });
    if (isVod || isDvr || isTimeshift || isCatchup) {
      var prevActive = false;
      if ((isVod || isDvr) && (epg || prevEpg)) {
        prevActive = !(epg && !prevEpg && state.get('progress').get('position') < 10);
      } else if ((isTimeshift || isCatchup) && state.get('progress').get('position') >= 10) {
        prevActive = true;
      } else if (prevEpg && prevEpg.object_id) {
        prevActive = true;
      }
      controls_data.push({
        type: 'prev',
        epg: prevEpg,
        disabled: !prevActive,
        className: !prevActive ? 'disabled' : '',
        index: 1
      });
      controls_data.push({
        type: 'rewind',
        index: 2,
        disabled: !epg,
        className: !epg ? 'disabled' : ''
      });
    }
    controls_data.push({type: 'tvchannels', className: 'no-text', index: 3});
    if (isVod || isDvr || isTimeshift || isCatchup) {
      var isForwardActive = false;
      if (isVod && epg) {
        isForwardActive = true;
      } else if (isTimeshift && (state.get('ts') > 1 || state.get('paused'))) {
        isForwardActive = true;
      } else if (isCatchup) {
        isForwardActive = true;
      }
      controls_data.push({
        type: 'forward',
        disabled: !isForwardActive,
        className: !isForwardActive ? 'disabled' : '',
        index: 4
      });
      var isNextActive = false;
      if (isVod && nextEpg) {
        isNextActive = true;
      } else if (isTimeshift && (state.get('ts') > 1 || state.get('paused'))) {
        isNextActive = true;
      } else if (isCatchup && nextEpg) {
        if (isDvr || isVod) {
          isNextActive = true;
        } else if (nextEpg.object_id || nextEpg.virtual_object_id) {
          isNextActive = true;
        }
      }
      // ((!isTv && isDvr) || isVod) && nextEpg;
      controls_data.push({
        type: 'next',
        disabled: !isNextActive,
        className: isNextActive ? '' : 'disabled',
        epg: nextEpg,
        index: 5
      });
      controls_data.push({
        type: 'pause_tv',
        disabled: !(isTimeshift || isCatchup || ((isVod || isDvr) && epg)),
        className: !(isTimeshift || isCatchup || ((isVod || isDvr) && epg)) ? 'disabled' : (state.get('paused') ? 'icon-player-control-play_tv' : ''),
        index: 6
      });
    }
  } else {
    controls_data = [];
    var stream = state.get('stream');
    if (stream && stream.prev)
      controls_data.push({type: 'prev', index: 1});
    if (state.get('type') != 'live')
      controls_data.push({type: 'rewind', index: 2});
    controls_data.push({
      type: 'play',
      index: 3,
      className: state.get('paused') ? 'icon-player-control-play' : 'icon-player-control-pause'
    });
    if (state.get('type') != 'live')
      controls_data.push({type: 'forward', index: 4});
    if (stream && stream.next)
      controls_data.push({type: 'next', index: 5});
  }

  controlsBack.clear();
  controlsBack.init({
    size: controls_data.length,
    data: controls_data
  });
  var isFocused = controls.focused;
  var lastFocusEl = controls.$focusItem;
  controls.clear();
  if (isFocused)
    controls.blur();
  controls.init({
    size: controls_data.length,
    data: controls_data
  });
  if (isFocused) {
    if (state.get('type') != 'off') {
      controls.focus();
      if (restore_focus && lastFocusEl && controls[lastFocusEl.data.type] && !controls[lastFocusEl.data.type].$body.data.disabled) {
        controls.focusIndex(lastFocusEl.index);
      }
    }
  }
}

channelsStore.addListener('change', function (e) {
  if (e.name == 'current_channel') {
    render();
  }
});

epgStore.addListener('change', function (e) {
  if (e.name == 'epgs')
    render(true);
});

state.get('progress').addListener('change', function (e) {
  if (e.name == 'position') {
    if ((e.curr >= 10 && e.prev < 10) || (e.curr < 10 && e.prev >= 10)) {
      render(true);
    }
  }
});

function handlerEpgsChange(e) {
  if (e.name == 'epgs') {
    render(true);
  }
}

state.addListener('change', function (e) {
  if (e.name == 'type') {
    render(e.curr != 'tv');
    if ((e.curr == 'tv' || e.curr == 'timeshift' || e.curr == 'catchup') && !(e.prev == 'tv' || e.prev == 'timeshift' || e.prev == 'catchup')) {
      epgStore.addListener('change', handlerEpgsChange);
    } else if ((e.prev == 'tv' || e.prev == 'timeshift' || e.prev == 'catchup') && !(e.curr == 'tv' || e.curr == 'timeshift' || e.curr == 'catchup')) {
      epgStore.removeListener('change', handlerEpgsChange);
    }
  } else if (e.name == 'epg') {
    render(true);
  } else if (e.name == 'ts') {
    render(true);
  } else if (e.name == 'stream') {
    render(true);
  } else if (e.name == 'paused') {
    render(true);
  } else if (e.name == 'start_play_object') {
    render(true);
  } else if (e.name == 'buffering') {
    render(true);
  }
});

function addPseudoFocus(type) {
  controlsBack.pseudoFocus && controlsBack.pseudoFocus.removeClass('pseudo-focus');
  controlsBack.pseudoFocus = controlsBack[type];
  controlsBack.addClass('pseudo-focus');
  controlsBack[type].addClass('pseudo-focus');
}

controls.controlsBack = controlsBack;

module.exports = controls;

},{"../actions":78,"../state":92,"core/component":18,"core/components/list":23,"core/dom":31,"core/lib/helpFunctions":34,"core/router":45,"lodash":1,"state/channels_store":110,"state/epg_store":112,"vendor/aura/keys":133,"widgets/menu-left":150}],82:[function(require,module,exports){
'use strict';

var app = require('core/app');
var dom = require('core/dom');
var Panel = require('core/components/panel');
var helpFunctions = require('core/lib/helpFunctions');

var channelsStore = require('state/channels_store');
var playerState = require('../state');
//getCurrentChannelEpgByTime
var epg = new Panel({
  visible: false,
  className: 'epg',
  focusable: false
});

var $epgImage = dom.tag('div', {
  className: 'epgImage'
});

var epgInfo = new Panel({
  className: 'epgInfo',
  focusable: false
});

var $epgProgramTitle = dom.tag('div', {
  className: 'epgProgramTitle'
});
var $epgProgramTime = dom.tag('div', {
  className: 'epgProgramTime'
});

epg.$body.appendChild($epgImage);
epgInfo.$body.appendChild($epgProgramTitle);
epgInfo.$body.appendChild($epgProgramTime);

epg.add(epgInfo);

//epg.setEpg = function (data) {
//  if (!data)
//    return epg.hide();
//  epg.show();
//};

playerState.addListener('change', function (e) {
  switch (e.name) {
    case 'type':
    case 'epg':

      var epgData = playerState.get('epg');

      if (playerState.get('type') == 'tv' && epgData) {
        var epgTitleLength = epgData.title?epgData.title.length : 0;
        var title;
        if(epgTitleLength > 60){
          title = epgData.title.slice(0, 60) + '...';
          $epgProgramTitle.innerHTML = title;
        }
        else{
          $epgProgramTitle.innerHTML = epgData.title;
        }

        $epgProgramTime.innerHTML = helpFunctions.getStartEndTimeString(epgData.start, epgData.end)
        if (epgData.pictures && epgData.pictures['150x85']) {
          $epgImage.innerHTML = '<img src="' + epgData.pictures['150x85'] + '"/>';
        } else {
          $epgImage.innerHTML = '';
        }
        epg.show();
      } else {
        epg.hide();
      }
      break;
  }
});

module.exports = epg;

},{"../state":92,"core/app":16,"core/components/panel":26,"core/dom":31,"core/lib/helpFunctions":34,"state/channels_store":110}],83:[function(require,module,exports){
'use strict';

var dom = require('core/dom');
var Panel = require('core/components/panel');


var noProgram = new Panel({
  focusable: false,
  visible: false,
  $body: dom.add(dom.tag('div', {
      className: 'no-program-container'
    },
    dom.tag('div', {
      className: 'no-program-icon'
    }),
    dom.tag('div', {
      className: 'no-program-text'
    }, i18nMgg('no_program'))
    )
  )

});

module.exports = noProgram;

},{"core/components/panel":26,"core/dom":31}],84:[function(require,module,exports){
var Panel = require('core/components/panel');
var dom = require('core/dom');

module.exports = new Panel({
  className: 'tv-pause-block',
  focusable: false,
  visible: false,

  $node: dom.tag('div', {},
    dom.tag('div', {className: 'tv-pause-icon'}),
    dom.tag('div', {className: 'tv-pause-text'}))
});

},{"core/components/panel":26,"core/dom":31}],85:[function(require,module,exports){
'use strict';

var state = require('../state');
var actions = require('../actions');
var progressState = state.get('progress');
var ProgressBar = require('core/components/progress.bar');
var Panel = require('core/components/panel');
var Widget = require('core/components/widget');
var seconds = require('core/tools/seconds');
var helpFunctions = require('core/lib/helpFunctions');
var dom = require('core/dom');
var keys = require('vendor/aura/keys');
var animate = require('core/animate');
var progressBarPosition = null;
var progressBarWidth = 0;

var progressBar = new ProgressBar({});

var progress = new Panel({
  className: 'progress',
  focusable: false
});

var progressHover = new Widget({
  className: 'progressHover',
  focusable: false,
  visible: true
});

var $thumbnailImage = dom.tag('div', {
  className: 'thumbnailImage'
});

var thumbnailsPanel = new Panel({
  visible: false,
  className: 'thumbnails thumbnails-pimp',
  focusable: false

});

var thumbnailWrapper = new Panel({
  focusable: true,
  className: 'thumbnails__wrap'
});


thumbnailWrapper.addListener('keydown', function (event) {
  if ([keys.UP, keys.DOWN, keys.LEFT, keys.RIGHT].indexOf(event.keyCode) != -1)
    progress.emit('blur');
});

var $thumbnailTime = dom.tag('div', {
  className: 'thumbnailTime',
  innerHTML: seconds.format(0)
});

thumbnailWrapper.$body.appendChild($thumbnailImage);
thumbnailWrapper.$body.appendChild($thumbnailTime);

thumbnailsPanel.add(thumbnailWrapper);

var $time = dom.tag('div', {
  className: 'progressTime',
  innerHTML: seconds.format(0)
});

var $duration = dom.tag('div', {
  className: 'progressDuration',
  innerHTML: seconds.format(0)
});

function hideThumbnail() {
  thumbnailsPanel.hide();
  // thumbnailsPanel.show();
  progressBar.$node.classList.remove('show');
  if (!thumbnailsPanel.visible) {
    // console.log('hide');
  }
  else {
    // console.log('show');
  }
}

function showThumbnail(time) {

  progressBar.$node.classList.add('show');
  var duration = progressState.get('duration');
  if (!duration) return;
  if (!progressBarWidth) {
    progressBarWidth = progressBar.$node.offsetWidth;
  }
  var progressPercent = (time / duration);
  var left = progressBarWidth ? parseInt(progressPercent * progressBarWidth) + 'px' : parseInt(progressPercent) * 100 + '%';
  if (thumbnailsPanel.visible) {
    animate(thumbnailWrapper.$body, 0.5, {left: left}, null, true);

  } else {
    thumbnailWrapper.$body.style.left = left;
    thumbnailsPanel.show();

    // console.log('false');
    // console.log(arguments, 'focus thubm');


  }
  $thumbnailTime.innerHTML = seconds.format(time);
  // if (hideThumbnailTimer)
  //   clearTimeout(hideThumbnailTimer);
  // hideThumbnailTimer = setTimeout(progress.hideThumbnail, 2000);
}


function changeThumbnailsStyle(thumbnails) {
  if (!thumbnails.src) {
    thumbnailsPanel.hide();
    $thumbnailImage.style.display = 'none';
    return;
  }
  $thumbnailImage.style.display = 'block';
  $thumbnailImage.style.left = Math.round(thumbnails.width * -1) + 'px';
  $thumbnailImage.style.width = thumbnails.width * 2 + 'px';
  $thumbnailImage.style.height = thumbnails.height * 2 + 'px';
  $thumbnailImage.style.backgroundSize = 'auto ' + thumbnails.height * 2 + 'px';
  $thumbnailImage.style.backgroundImage = 'url(' + thumbnails.src + ')';
  $thumbnailImage.style.backgroundPosition = thumbnails.offset * 2 + 'px';
}

var nowInLiveTimeshift;
state.addListener('change', function (e) {
  if (e.name == 'paused') {
    checkIsLiveTimeshift();
  }
  if (e.name == 'type') {
    if (e.curr == 'timeshift') {
      // $duration.className += ' live';
      $duration.classList.add('live-tv');
      nowInLiveTimeshift = false;
      checkIsLiveTimeshift();
    } else {
      $duration.classList.remove('live-tv');
      $duration.classList.remove('disabled');
      // $duration.className = $duration.className.replace(/\slive/g, '');
    }
  }
});
function checkIsLiveTimeshift() {
  var buffer = progressState.get('buffer');
  var position = progressState.get('position');
  if (state.get('type') == 'timeshift') {
    if (state.get('ts') > 1 || Math.abs(buffer - position) > 10 || state.get('paused')) {
      if (!nowInLiveTimeshift) {
        $duration.classList.add('disabled');
        nowInLiveTimeshift = true;
      }
    } else {
      if (nowInLiveTimeshift) {
        $duration.classList.remove('disabled');
        nowInLiveTimeshift = false;
      }
    }
  }
}
progressState.addListener('change', function (e) {
  var duration = progressState.get('duration');
  var buffer = progressState.get('buffer');
  var position = progressState.get('position');
  switch (e.name) {
    case 'duration':
      progressBar.init({value: position, max: duration});
      $duration.innerHTML = seconds.format(duration - position);
      checkIsLiveTimeshift();
      break;
    case 'position':
      progressBar.set(position);
      $duration.innerHTML = seconds.format(duration - position);
      $time.innerHTML = seconds.format(position);
      checkIsLiveTimeshift();
      break;
    case 'buffer':
      progressBar.setBuffer(e.curr);
      break;
    case 'seekPosition':

      if (progressState.get('seekPosition') !== -1)
        showThumbnail(progressState.get('seekPosition'));
      else
        hideThumbnail();
      break;
    case 'thumbnails':
      changeThumbnailsStyle(progressState.get('thumbnails'));
      break;
  }
});

function getCursorPosition(e) {
  if (!progressBarPosition)
    progressBarPosition = progressBar.$node.getBoundingClientRect();
  var positionPercent = (e.clientX - progressBarPosition.left) / (progressBarPosition.right - progressBarPosition.left);
  var duration = progressState.get('duration');
  if (positionPercent >= 0 && positionPercent <= 1)
    return parseInt(duration * positionPercent);
  return false;
}

progressHover.addListener('click', function (e) {
  actions.seekTo(getCursorPosition(e.event), true);
});

progressHover.$node.addEventListener('mousemove', function (e) {
  var position = getCursorPosition(e);
  if (position) {
    progress.emit('mousemove');
    actions.setSeekPosition(position);
    thumbnailWrapper.focus();
  } else {
    if (thumbnailWrapper.focused)
      progress.emit('mouseout');
    else
      actions.setSeekPosition(-1);
  }
}, false);

progressHover.addListener('mouseout', function () {
  hideThumbnail();
  progress.emit('blur');
  actions.setSeekPosition(-1);

});

window.progressBar = progressBar;
progress.$body.appendChild($time);
progress.add(progressBar);
progress.add(thumbnailsPanel);
progress.$body.appendChild($duration);

progress.add(progressHover);

module.exports = progress;

},{"../actions":78,"../state":92,"core/animate":14,"core/components/panel":26,"core/components/progress.bar":27,"core/components/widget":30,"core/dom":31,"core/lib/helpFunctions":34,"core/tools/seconds":52,"vendor/aura/keys":133}],86:[function(require,module,exports){
'use strict';

var RightMenu = require('widgets/menu-right');
var PopUpList = require('widgets/popup/popup-list');
var api = require('core/api');
var Emitter = require('core/emitter');
var Loader = require('widgets/loader');
var helpFunctions = require('core/lib/helpFunctions');
var iwatchPage = require('pages/movie/iwatch');
var playerInit = require('../playerInit');
var state = require('../state');
var channelsStore = require('state/channels_store');
var channelActions = require('state/channel_actions');
var rightMenu = new RightMenu();
var _ = require('lodash');
var player;
var bubble = require('widgets/bubble');
window.rightMenuggg = rightMenu;
function RightMenuWrapper() {

  Emitter.call(this);

  this.$rightMenu = rightMenu;
  this.componentToFocus = null;

  var self = this;
  player = playerInit();
  var debounceInitRight = _.debounce(function () {
    self.initRight();
  }, 50);

  function initRight() {
    debounceInitRight();
  }

  rightMenu.list.addListener('key:left', function (data) {
    self.hideMenu({isFromRightMenu: true});
  });

  rightMenu.list.addListener('click:item', function (data) {
    //RightMenu.deActivate();
    if (data.$item.data.component == 'Button') {
      var type = data.$item.data.data.type;
      if (type == 'watch_later') {
        toggleFavorite();
      }
      // else if (type != 'togglePlayPause')
      //   self.hideMenu();
      self.emit(type);
    } else {
      self.emit('popUpShow');
      PopUpList.show(data.$item.data.data);
      PopUpList.addListener('change', self.handlePopUpChange);
      PopUpList.addListener('hide', self.handlePopUpHide);
      PopUpList.focus();
    }
  });

  rightMenu.$node.addEventListener('mousemove', function () {
    self.emit('mousemove');
  }, false);

  // rightMenu.$node.addEventListener('mouseout', function () {
  //   console.log('mouseout');
  //   self.hideMenu();
  // }, false);

  rightMenu.addListener('deActivate', function () {
    self.emit('deActivate');
  });
  //
  // function handleDuration() {
  //   player.removeEventListener('property:duration', handleDuration);
  //   initRight();
  // }

  player.addEventListener('property:videoInfo', function () {
    // player.addEventListener('property:duration', handleDuration, false);
    initRight();
  }, false);
  player.addEventListener('property:subtitles', initRight, false);
  player.addEventListener('property:subtitlesList', initRight, false);
  player.addEventListener('property:audioTrack', initRight, false);
  player.addEventListener('property:audioTrackList', initRight, false);
  player.addEventListener('property:quality', initRight, false);
  player.addEventListener('property:qualityList', initRight, false);
  player.addEventListener('property:state', initRight, false);

  channelsStore.addListener('change', function (e) {
    switch (e.name) {
      case 'current_channel':
        initRight();
        break;
    }
  });

  state.addListener('change', function (e) {
    switch (e.name) {
      case 'start_play_object':
        self.initRight();
        break;
      case 'is_favorite':
        initRight();
        break;
      case 'favorite_id':
        initRight();
        break;
      case 'type':
        rightMenu.toggle(e.curr != 'live');
        break;
    }
  });


  this.handlePopUpChange = function (event) {
    if (event.type == "audio_track_settings") {
      if (player.get('audioTrack') != event.data.index) {
        player.setAudioTrack(event.data.index);
      }
    } else if (event.type == "bitrates_settings") {
      if (player.get('quality') != event.data.bitrate) {
        player.setQuality(event.data.bitrate);
        helpFunctions.setDefaultQuality(event.data.bitrate);
      }
    } else if (event.type == "subtitles_settings") {
      if (player.get('subtitles') != event.data.lang) {
        player.setSubtitles(event.data.lang);
      }
    }
  };

  this.handlePopUpHide = function () {
    PopUpList.removeListener('change', self.handlePopUpChange);
    PopUpList.removeListener('hide', self.handlePopUpHide);
    rightMenu.activate();
  };

  var isFavoriteSaving = false;

  function toggleFavorite() {
    if (isFavoriteSaving) return;
    isFavoriteSaving = true;

    var isTv = ['tv', 'timeshift', 'catchup'].indexOf(state.get('type')) >= 0;
    var isFavorite = state.get('is_favorite');
    var favoriteVideoId = state.get('favorite_id');

    if (!favoriteVideoId) return;

    var method =
      isTv ?
        (isFavorite ? 'userFavoriteTvDelete' : 'userFavoriteAddTv') :
        (isFavorite ? 'userFavoriteDelete' : 'userFavoriteAdd');

    state.set('is_favorite', !isFavorite);
    initRight();
    api.load(method, {video_id: favoriteVideoId}).then(function (data) {
      isFavoriteSaving = false;
      if (data.result != 'ok') {
        state.set('is_favorite', isFavorite);
        initRight();
      } else {
        if (isTv)
          channelActions.fetch();
        iwatchPage.toggleIwatchItem(favoriteVideoId, method);
        bubble.hide();
        bubble.show({
          icon: state.get('is_favorite') ? 'icon-add-watch-later' : 'icon-remove-watch-later',
          text: i18nMgg(state.get('is_favorite') ? (isTv ? 'tv_add_watch_later' : 'movie_add_watch_later') : (isTv ? 'tv_remove_watch_later' : 'movie_remove_watch_later'))
        });
      }
    }).catchError(function (error) {
      state.set('is_favorite', isFavorite);
      isFavoriteSaving = false;
      console.error(method + ' error', error);
      initRight();
    });
  }
}

RightMenuWrapper.prototype = Object.create(Emitter.prototype);
RightMenuWrapper.prototype.constructor = RightMenuWrapper;


RightMenuWrapper.prototype.showContainer = function () {
  rightMenu.show();
};

RightMenuWrapper.prototype.hideContainer = function () {
  rightMenu.hide();
};

RightMenuWrapper.prototype.isActive = function () {
  return rightMenu.active;
};

RightMenuWrapper.prototype.isVisible = function () {
  return rightMenu.visible;
};

RightMenuWrapper.prototype.showMenu = function (config) {
  if (PopUpList.visible) return;
  rightMenu.activate();
  if (config) {
    if (config.focusToFirst)
      rightMenu.list.focusIndex(0);
  }
};

RightMenuWrapper.prototype.hideMenu = function (data) {
  PopUpList.removeListener('change', this.handlePopUpChange);
  PopUpList.removeListener('hide', this.handlePopUpHide);
  PopUpList.hide();
  rightMenu.deActivate(data);
  rightMenu.blur();
};

RightMenuWrapper.prototype.initRight = function () {
  var isFavorite = state.get('is_favorite');
  var favoriteVideoId = state.get('favorite_id');
  this.initRightFiltersCollection({
    subtitlesList: player.get('subtitlesList'),
    subtitles: player.get('subtitles'),
    qualityList: player.get('qualityList'),
    quality: player.get('quality'),
    audioTrackList: player.get('audioTrackList'),
    audioTrack: player.get('audioTrack'),
    duration: player.get('duration'),
    isFavorite: isFavorite,
    favoriteVideoId: favoriteVideoId,
    videoStarted: state.get('start_play_object')
  });
};

RightMenuWrapper.prototype.initRightFiltersCollection = function (streamInfo) {
  var filters = [];
  // if (streamInfo.duration) {
  if (streamInfo.favoriteVideoId) {
    filters.push({
      title: i18nMgg(streamInfo.isFavorite ? 'favourite_remove' : 'favourite_add'),
      mark: streamInfo.isFavorite,
      component: 'Button',
      className: 'separate',
      data: {
        header_title: i18nMgg(streamInfo.isFavorite ? 'favourite_remove' : 'favourite_add'),
        type: 'watch_later',
        mark: ''
      }
    });
  }
  if (streamInfo.videoStarted) {
    var forceShowQuality = false;
    if (streamInfo.qualityList && streamInfo.qualityList.length === 1 && streamInfo.qualityList[0].bitrate == 2160)
      forceShowQuality = true;

    addRightMenuItem(filters, [
      {
        list: streamInfo.audioTrackList,
        value: streamInfo.audioTrack,
        defaultValue: 0,
        titleKey: 'display_name',
        marker: 'index',
        title: i18nMgg('track'),
        type: 'audio_track_settings'
      }, {
        list: streamInfo.qualityList,
        value: streamInfo.quality,
        forceShow: forceShowQuality,
        className: streamInfo.quality >= 2160 ? 'uhd-icon' : (streamInfo.quality >= 720 || streamInfo.quality == -1 ? 'hd-icon' : ''),
        defaultValue: -1,
        titleKey: 'name',
        marker: 'bitrate',
        title: i18nMgg('quality'),
        type: 'bitrates_settings',
        subTitle: streamInfo.quality == -1 ? '' : streamInfo.quality + 'p'
      }, {
        list: streamInfo.subtitlesList,
        value: streamInfo.subtitles,
        defaultValue: 'off',
        titleKey: 'display_name',
        marker: 'lang',
        title: i18nMgg('subtitles'),
        type: 'subtitles_settings'
      }]);
  }
  // }
  var lastIndex = rightMenu.list.$focusItem && rightMenu.list.$focusItem.index || 0;
  rightMenu.init(filters, lastIndex < filters.length ? lastIndex : filters.length - 1);
  if (!filters.length) {
    rightMenu.hide();
  }
  else {
    rightMenu.toggle(state.get('type') != 'live');
    // rightMenu.show();
  }
};

RightMenuWrapper.prototype.checkFavorite = function () {
  if (!this.favoriteVideoId) {
    this.isFavorite = null;
    return;
  }
  var self = this;
  api.load(self.isTv ? 'userFavoritesTvByIds' : 'userFavoritesByIds', {video_ids: self.favoriteVideoId})
    .then(function (data) {
      self.isFavorite = Array.isArray(data.video_ids) && data.video_ids.indexOf(self.favoriteVideoId) >= 0;
      self.initRight();
    })
    .catchError(function (error) {
      console.error('checkFavorite error', error)
    });
};


function addRightMenuItem(filters, data) {
  if (Array.isArray(data)) {
    for (var i = 0; i < data.length; i++) {
      addRightMenuItem(filters, data[i]);
    }
    return;
  }
  if (data.forceShow || (data.list && data.list.length > 1)) {
    var item = data.value == data.defaultValue ? undefined : helpFunctions.findBy(data.list, data.marker, data.value);
    filters.push({
      title: (item && !data.subTitle) ? item[data.titleKey] : i18nMgg(data.title),
      subTitle: data.subTitle,
      mark: !!item,
      className: data.className,
      data: {
        header_title: i18nMgg(data.title),
        type: data.type,
        mark: data.value,
        content: data.list,
        marker: data.marker
      }
    });
  }
}


module.exports = RightMenuWrapper;

},{"../playerInit":90,"../state":92,"core/api":15,"core/emitter":32,"core/lib/helpFunctions":34,"lodash":1,"pages/movie/iwatch":64,"state/channel_actions":109,"state/channels_store":110,"widgets/bubble":144,"widgets/loader":149,"widgets/menu-right":151,"widgets/popup/popup-list":155}],87:[function(require,module,exports){
'use strict';

var state = require('./state');
var _ = require('lodash');

var Component = require('core/component');
var dom = require('core/dom');
var keys = require('vendor/aura/keys');
var LeftMenu = require('widgets/menu-left');
var ChannelsList = require('widgets/epg');
var Panel = require('core/components/panel');
var BackLable = require('widgets/back-lable');
var backLable = new BackLable();
var RightMenu = require('./controls/right_menu');
var progress = require('./controls/progress');
var controls = require('./controls/controls');
var bubble = require('widgets/bubble');
var epg = require('./controls/epg');
var channelLoader = require('./controls/channel_loader');
var channelsArrows = require('./controls/channels_arrows');
var channelsStore = require('state/channels_store');
var Loader = require('widgets/loader');
var PopUpList = require('widgets/popup/popup-list');
var ErrorBlock = require('widgets/popup/popup-error');
var router = require('core/router');
var Ad = require('widgets/ad');
var lastLoaderChannelShowId;
var controlsWrapper;
var object_id, timer, rightMenu;
var shade = new Panel({
  className: 'shade',
  focusable: false,
  visible: true
});

shade.$body.appendChild(dom.tag('div', {
  className: 'full-shade'
}));

var live = new Panel({
  $body: dom.tag('div', {className: 'live'}, 'Live'),
  focusable: false,
  visible: false
});

function controlsFocus(data) {
  // console.log('controlsFocus', {
  //   'Loader.visible': Loader.visible,
  //   'LeftMenu.isVisible()': LeftMenu.isVisible(),
  //   'LeftMenu.hoverMenu':LeftMenu.hoverMenu,
  //   'PopUpList.visible': PopUpList.visible,
  //   'ChannelsList.visible': ChannelsList.visible,
  //   'ErrorBlock.visible': ErrorBlock.visible,
  //   'state type': state.get('type')
  // });
  if (Ad.visible || Loader.visible || LeftMenu.isVisible() || LeftMenu.hoverMenu || ChannelsList.visible || PopUpList.visible || ErrorBlock.visible || state.get('type') == 'off') return;
  controls.focus(data);
}
function ControlsWrapper() {

  Component.call(this, {
    $node: dom.tag('div', {
      className: 'controlsWrapper'
    }),
    focusable: true
  });

  controlsWrapper = this;
  rightMenu = new RightMenu();
  this.rightMenu = rightMenu;
  this.add(backLable);
  this.add(live);
  this.add(controls.controlsBack);
  this.add(progress);
  this.add(rightMenu.$rightMenu);
  this.add(channelsArrows);
  this.add(channelLoader);
  this.add(controls);
  this.add(epg);
  this.add(shade);
  this.add(shade);
  var self = this;

  backLable.setComponentToFocus(controls);

  this.handleMouseMoveThrottle = function () {
    if (rightMenu.isActive()) {
      rightMenu.hideMenu();
      setTimeout(function () {
        controls.emit('blur');
      }, 0);
    }
  };

  controls.addListener('mousemove', function () {
    self.handleMouseMoveThrottle();
  });

  progress.addListener('mousemove', function () {
    self.handleMouseMoveThrottle();
  });

  channelsArrows.nextChannel.$node.addEventListener('mousemove', function () {
    self.handleMouseMoveThrottle();
  }, false);

  channelsArrows.prevChannel.$node.addEventListener('mousemove', function () {
    self.handleMouseMoveThrottle();
  }, false);

  backLable.$body.addEventListener('mousemove', function () {
    self.handleMouseMoveThrottle();
  }, false);

  this.addListener('blur', function () {
    // console.log('ControlsWrapper blur');
    controlsFocus();
  });

  this.addListener('focus', function () {
    // console.log('ControlsWrapper focus');
    controlsFocus();
  });

  this.addListener('show', function () {
    // console.log('ControlsWrapper show');
    controlsFocus();
  });

  this.addListener('hide', function () {
    // console.log('ControlsWrapper hide');
    controls.blur();
  });

  Loader.addListener('hide', function () {
    controlsFocus();
  });

  Loader.addListener('show', function () {
    controls.blur();
    Loader.focus();
  });

  channelsArrows.addListener('blur', function () {
    // console.log('channelsArrows blur');
    controlsFocus();
  });

  progress.addListener('blur', function () {
    // console.log('progress blur');
    controlsFocus();
  });

  ChannelsList.addListener('show', function () {
    self.hide();
    self.clearTimer();
  });

  ChannelsList.addListener('hide', function () {
    // console.log('ChannelsList hide');
    actions.channelsListRefresh();
    controlsFocus();
    self.show();
    self.hideTimeout();
  });

  LeftMenu.container.addListener('hide', function () {
    // console.log('LeftMenu container hide');
    controlsFocus();
    self.hideTimeout();
  });

  LeftMenu.container.addListener('unhover', function () {
    controlsFocus();
  });

  // LeftMenu.container.addListener('hover', function () {
  //   console.log('hover');
  // });

  backLable.addListener('blur', function () {
    // console.log('backLable hide');
    controlsFocus();
  });

  backLable.addListener('hide', function () {
    // console.log('backLable hide');
    controlsFocus();
  });

  backLable.addListener('click', function () {
    // console.log('backLable click');
    controlsFocus();
    self.emit('goBack');
  });

  controls.addListener('focus', function () {
    // console.log('controls focus');
    self.hideTimeout();
  });

  rightMenu.addListener('deActivate', function () {
    controlsFocus({isFromRightMenu: true});
  });

  function middleBlockOverflow(key) {
    if (key === keys.LEFT) {
      if (state.get('type') == 'tv') {
        LeftMenu.showMenu({
          'componentToFocus': controls
        });
      } else {
        backLable.focusButton(controls);
      }
    } else if (key === keys.RIGHT) {
      if (rightMenu.isVisible()) {
        rightMenu.showMenu({
          'componentToFocus': controls
        });
      }
    }
  }

  channelsArrows.addListener('keydown', function (event) {
    if (event.keyCode == keys.UP || event.keyCode == keys.DOWN) {
      // console.log('keydown focus')
      controlsFocus();
    } else if (event.keyCode == keys.LEFT || event.keyCode == keys.RIGHT)
      middleBlockOverflow(event.keyCode);
  });

  controls.addListener('overflow', function (event) {
    middleBlockOverflow(event.direction);
  });


  state.addListener('change', function (e) {
    switch (e.name) {
      case 'type':
        channelsArrows.toggle(e.curr == 'tv');
        epg.toggle(e.curr == 'tv');
        progress.toggle(e.curr == 'vod' || e.curr == 'timeshift' || e.curr == 'catchup');
        LeftMenu.toggle(e.curr == 'tv');
        backLable.toggle(e.curr != 'tv');
        live.toggle(e.curr == 'live');
        if (e.curr != 'tv') {
          channelLoader.hide();
        }
        if (e.curr == 'off') {
          lastLoaderChannelShowId = 0;
        }

        break;
      case 'start_play_object':
        if (state.get('type') == 'tv' && !e.curr && lastLoaderChannelShowId != channelsStore.get('current_channel').get('id')) {
          lastLoaderChannelShowId = channelsStore.get('current_channel').get('id');
          channelLoader.show();
        } else {
          channelLoader.hide();
        }
        break;
    }
  });
}

ControlsWrapper.prototype = Object.create(Component.prototype);
ControlsWrapper.prototype.constructor = ControlsWrapper;


ControlsWrapper.prototype.clearTimer = function () {
  clearTimeout(timer);
};

ControlsWrapper.prototype.hideTimeout = function () {
  var self = this;
  this.clearTimer();
  timer = setTimeout(function () {
    if (PopUpList.visible) {
      self.hideTimeout();
      return;
    }
    if (state.get('type') == 'off') return;
    // LeftMenu.hideMenu();
    if (!LeftMenu.isVisible() && !ChannelsList.visible) {
      rightMenu.hideMenu();
      self.hide();
    }
  }, 5000);
};


function handleMouseMove() {
  controlsWrapper && controlsWrapper.handleMouseMoveThrottle();
}

ControlsWrapper.prototype.start = function () {
  LeftMenu.container.addListener('mouseover', handleMouseMove);
  rightMenu.start && rightMenu.start()
};

ControlsWrapper.prototype.stop = function () {
  LeftMenu.container.removeListener('mouseover', handleMouseMove);
  rightMenu.hideMenu();
  this.show();
  this.clearTimer();
  rightMenu.stop && rightMenu.stop();
  controls.blur();
  ChannelsList.blur();
};

module.exports = ControlsWrapper;

},{"./controls/channel_loader":79,"./controls/channels_arrows":80,"./controls/controls":81,"./controls/epg":82,"./controls/progress":85,"./controls/right_menu":86,"./state":92,"core/component":18,"core/components/panel":26,"core/dom":31,"core/router":45,"lodash":1,"state/channels_store":110,"vendor/aura/keys":133,"widgets/ad":138,"widgets/back-lable":140,"widgets/bubble":144,"widgets/epg":145,"widgets/loader":149,"widgets/menu-left":150,"widgets/popup/popup-error":153,"widgets/popup/popup-list":155}],88:[function(require,module,exports){
'use strict';
var _ = require('lodash');
var keys = require('vendor/aura/keys');
var api = require('core/api');
var app = require('core/app');
var dom = require('core/dom');
var Page = require('core/components/page');
var Background = require('widgets/background');
var Ad = require('widgets/ad');
var LoaderAnimationEl = require('ui/loader-animation-el');
var state = require('./state');
var actions = require('./actions');
var subtitles = require('./subtitles');
var Loader = require('widgets/loader');
var playerInit = require('./playerInit');
var pauseEl = require('./controls/pause');
var ControlsWrapper = require('./controls_wrapper');
var loaderAnimationEl = new LoaderAnimationEl();
var LeftMenu = require('widgets/menu-left');
var ChannelsList = require('widgets/epg');
var helpFunctions = require('core/lib/helpFunctions');
var channelActions = require('state/channel_actions');
var router = require('core/router');
var channelsStore = require('state/channels_store');
var epgActions = require('state/epg_actions');
var noProgram = require('./controls/no-program');
var ErrorBlock = require('widgets/popup/popup-error');
var statInfoService = require('core/tools/statInfoService');
var PopUpList = require('widgets/popup/popup-list');
var epgStore = require('state/epg_store');
var controlsWrapper;
var player;
var requestedStreamAfterError = false;

var page = new Page({
  $node: document.getElementById('pagePlayer'),
  $body: document.getElementById('pagePlayerContainer'),
  header: ''
});
var loadEpgTimer;
function loadEpg() {
  clearTimeout(loadEpgTimer);
  if (channelsStore.get('is_loaded')) {
    // epgActions.fetch();
    loadEpgTimer = setTimeout(loadEpg, 1000 * 3600 * 6);
  } else {
    channelsStore.once('change', loadEpg);
  }
}


function showLoadVideoError(repeatCallback) {
  if (!requestedStreamAfterError) {
    requestedStreamAfterError = true;
    if (typeof repeatCallback == 'function') {
      return repeatCallback();
    }
  }

  var buttons = [];
  if (typeof repeatCallback == 'function') {
    buttons.push({
      text: i18nMgg('payment_button_error'),
      callback: function () {
        Loader.show();
        repeatCallback();
      }
    });
  }
  buttons.push({
    text: i18nMgg('close'),
    callback: function () {
      goBack();
    }
  });

  Loader.hide();
  ChannelsList.hide();

  ErrorBlock.show({
    backLable: function () {
      goBack();
    },
    text: i18nMgg('load_stream_error'),
    buttons: buttons
  });

}

page.addListener('load', function () {
  channelsStore.get('channels').addListener('change', loadEpg);
  this.addListener('keydown', function (event) {
    if (ChannelsList.visible || PopUpList.visible) return;
    switch (event.keyCode) {
      case keys.RETURN:
      case keys.STOP:
        goBack();
        break;
    }
    if (Ad.visible && Ad.isLinear) return;
    controlsWrapper.hideTimeout();
    if (Loader.visible || LeftMenu.isVisible() || ErrorBlock.visible || controlsWrapper.rightMenu.isActive() || Ad.visible) return;
    var type = state.get('type');
    if (type == 'vod') {
      switch (event.keyCode) {
        case keys.SPACE:
          actions.togglePlayPause();
          break;
      }
    }
    if (type == 'tv' || type == 'timeshift' || type == 'catchup') {
      var ch = channelsStore.get('current_channel');
      if (ch.get('vod_channel') || ch.get('is_dvr')) {
        switch (event.keyCode) {
          case keys.SPACE:
            actions.togglePlayPause();
            break;
        }
      }
      switch (event.keyCode) {
        case keys.PAGE_UP:
          actions.goToChannel('next');
          break;
        case keys.PAGE_DOWN:
          actions.goToChannel('prev');
          break;
      }
    }
    if (!controlsWrapper.visible) {
      controlsWrapper.show();
      controlsWrapper.hideTimeout();
      return;
    }
    if (type == 'tv') {
      switch (event.keyCode) {
        case keys.UP:
          actions.goToChannel('next');
          break;
        case keys.DOWN:
          actions.goToChannel('prev');
          break;
      }
    }
  });

  app.addListener('loaded', function () {
    channelActions.fetch();

  });

  app.addListener('ready', function () {
    player = playerInit(page.$body);

    controlsWrapper = new ControlsWrapper(page, player);
    controlsWrapper.addListener('goBack', function () {
      goBack();
    });

    player.addEventListener("ad:external:vastData", handleAdVastData, false);
    player.addEventListener("ad:external:memberStartedPlaying", handleAdVastEvent, false);
    player.addEventListener("ad:external:adComplete", handleAdComplete, false);
    player.addEventListener("ad:skin:clickOnMessage", handleAdClick, false);

    player.addEventListener('player:error', function (event) {
      // sendBufferingKibana();
      var vsServer = 0;
      showLoadVideoError(actions.loadStream);
      statInfoService.sendStreamError('STREAM_ERROR', '', 0, event && event.data && event.data.errorCode, 'PLAYBACK_ERROR', vsServer);
    }, false);

    player.addEventListener('player:mediaError', function (event) {
      // sendBufferingKibana();
      var vsServer = 0;
      showLoadVideoError(actions.loadStream);
      statInfoService.sendStreamError('STREAM_ERROR', '', 0, event && event.data && event.data.errorCode, event && event.data && event.data.errorText, vsServer);
    }, false);


    controlsWrapper.addListener('hide', function () {
      page.header.hide();
      LeftMenu.hide();
    });

    controlsWrapper.addListener('show', function () {
      page.header.show();
      if (state.get('type') == 'tv')
        LeftMenu.show();
    });

    page.$node.addEventListener('mousemove', function () {
      controlsWrapper.show();
      controlsWrapper.hideTimeout();
    }, false);

    state.setPlayerInstance(player);
    actions.setPlayerInstance(player);
    subtitles.init(player);
    Ad.init(player);


    ChannelsList.addListener('show', function () {
      pauseEl.hide();
      noProgram.hide();
    });

    ChannelsList.addListener('hide', function () {
      pauseEl.toggle(state.get('paused'));
      if (state.get('type') == 'catchup' && !state.get('ts')) {
        noProgram.toggle(!state.get('epg') || (!state.get('epg').object_id && !state.get('epg').virtual_object_id));
      }
    });

    Ad.addListener('goBack', goBack);

    controlsWrapper.addListener('show', function () {
      page.addClass('controls-visible');
      Ad.controlsShowed();
    });
    controlsWrapper.addListener('hide', function () {
      page.removeClass('controls-visible');
      Ad.controlsHided();
    });

    loaderAnimationEl.hide();
    loaderAnimationEl.stop();

    page.add(pauseEl);
    page.add(loaderAnimationEl);
    page.add(controlsWrapper);
    page.add(subtitles);
  });
});

function handleStoreChange(e) {
  switch (e.name) {
    case 'loading':
      Loader.toggle(e.curr);
      break;
    case 'header':
      page.header.setTitle(helpFunctions.cropTextAndAddDots(e.curr.title, state.get('type') == 'tv' ? 20 : 50), e.curr.className);
      page.header.setSubTitle(e.curr.subTitle);
      break;
    case 'stream':
      if (e.curr) {
        var stream = e.curr;
        if (!stream.src && (state.get('type') == 'catchup' || state.get('type') == 'timeshift' || state.get('type') == 'vod')) {
          router.history.splice(router.history.length - 1, 1);
          router.navigate('pageMovie', [stream.video_id]);
          return;
        }
        if (state.get('type') == 'vod' && e.curr.is_live && !e.curr.is_tv) {
          state.set('type', 'live');
        }
        actions.startPlayer();
        if (state.get('type') == 'vod' && !state.get('is_trailer')) {
          if (stream.root_video_id) {
            state.set('favorite_id', stream.root_video_id);
            state.set('is_favorite', false);
            api.load('userFavoritesByIds', {video_ids: stream.root_video_id})
              .then(function (res) {
                state.set('is_favorite', Array.isArray(res.video_ids) && res.video_ids.indexOf(stream.root_video_id) >= 0);
              })
              .catchError(function (error) {
                console.error('checkFavorite error', error);
              });
          } else {
            state.set('is_favorite', stream.is_favorite);
          }
        }
      }
      break;
    case 'type':
      if (e.curr == 'off') {
        if (page.active) {
          goBack();
        }
        return;
      }
      if (e.curr == 'tv') {
        epgStore.addListener('change', debounceCheckChannelEpg);
      } else if (e.prev == 'tv') {
        epgStore.removeListener('change', debounceCheckChannelEpg);
      }
      page.setClass(e.curr == 'tv' || e.curr == 'timeshift' || e.curr == 'catchup' ? 'tv' : 'movie');
      if (e.curr == 'catchup' && !state.get('ts')) {
        noProgram.toggle(!state.get('epg') || (!state.get('epg').object_id && !state.get('epg').virtual_object_id));
      } else {
        noProgram.hide();
      }
      break;
    case 'object':
      if (state.get('type') == 'catchup' && !state.get('ts') && state.get('epg')) {
        noProgram.toggle(!state.get('epg') || (!state.get('epg').object_id && !state.get('epg').virtual_object_id));
      } else {
        noProgram.hide();
      }
      break;
    case 'paused':
      pauseEl.toggle(e.curr);
      break;
    case 'buffering':
      if (Loader.visible) return;
      if (e.curr) {
        loaderAnimationEl.show();
        loaderAnimationEl.start();
        pauseEl.hide();
      } else {
        loaderAnimationEl.hide();
        loaderAnimationEl.stop();
        pauseEl.toggle(state.get('paused'));
      }
      break;
    case 'epg':
      if (state.get('type') == 'catchup' && !state.get('ts')) {
        noProgram.toggle(!state.get('epg') || (!state.get('epg').object_id && !state.get('epg').virtual_object_id));
      } else {
        noProgram.hide();
      }
      if (state.get('type') == 'tv') {
        if (channelsStore.get('current_channel').get('vod_channel')) {
          if (state.get('epg')) {
            if (channelsStore.get('current_channel').get('id') == state.get('object').video_id) {
              var haveStream = !!state.get('stream');
              state.set('object', {video_id: state.get('epg').object_id, virtual_id: null});
              if (haveStream) {
                actions.loadStream();
              }
            }
          }
        }
      }
      break;
  }
}

page.addListener('show', function (data) {
  loadEpg();
  Loader.toggle(state.get('loading'));
  controlsWrapper && controlsWrapper.start();
  controlsWrapper.hideTimeout();
  state.addListener('change', handleStoreChange);
  Background.hide();
  // LeftMenu.hide();
  // noProgram.show();
  page.add(noProgram);
  state.set('header', {title: '', subTitle: '', className: ''});

  state.set('is_trailer', false);
  //channelActions.initFetch();

  pauseEl.text(i18nMgg('pause_label'), 'tv-pause-text');
  noProgram.text(i18nMgg('no_program'), 'no-program-text');

  if (data.data && Array.isArray(data.data[0])) {//@TODO-vadim temp need refactor router
    data.data = data.data[0];
  }

  if (data.data && data.data[1] && typeof data.data[1] == 'string') {
    try {
      data.data[1] = JSON.parse(data.data[1]);
    } catch (e) {
    }
  }
  console.log('pageOpen', data.data);

  if (data.data && data.data[0] == 'tv' || helpFunctions.isNavigateBack(data)) { // открываем ТВ раздел
    LeftMenu.openSubMenu('tv_section/');
    if (!channelsStore.get('is_loading'))
      channelActions.fetch();
    //checkEpgTimer = setTimeout(checkEpg, 30000);
    actions.startTv(data.data[1]);
  } else if (data.data && data.data[0] && parseInt(data.data[0]) == data.data[0]) {
    if (data.data[1] && data.data[1] instanceof Object) {
      if (data.data[1].type == 'trailer') {
        state.set('favorite_id', data.data[1].videoId);
        state.set('is_trailer', true);
        state.set('is_favorite', false);
        api.load('userFavoritesByIds', {video_ids: data.data[1].videoId})
          .then(function (res) {
            state.set('is_favorite', Array.isArray(res.video_ids) && res.video_ids.indexOf(data.data[1].videoId) >= 0);
          })
          .catchError(function (error) {
            console.error('checkFavorite error', error);
          });
      }
      if (data.data[1].hasOwnProperty('startTime')) {
        // startTime = parseInt(data.data[1].startTime);
      }
    }
    var ch = channelsStore.get('channels').get(data.data[0]);
    if (ch) {
      channelActions.setCurrentChannel(ch);
      actions.startTv();
    } else {
      if (!state.get('is_trailer')) {
        state.set('favorite_id', data.data[0]);
      }
      actions.startVod(data.data[0]);
    }
  } else if (data.data && data.data[0] == 'smartview' && data.data[1] instanceof Object) {
    var stream = data.data[1].stream;
    if (data.data[1].is_live)
      stream.is_live = true;
    stream.advert_data = null;
    stream.advert_url = null;
    stream.next = null;
    stream.prev = null;
    page.setClass('movie');
    page.stream = stream;
    page.header.setTitle(stream.title);
    // videoId = stream.video_id;
    // controlsWrapper.setFavoriteVideoId(videoId, false);
    // controlsWrapper.setIsTv(false);
    // playStream(stream);

  } else {
    statInfoService.sendStreamError('EMPTY_ID', '', 0, 'Empty stream id on player page.', 'EMPTY_ID', vsServer);
    goBack();
  }

  controlsWrapper && controlsWrapper.focus();
});
page.addListener('hide', function () {
  controlsWrapper && controlsWrapper.stop();
  actions.exit();
  state.removeListener('change', handleStoreChange);
  Background.show();
  Loader.hide();
  page.header.show();
  actions.stop();
  Ad.hide();
  loaderAnimationEl.hide();
  loaderAnimationEl.stop();
});

function goBack() {
  if (!page.active) return;
  if (state.get('type') == 'timeshift' || state.get('type') == 'catchup') {
    var gaData = {
      'category': state.get('type'),
      'action': mainConfigMgg.app.lang + '/' + state.get('favorite_id'),
      'label': 'back_label_live'
    };
    statInfoService.sendGAPlayerTrackEvent(gaData['category'], gaData['action'], gaData['label']);
    return actions.startTv();
  }
  if (router.history.length > 1) {
    router.back({fromPlayer: true});
  } else {
    router.navigate('');
  }
  actions.exit();
}


function handleAdVastData(event) {
  if (state.get('type') == 'off') return;
  Ad.setVastData(event.data);
}

function handleAdVastEvent(event) {
  if (state.get('type') == 'off') return;
  if (Ad.isLinear) {
    subtitles.removeBottomOffset();
    Loader.hide();
    controlsWrapper.hide();
    controlsWrapper.clearTimer();
    if (ChannelsList.visible) {
      ChannelsList.hide();
    }
  } else {
    subtitles.addBottomOffset(Ad.height);
  }
  if (controlsWrapper.visible) {
    Ad.controlsShowed();
  } else {
    Ad.controlsHided();
  }
  Ad.show(event.data);
}

function handleAdComplete() {
  if (state.get('type') == 'off') return;
  if (!Ad.visible) return;
  var playerState = player.get('state');
  subtitles.removeBottomOffset();
  if (page.active) {
    if (playerState == -1 || playerState == 3) {
      //hack fix TODO - Denis need to fix
      // TODO need testing
      if (ChannelsList.visible) {
        ChannelsList.hide();
      }
      Loader.show();
      Loader.loading.focus();
    } else if (Ad.isLinear) {
      if (ChannelsList.visible) {
        ChannelsList.hide();
      }
    }
  }
  Ad.hide();
  if (page.active && Ad.isLinear) {
    LeftMenu.toggle(state.get('type') == 'tv');
    controlsWrapper.show();
    controlsWrapper.hideTimeout();
  }
}

function handleAdClick() {
  if (state.get('type') == 'off') return;
  router.history.splice(router.history.length - 1, 1);
}

var debounceCheckChannelEpg = _.debounce(actions.checkChannelEpg, 100);

module.exports = page;

},{"./actions":78,"./controls/no-program":83,"./controls/pause":84,"./controls_wrapper":87,"./playerInit":90,"./state":92,"./subtitles":93,"core/api":15,"core/app":16,"core/components/page":25,"core/dom":31,"core/lib/helpFunctions":34,"core/router":45,"core/tools/statInfoService":53,"lodash":1,"state/channel_actions":109,"state/channels_store":110,"state/epg_actions":111,"state/epg_store":112,"ui/loader-animation-el":121,"vendor/aura/keys":133,"widgets/ad":138,"widgets/background":141,"widgets/epg":145,"widgets/loader":149,"widgets/menu-left":150,"widgets/popup/popup-error":153,"widgets/popup/popup-list":155}],89:[function(require,module,exports){
module.exports = {
  addTimestampInURL: function addTimestampInURL(timestamp, url) {
    var idxSlash, idxReg;
    var reg = /\/vs\/\d+/;
    idxReg = url.search(reg);
    if (idxReg == -1) {
      idxSlash = url.lastIndexOf("/type.live");
      url = url.substring(0, idxSlash) + "/vs/" + timestamp.toString() + url.substring(idxSlash);
    } else {
      url = url.replace(reg, "/vs/" + timestamp.toString());
    }
    return url;
  },

  addOffsetInURL: function addTimestampInURL(offset, url) {
    var idxSlash, idxReg;
    var reg = /\/vs\/\d+/;
    idxReg = url.search(reg);
    if (idxReg == -1) {
      idxSlash = url.lastIndexOf("/type.live");
      url = url.substring(0, idxSlash) + "/ts/" + offset.toString() + url.substring(idxSlash);
    } else {
      url = url.replace(reg, "/ts/" + offset.toString());
    }
    // url = url.replace('://meta.', "://vs40.");
    return url;
  }
};

},{}],90:[function(require,module,exports){
'use strict';

var MegogoPlayer = require('mggp-player');

var dom = require('core/dom');
var vendor = require('vendor/aura/mggp-vendor');
var statInfoService = require('core/tools/statInfoService');
var playerModules = [
  require('mggp-vendor-img'),
  require('mggp-plugin-audio'),
  require('mggp-plugin-subtitles'),
  require('mggp-plugin-quality'),
  require('mggp-plugin-ga-tv'),
  require('mggp-plugin-thumbnails'),
  require('mggp-plugin-ad'),
  require('mggp-vendor-mraid-tv'),
  require('mggp-plugin-wss')
];

// @if VENDOR='lg'
//var vendorLg = require('mggp-vendor-lg');
//var vendorWebos = require('mggp-vendor-webos');
//playerModules.push(mainConfigMgg.deviceInfo.isWebos ? vendorWebos : vendorLg);
// @endif

// @if VENDOR='webos'
// playerModules.push(require('mggp-vendor-webos'));
// @endif

// @if VENDOR='web'
//playerModules.push(require('mggp-vendor-html5'));
// @endif

// @if VENDOR='webHls'
//window.Hls = require('hls.js');
//playerModules.push(require('mggp-vendor-hls'));
// @endif

// @if VENDOR='samsung'
// playerModules.push(require('mggp-vendor-samsung'));
// @endif

var _player;
module.exports = function ($body) {
  if (_player) return _player;
  var mggVednors = vendor();

  if (Array.isArray(mggVednors)) {
    for (var i = 0; i < mggVednors.length; i++) {
      playerModules.push(mggVednors[i]);
    }
  } else {
    playerModules.push(mggVednors);
  }

  var configPlayer = {
    debug: false,
    hlsDebug: false,
    m3u8NativSupported: true,
    autoRecoverError: true,
    adContainer: document.getElementById('advertContent'),
    deviceID: mainConfigMgg.deviceInfo.deviceID,
    deviceOS: mainConfigMgg.deviceInfo.vendor,
    deviceType: 'tv',
    deviceModel: mainConfigMgg.deviceInfo.name,
    version: mainConfigMgg.app.version,
    i18nMgg: i18nMgg,
    maxVendorInstances: 1,
    lang: mainConfigMgg.app.lang,
    sendGAPlayerTrackEvent: statInfoService.sendGAPlayerTrackEvent,
    timeInterval: 1000
  };

  var player = new MegogoPlayer();


  player._addEventListener = player.addEventListener;
  player.addEventListener = function (name, cb) {
    player._addEventListener(name, function (e, e2) {
      try {
        cb(e, e2);
      } catch (e) {
        console.error(e);
      }
    })
  };

  window.player = player;
  var playerContainer = dom.tag('div', {
    className: 'vendor-player'
  });
  $body.appendChild(playerContainer);
  player.init('player', playerContainer, configPlayer, playerModules);
  window.log('player INIT OK');
  _player = player;
  return player;
};

},{"core/dom":31,"core/tools/statInfoService":53,"mggp-player":2,"mggp-plugin-ad":3,"mggp-plugin-audio":4,"mggp-plugin-ga-tv":5,"mggp-plugin-quality":6,"mggp-plugin-subtitles":7,"mggp-plugin-thumbnails":8,"mggp-plugin-wss":9,"mggp-vendor-img":10,"mggp-vendor-mraid-tv":11,"vendor/aura/mggp-vendor":134}],91:[function(require,module,exports){
var channelsStore = require('state/channels_store');
var helpFunctions = require('core/lib/helpFunctions');

function subscribeStateToPlayer(state, player) {
  var actions = require('./actions');
  var progressState = state.get('progress');
  player.on('property:duration', function (event) {
    //if (['tv', 'timeshift'].indexOf(state.get('type')) == -1)
    //  progressState.set('duration', parseInt(event.data));

    actions.setPlayerDuration(parseInt(event.data));
    // state.set('loading', false);
  });

  player.on('property:position', function (event) {
    //if (['tv', 'timeshift'].indexOf(state.get('type')) == -1)
    //progressState.set('position', );
    actions.setPlayerPosition(parseInt(event.data));
    // state.set('loading', false);
  });

  player.on('property:thumbnails', function (event) {
    progressState.set('thumbnails', event.data == 0 ? 1 : event.data);
  });

  player.on('property:state', function (event) {
    console.log('changeState: '+event.data);
    switch (event.data) {
      case 1: // PLAYING
        if (!state.get('last_start')) {
          state.set('last_start', helpFunctions.getTimestampNow())
        }
        state.set('paused', false);
        state.set('start_play_object', true);
        state.set('buffering', false);
        state.set('loading', false);
        break;
      case 2: // PAUSE
        state.set('paused', true);
        break;
      case 3: // BUFFER
        state.set('buffering', true);
        break;
    }
  });

  player.on('player:completed', function () {
    actions.videoCompleted();
  });
  //
  // player.addEventListener('property:position', function (event) {
  //   var duration = getDuration();
  //   var position = getPosition();
  //   $time.innerHTML = seconds.format(position);
  //   $duration.innerHTML = seconds.format(duration - position);
  //   progressBar.set(position);
  // }, false);


}
module.exports = subscribeStateToPlayer;

},{"./actions":78,"core/lib/helpFunctions":34,"state/channels_store":110}],92:[function(require,module,exports){
var Model = require('core/model');
var playerStateConnector = require('./playerStateConnector');
var channelsStore = require('state/channels_store');
var helpFunctions = require('core/lib/helpFunctions');

var player;
var playerState = new Model({
  type: 'off', // Тип плеера, tv, dvr, vod
  buffering: false,
  paused: false,
  loading: false, // Показывать ли лоадер
  start: false, // запускался ли уже плеер
  start_play_object: false,
  last_pause_timestamp: 0,
  stream: null,
  stream_loading: false,
  stream_loading_error: null,
  epg: null,
  last_start: 0,
  ts: 0,
  is_trailer: false,
  favorite_id: null,
  is_favorite: false,
  header: {
    title: null,
    subTitle: null,
    className: null
  },
  name: null,
  object: {
    video_id: null,
    virtual_id: null
  },
  progress: new Model({
    position: 0,
    duration: 0,
    buffer: 0,
    seekPosition: -1,
    thumbnails: {
      src: '',
      width: 0,
      height: 0,
      offset: 0
    }
  })
});

playerState.get('progress').addListener('change', function (e) {
  //console.log(e);
//  playerState.emit('change', {name: 'progress', curr: playerState.get('progress')});
});

playerState.addListener('change', function (e) {
  switch (e.name) {
    case 'object':
      if (playerState.get('start'))
        player.stop();
      playerState.set('ts', 0);
      playerState.set('paused', null);
      playerState.set('buffering', null);
      playerState.set('stream', null);
      playerState.set('stream_loading', false);
      playerState.set('start_play_object', false);
      playerState.set('stream_loading_error', null);
      playerState.set('last_pause_timestamp', 0);
      playerState.get('progress').set('position', 0);
      playerState.get('progress').set('duration', 0);
      playerState.get('progress').set('buffer', 0);
      playerState.get('progress').set('thumbnails', {src: '', width: 0, height: 0, offset: 0});
      playerState.get('progress').set('seekPosition', -1);
      break;
    case 'paused':
      break;
  }
});

playerState.setPlayerInstance = function (playerInstance) {
  player = playerInstance;
  playerStateConnector(playerState, player);
};

channelsStore.addListener('change', function (e) {
  switch (e.name) {
    case 'current_channel':
      //if (playerState.get('type') == 'tv' && e.curr.get('title')) {
      //  playerState.set('title', e.curr.get('title'));
      //}
      break;


  }
});


module.exports = playerState;

},{"./playerStateConnector":91,"core/lib/helpFunctions":34,"core/model":40,"state/channels_store":110}],93:[function(require,module,exports){
'use strict';

var Panel = require('core/components/panel');
var request = require('core/request');

var player = null;
var subtitles = module.exports = new Panel({
  className: 'subtitles',
  focusable: false
});

subtitles.init = function (pPlayer) {
  player = pPlayer;
  subtitles.toggle(true);
};

subtitles.toggle = function (pOn) {
  if (!player) return;
  if (pOn) {
    player.on('property:subtitlesTextChange', function (event) {
      subtitles.$node.innerHTML = event.data;
    })
  } else {
    player.off('property:subtitlesTextChange');
  }
};

subtitles.addBottomOffset = function (offset) {
  subtitles.$node.style.paddingBottom = (40 + parseInt(offset)) + 'px';
};

subtitles.removeBottomOffset = function () {
  subtitles.$node.style.paddingBottom = 0;
};

},{"core/components/panel":26,"core/request":44}],94:[function(require,module,exports){
'use strict';

var page_id = 'pageProfileAgreement',
  Page = require('core/components/page'),
  router = require('core/router'),
  keys = require('vendor/aura/keys'),
  dom = require('core/dom'),
  animate = require('core/animate'),
  ScrollBar = require('core/components/scroll.bar'),
  Loader = require('widgets/loader'),
  scrollValue;

var page = new Page({
  $node: dom.tag('div', {id: page_id}),
  $body: dom.tag('div', {id: page_id+ 'Container'}),
  header: '',
  arrows: {},
  arrowsUpdate: showHideArrows,
  back_button: {
    'clickCallBack': function() {
      router.back();
    }
  }
});

page.addListener('load', function load() {

  page.$scrollContainer = dom.tag('div', {id: 'scrollContainer'},
    page.$agreementContainer = dom.tag('div', {id: 'agreementContainer', className: 'term-of-use'})
  );

  page.$body.appendChild(page.$scrollContainer);

  page.scrollBar = new ScrollBar({
    focusable: true,
    keys: {
      UP: function() {
        scrollValue = this.value - 150 >= 0 ? this.value - 150 : 0;
        if(!scrollValue) {
          page.header.shadeOff();
        }
        this.scrollTo(scrollValue);
      },
      DOWN: function() {

        if(this.realSize - this.viewSize > this.value + 150) {
          scrollValue = this.value + 150;
        } else {
          scrollValue = this.realSize - this.viewSize;
        }
        this.scrollTo(scrollValue);
        page.header.shadeOn();
      },
      LEFT: function() {
        page.backButton.focusButton(this);
      },
      RETURN: function () {
        page.backButton.emit('click');
      }
    },
    events: {
      change: function(data) {
        animate(page.$agreementContainer, mainConfigMgg.animation.duration.speed2, {
          marginTop: '-' + data.curr,
        });
      },
      done: function(data) {
      },
      mousewheel: function(event) {
        this.emit('keydown', {
          'keyCode': event.deltaY < 0 ? keys.UP : keys.DOWN
        });
      }
    }
  });

  page.$scrollContainer.appendChild(page.scrollBar.$node);

  /**
   * Listeners
   */
  page.addListener('show', function() {
    page.header.setTitle( i18nMgg('agreement'));
    if(!page.isLoaded || mainConfigMgg.app.lang != page.langLoaded){
      page.isLoaded = false;
      Loader.show();
      page.langLoaded = mainConfigMgg.app.lang;
      // page.$agreementContainer.innerHTML='';

      var xhr = new XMLHttpRequest();
      xhr.open('GET', 'http://megogo.net/'+mainConfigMgg.app.lang+'/rules', true);
      xhr.send();
      xhr.onreadystatechange = function() {
        if (xhr.readyState != 4) return;
        if (xhr.status != 200) {
          console.error( xhr.status + ': ' + xhr.statusText );
        } else {
          page.isLoaded = true;
          var rules = /<div class="terms-of-use">([\s\S]*?)<\/div>/gm.exec(xhr.responseText);
          if(rules && rules[1]){
            rules[1] = rules[1].split('<div class="terms-of-use-info">')[0]
            page.$agreementContainer.innerHTML = rules[1];
          }
          page.scrollBar.init({viewSize: page.$scrollContainer.offsetHeight, realSize: page.$agreementContainer.offsetHeight});
        }
        Loader.hide();
      }
    }
    setTimeout(function(){
      page.scrollBar.init({viewSize: page.$scrollContainer.offsetHeight, realSize: page.$agreementContainer.offsetHeight});
    }, 0);
    page.scrollBar.focus();
  });

  page.addListener('hide', function() {

  });

  page.addListener('mousewheel', function(event) {
    if (event.deltaY < 0) {
      page.scrollBar.emit('keydown',{keyCode:keys.UP});
    }
    if (event.deltaY > 0) {
      page.scrollBar.emit('keydown',{keyCode:keys.DOWN});
    }
  });
});

function showHideArrows() {
  setTimeout(function(){
    if(page.scrollBar.realSize - page.scrollBar.viewSize > page.scrollBar.value + 150) {
      page.arrowsWidget.down.show();
    } else {
      page.arrowsWidget.down.hide();
    }

    if(page.scrollBar.value) {
      page.arrowsWidget.up.show();
    } else {
      page.arrowsWidget.up.hide();
    }
  }, 0);
}
// public
module.exports = page;

},{"core/animate":14,"core/components/page":25,"core/components/scroll.bar":28,"core/dom":31,"core/router":45,"vendor/aura/keys":133,"widgets/loader":149}],95:[function(require,module,exports){
'use strict';

var id = 'pageCertificate',
  Page = require('core/components/page'),
  router = require('core/router'),
  keys = require('vendor/aura/keys'),
  dom = require('core/dom'),
  app = require('core/app'),
  api = require('core/api'),
  Loader = require('widgets/loader'),
  helpFunctions = require('core/lib/helpFunctions'),
  Keyboard = require('widgets/keyboard'),
  PopUpResults = require('widgets/popup/popup-results'),
  subscriptionService = require('core/tools/subscriptionService'),
  paymentModel = require('core/paymentModel'),
  SupportInfo = require('widgets/support-info'),
  statInfoService = require('core/tools/statInfoService'),
  paymentService = require('core/tools/paymentService'),
  channelActions = require('state/channel_actions'),
  Panel = require('core/components/panel')
  ;

var page = new Page({
  $node: dom.tag('div', {id: id}),
  $body: dom.tag('div', {id: id+ 'Container'}),
  append_to_body: true,
  header: '',
  back_button: {
    'clickCallBack': function() {
      router.back();
    }
  }
});

page.certificateText = new Panel({
  $node: dom.tag('div', {className: 'certificate__text'})
});

page.add(page.certificateText);

page.addListener('load', function () {

  page.addListener('show', function (data) {

    SupportInfo.show({type: 'profile'});
    page.isRedeemPage = false;
    page.redeemCode = '';
    page.isSuccessfulPayment = false;
    page.certificateText.$node.textContent = (i18nMgg('promocode_description'));

    if(paymentModel.get('vodRulesType') == 'paid'){
      page.certificateText.$node.textContent = i18nMgg('promocode_movie_description');

    }

    if (data && data.data && data.data.length) {
      if (data.data[0] == 'redeem') {
        page.isRedeemPage = true;

        if (data.data[1]) {
          page.redeemCode = data.data[1];
        }
      }
    }

    if (page.isRedeemPage) {
      page.header.setTitle(i18nMgg('promocode_title'));
    } else {
      page.header.setTitle(paymentModel.get('title'));
      page.header.setSubTitle(i18nMgg('promocode_text'));
    }

    Keyboard.show();


    if (helpFunctions.isNavigateBack(data)) {
      return;
    }

    Keyboard.KeyboardView.initialize({
      viewType: 'certificate',
      lang: 'eng',
      code: page.redeemCode
    });
    Keyboard.KeyboardView.setFirstFocus();
    Keyboard.focus();

    //need to find bug with first focus
    setTimeout(function () {
      Keyboard.KeyboardView.setFirstFocus();
    }, 0);

    PopUpResults.addListener('hide', hidePopUpResultsCallback);
    Keyboard.KeyboardView.addListener('submit:certificate', submitCertificateCallback);
    Keyboard.KeyboardView.addListener('overflow:top', overflowCertificateCallback);

    if(data.data && data.data[2] && data.data[2]=='activate'){
      Keyboard.KeyboardView.emit('submit:certificate', {
        data: page.redeemCode
      });
    }
  });

  page.addListener('hide', function (data) {
    Keyboard.hide();
    SupportInfo.hide();
    PopUpResults.removeListener('hide', hidePopUpResultsCallback);
    Keyboard.KeyboardView.removeListener('submit:certificate', submitCertificateCallback)
  });

  function overflowCertificateCallback() {
    page.backButton.focusButton(Keyboard);
  }

  function submitCertificateCallback(data) {

    var certificate = data.data.trim();

    if (certificate.length) {
      Loader.show();
      if (page.isRedeemPage) { // from page CODE

        paymentModel.set('title', i18nMgg('promocode_title'));
        paymentModel.set('vodRules', 'svod');

        api.load('paymentRedeem', {
          code: certificate
        }).then(function (dataPayment) {
          if (dataPayment.status == 'error') {
            PopUpResults.show({
              title: paymentModel.get('title'),
              type: 'error',
              text: dataPayment.message,
              buttonText: i18nMgg('payment_button_error'),
              buttonLink: ''
            });
          } else {

            var message;

            if (dataPayment.subscription) {
              message = dataPayment.message + ' ' + i18nMgg('until') + ' ' + subscriptionService.getExpirationDate(dataPayment.subscription);
              paymentModel.set('serviceID', dataPayment.subscription.subscription_id);

              statInfoService.sendGAEcommerce(
                dataPayment.order_id,
                'gift: ',
                "Subscribtion: " + paymentModel.get('serviceID'),
                paymentModel.get('serviceID'),
                '0',
                paymentModel.defaultEvents.getGACurrencyFormat()
              );
              paymentService.removePaymentRoutes();

              api.load('subscriptionInfo', {}, {setToStorageKey: 'subscriptionInfo'}).then(function () {
                channelActions.fetch();


                if (subscriptionService.getSubscriptionById(dataPayment.subscription.subscription_id)) {
                  router.navigate('pageSubscriptionDetailed', [paymentModel.get('serviceID'), 'bought']);
                } else {
                  router.navigate('pageSubscriptionsProfile')
                }
                PopUpResults.show({
                  title: paymentModel.get('title'),
                  type: 'success',
                  text: message, //getResultText(paymentModel.get('vodRules'), subscription),
                  buttonText: i18nMgg('continue_button'),
                  buttonLink: ''
                });
                Loader.hide();
              });

            } else {
              message = i18nMgg('cer_err_title');
              PopUpResults.show({
                title: paymentModel.get('title'),
                type: 'success',
                text: message, //getResultText(paymentModel.get('vodRules'), subscription),
                buttonText: i18nMgg('continue_button'),
                buttonLink: ''
              });
              Loader.hide();
            }


          }
          Loader.hide();
        });

      } else {
        if (paymentModel.get('vodRulesType') == 'paid') { // movie certificate
          api.load('paymentPromoCode', {
            code: certificate,
            video_id: paymentModel.get('objectID'),
            tariff_id: paymentModel.get('tariffID')
          }).then(function (data) {
            if (data.status == 'error') {
              PopUpResults.show({
                title: paymentModel.get('title'),
                subTitle: i18nMgg('promocode_text'),
                type: 'error',
                text: i18nMgg('certificate_error_' + data.status_code),
                buttonText: i18nMgg('payment_button_error'),
                buttonLink: ''
              });
            } else {
              statInfoService.sendGAEcommerce(
                data.order_id,
                'gift: ',
                paymentModel.get('vodRules').toUpperCase() + " Movie ID: " + paymentModel.get('objectID'),
                paymentModel.get('objectID'),
                '0',
                paymentModel.defaultEvents.getGACurrencyFormat()
              );
              paymentService.removePaymentRoutes();
              router.navigate('pageMovie', [paymentModel.get('objectID')]);
              PopUpResults.show({
                title: paymentModel.get('title'),
                subTitle: i18nMgg('promocode_text'),
                type: 'success',
                text: getResultText(paymentModel.get('vodRules')),
                buttonText: i18nMgg('continue_button'),
                buttonLink: ''
              });
            }
            Loader.hide();
          })
        } else {  // subscription certificate

          api.load('paymentPromoCode', {
            code: certificate,
            subscription_id: paymentModel.get('serviceID')
          }).then(function (dataPayment) {

            api.load('subscriptionInfo', {}, {setToStorageKey: 'subscriptionInfo'}).then(function (dataSubs) {
              channelActions.fetch();

              if (dataPayment.status == 'error') {
                PopUpResults.show({
                  title: paymentModel.get('title'),
                  subTitle: i18nMgg('promocode_text'),
                  type: 'error',
                  text: i18nMgg('certificate_error_' + dataPayment.status_code),
                  buttonText: i18nMgg('payment_button_error'),
                  buttonLink: ''
                });
              } else {

                statInfoService.sendGAEcommerce(
                  dataPayment.order_id,
                  'gift: ',
                  "Subscribtion: " + paymentModel.get('serviceID'),
                  paymentModel.get('serviceID'),
                  '0',
                  paymentModel.defaultEvents.getGACurrencyFormat()
                );

                paymentService.removePaymentRoutes();

                var subscription = subscriptionService.getSubscriptionById(paymentModel.get('serviceID'), dataSubs);

                var subscription_id = paymentModel.get('serviceID');
                if (router.history[router.history.length - 1].page.id == 'pageSubscription') {
                  var subscriptionPage = paymentService.getSubscriptionPage();
                  subscriptionPage.updateData(subscription_id);
                }

                router.navigate('pageSubscriptionDetailed', [subscription_id, 'bought']);

                PopUpResults.show({
                  title: paymentModel.get('title'),
                  subTitle: i18nMgg('promocode_text'),
                  type: 'success',
                  text: getResultText(paymentModel.get('vodRules'), subscription),
                  buttonText: i18nMgg('continue_button'),
                  buttonLink: ''
                });
                Loader.hide();
              }
              Loader.hide();
            });
          })
        }
      }
    }

  }

  function hidePopUpResultsCallback(data) {
    if (page.isSuccessfulPayment) {
    } else {
      Keyboard.focus();
    }
  }

  function getResultText(vodRules, subscription) {
    var resultText = '';
    if (vodRules == 'tvod') {
      var period = paymentModel.get('period')
      resultText = i18nMgg('certificate_ok_movie_1') + ' ' + period + ' ' +
        helpFunctions.getValueText(period, 'day') + ' ' + i18nMgg('certificate_ok_movie_2');
    }
    if (vodRules == 'dto') {
      resultText = i18nMgg('certificate_dto_big_text');
    }
    if (vodRules == 'svod') {
      var subsTitle = subscription.title;
      var subsExpiration = subscriptionService.getExpirationDate(subscription);
      resultText = i18nMgg('cer_get_access_subs') + ' ' + subsTitle + ' <br>' + i18nMgg('until') + ' ' + subsExpiration + '. ' + i18nMgg('congratulations') + '!'
    }


    return resultText;
  }
});

// public
module.exports = page;

},{"core/api":15,"core/app":16,"core/components/page":25,"core/components/panel":26,"core/dom":31,"core/lib/helpFunctions":34,"core/paymentModel":41,"core/router":45,"core/tools/paymentService":51,"core/tools/statInfoService":53,"core/tools/subscriptionService":54,"state/channel_actions":109,"vendor/aura/keys":133,"widgets/keyboard":147,"widgets/loader":149,"widgets/popup/popup-results":159,"widgets/support-info":163}],96:[function(require,module,exports){
'use strict';

var id = 'pageLogin',
  app = require('core/app'),
  animate = require('core/animate'),
  Page = require('core/components/page'),
  router = require('core/router'),
  keys = require('vendor/aura/keys'),
  initPage = require('pages/other/init'),
  mainPage = require('pages/other/main'),
  dom = require('core/dom'),
  Panel = require('core/components/panel'),
  Button = require('core/components/button'),
  Loader = require('widgets/loader'),
  helpFunctions = require('core/lib/helpFunctions'),
  SupportInfo = require('widgets/support-info'),
  api = require('core/api'),
  counter5secs = 6,
  counter10secs = 90,
  template_filled = 0,
  login_desc, login_steps, login_text, code_enter, code_show, code_desc
  ;


var page = new Page({
  $node: dom.tag('div', {id: id}),
  $body: dom.tag('div', {id: id + 'Container'},

    dom.tag('div', {
        className: 'login-page'
      },
      login_desc = dom.tag('div', {className: 'login-page__desc'}),
      dom.tag('div', {className: 'login-page__content'},
        dom.tag('div', {className: 'login-page__el'},
          login_steps = dom.tag('div', {className: 'login-step'})
        ),
        dom.tag('div', {className: 'login-page__el'},
          dom.tag('div', {className: 'login-code'},
            code_show = dom.tag('div', {className: 'login-code__num'}),
            code_desc = dom.tag('div', {className: 'login-code__desc'})
          )
        )
      )
    )
  ),
  append_to_body: true,
  header: '',
  back_button: {
    'clickCallBack': function () {
      router.back();
    }
  }
});

var steps_arr = [
  {id: 'login_code_auth', link: true},
  {id: 'login_code_enter_code', code: true},
  {id: 'login_code_wait'}
];

page.addListener('load', function () {

  page.checkLoginData = new Button({
    $node: dom.tag('div', {id: 'checkLoginData', className: 'login-button'}),
    visible: false,
    events: {
      'click': function (data) {
        Loader.show();
        sendAuthorizationRequest(true);
      }
    },
    keys: {
      UP: function () {
        page.backButton.focusButton(this);
      },
      LEFT: function () {
        page.backButton.focusButton(this);
      },
      RETURN: function () {
        page.backButton.emit('click');
      }
    }
  });

  page.add(page.checkLoginData);

  page.addListener('show', function (data) {

    Loader.show();

    page.backButton.focusButton();
    SupportInfo.show({type: 'profile'});

    if(!template_filled) {
      fillTemplate();
    }
    Loader.hide();

    getAuthCode();
  });

  page.addListener('hide', function (data) {
    clearInterval(page.signinCounter);
    page.checkLoginData.hide();
    SupportInfo.hide();
    counter5secs = 6;
    counter10secs = 10;
  });

  page.updateUserData = function () {
    api.loadUserPersonalData().then(function (data) {
      router.history = [];
      router.history.push({page: mainPage});
      initPage.initMenu();
      router.navigate('pageProfile');
    });
  }
});

function getAuthCode() {
  api.authCode({device_name: mainConfigMgg.deviceInfo.name}).then(function (data) {
    code_enter.innerHTML = ' ' + data.code;
    code_show.innerHTML = data.code;

    page.signinCounter =
      setInterval(function () {
        sendAuthorizationRequest();
        counter5secs--;
        if (!counter5secs) {
          clearInterval(page.signinCounter);
          page.signinCounter = setInterval(function () {
            sendAuthorizationRequest();
            counter10secs--;
            if (!counter10secs) {
              clearInterval(page.signinCounter);
              page.checkLoginData.show();
              page.checkLoginData.focus();
            }
          }, 10000);
        }
      }, 5000);

  }).catchError(function (e) {
    console.log(e)
  });
}

function sendAuthorizationRequest(check_login_click) {
  api.load('user', {}).then(function (data) {
    if (!data.is_autouser) {
      clearInterval(page.signinCounter);
      page.updateUserData();
    } else if(check_login_click) {
      page.backButton.emit('click');
      Loader.hide();
    }
  });
}

function fillTemplate() {
  template_filled = 1;
  login_desc.innerHTML = i18nMgg('login_code_connect');
  page.header.setTitle(i18nMgg('authorization'));
  page.checkLoginData.setValue(i18nMgg('login_check_button'));
  code_desc.innerHTML = i18nMgg('code');

  for (var i = 0; i < steps_arr.length; i++) {
    var step_count = dom.tag('div', {className: 'login-step__item'},
      dom.tag('div', {className: 'login-step__num'}, i + 1),
      login_text = dom.tag('div', {className: 'login-step__desc'})
    );

    login_text.innerHTML = i18nMgg(steps_arr[i].id);

    if (steps_arr[i].code) {
      login_text.appendChild(
        code_enter = dom.tag('span', {className: 'login-step__color'})
      );
    } else if (steps_arr[i].link) {
      login_text.appendChild(
        dom.tag('span', {className: 'login-step__color'}, ' megogo.net/profile')
      );
    }

    login_steps.appendChild(step_count);
  }
}
// public
module.exports = page;

},{"core/animate":14,"core/api":15,"core/app":16,"core/components/button":19,"core/components/page":25,"core/components/panel":26,"core/dom":31,"core/lib/helpFunctions":34,"core/router":45,"pages/other/init":69,"pages/other/main":71,"vendor/aura/keys":133,"widgets/loader":149,"widgets/support-info":163}],97:[function(require,module,exports){
'use strict';

var id = 'pageProfileLoyalty',
  app = require('core/app'),
  animate = require('core/animate'),
  Page = require('core/components/page'),
  router = require('core/router'),
  keys = require('vendor/aura/keys'),
  dom = require('core/dom'),
  Panel = require('core/components/panel'),
  Button = require('core/components/button'),
  Loader = require('widgets/loader'),
  helpFunctions = require('core/lib/helpFunctions'),
  api = require('core/api'),
  loyalty_txt, step_1, step_2, step_3, bonus_txt, bonus_total;

var page = new Page({
  $node: dom.tag('div', {id: id}),
  $body: dom.tag('div', {id: id + 'Container'}),
  append_to_body: true,
  header: '',
  back_button: {
    'clickCallBack': function () {
      router.back();
    }
  }
});


page.addListener('load', function () {

  page.content = new Panel({
    $node: dom.add(dom.tag('div', {
        className: 'loyalty-page'
      },
      dom.tag('div', {className: 'loyalty-page__bonus'},
        dom.tag('div', {className: 'loyalty-bonus'},
          bonus_total = dom.tag('div', {className: 'loyalty-bonus__num'}),
          bonus_txt = dom.tag('div', {className: 'loyalty-bonus__desc'})
        )
      ),
      loyalty_txt = dom.tag('div', {className: 'loyalty-page__desc'})
    ))
  });

  page.steps = new Panel({
    $node: dom.add(dom.tag('div', {className: 'loyalty-steps'},
      dom.tag('div', {className: 'loyalty-steps__item'},
        dom.tag('div', {className: 'loyalty-steps__icon megogo'}),
        step_1 = dom.tag('div', {className: 'loyalty-steps__desc'})
      ),
      dom.tag('div', {className: 'loyalty-steps__item'},
        dom.tag('div', {className: 'loyalty-steps__icon bonus'}),
        step_2 = dom.tag('div', {className: 'loyalty-steps__desc'})
      ),
      dom.tag('div', {className: 'loyalty-steps__item'},
        dom.tag('div', {className: 'loyalty-steps__icon prize'}),
        step_3 = dom.tag('div', {className: 'loyalty-steps__desc'})
      )
    ))
  });

  page.loginButton = new Button({
    $node: dom.tag('div', {id: 'loginButton', className: 'loyalty-page__button'}),
    visible: true,
    events: {
      'click': function (data) {
        Loader.show();
        router.navigate('pageLogin');
      }
    },
    keys: {
      UP: function () {
        page.backButton.focusButton(this);
      },
      LEFT: function () {
        page.backButton.focusButton(this);
      },
      RETURN: function () {
        page.backButton.emit('click');
      }
    }
  });

  page.add(page.content);
  page.add(page.steps);

  page.addListener('show', function (data) {
// text vars
    var desc_text1 = i18nMgg('loyalty_description'),
      desc_text2 = i18nMgg('loyalty_site_description'),
      desc_link = i18nMgg('loyalty_site_link'),
      desc_auth = i18nMgg('loyalty_login_text'),
      step_text1 = i18nMgg('loyalty_steps_1'),
      step_text2 = i18nMgg('loyalty_steps_2'),
      step_text3 = i18nMgg('loyalty_steps_3')
      ;

    step_1.innerHTML = step_text1;
    step_2.innerHTML = step_text2;
    step_3.innerHTML = step_text3;


    page.header.setTitle(i18nMgg('loyalty_page_title'));

    if (app.dataStorage.user.is_autouser) {
      loyalty_txt.innerHTML = '<p>' + desc_text2 + '</p> <span class="loyalty-page__link">' + desc_link + '</span><span class="loyalty-page__auth">' + desc_auth + '</span>';
      page.content.$node.getElementsByClassName('loyalty-page__desc')[0].appendChild(page.loginButton.$node);
      page.loginButton.setValue(i18nMgg('loyalty_login_button'));
      page.loginButton.show();
      page.loginButton.focus();
    } else {
      page.backButton.focusButton();
      page.loginButton.hide();
      loyalty_txt.innerHTML = '<p>' + desc_text1 + '</p> <p>' + desc_text2 + '</p> <span class="loyalty-page__link">' + desc_link + '</span>';
    }

    var points = 0;
    var loyaltyStorage = app.dataStorage.userLoyalty;
    if (loyaltyStorage && loyaltyStorage.balance && loyaltyStorage.balance > 0) {
      points = app.dataStorage.userLoyalty.balance;
      bonus_total.innerHTML = points;
      bonus_txt.innerHTML = helpFunctions.getValueText(points, 'point');
    } else {
      api.load('userLoyaltyBalance', {}, {setToStorageKey: 'userLoyalty'}).then(function (data) {
        if (data.balance && data.balance > 0) {
          points = data.balance
        }
        bonus_total.innerHTML = points;
        bonus_txt.innerHTML = helpFunctions.getValueText(points, 'point');
      })
    }


    Loader.hide();
  });

  page.addListener('hide', function (data) {

  });

});


// public
module.exports = page;

},{"core/animate":14,"core/api":15,"core/app":16,"core/components/button":19,"core/components/page":25,"core/components/panel":26,"core/dom":31,"core/lib/helpFunctions":34,"core/router":45,"vendor/aura/keys":133,"widgets/loader":149}],98:[function(require,module,exports){
'use strict';

var id = 'pageProfilePC',
  Page = require('core/components/page'),
  router = require('core/router'),
  keys = require('vendor/aura/keys'),
  dom = require('core/dom'),
  app = require('core/app'),
  api = require('core/api'),
  Button = require('core/components/button'),
  CheckBox = require('core/components/check.box'),
  Panel = require('core/components/panel'),
  List = require('core/components/list'),
  helpFunctions = require('core/lib/helpFunctions'),
  PopUpList = require('widgets/popup/popup-list'),
  PopUpResults = require('widgets/popup/popup-results'),
  PopUpPincode = require('widgets/popup/popup-pincode'),
  Loader = require('widgets/loader'),
  KeyboardNum = require('widgets/keyboard-num'),
  SupportInfo = require('widgets/support-info');


var page = new Page({
  $node: document.getElementById(id),
  $body: document.getElementById(id + 'Container'),
  header: '',
  back_button: {
    'clickCallBack': function() {
      router.back();
    }
  }
});


var inputData = [
  {value: '', 'className': 'clear'},
  {value: '', 'className': 'clear'},
  {value: '', 'className': 'clear'},
  {value: '', 'className': 'clear'}
];

page.addListener('load', function load() {
  page.pinCodeInput = new List({
    $node: 'pinCodeInput',
    type: List.prototype.TYPE_HORIZONTAL,
    cycle: false,
    visible: true,
    focusIndex: 0,
    keys: {
      UP: function () {
        page.$$lastFocus = this;
        page.backButton.focusButton(this);
      },
      DOWN: function () {
        page.purchaseRestrictionTip.focus();
      },
      ZERO: function () {
        handleNumberInput(this, 0)
      },
      ONE: function () {
        handleNumberInput(this, 1)
      },
      TWO: function () {
        handleNumberInput(this, 2)
      },
      THREE: function () {
        handleNumberInput(this, 3)
      },
      FOUR: function () {
        handleNumberInput(this, 4)
      },
      FIVE: function () {
        handleNumberInput(this, 5)
      },
      SIX: function () {
        handleNumberInput(this, 6)
      },
      SEVEN: function () {
        handleNumberInput(this, 7)
      },
      EIGHT: function () {
        handleNumberInput(this, 8)
      },
      NINE: function () {
        handleNumberInput(this, 9)
      },
      RETURN: function () {
        page.backButton.emit('click');
      }
    },
    events: {
      'focus': function (data) {
        this.$node.classList.remove('error');
        this.focusItem(this.$node.children[0]);
      },
      'click:item': function (data) {
        this.$node.classList.add('active');
        KeyboardNum.show();
        var coordinates = this.$node.getBoundingClientRect();
        var top = coordinates.top + this.$node.offsetHeight / 2;
        KeyboardNum.setPosition({left: coordinates.right, top: top});
      },
      mouseover: function (data) {
        if(!KeyboardNum.visible) {
          this.focus();
          this.focusItem(data.$item, {no_emit: true});
        }
      },
      mousewheel: function(event) {
        if(event.deltaY > 0) {
          this.emit('keydown', {
            'keyCode': keys.DOWN
          });
        }
      },
      overflow: function (data) {
        if (data.direction === keys.LEFT) {
          page.childAgeButton.focus();
        }
        if (data.direction === keys.RIGHT) {
          if (KeyboardNum.visible) {
            KeyboardNum.hide();
            this.$node.classList.remove('active');
          }
          page.purchaseRestrictionTip.focus();
        }
      }
    },
    render: function ($item, data) {
      if (data.className && data.className == 'clear') {
        $item.textContent = '';
        $item.classList.add(data.className);
      }
      if (data.value) {
        $item.textContent = data.value;
        $item.classList.remove('clear');
        $item.classList.add('hidden');
      }
    }
  });

  page.savePCButton = new Button({
    $node: "save_pc",
    visible: true,
    focusable: true,
    events: {
      'click': function (data) {
        var pinCode = '';
        for (var i = 0; i < page.pinCodeInput.data.length; i++) {
          pinCode += page.pinCodeInput.data[i].value;
        }
        if (pinCode.replace(/\s+/g, '').length < 4) {
          page.pinCodeInput.$node.classList.add('error');
        } else {
          var postData = {
            code: pinCode,
            age_limit_id: page.childAgeButton.altID,
            purchase_restriction: page.purchaseRestrictionTip.value.toString(),
            status: "true"
          };
          api.PC_Save(postData).then(function (data) {
            if (data.status) {
              api.PC_Check();
              PopUpResults.show({
                title: i18nMgg('parental_control'),
                type: 'success',
                text: i18nMgg('pc_switched_on'),
                buttonText: 'OK'
              });
            } else {
              PopUpResults.show({
                title: i18nMgg('parental_control'),
                type: 'error',
                text: 'Что-то пошло не так',
                buttonText: 'OK'
              });
            }
          })
        }
      },
      mousewheel: function(event) {
        this.emit('keydown', {
          'keyCode': event.deltaY < 0 ? keys.UP : keys.DOWN
        });
      },
      focus: function(){
        page.$$lastFocus = this;
      }
    },
    keys: {
      UP: function () {
        page.purchaseRestrictionTip.focus();
      },
      DOWN: function () {
        if (page.removePCButton.visible) {
          page.removePCButton.focus();
        }
      },
      LEFT: function () {
        page.backButton.focusButton(this);
      },
      RETURN: function () {
        page.backButton.emit('click');
      }
    }

  });

  page.removePCButton = new Button({
    $node: "remove_pc",
    visible: false,
    focusable: true,
    events: {
      'click': function (data) {
        api.PC_Remove().then(function (data) {
          if (data.status) {
            api.PC_Check();
            mainConfigMgg.parentalControlTimer = -1;
            PopUpResults.show({
              title: i18nMgg('parental_control'),
              type: 'error',
              text: i18nMgg('pc_switched_off'),
              buttonText: 'OK'
            });
          } else {
            PopUpResults.show({
              title: i18nMgg('parental_control'),
              type: 'error',
              text: 'Что-то пошло не так',
              buttonText: 'OK'
            });
          }
        })
      },
      mousewheel: function(event) {
        this.emit('keydown', {
          'keyCode': event.deltaY < 0 ? keys.UP : keys.DOWN
        });
      },
      focus: function(){
        page.$$lastFocus = this;
      }
    },
    keys: {
      UP: function () {
        page.savePCButton.focus();
      },
      LEFT: function () {
        page.backButton.focusButton(this);
      },
      RETURN: function () {
        page.backButton.emit('click');
      }
    }
  });

  page.childAgeButton = new Button({
    $node: "child_age",
    visible: true,
    focusable: true,
    events: {
      'click': function (data) {
        page.$$lastFocus = this;
        PopUpList.show({header_title: i18nMgg('pc_choose_age'), content: page.agesDictionary})
      },
      focus: function(){
        page.$$lastFocus = this;
      },
      mousewheel: function(event) {
        if(event.deltaY > 0) {
          this.emit('keydown', {
            'keyCode': keys.DOWN
          });
        }
      }
    },
    keys: {
      UP: function () {
        page.backButton.focusButton(this);
      },
      LEFT: function () {
        page.backButton.focusButton(this);
      },
      RIGHT: function () {
        page.pinCodeInput.focus();
      },
      DOWN: function () {
        page.purchaseRestrictionTip.focus();
      },
      RETURN: function () {
        page.backButton.emit('click');
      }
    }
  });

  page.purchaseRestrictionTip = new CheckBox({
    $node: "purchase_check_box",
    visible: true,
    focusable: true,
    events: {
      focus: function(){
        page.$$lastFocus = this;
      },
      mousewheel: function(event) {
        this.emit('keydown', {
          'keyCode': event.deltaY < 0 ? keys.UP : keys.DOWN
        });
      },
    },
    keys: {
      UP: function () {
        page.childAgeButton.focus();
      },
      DOWN: function () {
        page.savePCButton.focus();
      },
      LEFT: function () {
        page.backButton.focusButton(this);
      },
      RETURN: function () {
        page.backButton.emit('click');
      }
    }
  });

  page.add(page.savePCButton);
  page.add(page.removePCButton);
  page.add(page.purchaseRestrictionTip);
  page.add(page.childAgeButton);
  page.add(page.pinCodeInput);


  /**
   * Listeners
   */
  page.addListener('show', function () {

    SupportInfo.show({type:'profile'});
    page.header.setTitle(i18nMgg('parental_control'));

    page.savePCButton.setValue(i18nMgg('pc_save'));
    page.removePCButton.setValue(i18nMgg('pc_remove'));
    page.purchaseRestrictionTip.setText(i18nMgg('pc_ask_pin_purchase'));

    document.getElementById('pc_profile_description').innerHTML = i18nMgg('pc_profile_description');
    document.getElementById('child_age_text').innerHTML = i18nMgg('pc_child_age');
    document.getElementById('pinCodeInputText').innerHTML = i18nMgg('pc_pin_code');

    page.$$lastFocus = page.savePCButton;

    Loader.show();

    api.PC_Check().then(function (data) {
      page.pcInfo = app.dataStorage.pc_info;
      page.agesDictionary = app.dataStorage.configuration.age_limits;

      page.childAgeButton.setValue(helpFunctions.getAgeTitlesByID().title);
      page.childAgeButton.setNewID(helpFunctions.getAgeTitlesByID().id);

      if (page.pcInfo.status) {
        PopUpPincode.show({
          pinCode: page.pcInfo.code,
          type: 'profile',
          text: i18nMgg('pc_profile_enter'),
          buttonText: i18nMgg('ok_confirm')
        });
        Loader.hide();
      } else {
        clearPCInitData();
        page.removePCButton.hide();

        page.pinCodeInput.$node.innerHTML = '';
        page.pinCodeInput.$body.innerHTML = '';
        page.pinCodeInput.init({
          size: inputData.length,
          data: inputData
        });

        page.pinCodeInput.focus();

        KeyboardNum.keyboard.addListener('type:char', typeCharCallback);
        KeyboardNum.keyboard.addListener('type:remove', removeCharCallback);
        KeyboardNum.keyboard.addListener('close', closeKeyboardCallback);

        Loader.hide();

      }
    });

    PopUpPincode.addListener('hide', hidePinPopUpCallback);
    PopUpPincode.addListener('correctPin', correctPinPinPopUpCallback);
    PopUpResults.addListener('hide', hidePinPopUpCallback);
    PopUpList.addListener('hide', hidePopUpCallback);
    PopUpList.addListener('change', changePopUpCallback);

  });

  page.addListener('hide', function () {
    SupportInfo.hide();
    page.pinCodeInput.$node.innerHTML = '';
    page.pinCodeInput.$body.innerHTML = '';
    KeyboardNum.hide();
    KeyboardNum.keyboard.removeListener('type:char', typeCharCallback);
    KeyboardNum.keyboard.removeListener('close', closeKeyboardCallback);
    KeyboardNum.keyboard.removeListener('type:remove', removeCharCallback);
    PopUpPincode.removeListener('hide', hidePinPopUpCallback);
    PopUpPincode.removeListener('correctPin', correctPinPinPopUpCallback);
    PopUpResults.removeListener('hide', hidePinPopUpCallback);
    PopUpList.removeListener('hide', hidePopUpCallback);
    PopUpList.removeListener('change', changePopUpCallback);
  });

  var handleNumberInput = function (env, number) {
    var curr_focus_item = env.$focusItem;
    curr_focus_item.classList.remove('hidden');
    curr_focus_item.classList.remove('clear');
    setTimeout(function () {
      curr_focus_item.classList.add('hidden');
    }, 300);
    curr_focus_item.data.value = number;
    curr_focus_item.innerHTML = number;
    env.move(keys.RIGHT);
  };

  var setPCInitData = function (PC_Info) {
    var pinCode = PC_Info.code;
    var isPurchases = PC_Info.purchase_restriction;
    var ageTitleID = PC_Info.age_limit_id;

    for (var n in inputData) {
      inputData[n].value = pinCode.charAt(n);
      inputData[n].className = '';
    }

    page.purchaseRestrictionTip.set(isPurchases);
    page.childAgeButton.setValue(helpFunctions.getAgeTitlesByID(ageTitleID).title);
    page.childAgeButton.setNewID(helpFunctions.getAgeTitlesByID(ageTitleID).id);

  };

  var clearPCInitData = function () {
    for (var n in inputData) {
      inputData[n].value = '';
      inputData[n].className = 'clear';
    }
    page.purchaseRestrictionTip.set(false);
    page.childAgeButton.setValue(helpFunctions.getAgeTitlesByID().title);
    page.childAgeButton.setNewID(helpFunctions.getAgeTitlesByID().id);
  };

  function typeCharCallback(data) {
    handleNumberInput(page.pinCodeInput, data.text);
  }

  function removeCharCallback(data) {
    page.pinCodeInput.$focusItem.innerHTML = '';
    page.pinCodeInput.$focusItem.classList.add('clear');
    if (page.pinCodeInput.$focusItem.index) {
      page.pinCodeInput.move(keys.LEFT);
    }
  }

  function closeKeyboardCallback(data) {
    page.pinCodeInput.$node.classList.remove('active');
    KeyboardNum.hide();
    page.pinCodeInput.focus();
  }

  function hidePinPopUpCallback(data) {
    router.back();
  }

  function hidePopUpCallback() {
    page.$$lastFocus.focus();
  }
  function changePopUpCallback(data) {
    var ageID = data.data.id;
    page.childAgeButton.setValue(helpFunctions.getAgeTitlesByID(ageID).title);
    page.childAgeButton.setNewID(ageID);
    page.childAgeButton.focus();
  }
  function correctPinPinPopUpCallback() {

    setPCInitData(page.pcInfo);
    page.removePCButton.show();
    page.pinCodeInput.$node.innerHTML = '';
    page.pinCodeInput.init({
      size: inputData.length,
      data: inputData
    });

    page.pinCodeInput.focus();

    KeyboardNum.keyboard.addListener('type:char', typeCharCallback);
    KeyboardNum.keyboard.addListener('type:remove', removeCharCallback);
    KeyboardNum.keyboard.addListener('close', closeKeyboardCallback);
  }
});

// public
module.exports = page;

},{"core/api":15,"core/app":16,"core/components/button":19,"core/components/check.box":20,"core/components/list":23,"core/components/page":25,"core/components/panel":26,"core/dom":31,"core/lib/helpFunctions":34,"core/router":45,"vendor/aura/keys":133,"widgets/keyboard-num":146,"widgets/loader":149,"widgets/popup/popup-list":155,"widgets/popup/popup-pincode":158,"widgets/popup/popup-results":159,"widgets/support-info":163}],99:[function(require,module,exports){
'use strict';

var id = 'pageProfile',
  animate = require('core/animate'),
  api = require('core/api'),
  app = require('core/app'),
  dom = require('core/dom'),
  helpFunctions = require('core/lib/helpFunctions'),
  loginPage = require('pages/profile/login'),
  keys = require('vendor/aura/keys'),
  LeftMenu = require('widgets/menu-left'),
  List = require('core/components/list'),
  Page = require('core/components/page'),
  router = require('core/router'),
  Loader = require('widgets/loader'),
  SupportInfo = require('widgets/support-info'),
  SettingsBlock = require('ui/profile-item'),
  statInfoService = require('core/tools/statInfoService'),
  PopUpExit = require('widgets/popup/popup-exit');


var page = new Page({
  $node: dom.tag('div', {id: id}),
  $body: dom.tag('div', {id: id+ 'Container'}),
  append_to_body: true,
  arrows: {
    right: {
      config: {
        left: 1125,
        paddingLeft: 55
      }
    }
  },
  arrowsUpdate: showHideArrows,
  header: ''
});

page.addListener('load', function load() {
  page.content = new List({
    type: List.prototype.TYPE_HORIZONTAL,
    className: 'settings',
    scrollList: {
      startIndex: 2,
      stopIndex: 1,
      speed: mainConfigMgg.animation.duration.speed2,
      scrollSize: 5
    },
    keys: {
      RETURN: function() {
        page.content.clear() //@TODO refactor BACK-CLEAR
        router.back();
      }
    },
    events: {
      'click:item': function(data) {
        statInfoService.sendGATrackEvent(page.id, data.$item.data.action);
        this.emit(data.$item.data.action);
      },
      'overflow': function(data) {
        if (data.direction === keys.LEFT && data.type !== 'mousewheel') {
          LeftMenu.showMenu({
            'componentToFocus': page.content
          });
        }
      },
      mouseover: function(data) {
        this.focus();
        this.focusItem(data.$item, {
          no_emit: true
        });
        showHideArrows();
      },
      'focus:item': function(data) {}
    },
    render: function($listItem, itemData) {
      new SettingsBlock($listItem, itemData);
    }
  });

  /**
   * Listeners
   */
  page.addListener('show', function(data) {
    page.content.focus();
    SupportInfo.show({
      type: 'profile'
    });

    page.header.setTitle(i18nMgg('profile'));
    Loader.show();
    api.load('userLoyaltyBalance', {}, {setToStorageKey: 'userLoyalty'}).then(function(data){
      var profileData = getProfileData();

      if(data.balance && data.balance > 0){
        var bonusesItem = {
            title: i18nMgg('loyalty_item_title'),
            subTitle: data.balance + ' ' + helpFunctions.getValueText(data.balance, 'point'),
            title_info: '',
            img: 'loyalty',
            action: 'loyalty'
          };
        profileData.splice(2, 0, bonusesItem);
      }

      var user = app.dataStorage.user;
      var isAutoUser = user['is_autouser'];

      if (!isAutoUser) {
        profileData[0].title = user.nickname;
        profileData[0].subTitle = i18nMgg('profile_logout');
        profileData[0].img = 'user user-avatar';
        profileData[0].imageSrc = user.avatars.user_pic_big;
      }

      var focusIndex = 0;
      if (page.content.$focusItem) {
        focusIndex = page.content.$focusItem.index
      }

      page.content.clear();

      page.content.init({
        data: profileData,
        focusIndex: focusIndex
      });

      Loader.hide();

    });
  });


  page.add(page.content);

  page.addListener('hide', function() {
    SupportInfo.hide();
  });

  page.content.addListener('settings', function() {
    router.navigate('pageSettings');

  });

  page.content.addListener('subscription', function() {
    router.navigate('pageSubscriptionsProfile');
  });

  page.content.addListener('authorization', function() {
    if (app.dataStorage.user.is_autouser) {
      router.navigate('pageLogin');
    } else {
        PopUpExit.show({
          componentToFocus: page.content,
          type:'logout',
          user: app.dataStorage.user,
          callback: function(){
            api.userLogOut().then(function() {
              loginPage.updateUserData();

              /*// TODO-INNA, TODO-DENIS -  TEMP FIX FOR ADVERTISEMENT BUGS

              if(window && window.location && typeof window.location.reload == 'function') {
                window.location.hash='';
                window.location.reload();
              }*/
            });
          }
        });
    }
  });

  page.content.addListener('agreement', function() {
    router.navigate('pageProfileAgreement');
  });

  page.content.addListener('loyalty', function() {
    router.navigate('pageProfileLoyalty');
  });

  page.content.addListener('parental_control', function() {
    router.navigate('pageProfilePC');
  });

  page.content.addListener('report_info', function() {
    router.navigate('pageProfileReportInfo');
  });

  page.content.addListener('certificate', function() {
    router.navigate('pageCertificate', ['redeem']);
  });

  function getProfileData() {
    return [{
      title: i18nMgg('authorization'),
      subTitle: i18nMgg('secure_info'),
      title_info: '',
      img: 'authorization',
      action: 'authorization'
    }, {
      title: i18nMgg('all_packages_button'),
      subTitle: i18nMgg('subscriptions_info'),
      title_info: '',
      img: 'subscription',
      action: 'subscription'
    }, {
      title: i18nMgg('parental_control'),
      subTitle: helpFunctions.getPCStatusText(),
      title_info: '',
      img: 'parent-controll',
      action: 'parental_control'
    }, {
      title: i18nMgg('promocode_title'),
      subTitle: i18nMgg('promocode_description'),
      title_info: '',
      img: 'certificate',
      action: 'certificate'
    }, {
       title: i18nMgg('report_info'),
       subTitle: i18nMgg('report_info_subtitle'),
       title_info: '',
       img: 'warning',
       action: 'report_info'
    }, {
      title: i18nMgg('agreement'),
      subTitle: i18nMgg('service_rules'),
      title_info: '',
      img: 'agreement',
      action: 'agreement'
    }, {
      title: i18nMgg('settings'),
      subTitle: i18nMgg('additional_settings'),
      title_info: '',
      img: 'settings',
      action: 'settings'
    }];
  }
});

function showHideArrows() {
  setTimeout(function() {
    if (page.content.$focusItem) {
      var left_offset = page.content.$node.style.left ? parseInt(page.content.$node.style.left) : 0;
      var total_offset = -250 * (page.content.size - 4);

      if (left_offset) {
        page.arrowsWidget.left.show();
      } else {
        page.arrowsWidget.left.hide();
      }
      if (left_offset >= total_offset) {
        page.arrowsWidget.right.show();
      } else {
        page.arrowsWidget.right.hide();
      }
    }
  }, 0);
}

// public
module.exports = page;

},{"core/animate":14,"core/api":15,"core/app":16,"core/components/list":23,"core/components/page":25,"core/dom":31,"core/lib/helpFunctions":34,"core/router":45,"core/tools/statInfoService":53,"pages/profile/login":96,"ui/profile-item":124,"vendor/aura/keys":133,"widgets/loader":149,"widgets/menu-left":150,"widgets/popup/popup-exit":154,"widgets/support-info":163}],100:[function(require,module,exports){
'use strict';

var id = 'pageProfileReportInfo',
  dom = require('core/dom'),
  app = require('core/app'),
  api = require('core/api'),
  Panel = require('core/components/panel'),
  helpFunctions = require('core/lib/helpFunctions'),
  router = require('core/router'),
  Page = require('core/components/page');


var page = new Page({
  $node: document.getElementById(id),
  $body: document.getElementById(id + 'Container'),
  header: '',
  back_button: {
    'clickCallBack': function () {
      router.back();
    }
  }
});

page.userID = new Panel({
  $node: dom.add(dom.tag('div', {
    className: 'user-id'
  })),
  focusable: false
});

page.supportNumber = new Panel({$node: 'pageProfileReportInfoPhone'});
page.supportEmail = new Panel({$node: 'pageProfileReportInfoMail'});
page.infoGrid = new Panel({$node: 'pageProfileReportInfoGrid'});

page.add(page.userID);

page.addListener('load', function load() {
});

page.addListener('show', function () {
  page.ipAddress = true;
  page.header.setTitle(i18nMgg('profile_report_info'));
  page.backButton.focusButton();
  document.getElementById('pageProfileInfoTitle').innerHTML = i18nMgg('device_info_title');
  document.getElementById('pageProfileReportInfoSubtitle').innerHTML = i18nMgg('profile_report_info_subtitle');

  if (app.dataStorage.configuration.support_info.phones.length) {
    page.supportNumber.$node.textContent = app.dataStorage.configuration.support_info.phones[0];
  }

  page.supportEmail.$node.textContent = app.dataStorage.configuration.support_info.email;

  var rows = [];
  rows.push({title: i18nMgg('device_info_vendor'), value: mainConfigMgg.deviceInfo.vendor.toUpperCase()});
  rows.push({title: i18nMgg('device_info_name'), value: mainConfigMgg.deviceInfo.name});
  if (page.ipAddress) {
    api.load('userIP').then(function (data) {
      updateIPInfo(data.ip);
    });
  }

  if (mainConfigMgg.deviceInfo.vendor != 'samsung' &&
    mainConfigMgg.deviceInfo.vendor != 'tizen' &&
    mainConfigMgg.deviceInfo.vendor != 'lg') {
    rows.push({type: 'separator'});

    if (page.ipAddress) {
      rows.push({
        title: i18nMgg('ip_text'),
        altClassName: 'ip_address',
        value: ''
      });
    }

  }


  if (mainConfigMgg.deviceInfo.vendor == 'samsung') {

    rows.push({
      title: i18nMgg('device_info_firmware_version'),
      value: mainConfigMgg.deviceInfo.firmware
    });
    rows.push({type: 'separator'});

    if (page.ipAddress) {
      rows.push({
        title: i18nMgg('ip_text'),
        altClassName: 'ip_address',
        value: ''
      });
    }

    rows.push({
      title: i18nMgg('connection_type'),
      value: helpFunctions.getConnectionType()
    });

  }

  if (mainConfigMgg.deviceInfo.vendor == 'tizen') {

    rows.push({
      title: i18nMgg('device_info_firmware_name'),
      value: mainConfigMgg.deviceInfo.platformName
    });

    rows.push({
      title: i18nMgg('device_info_firmware_version'),
      value: mainConfigMgg.deviceInfo.firmware
    });
    rows.push({type: 'separator'});


    if (page.ipAddress) {
      rows.push({
        title: i18nMgg('ip_text'),
        altClassName: 'ip_address',
        value: ''
      });
    }

    rows.push({
      title: i18nMgg('connection_type'),
      value: helpFunctions.getConnectionType()
    });


  }

  if (mainConfigMgg.deviceInfo.vendor == 'lg') {

    rows.push({
      title: i18nMgg('device_info_firmware_name'),
      value: mainConfigMgg.deviceInfo.platformName + '  ' + mainConfigMgg.deviceInfo.chipset
    });

    rows.push({
      title: i18nMgg('device_info_firmware_version'),
      value: mainConfigMgg.deviceInfo.firmware
    });
    rows.push({type: 'separator'});

    if (page.ipAddress) {
      rows.push({
        title: i18nMgg('ip_text'),
        altClassName: 'ip_address',
        value: ''
      });
    }

    if (mainConfigMgg.deviceInfo.isWebos) {

      rows.push({
        title: i18nMgg('connection_type'),
        value: '',
        altClassName: 'connection_type'
      });
      webOS.service.request("luna://com.palm.connectionmanager", {
        method: "getStatus",
        onSuccess: function (inResponse) {
          var isSucceeded = inResponse.returnValue;
          if (isSucceeded) {
            var networkType;
            if (inResponse.wired.state == 'connected') {
              networkType = 'Ethernet';
            }
            if (inResponse.wifi.state == 'connected') {
              networkType = 'Wi-Fi';
            }
            if (inResponse.wifiDirect.state == 'connected') {
              networkType = 'Wi-Fi Direct';
            }

            var wrapper = page.infoGrid.$node.getElementsByClassName('connection_type')[0];
            wrapper.getElementsByClassName('value')[0].innerHTML = networkType;

          }
        },
        onFailure: function (inError) {
          console.log("Failed to get network state");
          console.log("[" + inError.errorCode + "]: " + inError.errorText);
          // To-Do something
          return;
        }
      });
    } else {

      rows.push({
        title: i18nMgg('connection_type'),
        value: helpFunctions.getConnectionType()
      });

    }
  }

  rows.push({type: 'separator'});

  rows.push({title: i18nMgg('app_version'), value: mainConfigMgg.app.version});
  rows.push({
    title: i18nMgg('mgg_id').toUpperCase(),
    value: app.dataStorage.user.user_id.toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1 ")
  });

  generateInfoGrid(rows);
});
function createRow(data) {
  if (data.type == 'separator')
    return new Panel({$node: dom.tag('div', {className: 'separator'})});

  var altClassName = data.altClassName;
  var fullClassName = altClassName ? 'row ' + altClassName : 'row';
  var row = new Panel({
    $node: dom.tag('div', {className: fullClassName},
      dom.tag('span', {className: 'title'}, data.title + ':'),
      dom.tag('span', {className: 'value'}, data.value)
    )
  });
  return row;
}
function generateInfoGrid(rows) {
  page.infoGrid.clear();
  for (var i = 0; i < rows.length; i++) {
    page.infoGrid.add(createRow(rows[i]));
  }
}
function updateIPInfo(ipAddress) {
  var wrapper = page.infoGrid.$node.getElementsByClassName('ip_address')[0];
  wrapper.getElementsByClassName('value')[0].innerHTML = ipAddress;
}
module.exports = page;

},{"core/api":15,"core/app":16,"core/components/page":25,"core/components/panel":26,"core/dom":31,"core/lib/helpFunctions":34,"core/router":45}],101:[function(require,module,exports){
'use strict';

var id = 'pageSettings',
  animate = require('core/animate'),
  api = require('core/api'),
  dom = require('core/dom'),
  helpFunctions = require('core/lib/helpFunctions'),
  keys = require('vendor/aura/keys'),
  List = require('core/components/list'),
  Loader = require('widgets/loader'),
  menuNavigateService = require('core/tools/menuNavigateService'),
  Page = require('core/components/page'),
  PopUpList = require('widgets/popup/popup-list'),
  router = require('core/router'),
  initPage = require('pages/other/init'),
  mainPage = require('pages/other/main'),
  profilePage = require('pages/profile/profile'),
  SupportInfo = require('widgets/support-info'),
  statInfoService = require('core/tools/statInfoService'),
  SettingsBlock = require('ui/profile-item');


var page = new Page({
  $node: dom.tag('div', {id: id}),
  $body: dom.tag('div', {id: id+ 'Container'}),
  append_to_body: true,
  header: '',
  back_button: {
    'clickCallBack': function() {
      router.back();
    }
  }
});

page.addListener('load', function() {

  page.content = new List({
    type: List.prototype.TYPE_HORIZONTAL,
    className: 'settings',
    scrollList: {
      startIndex: 3,
      speed: mainConfigMgg.animation.duration.speed2,
    },
    keys: {
      RETURN: function() {
        page.content.clear() //@TODO refactor BACK-CLEAR
        page.backButton.emit('click');
      },
      UP: function () {
        page.backButton.focusButton(this);
      }
    },
    events: {
      'click:item': function(data) {
        statInfoService.sendGATrackEvent(page.id, data.$item.data.action);
        this.emit(data.$item.data.action, {
          data: data.$item.data
        });
      },
      'overflow': function(data) {
        if (data.direction === keys.LEFT && data.type !== 'mousewheel') {
          page.backButton.focusButton(this);
        }
      },
      'mouseover': function(data) {
        this.focus();
        this.focusItem(data.$item);
      }
    },
    render: function($listItem, itemData) {
      var block = new SettingsBlock($listItem, itemData);
      if (itemData.action == 'animation') {
        this.animationBlock = block;
        block.$subTitle.textContent = mainConfigMgg.animation.animated ? i18nMgg('animation_on') : i18nMgg('animation_off');
      } else if(itemData.action == 'language') {
        this.languageBlock = block;
        block.$subTitle.textContent = mainConfigMgg.languages[mainConfigMgg.app.lang];
      }
    }
  });

  page.add(page.content);

  /**
   * Listeners
   */

  page.addListener('show', function(data) {
    var dataList = getSettingsData();
    page.content.clear();
    SupportInfo.show({type:'profile'});

    var focusIndex = 0;
    if(page.content.$focusItem) {
      focusIndex = page.content.$focusItem.index
    }
    page.content.init({data: dataList, focusIndex: focusIndex});
    page.content.focus();
    page.header.setTitle(i18nMgg('settings'));
    PopUpList.addListener('change', popUpListChange);
    PopUpList.addListener('hide', popUpListHide);
  });

  page.addListener('hide', function(data) {
    PopUpList.removeListener('change', popUpListChange);
    PopUpList.removeListener('hide', popUpListHide);
  });

  page.content.addListener('animation', function(data) {
    PopUpList.show({
      header_title: i18nMgg('animation_title'),
      type: 'filter_animation',
      mark: mainConfigMgg.animation.animated,
      content: [{
        title: i18nMgg('animation_on'),
        id: 1
      }, {
        title: i18nMgg('animation_off'),
        id: 0
      }]
    });
  });

  page.content.addListener('language', function(data) {
    PopUpList.show({
      header_title: i18nMgg('interface_language'),
      type: 'filter_language',
      mark: mainConfigMgg.app.lang,
      content: mainConfigMgg.languages_popup
    });
  });

  function popUpListHide() {
    page.content.focus();
  }

  function popUpListChange(data) {
    page.content.focus();
    if(data.type == 'filter_language') {
      if(mainConfigMgg.app.lang != data.data.id) {
        statInfoService.sendGATrackEvent(page.id + '_language', 'changed_' + data.data.id);
        mainConfigMgg.app.lang = data.data.id;
        page.content.languageBlock.$subTitle.textContent = data.data.title;
        helpFunctions.setLocalizationLanguage(data.data.id);
        Loader.show();
        api.loadBaseData().then(function(data){
          initPage.initMenu();
          router.history.length = 0;
          router.history.push({page:mainPage});
          router.history.push({page:profilePage});
          router.navigate('pageSettings');
          SupportInfo.hide();
          SupportInfo.show({type:'profile'});
          Loader.hide();
        })
      }
    } else if(data.type == 'filter_animation') {
      mainConfigMgg.animation.animated = data.data.id;
      helpFunctions.setCookie('settings.animation', data.data.id, {expires: 31556926, path: '/'});
      statInfoService.sendGATrackEvent(page.id + '_animation', 'animation_' + data.data.id);
      page.content.animationBlock.$subTitle.textContent = data.data.title;
    }
  }

  function getSettingsData() {
    return [{
      title: i18nMgg('interface_language'),
      subTitle: '',
      title_info: '',
      img: 'abc',
      action: 'language'
    }, /*{
      title: i18nMgg('animation_title'),
      subTitle: 'default',
      title_info: '',
      img: 'animation',
      action: 'animation'
    } , {
      title: 'Региональная версия',
      subTitle: 'Международная',
      title_info: '',
      className: 'icon-localization',
      action: ''
    }, {
      title: 'Аудиодорожки',
      subTitle: 'Русские',
      title_info: '(по умолчанию)',
      className: 'icon-audio',
      action: ''
    }, {
      title: 'Субтитры',
      subTitle: 'Отключены',
      title_info: '(по умолчанию)',
      className: 'icon-subtitles',
      action: ''
    }*/];
  }

});

// public
module.exports = page;

},{"core/animate":14,"core/api":15,"core/components/list":23,"core/components/page":25,"core/dom":31,"core/lib/helpFunctions":34,"core/router":45,"core/tools/menuNavigateService":49,"core/tools/statInfoService":53,"pages/other/init":69,"pages/other/main":71,"pages/profile/profile":99,"ui/profile-item":124,"vendor/aura/keys":133,"widgets/loader":149,"widgets/popup/popup-list":155,"widgets/support-info":163}],102:[function(require,module,exports){
'use strict';

var id = 'pageSubscriptionsProfile',
  animate = require('core/animate'),
  api = require('core/api'),
  Page = require('core/components/page'),
  router = require('core/router'),
  keys = require('vendor/aura/keys'),
  List = require('core/components/list'),
  dom = require('core/dom'),
  SubscriptionItem = require('ui/subscription-item'),
  Loader = require('widgets/loader'),
  Background = require('widgets/background/background'),
  helpFunctions = require('core/lib/helpFunctions'),
  subsService = require('core/tools/subscriptionService'),
  SupportInfo = require('widgets/support-info'),
  paymentService = require('core/tools/paymentService'),
  statInfoService = require('core/tools/statInfoService'),
  subscriptionService = require('core/tools/subscriptionService'),
  menuNavigateService = require('core/tools/menuNavigateService'),
  scroll_item_value, scroll_item_margin, scroll_item_index;


var page = new Page({
  $node: dom.tag('div', {id: id}),
  $body: dom.tag('div', {id: id+ 'Container'}),
  append_to_body: true,
  arrows: {
    right: {
      config: {
        paddingLeft: 40,
        left: 1140
      }
    },
    left: {
      config: {
        paddingRight: 40
      }
    }
  },
  arrowsUpdate: showHideArrows,
  header: '',
  back_button: {
    'clickCallBack': function() {
      router.back();
    }
  }
});

page.lastItemIndex = 0;
page.lastFocusCategoryIndex = 0;
page.lastFocusItemIndex = 0;
page.itemWidth = 0;

page.addListener('load', function () {
  page.content = new List({
    $node: 'pageSubscriptionsProfileContainer',
    className: '',
    type: List.prototype.TYPE_HORIZONTAL,
    cycle: false,
    focusIndex: page.lastFocusCategoryIndex,
    visible: true,
    events: {
      'focus': function (data) {
        if (this.$focusItem) {
          this.$focusItem.list.focus();
          if(page.lastFocusItemIndex >= this.$focusItem.list.size) {
            this.$focusItem.list.focusIndex(0);
          } else {
            this.$focusItem.list.focusIndex(page.lastFocusItemIndex);
          }
        }
      },
      'focus:item': function (data) {
        page.lastFocusCategoryIndex = data.$curr.index;
        data.$curr.list.focus();
      },
      'click:item': function (data) {
        data.event.preventDefault();
      },
      'overflow': function (data) {
      },
      'mouseover': function (data) {
        //this.focus();
        this.focusItem(data.$item, {
          no_emit: true
        });
        page.lastFocusCategoryIndex = data.$item.index;
        data.$item.list.focus();
      }
    },
    render: function ($item, data) {
      $item.classList.add('subs__list');

      $item.listTitle = dom.tag('div', {
        className: 'listTitle'
      }, data.type);

      $item.list = new List({
        type: List.prototype.TYPE_HORIZONTAL,
        data: data.data,
        className: 'subsList',
        focusIndex: page.lastFocusItemIndex,
        cycle: false,
        visible: true,
        keys: {
          RETURN: function () {
            page.backButton.emit('click');
          },
          PAGE_UP: function () {
            this.move(keys.LEFT)
          },
          PAGE_DOWN: function () {
            this.move(keys.RIGHT)
          },
          UP: function () {
            page.backButton.focusButton(this);
          }
        },
        events: {
          'focus': function (data) {
          },
          'focus:item': function (dataList) {
            if(dataList &&  dataList.$curr) {
              var $itemList = dataList.$curr;

              page.lastFocusItemIndex = $itemList.index;
              scroll_item_index = $itemList.data.itemIndex < page.lastItemIndex ? $itemList.data.itemIndex : page.lastItemIndex - 1;

              scroll_item_margin = parseInt(window.getComputedStyle($itemList).marginRight) || 0;
              page.itemWidth = $itemList.clientWidth + scroll_item_margin;
              scroll_item_value = scroll_item_index > 2 ? -1 * ((scroll_item_index - 2) * (page.itemWidth)) : 0;
              animate(page.content.$body, mainConfigMgg.animation.duration.speed2, {
                left: scroll_item_value
              });
            }
          },
          'mouseover': function (data) {
            this.focus();
            this.focusItem(data.$item, {
              no_emit: true
            });
            page.lastFocusItemIndex = data.$item.index;
            showHideArrows();
          },
          'overflow': function (data) {
            if (data.direction === keys.RIGHT) {
              if (page.content.$focusItem.index < (page.content.size - 1)) {
                page.content.move(keys.RIGHT);
                page.content.$focusItem.list.focusIndex(0);
              }
            } else if (data.direction === keys.LEFT) {
              if (page.content.$focusItem.index) {
                page.content.move(keys.LEFT);
                page.content.$focusItem.list.focusIndex(page.content.$focusItem.list.size - 1);
              } else {
                if(data.type !== 'mousewheel') {
                  page.backButton.focusButton(this);
                }
              }
            }
            page.content.$focusItem.list.emit('focus:item', {
              $curr: page.content.$focusItem.list.$focusItem
            });
          },
          'click:item': function (data) {

            var itemInfo = data.$item.data;
            statInfoService.sendGATrackEvent(page.id, itemInfo.subscription_id);

            if (itemInfo.restriction == 'geo') {
              router.navigate('pageSubscriptionRestriction', [data.$item.data]);
            } else if (itemInfo.is_archive) {
              api.load('user', {}, {setToStorageKey: 'user'}).then(function (data) {
                page.cardRespond = data.credit_card;
                if (page.cardRespond && itemInfo.is_bought) {
                  router.navigate('pagePaymentSetting', [itemInfo.subscription_id]);
                } else {
                  paymentService.getSubscriptionActionHandler(itemInfo, page.$$lastFocus);
                }
              });
            } else {
              menuNavigateService.navigateToSalesLanding(itemInfo.subscription_id);
            }
          }
        },
        render: function ($item, data) {
          $item.classList.add('subscription-item');
          new SubscriptionItem($item, data, 'big');
        }
      });
      $item.appendChild($item.listTitle);
      $item.appendChild($item.list.$node);

    }
  });

  /**
   * Listeners
   */
  page.addListener('show', function (data) {
    Loader.show();
    page.header.setTitle(i18nMgg('profile_subs_title'));

    SupportInfo.show({
      type: 'payment'
    });

    page.arrowsWidget.addClass('page-back-button');
    page.backButton.addClass('short');

    api.load('subscriptionInfo', {}, {
      setToStorageKey: 'subscriptionInfo'
    }).then(function (data) {
      page.subscriptions = data.value;

      var sortedSubscriptions = subsService.sortSubscriptionsByType(page.subscriptions);

      page.content.$node.innerHTML = '';
      var itemIndexSubs = 0;

      sortedSubscriptions.forEach(function (itemsSubs) {
        itemsSubs.data.forEach(function (itemSub) {
          itemSub.itemIndex = itemIndexSubs;
          itemIndexSubs++;
        })
      });

      page.lastItemIndex = itemIndexSubs - 1;

      page.lastFocusCategoryIndex = page.lastFocusCategoryIndex < sortedSubscriptions.length ? page.lastFocusCategoryIndex : 0;
      page.content.init({
        data: sortedSubscriptions,
        focusIndex: page.lastFocusCategoryIndex
      });
      page.content.focus();
      page.content.$focusItem.list.emit('focus:item', {$curr: page.content.$focusItem.list.$focusItem});
      Loader.hide();

    });
  });
  page.addListener('hide', function () {
    page.arrowsWidget.removeClass('page-back-button');
    page.backButton.removeClass('short');
    SupportInfo.hide();
  })

});

function showHideArrows() {
  setTimeout(function () {
    var focusItem = page.content ? page.content.$focusItem : null;
    var left_offset = page.content.$node.style.left ? parseInt(page.content.$node.style.left) : 0;
    var total_offset = -page.itemWidth * (page.lastItemIndex - 4);

    if (left_offset) {
      page.arrowsWidget.left.show();
    } else {
      page.arrowsWidget.left.hide();
    }
    if (left_offset >= total_offset) {
      page.arrowsWidget.right.show();
    } else {
      page.arrowsWidget.right.hide();
    }
  }, 0);
}
// public
module.exports = page;

},{"core/animate":14,"core/api":15,"core/components/list":23,"core/components/page":25,"core/dom":31,"core/lib/helpFunctions":34,"core/router":45,"core/tools/menuNavigateService":49,"core/tools/paymentService":51,"core/tools/statInfoService":53,"core/tools/subscriptionService":54,"ui/subscription-item":129,"vendor/aura/keys":133,"widgets/background/background":141,"widgets/loader":149,"widgets/support-info":163}],103:[function(require,module,exports){
/**
 * SearchAllResult page implementation.
 *
 * @license GNU GENERAL PUBLIC LICENSE Version 3
 */

'use strict';

var id = 'pageSearchAllResults',
  Page = require('core/components/page'),
  Button = require('core/components/button'),
  Grid = require('core/components/grid'),
  keys = require('vendor/aura/keys'),
  router = require('core/router'),
  FilmItemRender = require('ui/film-item'),
  Panel = require('core/components/panel'),
  Loader = require('widgets/loader'),
  helpFunctions = require('core/lib/helpFunctions'),
  api = require('core/api'),
  dom = require('core/dom'),
  greedData, serachResults;

var page = new Page({
  $node: dom.tag('div', {id: id}),
  $body: dom.tag('div', {id: id + 'Container'}),
  append_to_body: true,
  header: '',
  arrows: {up: {config: {paddingBottom: 100}}},
  arrowsUpdate: showHideArrows,
  back_button: {
    'clickCallBack': function() {
      router.back();
    }
  }
});

page.addListener('load', function load() {
  page.offset = 0;
  page.total = 0;
  page.limit = 20;

  page.content = new Grid({
    cycleX: false,
    cycleY: false,
    className: 'movie-grid',
    events: {
      'click:item': function (data) {
        router.navigate('pageMovie', [
          data.$item.data.id
        ]);
      },
      'mouseover': function (data) {
        page.content.focus();
        this.focusItem(data.$item, {
          no_emit: true
        });
        showHideArrows();
      },
      overflow: function (data) {
        if ((data.direction === keys.LEFT || data.direction === keys.UP) && data.type !== 'mousewheel') {
          page.backButton.focusButton(this);
        }
      },
      'focus:item': function (data) {
        var height = data.$curr.parentElement.offsetHeight;
        var top = height * data.$curr.y;

        if (top) {
          page.header.shadeOn();
          top -= height * 0.2;
        } else {
          page.header.shadeOff();
        }

        page.scrollTop(top);
        page.$$lastFocus = this;

        if ((page.content.map.length - data.$curr.y) < 3) {
          if (page.total > page.offset + page.limit) {
            page.offset += page.limit;
            page.lazyLoad({offset: page.offset});
          }
        }
      }
    },
    keys: {
      RETURN: function () {
        page.content.clear() //@TODO refactor BACK-CLEAR
        router.back();
      }
    },
    render: function ($item, data) {
      FilmItemRender($item, data);
    }
  });

  /**
   * Listeners
   */
  page.addListener('show', function (data) {
    page.header.setTitle(i18nMgg('all_results'));
    page.content.focus();
    if (helpFunctions.isNavigateBack(data)) {
      return;
    }

    page.content.clear();

    page.offset = 0;
    page.total = 0;

    var search_text = data && data.data ? data.data[0] : null;
    if (search_text) {
      page.search_text = search_text;
      Loader.show();
      page.resetScroll();

      api.load('search', {
        text: page.search_text,
        limit: page.limit
      }).then(function (data) {
        Loader.hide();
        serachResults = data.video_list;
        page.total = data.total;
        greedData = helpFunctions.formatDataForGreed(serachResults, 5);
        page.content.init({
          data: greedData,
          focusIndex: 0,
          render: function ($item, data) {
            FilmItemRender($item, data);
          }
        });
      });
    }
  });


  page.lazyLoad = function (config) {
    var search_config = {
      limit: page.limit,
      text: page.search_text,
    };

    if (config.offset) {
      search_config.offset = config.offset;
    }

    api.load('search', search_config).then(function (data) {
      serachResults = data.video_list;

      greedData = helpFunctions.formatDataForGreed(serachResults, 5);

      page.content.addData({
        data: greedData
      });
    });
  };

  page.add(page.content);
});

function showHideArrows() {
  setTimeout(function () {
    if (page.content.$focusItem) {
      if (!page.content.$focusItem.y) {
        page.arrowsWidget.up.hide();
      } else {
        page.arrowsWidget.up.show();
      }
      if (page.content.$focusItem.y >= page.total_rows - 1) {
        page.arrowsWidget.down.hide();
      } else {
        page.arrowsWidget.down.show();
      }
    }
  }, 0);
}

// public
module.exports = page;

},{"core/api":15,"core/components/button":19,"core/components/grid":21,"core/components/page":25,"core/components/panel":26,"core/dom":31,"core/lib/helpFunctions":34,"core/router":45,"ui/film-item":119,"vendor/aura/keys":133,"widgets/loader":149}],104:[function(require,module,exports){
'use strict';

var id = 'pageSearch',
  Page = require('core/components/page'),
  router = require('core/router'),
  keys = require('vendor/aura/keys'),
  List = require('core/components/list'),
  Panel = require('core/components/panel'),
  Keyboard = require('widgets/keyboard'),
  FilmItemSmall = require('ui/film-item-small'),
  ShowMoreItem = require('ui/show-more-item'),
  api = require('core/api'),
  dom = require('core/dom'),
  helpFunctions = require('core/lib/helpFunctions'),
  PopUpList = require('widgets/popup/popup-list'),
  serachResults;

var page = new Page({
  $node: dom.tag('div', {id: id}),
  $body: dom.tag('div', {id: id+ 'Container'}),
  append_to_body: true,
  back_button: {
    'clickCallBack': function() {
      router.back();
    }
  },
  header: '',
  arrows: {
    right: {
      config: {
        height: 225,
        top: 120,
        paddingLeft: 30,
        left: 1150
      }
    },
    left: {
      config: {
        height: 225,
        paddingRight: 20,
        top: 120
      }
    }
  },
  arrowsUpdate: showHideArrows
});

page.search_text = '';

page.$defaultText = new Panel({
  $node: dom.tag('div', {
    className: 'def-text'
  })
});

page.$diveder = new Panel({
  $node: dom.tag('div', {
    className: 'diveder'
  }),
  events: {
    mouseover: function() {
      Keyboard.focus();
      page.removeClass('js-long');
    }
  }
});

page.addListener('load', function load() {

  page.searchResultsText = new Panel({
    className: 'search-results-text'
  });

  page.content = new List({
    type: List.prototype.TYPE_HORIZONTAL,
    className: 'movies-list',
    size: 0,
    scrollList: {
      startIndex: 2,
      scrollSize: 3,
      stopIndex: 3,
      speed: mainConfigMgg.animation.duration.speed2
    },
    events: {
      'focus': function() {
        if(this.size) {
          page.addClass('js-long');
        }
      },
      'blur': function() {
        page.removeClass('js-long');
      },
      'click:item': function(data) {
        if (data.$item.data.type == 'show_more') {

          router.navigate('pageSearchAllResults', [
            Keyboard.KeyboardView.input.value
          ]);
        } else {
          router.navigate('pageMovie', [
            data.$item.data.id
          ]);
        }
      },
      'mouseover': function(data) {
        this.focus();
        this.focusItem(data.$item, {
          no_emit: true
        });
        showHideArrows();
      },
      'overflow': function(data) {
        if (data.direction === keys.LEFT && data.type !== 'mousewheel') {
          page.backButton.focusButton(page.content);
        }
      }
    },
    keys: {
      DOWN: function() {
        Keyboard.focus();
      },
      UP: function() {
        page.backButton.focusButton(page.content);
      },
      RETURN: function () {
        page.content.clear(); //@TODO refactor BACK-CLEAR
        router.back();
      }
    },
    render: function($item, data) {
      if (data.type && data.type == 'show_more') {
        new ShowMoreItem($item, data);

      } else {
        data.type = 'searchItem';
        new FilmItemSmall($item, data);
      }
    }
  });

  /**
   * Listeners
   */
  page.addListener('show', function(data) {
    page.header.setTitle(i18nMgg('search'));
    page.arrowsWidget.addClass('page-back-button');
    page.arrowsWidget.focusCallback = keyboardViewOverflow;
    page.arrowsWidget.addClass('js-high-layer');

    Keyboard.KeyboardView.addListener('type:char', keyboardViewTypeChar);
    Keyboard.KeyboardView.addListener('overflow:top', keyboardViewOverflow);
    PopUpList.addListener('show', popUpListShowCallback);
    PopUpList.addListener('hide', popUpListHideCallback);

    Keyboard.show();

    if (helpFunctions.isNavigateBack(data)) {
      page.content.focus();
      page.searchResultsText.show();
      return;
    }

    Keyboard.KeyboardView.initialize({
      viewType: 'search',
      lang: helpFunctions.getKeyboardLanguage()
    });

    Keyboard.KeyboardView.updateSearchField('');
    Keyboard.KeyboardView.setFirstFocus();

    page.content.clear();

    Keyboard.focus();

    //need to find bug with first focus
    setTimeout(function() {
      Keyboard.KeyboardView.setFirstFocus();
    }, 0);
    page.content.$node.style.left = "0px";
    //@TODO WTF??? NO INLINE HTML!!!
    page.content.$node.innerHTML = '<div class="search-icon"></div></div><div class="search-text">' + i18nMgg('search_splash') + '</div>';
  });

  page.add(page.$defaultText);
  page.add(page.content);
  page.add(page.searchResultsText);
  page.add(page.$diveder);

  page.addListener('hide', function() {
    page.arrowsWidget.focusCallback = null;
    page.arrowsWidget.removeClass('page-back-button');
    page.arrowsWidget.removeClass('js-high-layer');
    Keyboard.KeyboardView.removeListener('type:char', keyboardViewTypeChar);
    Keyboard.KeyboardView.removeListener('overflow:top', keyboardViewOverflow);
    PopUpList.removeListener('show', popUpListShowCallback);
    PopUpList.removeListener('hide', popUpListHideCallback);

    Keyboard.hide();
    page.searchResultsText.hide();
  });
});

function keyboardViewOverflow() {
  if (page.content.size) {
    Keyboard.KeyboardView.currentSelected.blur();
    page.content.focus();
  } else {
    Keyboard.KeyboardView.currentSelected.blur();
    page.backButton.focusButton(Keyboard);
  }
}

function keyboardViewTypeChar(data) {
  page.search_text = data.text;
  api.load('search', {
    text: page.search_text,
    limit: 15
  }).then(function(data) {
    if (data && data.video_list) {
      serachResults = data.video_list;
      var dataTotalResult = helpFunctions.getValueText(data.total, 'found_big_result').replace('[n]', data.total);

      if (serachResults.length && data.total > data.limit) {
        serachResults.push({
          type: 'show_more',
          title: i18nMgg('all_results')
        });
      }

      page.searchResultsText.show();
      page.searchResultsText.$node.textContent = dataTotalResult;

      page.content.clear();
      page.content.init({
        data: serachResults,
        focusIndex: 0,
      });
      showHideArrows();
    } else {
      console.log('wrong response');
    }
  });
}

function popUpListShowCallback() {
  page.arrowsWidget.focusCallback = null;
}

function popUpListHideCallback() {
  page.arrowsWidget.focusCallback = keyboardViewOverflow;
}

function showHideArrows() {
  setTimeout(function() {
    if (!page.content || !page.content.size) {
      page.arrowsWidget.left.hide();
      page.arrowsWidget.right.hide();
      return;
    }

    var left_offset = page.content.$node.style.left ? parseInt(page.content.$node.style.left) : 0;
    var total_offset = -page.content.$focusItem.offsetWidth * (page.content.size - page.content.scrollList.scrollSize - 3); //@TODO NEED TO REPLACE HARDCODE
    if (left_offset) {
      page.arrowsWidget.left.show();
    } else {
      page.arrowsWidget.left.hide();
    }
    if (left_offset > total_offset) {
      page.arrowsWidget.right.show();
    } else {
      page.arrowsWidget.right.hide();
    }
  }, 0);
}
// public
module.exports = page;

},{"core/api":15,"core/components/list":23,"core/components/page":25,"core/components/panel":26,"core/dom":31,"core/lib/helpFunctions":34,"core/router":45,"ui/film-item-small":118,"ui/show-more-item":126,"vendor/aura/keys":133,"widgets/keyboard":147,"widgets/popup/popup-list":155}],105:[function(require,module,exports){
'use strict';

var id = 'pageSubscriptionDetailed',
  animate = require('core/animate'),
  api = require('core/api'),
  app = require('core/app'),
  Button = require('core/components/button'),
  ChannelItem = require('ui/channel-item'),
  dom = require('core/dom'),
  FilmItemSmall = require('ui/film-item-small'),
  helpFunctions = require('core/lib/helpFunctions'),
  keys = require('vendor/aura/keys'),
  LeftMenu = require('widgets/menu-left'),
  List = require('core/components/list'),
  Loader = require('widgets/loader'),
  Page = require('core/components/page'),
  Panel = require('core/components/panel'),
  Promise = require('core/promise'),
  paymentModel = require('core/paymentModel'),
  paymentService = require('core/tools/paymentService'),
  router = require('core/router'),
  SubscriptionBlock = require('ui/subscription-block'),
  subscriptionService = require('core/tools/subscriptionService'),
  PopUpResults = require('widgets/popup/popup-results'),
  Label = require('core/components/label'),
  wTariffsSubscription = require('widgets/popup/popup-tariffs-subscription'),
  init_data, sale_collection_id;

var page = new Page({
  $node: dom.tag('div', {id: id}),
  $body: dom.tag('div', {id: id+ 'Container'}),
  append_to_body: true,
  arrows: {up: {config: {paddingBottom: 100}}, down: {config: {paddingTop: 100, top: 550,left: 0, width: 1280}}},
  arrowsUpdate: showHideArrows,
  header: '',
  back_button: {
    'clickCallBack': function() {
      Loader.hide();
      router.back();
    }
  }
});

page.items_per_row = 6;

page.addListener('load', function () {
  page.subscriptionInfo = dom.tag('div', {
      className: 'subscription'
    },
    page.subscriptionContainer = dom.tag('div', {
      className: 'subscription__wrap'
    })
  );

  page.$$subscriptionButtonsContainer = new Panel({
    className: 'subscription__btn-wrap'
  });

  page.$$expirationDate = new Label({
    $node: dom.tag('div', {
      className: 'expirationDate'
    }),
    focusable: false
  });

  page.$$autoRenewInfo = new Label({
    $node: dom.tag('div', {
      className: 'autoRenewInfo'
    }),
    focusable: false
  });


  page.$$subscribeButton = new Button({
    className: 'subscription__btn',
    events: {
      click: function () {
        subscribeAction();
      },
      focus: function () {
        page.$$lastFocus = this;
      },
      mouseover: function () {
        this.focus();
      },
      mousewheel: function () {
        if(event.deltaY > 0) {
          this.emit('keydown', {
            'keyCode': keys.DOWN
          });
        }
      }
    },
    keys: {
      LEFT: function () {
        page.backButton.focusButton(this);
      },
      DOWN: function () {
        if (page.$$detailedButton && page.$$detailedButton.visible) {
          page.$$detailedButton.focus();
        } else {
          if (page.content.size || (page.content.map && page.content.map.length)) {
            page.content.focus();
          }
        }
      },
      UP: function () {
        page.backButton.focusButton(this);
      },
      RETURN: function () {
        page.backButton.emit('click');
      }
    }
  });

  page.$$detailedButton = new Button({
    className: 'subscription__btn',
    events: {
      click: function () {
        if (page.isNavigateToProfile) {
          router.navigate('pageLogin');
        } else {
          var subscription = subscriptionService.getSubscriptionById(page.subscription.id);
          router.navigate('pageLandingInner', [
            subscription.subscription_meta.smart_tv_landing_collection_id, 'slide1'
          ]);
        }
      },
      focus: function () {
        page.$$lastFocus = this;
      },
      mouseover: function () {
        this.focus();
      },
      mousewheel: function () {
        this.emit('keydown', {
          'keyCode': event.deltaY < 0 ? keys.UP : keys.DOWN
        });
      }
    },
    keys: {
      LEFT: function () {
        page.backButton.focusButton(this);
      },
      DOWN: function () {
        if (page.content.size || (page.content.map && page.content.map.length)) {
          page.content.focus();
        }
      },
      UP: function () {
        page.$$subscribeButton.focus();
      },
      RETURN: function () {
        page.backButton.emit('click');
      }
    }
  });
});

/**
 * Listeners
 */
page.addListener('show', function (data) {
  page.arrowsWidget.addClass('page-back-button');
  page.backButton.addClass('short');
  PopUpResults.addListener('hide', hidePopUpResultsCallback);
  PopUpResults.addListener('show', showPopUpResultsCallback);
  wTariffsSubscription.addListener('show', showTariffsSubscription);
  wTariffsSubscription.addListener('hide', hideTariffsSubscription);
  LeftMenu.openSubMenu();//@TODO need refactor later

  if (helpFunctions.isNavigateBack(data)) { //hardcoded
    page.$$lastFocus.focus();
    if (page.content.$focusItem) {
      moveArrows(page.content.$focusItem);
    }

    showHideArrows();
    Loader.hide();
    return;
  }

  Loader.show();

  page.come_from = 'tv';
  page.show_tariffs = false;
  page.show_landing = false;

  if (data && data.data[1]) {
    if (data.data[1] == 'movie') {
      page.come_from = 'movie'
    }
    if (data.data[1] == 'tariffs') {
      page.show_tariffs = true;
    }
    if (data.data[1] == 'landing') {
      page.show_landing = true;
    }
    if(data.data[2] && data.data[2] == 'landing'){
      page.show_landing = true;
    }
  }

  var subscriptionId = data && data.data[0] ? data.data[0] : '';

  if (subscriptionId) {
    init_data = {};

    if(Array.isArray(subscriptionId)){
      subscriptionId = subscriptionId[0];
    }

    var subscription = subscriptionService.getSubscriptionById(subscriptionId);

    if (!subscription) {
      console.log('ERROR no subscription');
      Loader.hide();
      router.back();
      return;
    }

    var subscription_type = subscriptionService.getSubscriptionType(subscriptionId);
    var query_config = prepareConfig(subscription, subscription_type);

    api.load(query_config.url, query_config.query_params).then(function (data) {
      if(!page.active) {
        return;
      }
      init_data = {title: subscription.title || '', video: data.video_list || []};
      if (data.packages && data.packages.length) {
        init_data = data.packages[0];
      }

      init_data.paidSubscription = subscription;
      init_data.subscription_type = subscription_type;

      return addMoviesCartoons(init_data);
    }).then(function (data) {
      if(!page.active) {
        return;
      }
      page.subscription = data;
      page.updateContent(data);

      if (page.show_tariffs) {
        router.history.pop();
        subscribeAction();
      }

      if (page.show_landing) {
        var subscription = page.subscription.paidSubscription;
        var isTryAndBuy = subscriptionService.getFirstSubscriptionTariff(subscription).is_try_and_buy;

        if (!subscription.is_bought && isTryAndBuy && subscription.subscription_meta && subscription.subscription_meta.smart_tv_landing_collection_id) {
         // router.history.pop();
          page.$$detailedButton.emit('click');
        }
      }
      Loader.hide();
      showHideArrows();
    });
  } else {
    Loader.hide();
    page.content.clear(); //@TODO refactor BACK-CLEAR
    router.back();
  }
});

page.addListener('hide', function () {
  page.arrowsWidget.removeClass('page-back-button');

  page.backButton.removeClass('short');
  PopUpResults.removeListener('hide', hidePopUpResultsCallback);
  PopUpResults.removeListener('show', showPopUpResultsCallback);
  wTariffsSubscription.removeListener('show', showTariffsSubscription);
  wTariffsSubscription.removeListener('hide', hideTariffsSubscription);
});

page.updateContent = function (data) {
  page.header.setTitle(data.title);
  var salesLabel = dom.tag('span', {
    className: 'salesLabel'
  }, i18nMgg('sales_label'));

  data.title = null;
  data.come_from = page.come_from;
  page.resetScroll();

  if (page.$$subscriptionBlock) page.$$subscriptionBlock.remove();

  page.$$subscriptionBlock = new SubscriptionBlock(data);
  page.subscriptionContainer.innerHTML = '';

  page.$$subscriptionButtonsContainer.add(page.$$subscribeButton);

  var user = app.dataStorage.user;
  var isAutoUser = user['is_autouser'];
  var subscription = subscriptionService.getSubscriptionById(data.paidSubscription.subscription_id);

  if (subscription.is_bought) {
    if (page.$$detailedButton) page.$$detailedButton.hide();

    page.$$subscriptionButtonsContainer.add(page.$$expirationDate);
    page.$$expirationDate.text(i18nMgg('subs_till') + ' ' + subscriptionService.getExpirationDate(subscription));
    page.$$expirationDate.show();

    if (subscription.is_renew) {
      page.$$subscriptionButtonsContainer.add(page.$$autoRenewInfo);
      page.$$autoRenewInfo.text(i18nMgg('auto_renew_on_2'));
      page.$$autoRenewInfo.show();
    } else {
      page.$$autoRenewInfo.hide();
    }
    if (user.credit_card.length) {
      page.$$subscribeButton.setValue(i18nMgg('payment_settings'));
    } else {
      page.$$subscribeButton.setValue(i18nMgg('renew_subscription'));
    }
  } else {
    page.$$subscribeButton.setValue(i18nMgg('get_subscribe'));
    page.$$expirationDate.hide();
    page.$$autoRenewInfo.hide();

    if(subscriptionService.getFirstSubscriptionTariff(subscription).is_try_and_buy){
      page.header.$title.appendChild(salesLabel);
    }


    page.$$subscriptionButtonsContainer.add(page.$$detailedButton);
    page.$$detailedButton.setValue(i18nMgg('have_subs_button'));

    if (subscriptionService.getFirstSubscriptionTariff(subscription).is_try_and_buy && subscription.subscription_meta && subscription.subscription_meta.smart_tv_landing_collection_id) {
      page.isNavigateToProfile = false;
      page.$$detailedButton.setValue(i18nMgg('more_info_offer'));
      page.$$detailedButton.show();
    } else if (isAutoUser && !subscriptionService.isAnySubscriptionBought()) {
      page.isNavigateToProfile = true;
      page.$$detailedButton.show();
    } else {
      page.isNavigateToProfile = false;
      page.$$detailedButton.hide();

    }
  }

  page.subscriptionContainer.appendChild(page.$$subscriptionBlock.$node);
  page.subscriptionContainer.appendChild(page.$$subscriptionButtonsContainer.$node);

  if (page.content) {
    page.content.remove();
  }

  page.content = page.getContent(data);

  page.$body.appendChild(page.subscriptionInfo);
  page.add(page.content);

  if (PopUpResults.visible) {
    page.$$lastFocus = page.$$subscribeButton;
    PopUpResults.resultButton.focus();
  } else {
    page.$$subscribeButton.focus();
  }
};

page.getContent = function (data) {
  var page_content;

  var dataCategories = [];
  if (data.paidSubscription) {
    if (data.paidSubscription.option_type == 'secondary') {
      dataCategories = [data];
    } else {
      dataCategories = helpFunctions.groupChannelsByGenres(data);
    }
  }

  if (data.collection_videos && data.collection_videos.length) {
    if (page.come_from == 'movie') {
      data.collection_videos = data.collection_videos.reverse();
    }
    data.collection_videos.forEach(function (collection_video) {
      if (page.come_from == 'tv') {
        dataCategories.push(collection_video);
      } else {
        dataCategories.unshift(collection_video);
      }
    });
  } else if (data.videos && data.videos.length) {
    var films_data = {
      movies: data.videos,
      title: i18nMgg('movies_noun')
    };
    if (page.come_from == 'tv') {
      dataCategories.push(films_data);
    } else {
      dataCategories.unshift(films_data);
    }
  }

  page_content = new List({
    data: dataCategories,
    size: dataCategories.length,
    focusIndex: 0,
    className: 'categories-list ',
    events: {
      'focus': function () {
        page.$$lastFocus = this;
        this.$focusItem.list.focus();
      },
      'focus:item': function (data) {
        var top = 0;
        if (data.$curr.index) {
          this.$node.classList.remove('active');

          top = data.$curr.getBoundingClientRect().top - parseInt(page.scrollTopValue || 0);

          top -= 90;
          page.header.shadeOn();
        } else {
          this.$node.classList.add('active');
          page.header.shadeOff();
        }
        data.$curr.list.focus();
        page.scrollTop(top);
        moveArrows(data.$curr);
      },
      'overflow': function (data) {
        if (data.direction === keys.UP) {
          if (page.$$detailedButton.visible) {
            page.$$detailedButton.focus();
          } else {
            page.$$subscribeButton.focus();
          }
        }
      }
    },
    render: function ($item, dataCategory) {
      var content = [];
      var className = '';

      if (dataCategory.movies) {
        content = dataCategory.movies;
        className = 'movies-list';
        if(!$item.index){
          this.addClass('film-first');
        }
      } else {
        content = dataCategory.channels;
        className = 'channels-list';
      }
      $item.list = new List({
        type: List.prototype.TYPE_HORIZONTAL,
        data: content,
        className: className,
        focusIndex: 0,
        dataType: className,
        scrollList: {
          startIndex: 3,
          stopIndex: 2,
          scrollSize: 3,
          speed: mainConfigMgg.animation.duration.speed2
        },
        events: {
          'click:item': function (data) {
            var currentItem = data.$item.data;

            if (page.subscription.paidSubscription.is_bought) {
              if (this.dataType == 'channels-list') {
                router.navigate('pagePlayer', ['tv', currentItem.id]);
              } else {
                router.navigate('pageMovie', [currentItem.id]);
              }
            } else {
              subscribeAction();
            }
          },
          'mouseover': function (data) {
            this.focus();
            this.focusItem(data.$item, {
              no_emit: true
            });
            showHideArrows();
          },
          overflow: function (data) {
            if (data.direction === keys.LEFT && data.type !== 'mousewheel') {
              page.backButton.focusButton(this);
            }
          },
          'mousewheel': function (event) {
            if (event.deltaY < 0) {
              page.content.move(keys.UP);
            }
            if (event.deltaY > 0) {
              page.content.move(keys.DOWN);
            }
          }
        },
        keys: {
          UP: function () {
            page_content.move(keys.UP);
          },
          DOWN: function () {
            page_content.move(keys.DOWN);
          },
          RETURN: function () {
            page.backButton.emit('click');
          }
        },
        render: function ($item, data) {
          if (dataCategory.movies) {
            new FilmItemSmall($item, data);
          } else {
            new ChannelItem($item, data, {
              className: 'big'
            });
          }
        }
      });

      var category_title = dataCategory.title || i18nMgg('channels_noun');
      $item.listItemTitle = new Panel({
        $node: dom.add(dom.tag('div', {
          className: 'panelTitle'
        }), category_title)
      });

      $item.wrapper = new Panel({
        $node: dom.add(dom.tag('div', {
          className: 'item-wrapper'
        }))
      });

      $item.wrapper.add($item.listItemTitle);
      $item.wrapper.add($item.list);
      $item.appendChild($item.wrapper.$node);
    }
  });

  return page_content;
};

function hidePopUpResultsCallback() {
  page.$$lastFocus.focus();
  page.arrowsWidget.disabled = false;
}

function showPopUpResultsCallback() {
  page.arrowsWidget.disabled = true;
  page.arrowsWidget.hideArrows();
}

function showTariffsSubscription() {
  page.arrowsWidget.disabled = true;
  page.arrowsWidget.hideArrows();
}

function hideTariffsSubscription() {
  page.arrowsWidget.disabled = false;
}

function subscribeAction() {
  var subscription = page.subscription.paidSubscription;
  var user = app.dataStorage.user;

  if (subscription.is_bought && user.credit_card.length) {
    router.navigate('pagePaymentSetting', [subscription.subscription_id]);
  } else {
    paymentService.getSubscriptionActionHandler(subscription, page.$$lastFocus);
  }
}

function showHideArrows() {
  setTimeout(function () {
    var focusItem = page.content ? page.content.$focusItem : null;
    if (focusItem && focusItem.list && focusItem.list.$focusItem) {
      var left_offset = focusItem.list.$node.style.left ? parseInt(focusItem.list.$node.style.left) : 0;
      var total_offset = -focusItem.list.$focusItem.offsetWidth * (focusItem.list.size - focusItem.list.scrollList.scrollSize - 3);
      if (focusItem.list.size < 7) {
        total_offset = 0;
      }

      if (!left_offset) {
        page.arrowsWidget.left.hide();
      } else {
        page.arrowsWidget.left.show();
      }

      if (left_offset > total_offset) {
        page.arrowsWidget.right.show();
      } else {
        page.arrowsWidget.right.hide();
      }

      if (focusItem.index >= page.content.size - 1) {
        page.arrowsWidget.down.hide();
      } else {
        page.arrowsWidget.down.show();
      }
      if (!page.scrollTopValue) {
        page.arrowsWidget.up.hide();
      } else {
        page.arrowsWidget.up.show();
      }
    } else if (focusItem) {
      page.arrowsWidget.left.hide();
      page.arrowsWidget.right.hide();

      if (!focusItem.y) {
        page.arrowsWidget.up.hide();
      } else {
        page.arrowsWidget.up.show();
      }
      if (focusItem.y >= page.total_rows - 1) {
        page.arrowsWidget.down.hide();
      } else {
        page.arrowsWidget.down.show();
      }
    }
  }, 0);
}

function moveArrows(data) {
  if (data.index) {
    if (data.data.movies) {
      page.arrowsWidget.setArrowProperty('left', {
        paddingTop: 0
      });
      page.arrowsWidget.setArrowProperty('right', {
        paddingTop: 0
      });
    } else {
      page.arrowsWidget.setArrowProperty('left', {
        paddingTop: 0
      });
      page.arrowsWidget.setArrowProperty('right', {
        paddingTop: 0
      });
    }
  } else {
    var paddingTop = 85;
    if(data.data && data.data.movies) {
      paddingTop = 120;
    }
    page.arrowsWidget.setArrowProperty('left', {
      paddingTop: paddingTop
    });
    page.arrowsWidget.setArrowProperty('right', {
      paddingTop: paddingTop
    });
  }
}

page.renderAutoRenew = function (is_active) {
  if (is_active) {
    page.$$subscriptionButtonsContainer.add(page.$$autoRenewInfo);
    page.$$autoRenewInfo.text(i18nMgg('auto_renew_on_2'));
    page.$$autoRenewInfo.show();
  } else {
    page.$$autoRenewInfo.hide();
  }
};

function prepareConfig(subscription, subscription_type) {
  var query_config = {
    url: 'tvExtended',
    query_params: {
      subscription_ids: subscription.subscription_id,
      channels_sort: 'genre_score'
    }
  };
/* @TODO delete, if everything ok
  if (subscription_type == 'main') {
    sale_collection_id = subscriptionService.getSaleSubscriptionId(subscription);

    if (sale_collection_id) {
      query_config.query_params = {
        id: sale_collection_id,
        limit: 48
      };
      query_config.url = 'videoCollection';
    } else {
      query_config.query_params.vod = 'subscription';
      query_config.url = 'video';
    }
  }
*/
  return query_config;
}
function addMoviesCartoons(init_data) {
  return new Promise(function (resolve, reject) {
    sale_collection_id = subscriptionService.getSaleSubscriptionId(init_data.paidSubscription);

    if (sale_collection_id) {
      init_data.collection_videos = [];
      api.load('videoCollection', {
        id: sale_collection_id,
        category_id: 16,
        vod: 'subscription, free'
      }).then(function (data) {
        if (data.video_list && data.video_list.length) {
          init_data.collection_videos.push({
            movies: data.video_list,
            title: i18nMgg('movies_noun')
          });
        }
      }, function (e) {
        console.log('ERROR');
        console.log(e);
      }).then(function () {
        api.load('videoCollection', {
          id: sale_collection_id,
          category_id: 6,
          vod: 'subscription, free'
        }).then(function (data) {
          if (data.video_list && data.video_list.length) {
            init_data.collection_videos.push({
              movies: data.video_list,
              title: i18nMgg('cartoons_noun')
            });
          }
          resolve(init_data);
        }, function (e) {
          resolve(init_data);
          console.log('ERROR');
          console.log(e);
        });
      });
    } else {
      resolve(init_data);
    }
  })
}

// public
module.exports = page;

},{"core/animate":14,"core/api":15,"core/app":16,"core/components/button":19,"core/components/label":22,"core/components/list":23,"core/components/page":25,"core/components/panel":26,"core/dom":31,"core/lib/helpFunctions":34,"core/paymentModel":41,"core/promise":43,"core/router":45,"core/tools/paymentService":51,"core/tools/subscriptionService":54,"ui/channel-item":114,"ui/film-item-small":118,"ui/subscription-block":128,"vendor/aura/keys":133,"widgets/loader":149,"widgets/menu-left":150,"widgets/popup/popup-results":159,"widgets/popup/popup-tariffs-subscription":160}],106:[function(require,module,exports){
'use strict';

var id = 'pageSubscription',
  animate = require('core/animate'),
  Page = require('core/components/page'),
  router = require('core/router'),
  keys = require('vendor/aura/keys'),
  List = require('core/components/list'),
  dom = require('core/dom'),
  LeftMenu = require('widgets/menu-left'),
  api = require('core/api'),
  Loader = require('widgets/loader'),
  helpFunctions = require('core/lib/helpFunctions'),
  subscriptionService = require('core/tools/subscriptionService'),
  SubscriptionBlock = require('ui/subscription-block'),
  app = require('core/app'),
  Button = require('core/components/button'),
  Background = require('widgets/background/background'),
  PopUpPincode = require('widgets/popup/popup-pincode'),
  paymentModel = require('core/paymentModel'),
  Grid = require('core/components/grid'),
  paymentService = require('core/tools/paymentService'),
  menuNavigateService = require('core/tools/menuNavigateService'),
  wTariffsSubscription = require('widgets/popup/popup-tariffs-subscription');


var page = new Page({
  $node: dom.tag('div', {id: id}),
  $body: dom.tag('div', {id: id+ 'Container'}),
  append_to_body: true,
  header: '',
  rendered: false,
  arrows: {
    right: {
      show: false
    },
    left: {
      show: false
    },
    up: {},
    down: {}
  },
  arrowsUpdate: showHideArrows,
  keys: {
    RETURN: function() {
      if (!LeftMenu.isVisible()) {
        page.content.clear(); //@TODO refactor BACK-CLEAR
        router.back();
      }
    }
  }
});

page.updateData = function(subscription_id) {
  Loader.show();
  api.load('tvExtended').then(function(data) {
    Loader.hide();
    page.tvPackages = data.packages;
    var subscription_index = 0;
    page.tvPackages.forEach(function(tvPackage, i) {
      tvPackage.paidSubscription = subscriptionService.getSubscriptionById(tvPackage.id, app.dataStorage.subscriptionInfo); //need change id
      if(tvPackage.id == subscription_id) {
        subscription_index = i;
      }
      // tvPackage.subscription = subscription;
    });

    updateContent(page.tvPackages, subscription_index);
  }).catchError(function(e) {
    console.log(e);
    alert('ERROR');
    Loader.hide();
    router.back();
  });

  function updateContent(data, subscription_index) {
    page.rendered = true;
    page.content.clear();
    page.content.init({
      data: data,
      focusIndex: subscription_index
    });

    showHideArrows();
  }
};

page.addListener('load', function() {
  page.content = new List({
    type: List.prototype.TYPE_VERTICAL,
    className: 'subscriptions-list',
    events: {
      'click:item': function(data) {
        //this.emit(data.$item.data.action);
      },
      'overflow': function(data) {

      },
      'focus': function() {
        if(page.content.$focusItem && page.content.$focusItem.$$lastFocus) {
          page.content.$focusItem.$$lastFocus.focus();
        }
      },
      'focus:item': function(data) {
        var top = -140;

        if (data.$curr.index) {
          top = data.$curr.getBoundingClientRect().top - parseInt(page.scrollTopValue || 0);
          top -= (data.$curr.offsetHeight / 2 - 75);
          page.header.shadeOn();
        } else {
          page.header.shadeOff();
        }

        if (data.$curr.$$lastFocus) {
          data.$curr.$$lastFocus.focus(); //maybe dont need
        }
        page.scrollTop(top);
      }
    },
    render: function($item, data) {
      $item.subscriptionBlock = dom.tag('div', {
          className: 'subscription'
        },
        $item.subscriptionContainer = dom.tag('div', {
            className: 'subscription__wrap'
          } //,//,
          /*$item.subscriptionInfo = dom.tag('div', {
           className: 'subscriptionInfo'
           },
           $item.subscriptionHeader = dom.tag('div', {
           className: 'subscriptionHeader'
           }),
           $item.subscriptionDescription = dom.tag('div', {
           className: 'subscriptionDescription'
           }),
           $item.subscriptionItemInfo = dom.tag('div', {
           className: 'subscriptionItemInfo'
           }),

           ),*/
        ));

      $item.subscriptionActionButtons = dom.tag('div', {
        className: 'subscription__action-buttons'
      });
      var $$subscriptionBlock = new SubscriptionBlock(data);
      $item.subscriptionContainer.appendChild($$subscriptionBlock.$node);

      $$subscriptionBlock.$subscriptionInfo.appendChild($item.subscriptionActionButtons);

      if (data.channels_num && data.channels_num > 10) {
        $item.subscriptionContainer.classList.add('js_withShadow');
      }

      $item.subscriptionContent = dom.tag('div', {
          className: 'subscription__content'
        },
        $item.subscriptionChannels = dom.tag('div', {
          className: 'subscription__channels'
        }),
        $item.subscriptionMovies = dom.tag('div', {
          className: 'subscription__channels'
        })
      );

      $item.subscriptionContainer.appendChild($item.subscriptionContent);
      var channels = data.channels.slice(0, 12);
      var channelsPerRow = data.channels ? Math.round(channels.length / 2) : 0;
      var greedData = helpFunctions.formatDataForGreed(channels, channelsPerRow);
      //var subscriptionContainerLeft = 0;


      $item.subscriptionChannelsGrid = new Grid({
        data: greedData,
        cycleX: false,
        cycleY: false,
        focusable: false,
        className: 'subscription__greed',
        events: {
          'click:item': function(data) {},
          'mouseover': function(data) {
            /* this.focus();
             this.focusItem(data.$item, {
             no_emit: true
             });*/
          },
          overflow: function(event) {
            /* if (event.direction === keys.LEFT) {
             if (data.subscription) {
             $$detailedButton.focus();
             } else {
             LeftMenu.showMenu();
             }
             } else if (event.direction === keys.DOWN) {
             page.content.move(keys.DOWN)
             } else if (event.direction === keys.UP) {
             page.content.move(keys.UP);
             }*/
          },
          'focus:item': function(data) {
            $item.$$lastFocus = this;
            /*
             var curentItem = data.$curr;

             if (curentItem.x < channelsPerRow - 2) {
             subscriptionContainerLeft = -1 * (curentItem.x) * data.$curr.offsetWidth;
             subscriptionContainerLeft = subscriptionContainerLeft ? subscriptionContainerLeft + 60 : subscriptionContainerLeft;
             }

             animate($item.subscriptionContainer, mainConfigMgg.animation.duration.speed2, {
             left: subscriptionContainerLeft,
             });*/
          }
        },
        render: function($item, data) {
          $item.channelItem = dom.tag('div', {
              className: 'channel'
            },
            dom.tag('div', {
                className: 'channel__wrap'
              },
              $item.channelItemImage = dom.tag('div', {
                className: 'channel__img'
              }),
              $item.channelItemImageSubsDefault = dom.tag('div', {
                className: 'channel__img-def'
              })
              /*,
                               dom.tag('div', {
                               className: 'channelItemText'
                               },
                               $item.channelItemTextTitle = dom.tag('div', {
                               className: 'channelItemTextTitle'
                               }),
                               $item.channelItemTextGenre = dom.tag('div', {
                               className: 'channelItemTextGenre'
                               }))*/
            )
          );

          // $item.channelItemTextTitle.textContent = data.title;
          //  $item.channelItemTextGenre.textContent = helpFunctions.getGenreByIds(data.genres);
          $item.channelItemImage.style.backgroundImage = 'url(' + data.image.small + ')';
          $item.appendChild($item.channelItem);
        }
      });

      // var movieGreedData = [require('pages/movies/tmp/subs-data').data.video_list];
      var movieGreedData = (data.videos) ? [data.videos] : [];

      $item.subscriptionMoviesGrid = new Grid({
        data: movieGreedData,
        cycleX: false,
        cycleY: false,
        focusable: false,
        className: 'subscription__greed',
        render: function($item, data) {
          $item.movieItem = dom.tag('div', {
              className: 'channel movie'
            },
            dom.tag('div', {
                className: 'channel__wrap'
              },
              $item.movieItemImage = dom.tag('div', {
                className: 'channel__img'
              }),
              $item.movieItemImageDefault = dom.tag('div', {
                className: 'channel__img-def'
              })
              /*,
                               dom.tag('div', {
                               className: 'channelItemText'
                               },
                               $item.movieItemTextTitle = dom.tag('div', {
                               className: 'channelItemTextTitle'
                               }),
                               $item.movieItemTextGenre = dom.tag('div', {
                               className: 'channelItemTextGenre'
                               }))*/
            )
          );

          /*   $item.movieItemTextTitle.textContent = data.title;
           $item.movieItemTextGenre.textContent = helpFunctions.getGenreByIds(data.genres);
           */
          $item.movieItemImage.style.backgroundImage = 'url(' + data.image.small + ')';
          $item.appendChild($item.movieItem);
        }
      });

      var buttonValue = (data.paidSubscription && data.paidSubscription.tariffs[0].is_try_and_buy) ? i18nMgg('try_button') : i18nMgg('get_button');

      var $$subscribeButton = new Button({
        className: 'subscription__btn',
        value: buttonValue,
        events: {
          click: function() {

            api.PC_Check().then(function() {
              page.pcInfo = app.dataStorage.pc_info;

              var nowTime = Math.floor(new Date().getTime() / 1000);
              var pcCookieTime = nowTime - mainConfigMgg.parentalControlTimer;
              var pcLifetime = app.dataStorage.configuration.parental_controls_lifetime;

              var itemInfo = page.content.$focusItem.data;
              var subscription = itemInfo.paidSubscription;

              if (page.pcInfo.status &&
                (mainConfigMgg.parentalControlTimer == -1 || pcCookieTime > pcLifetime) &&
                page.pcInfo.purchase_restriction) {
                PopUpPincode.show({
                  title: itemInfo.title,
                  subTitle: setTariffSubtitle(subscription),
                  pinCode: page.pcInfo.code,
                  type: 'payment-pin',
                  subscription: subscription,
                  text: i18nMgg('pc_payment_pin'),
                  buttonText: i18nMgg('next')
                });
              } else {
                paymentService.getSubscriptionActionHandler(subscription, page.content.$focusItem.$$lastFocus);
              }
            });

          },
          focus: function() {
            $item.$$lastFocus = this;
          },
          mouseover: function() {
            this.focus();
          },
          'mousewheel': function(event) {
            if (event.deltaY < 0) {
              page.content.move(keys.UP);
            }
            if (event.deltaY > 0) {
              page.content.move(keys.DOWN);
            }
          }
        },
        keys: {
          RIGHT: function() {
            $$detailedButton.focus();
          },
          LEFT: function() {
            if (!PopUpPincode.visible) {
              LeftMenu.showMenu({
                'componentToFocus': $$subscribeButton
              });
            }

          },
          DOWN: function() {
            page.content.move(keys.DOWN)
          },
          UP: function() {
            page.content.move(keys.UP)
          },
          RETURN: function() {
            page.content.clear(); //@TODO refactor BACK-CLEAR
            router.back();
          }
        }
      });
      var $$detailedButton = new Button({
        className: 'subscription__btn',
        value: i18nMgg('more_info'),
        events: {
          click: function() {
            menuNavigateService.navigateToSalesLanding(data.id);
          },
          focus: function() {
            $item.$$lastFocus = this;
          },
          mouseover: function() {
            this.focus();
          },
          'mousewheel': function(event) {
            if (event.deltaY < 0) {
              page.content.move(keys.UP);
            }
            if (event.deltaY > 0) {
              page.content.move(keys.DOWN);
            }
          }
        },
        keys: {
          RIGHT: function() {
            $item.subscriptionChannelsGrid.focus();
          },
          LEFT: function() {
            $$subscribeButton.focus();
          },
          DOWN: function() {
            page.content.move(keys.DOWN)
          },
          UP: function() {
            page.content.move(keys.UP)
          },
          RETURN: function() {
            page.content.clear(); //@TODO refactor BACK-CLEAR
            router.back();
          }
        }
      });
      $item.subscriptionChannels.appendChild($item.subscriptionChannelsGrid.$node);

      $$detailedButton.focus();

      var movies_count = data.videos_num ? Math.floor(data.videos_num / 100) * 100 : 0;
      if (movies_count) {
        $item.subscriptionMovies.appendChild($item.subscriptionMoviesGrid.$node);
      }

      if (data.paidSubscription) {
        $$subscribeButton.focus();
        $item.subscriptionActionButtons.appendChild($$subscribeButton.$node);
        $item.subscriptionActionButtons.appendChild($$detailedButton.$node);

      }
      $item.appendChild($item.subscriptionBlock);
    }
  });

  page.add(page.content);
});

/**
 * Listeners
 */
page.addListener('show', function(data) {

  page.header.setTitle(i18nMgg('tv_section_title'));
  if(LeftMenu.menuItems['tv_section/']) {//@TODO need refactor
    LeftMenu.addSelectedClass(LeftMenu.menuItems['tv_section/'].data.id);
    LeftMenu.leftMenu.catList.focusItem(LeftMenu.menuItems['tv_section/'], {force_focus: true});
  }

  LeftMenu.openSubMenu();//@TODO need refactor later

  wTariffsSubscription.addListener('hide', hideTariffsSubscription);
  wTariffsSubscription.addListener('show', showTariffsSubscription);
  PopUpPincode.addListener('hide', hidePinPopUpCallback);
  PopUpPincode.addListener('correctPinPayment', correctPinCallback);
  page.content.focus();
  if (helpFunctions.isNavigateBack(data)) {
    LeftMenu.showContainer();
    showHideArrows();
    return;
  }

  this.updateData();
});

page.addListener('hide', function() {
  wTariffsSubscription.removeListener('hide', hideTariffsSubscription);
  wTariffsSubscription.removeListener('show', showTariffsSubscription);
  PopUpPincode.removeListener('hide', hidePinPopUpCallback);
  PopUpPincode.removeListener('correctPinPayment', correctPinCallback);

});



function hidePinPopUpCallback() {
  page.content.$focusItem.$$lastFocus.focus();
}


function showTariffsSubscription() {
  page.arrowsWidget.disabled = true;
  page.arrowsWidget.hideArrows();
}

function hideTariffsSubscription() {
  hidePinPopUpCallback();
  page.arrowsWidget.disabled = false;
}

function correctPinCallback() {
  paymentService.getSubscriptionActionHandler(page.content.$focusItem.data.paidSubscription, page.content.$focusItem.$$lastFocus);
}


function setTariffSubtitle(subsItem) {
  if (subsItem.tariffs[0].is_try_and_buy) {
    return i18nMgg('try_for') + ' ' + subsItem.tariffs[0].price + ' ' + subsItem.currency;
  } else {
    return subsItem.tariffs[0].price + ' ' + subsItem.currency + ' ' + i18nMgg('for_month');
  }

}
function showHideArrows() {
  setTimeout(function() {
    if (page.content && page.content.$focusItem) {
      if (!page.content.$focusItem.index) {
        page.arrowsWidget.up.hide();
      } else {
        page.arrowsWidget.up.show();
      }

      if (page.content.$focusItem.index >= page.content.size - 1) {
        page.arrowsWidget.down.hide();
      } else {
        page.arrowsWidget.down.show();
      }
    }
  }, 0);
}
// public
module.exports = page;

},{"core/animate":14,"core/api":15,"core/app":16,"core/components/button":19,"core/components/grid":21,"core/components/list":23,"core/components/page":25,"core/dom":31,"core/lib/helpFunctions":34,"core/paymentModel":41,"core/router":45,"core/tools/menuNavigateService":49,"core/tools/paymentService":51,"core/tools/subscriptionService":54,"ui/subscription-block":128,"vendor/aura/keys":133,"widgets/background/background":141,"widgets/loader":149,"widgets/menu-left":150,"widgets/popup/popup-pincode":158,"widgets/popup/popup-tariffs-subscription":160}],107:[function(require,module,exports){
'use strict';

var id = 'pageSubscriptionMovies',
  api = require('core/api'),
  Button = require('core/components/button'),
  dom = require('core/dom'),
  ErrorBlock = require('widgets/popup/popup-error'),
  FilmItem = require('ui/film-item'),
  Grid = require('core/components/grid'),
  helpFunctions = require('core/lib/helpFunctions'),
  keys = require('vendor/aura/keys'),
  LeftMenu = require('widgets/menu-left'),
  Loader = require('widgets/loader'),
  Page = require('core/components/page'),
  Panel = require('core/components/panel'),
  router = require('core/router'),
  rightMenu = require('widgets/menu-right'),
  PopUpList = require('widgets/popup/popup-list'),
  subscriptionService = require('core/tools/subscriptionService'),
  page_info, subscription, sale_subscription_id, subscription_id, greedData, RightMenu;

var page = new Page({
  $node: dom.tag('div', {id: id}),
  $body: dom.tag('div', {id: id+ 'Container'}),
  append_to_body: true,
  header: '',
  arrows: {
  },
  arrowsUpdate: showHideArrows,
  keys: {
    BLUE: function() {
      if (!LeftMenu.isVisible()) {
        if (page.$$lastFocus == page.content) {
          RightMenu.activate();
        } else {
          page.content.focus();
        }
      }
    },
    RED: function() {
      if (page.$$lastFocus == page.content) {
        if (!LeftMenu.isVisible()) {
          LeftMenu.showMenu();
        } else if (LeftMenu.isVisible()) {
          LeftMenu.hideMenu();
        }
      }
    }
  }
});

/**
 * @TODO almost the same page as movies-category, maybe need to move this page in movies-category
 */

page.addListener('load', function() {
  this.items_per_row = 5;
  this.total_rows = 0;
  this.sale_subscription_id = null;
  page.content = new Grid({
    cycleX: false,
    cycleY: false,
    focusIndex: 0,
    className: 'movie-grid',
    keys: {
      RETURN: function() {
        router.back();
        page.content.clear(); //@TODO refactor BACK-CLEAR
      }
    },
    events: {
      'click:item': function(data) {
        router.navigate('pageMovie', [data.$item.data.id]);
      },
      'mouseover': function(data) {
        page.content.focus();
        page.content.focusItem(data.$item, true);
        showHideArrows();
      },
      overflow: function(data) {
        if (data.direction === keys.LEFT && data.type !== 'mousewheel') {
          LeftMenu.showMenu({
            'componentToFocus': page.content
          });
        } else if (data.direction === keys.RIGHT && data.type !== 'mousewheel') {
          RightMenu.activate();
        } else if (data.direction === keys.UP && data.type !== 'mousewheel') {
          if (page.sortResultsActivated) {
            page.sortResultsButton.focus();
          } else {
            if (RightMenu.visible) {
              RightMenu.activate();
            }
          }
        }
      },
      focus: function() {
        page.$$lastFocus = this;
      },
      'focus:item': function(data) {

        if (data.$curr.y > 0) {
          var top = data.$curr.parentElement.offsetHeight * data.$curr.y;
          page.header.shadeOn();
          top -= 71 - page.sortResults.$node.offsetHeight; //move block to center
        } else {
          page.header.shadeOff();
          top = 0;
        }

        if ((page.content.map.length - data.$curr.y) == 2) {
          if (page.total > parseInt(page.offset) + page.limit) {
            page.offset = parseInt(page.offset) + page.limit;
            page.loadData({
              lazy_load: true
            })
          }
        }

        page.scrollTop(top);
      }
    },
    render: function($item, data) {
      FilmItem($item, data);
    }
  });

  page.sortResults = new Panel({
    className: 'sort-results-container',
    visible: false
  });

  page.sortResultsText = new Panel({
    className: 'sort-results-text'
  });

  page.sortResultsButton = new Button({
    className: 'sort-results-button',
    visible: true,
    focusable: true,
    events: {
      click: function() {
        setDefaultParams(page);

        page.sortResults.hide();
        page.loadData();
      }
    },
    keys: {
      UP: function() {
        if (RightMenu.visible) {
          RightMenu.activate();
        }
      },
      LEFT: function() {
        LeftMenu.showMenu();
      },
      RIGHT: function() {
        if (RightMenu.visible) {
          RightMenu.activate();
        }
      },
      DOWN: function() {
        page.content.focus();
      },
      RETURN: function() {
        router.back();
        page.content.clear(); //@TODO refactor BACK-CLEAR
      }
    }
  });

  page.sortResults.add(page.sortResultsText, page.sortResultsButton);
  RightMenu = new rightMenu();

  page.$node.appendChild(RightMenu.$node);
  page.add(page.sortResults);
  page.add(page.content);

  page.addListener('show', function(data) {
    page.header.setTitle(i18nMgg('movie_by_subscription'));
    page.arrowsWidget.addClass('short-up-arrow');
    page.arrowsWidget.focusCallback = rightMenuPressLeftCallback;

    RightMenu.show();
    RightMenu.activate();

    RightMenu.list.addListener('click:item', rightMenuClickItemCallback);
    RightMenu.list.addListener('key:left', rightMenuPressLeftCallback);
    RightMenu.list.addListener('focus', rightMenuFocusCallback);
    RightMenu.list.$node.classList.add('filter_open');

    PopUpList.addListener('change', popUpListChange);
    PopUpList.addListener('show', popUpListShow);
    PopUpList.addListener('hide', popUpListHide);

    if (helpFunctions.isNavigateBack(data)) {
      page.renderFilters();
      page.content.focus();
      return;
    }

    page.sale_subscription_id = getSaleSubscriptionId(data);

    setDefaultParams(page);
    page.loadData();
  });

  page.addListener('hide', function() {
    page.arrowsWidget.removeClass('short-up-arrow');
    page.arrowsWidget.focusCallback = null;
    RightMenu.hide();
    RightMenu.deActivate();
    RightMenu.list.removeListener('click:item', rightMenuClickItemCallback);
    RightMenu.list.removeListener('key:left', rightMenuPressLeftCallback);
    RightMenu.list.removeListener('focus', rightMenuFocusCallback);
    RightMenu.list.$node.classList.remove('filter_open');

    PopUpList.removeListener('change', popUpListChange);
    PopUpList.removeListener('hide', popUpListHide);
    PopUpList.removeListener('show', popUpListShow);
  });

  page.loadData = function(params) {
    params = params || {};

    var set_data_method = 'init';

    if (params.lazy_load) {
      set_data_method = 'addData';
    } else {
      Loader.show();
      page.renderFilters();
    }

    var query_params = {
      url: 'subscription',
      config: {
        limit: page.limit,
        offset: page.offset
      }
    };

    if (page.filter_category) {
      if (parseInt(page.filter_category.id)) {
        query_params.config.category_id = page.filter_category.id;
      } else {
        query_params.config.sort = page.filter_category.id;
      }
    }


    //Temporary commented or permanent - depends from API laziness
    // new sort name added instead of editors_choice
/*
    if(page.sale_subscription_id) {
      query_params.url = 'videoCollection';
      query_params.config.id = page.sale_subscription_id;
      query_params.config.vod = 'subscription';
    }*/

    api.load(query_params.url, query_params.config).then(function(data) {
      if(!page.active) {
        return;
      }
      page.total = data.total;
      page.total_rows = Math.ceil(page.total / page.items_per_row);

      greedData = helpFunctions.formatDataForGreed(data.video_list, page.items_per_row);

      if (!greedData.length) {
        ErrorBlock.show({
          backLable: function () {
            router.back();
          },
          text: i18nMgg('nothing_found'),
          buttons: [
            {
              text: i18nMgg('close'), callback: function () {
              router.back();
            }
            }
          ]
        });
      } else {
        page.content[set_data_method]({
          data: greedData
        });
        page.content.focus();
        showHideArrows();
      }

      Loader.hide();
    }).catchError(function(e) {
      console.log(e);
      alert('ERROR');
      Loader.hide();
      router.back();
      page.content.clear(); //@TODO refactor BACK-CLEAR
    })
  };

  page.renderFilters = function() {
    RightMenu.init([{
      title: page.filter_category.title,
      mark: page.filter_changed,
      data: {
        header_title: i18nMgg('sort_title'),
        type: 'filter_category',
        mark: page.filter_category.id,
        content: [{
          title: i18nMgg('popular'),
          id: 'popular'
        }, {
          title: i18nMgg('editors_choice'),
          id: 'position'
        }, {
          title: i18nMgg('movies_noun'),
          id: 16
        }, {
          title: i18nMgg('series_noun'),
          id: 4
        }, {
          title: i18nMgg('cartoons_noun'),
          id: 6
        }]
      }
    }]);
  };

  //not using now, maybe will need later
  page.activateFilterResults = function() {
    if (page.filter_category && page.filter_changed) {
      page.sortResultsActivated = true;
      page.sortResults.show();
      page.sortResultsButton.setValue(i18nMgg('filter_clear'));
      page.sortResultsText.$node.textContent = i18nMgg('filter_found') + ' ' + page.total + ' ' + helpFunctions.getValueText(page.total, 'text_movie');
    } else {
      page.deActivateFilterResults();
    }
  };
  page.deActivateFilterResults = function() {
    page.sortResultsActivated = false;
    page.sortResults.hide();
  };
});

function showHideArrows() {

  setTimeout(function() {
    if (page.content.$focusItem) {
      if (!page.content.$focusItem.y) {
        page.arrowsWidget.up.hide();
      } else {
        page.arrowsWidget.up.show();
      }
      if (page.content.$focusItem.y >= page.total_rows - 1) {
        page.arrowsWidget.down.hide();
      } else {
        page.arrowsWidget.down.show();
      }
    }
  }, 0);
}

function getSaleSubscriptionId(data) {
  page_info = null;
  subscription = null;
  subscription_id = null;
  sale_subscription_id = null;


  if (data && data.data && data.data.length) {
    try {
      page_info = JSON.parse(data.data[0]);
      subscription_id = page_info.subscription_id;
    } catch (e) {
      console.log(e);
    }
  }

  if (subscription_id) {
    subscription = subscriptionService.getSubscriptionById(subscription_id);
    if(subscription){
      sale_subscription_id = subscriptionService.getSaleSubscriptionId(subscription);
    }
  }
  return sale_subscription_id;
}

function popUpListShow() {
  page.arrowsWidget.focusCallback = null;
}

function popUpListChange(data) {
  page.filter_changed = true;
  page.offset = '0';
  page[data.type] = data.data;
  page.loadData();
}

function popUpListHide() {
  page.arrowsWidget.focusCallback = rightMenuPressLeftCallback;
  page.content.focus();
}

function setDefaultParams(env) {
  if (page.content) {
    page.content.clear();
  }
  page.resetScroll();
  env.limit = 20;
  env.offset = '0';
  page.sortResultsActivated = false;
  if(subscriptionService.hasSubscriptionByType('main')) {
    env.filter_category = {
      title: i18nMgg('editors_choice'),
      id: 'position'
    };
  } else {
    env.filter_category = {
      title: i18nMgg('popular'),
      id: 'popular'
    };
  }


  env.filter_changed = false;

}

function rightMenuClickItemCallback(data) {
  PopUpList.show(data.$item.data.data);
}

function rightMenuPressLeftCallback() {
  page.content.focus();
}

function rightMenuFocusCallback() {
  page.$$lastFocus = RightMenu.list;
}
// public
module.exports = page;

},{"core/api":15,"core/components/button":19,"core/components/grid":21,"core/components/page":25,"core/components/panel":26,"core/dom":31,"core/lib/helpFunctions":34,"core/router":45,"core/tools/subscriptionService":54,"ui/film-item":119,"vendor/aura/keys":133,"widgets/loader":149,"widgets/menu-left":150,"widgets/menu-right":151,"widgets/popup/popup-error":153,"widgets/popup/popup-list":155}],108:[function(require,module,exports){
'use strict';

var id = 'pageSubscriptionRestriction',
  Button = require('core/components/button'),
  dom = require('core/dom'),
  keys = require('vendor/aura/keys'),
  Page = require('core/components/page'),
  Panel = require('core/components/panel'),
  SupportInfo = require('widgets/support-info'),
  subscriptionService = require('core/tools/subscriptionService'),
  router = require('core/router')
  ;

var page = new Page({
  $node: dom.tag('div', {id: id}),
  $body: dom.tag('div', {id: id+ 'Container'}),
  append_to_body: true,
  header: '',
  back_button: {
    'clickCallBack': function() {
      router.back();
    }
  }
});

page.addListener('load', function(data) {

  page.subscriptionRest = new Panel({
    className: 'restriction',
    $node: dom.tag('div',{className: 'restriction'},
      page.icon = dom.tag('div', {className: 'restriction__icon'}),
      page.text = dom.tag('div', {className: 'restriction__text'}),
      page.smallText = dom.tag('div', {className: 'restriction__text_small'})

    )
  }
  );

  page.buttonRest = new Button({
    focusable: true,
    className: 'restriction__btn',
    events:{
      click: function () {
        page.backButton.emit('click');
      }
    },
    keys: {
      LEFT: function () {
        page.backButton.focusButton(this);
      },
      RETURN: function() {
        page.backButton.emit('click');
      }
    }
  });

  page.add(page.subscriptionRest);
  page.subscriptionRest.add(page.buttonRest);
});


/**
 * Listeners
 */
page.addListener('show', function(data) {
  if(data.data[0]){
    page.header.setTitle(data.data[0].title);
    page.text.innerHTML = addSubsTitleInString(i18nMgg('subs_geo_restriction'), data.data[0].subscription_id);
    page.smallText.innerHTML = i18nMgg('subs_geo_restriction_small');
  }
  else {
    console.log('ERROR data title')
  }

  page.buttonRest.setValue(i18nMgg('choose_subscription'));

  SupportInfo.show({type: 'payment'});

  page.buttonRest.focus()
});

page.addListener('hide', function() {
  SupportInfo.hide();
});

function addSubsTitleInString(text, subsID) {
  return text.replace('[name]', subscriptionService.getSubscriptionTitle(subsID));
}

// public
module.exports = page;

},{"core/components/button":19,"core/components/page":25,"core/components/panel":26,"core/dom":31,"core/router":45,"core/tools/subscriptionService":54,"vendor/aura/keys":133,"widgets/support-info":163}],109:[function(require,module,exports){
var channelsStore = require('state/channels_store'),
  Model = require('core/model'),
  epgAction = require('state/epg_actions'),
  helpFunctions = require('core/lib/helpFunctions'),
  api = require('core/api');

var channelsCollection = channelsStore.get('channels');

var actions = {
  startChannel: function () {
    console.log(playerActions);
  },
  initFetch: function () {
    if (!channelsStore.get('is_loaded')) {
      this.fetch();
    }
  },
  fetch: function () {
    if (channelsStore.get('error')) {
      channelsStore.set('error', null);
    }
    if (!channelsStore.get('is_loading')) {
      channelsStore.set('is_loading', true);
      api.load('tvChannels').then(function (data) {
        if (data && data.channels && data.channels.length) {
          for (var i = 0; i < data.channels.length; i++) {
            data.channels[i] = new Model(data.channels[i]);
          }
        }
        epgAction.setPrograms(data.epg_programs);
        channelsCollection.init(data.channels);
        if (!channelsStore.get('current_channel'))
          actions.setCurrentChannel();
        channelsStore.set('is_loading', false);
        channelsStore.set('is_loaded', true);
        // epgAction.fetch();

      }).catchError(function (e) {
        channelsStore.set('error', e);
        channelsStore.set('is_loading', false);
      });
    }
  },
  setCurrentChannel: function (channel) {
    var current_channel;

    if (channel) {
      current_channel = channel;
    }
    if (!current_channel) {
      current_channel = channelsCollection.get(helpFunctions.getLastWatchedTv())
    }
    if (!current_channel) {
      current_channel = channelsCollection.at(0);
    }
    channelsStore.set('current_channel', current_channel);
    if (current_channel)
      helpFunctions.updateLastWatchedTv(current_channel.get('id'));
  }
};
module.exports = actions;

},{"core/api":15,"core/lib/helpFunctions":34,"core/model":40,"state/channels_store":110,"state/epg_actions":111}],110:[function(require,module,exports){
var Model = require('core/model'),
  helpFunctions = require('core/lib/helpFunctions'),
  Collection = require('core/collection');

var channelsStore = new Model({
  is_loading: false,
  is_loaded: false,
  error: null,
  current_channel: null,
  genres_channels: [],
  channels: new Collection(),
  epg: new Model({})
});

channelsStore.getChannelEpgByTime = function (channel, time) {
  var epg_id = channel && 'c_' + channel.get('epg_id');
  var epg = epg_id && channelsStore.get('epg').get(epg_id);
  if (epg) {
    time = parseInt(time);
    for (var i = 0; i < epg.programs.length; i++) {
      if (epg.programs[i].start_timestamp <= time && epg.programs[i].end_timestamp > time)
        return epg.programs[i];
    }
  }
};

channelsStore.get('channels').addListener('change', function (data) {
  var channels_by_genre = groupByGenre(data);
  channelsStore.set('genres_channels', channels_by_genre);
});

function groupByGenre(data) {
  var genresTemp = [];
  var genresList = [];
  var channel = null;
  var genre = null;
  for (var i = 0, len = data.data.length; i < len; i++) {
    channel = data.data[i].data;
    genre = helpFunctions.getGenreById(channel.genres[0]);

    if (channel.is_favorite) {
      if (!genresTemp[1]) {
        genresTemp[1] = {
          title: i18nMgg('favourite_tv_title'),
          id: 1,
          channels: [channel.id]
        };
      } else {
        genresTemp[1].channels.push(channel.id);
      }
    } else {
      var genre_key = 'g_' + channel.genres[0];
      var genre_image = genre.images && genre.images.length && genre.images[0] ? genre.images[0].url : '';
      if (!genresTemp[genre_key]) {
        genresTemp[genre_key] = {
          title: genre.title,
          image: genre_image,
          id: channel.genres[0],
          channels: [channel.id]
        };
      } else {
        genresTemp[genre_key].channels.push(channel.id);
      }
    }
  }

  for (var genreItem in genresTemp) {
    genresList.push(genresTemp[genreItem]);
  }

  genresTemp = null;
  return genresList;
}
module.exports = channelsStore;

},{"core/collection":17,"core/lib/helpFunctions":34,"core/model":40}],111:[function(require,module,exports){
var epgStore = require('state/epg_store'),
  channelsStore = require('state/channels_store'),
  Model = require('core/model'),
  helpFunctions = require('core/lib/helpFunctions'),
  api = require('core/api');

var last_query_time = {};
var query_time_range = 12 * 60 * 60;

var actions = {
  fetch: function (conf) {
    var from = conf && conf.from || parseInt(helpFunctions.getTimestampNow() - query_time_range);
    var to = conf && conf.to || parseInt(helpFunctions.getTimestampNow() + query_time_range);
    var channel_id = conf && conf.channel_id || channelsStore.get('channels').data.map(function (r) {
        return r.get('id')
      });

    if (!channel_id || channel_id.length == 0) return;

    if (epgStore.get('error')) {
      epgStore.set('error', null);
    }
    if (!epgStore.get('is_loading')) {
      if (!isAvailableLoad(channel_id, from, to)) return;
      epgStore.set('is_loading', true);
      api.load('epg', {
        channel_id: channel_id,
        from: from,
        to: to
      }).then(function (r) {
        epgStore.set('is_loading', false);
        epgStore.set('is_loaded', true);
        actions.setPrograms(r);
      }).catchError(function (e) {
        epgStore.set('is_loading', false);
        console.error(e);
      });
    }
  },
  setPrograms: function (programs) {
    var epgCollection = epgStore.get('epgs');
    var is_init = epgStore.get('is_init');
    var newEpg = [];
    var updated = false;
    for (var i = 0; i < programs.length; i++) {
      if (programs[i].programs.length > 0) {
        var range = {
          start: programs[i].programs[0].start_timestamp,
          end: programs[i].programs[programs[i].programs.length - 1].end_timestamp
        };
        var channelEpg = epgCollection.get(programs[i].external_id);
        var isNewModel = false;
        if (!channelEpg) {
          isNewModel = true;
          channelEpg = new Model({
            id: programs[i].external_id,
            programs: [],
            loaded_time_range: {start: 0, end: 0}
          })
        }
        var newPrograms = [];
        var j;
        for (j = 0; j < channelEpg.get('programs').length; j++) {
          if (channelEpg.get('programs')[j].end_timestamp <= range.start || channelEpg.get('programs')[j].start_timestamp >= range.end)
            newPrograms.push(channelEpg.get('programs')[j]);
        }
        for (j = 0; j < programs[i].programs.length; j++) {
          programs[i].programs[j].load_timestamp = Date.now();
          newPrograms.push(programs[i].programs[j]);
        }
        channelEpg.set('programs', newPrograms.sort(function (a, b) {
          return a.start_timestamp - b.start_timestamp;
        }), channelEpg.get('id'));
        var times = [];
        for (j = 0; j < channelEpg.get('programs').length; j++) {
          times.push(channelEpg.get('programs')[j].start_timestamp);
        }
        channelEpg.set('times', times);
        updated = true;
        if (is_init) {
          if (isNewModel) {
            epgCollection.add(channelEpg);
          }
        } else {
          newEpg.push(channelEpg);
        }
      }
    }

    if (!is_init) {
      epgStore.set('is_init', true);
      epgCollection.init(newEpg);
    }
    if (updated) {
      epgStore.emit('change', {name: 'epgs', curr: epgCollection});
    }
  },
  clearLastQueryKeys: function () {
    last_query_time = {};
  }
};

function isAvailableLoad(epg_id, from, to) {
  var last_query_key = 'k_' + from + '_' + to + '_' + epg_id;
  last_query_key = last_query_key.substr(0, 30);
  if (last_query_time[last_query_key]) {
    if (helpFunctions.getTimestampNow() - last_query_time[last_query_key].time < 60) {
      epgStore.set('is_loading', false);
      return false;
    } else {
      last_query_time[last_query_key] = {time: helpFunctions.getTimestampNow()};
    }
    if (Object.keys(last_query_time).length > 100) {
      actions.clearLastQueryKeys();
    }
  } else {
    last_query_time[last_query_key] = {time: helpFunctions.getTimestampNow()};
  }
  return true;
}

module.exports = actions;

},{"core/api":15,"core/lib/helpFunctions":34,"core/model":40,"state/channels_store":110,"state/epg_store":112}],112:[function(require,module,exports){
var Model = require('core/model'),
  helpFunctions = require('core/lib/helpFunctions'),
  channelsStore = require('state/channels_store'),
  Collection = require('core/collection');

var epgStore = new Model({
  is_loading: false,
  is_loaded: false,
  is_init: false,
  error: null,
  epgs: new Collection()

});
function getEpgActions() {
  return require('state/epg_actions');
}

epgStore.getCurrent = function (epg_id, time, channel_id, not_load, maxHours) {//TODO: change to object
  if (!maxHours) maxHours = 24;
  if (epgStore.get('epgs') && epgStore.get('epgs').get(epg_id)) {
    var times = epgStore.get('epgs').get(epg_id).get('times');
    var programs = epgStore.get('epgs').get(epg_id).get('programs');
    for (var i = times.length - 1; i >= 0; i--) {
      if (times[i] <= time) {
        if (programs[i].end_timestamp > time) {
          var load_new = false, from, to;

          if (i > (times.length - 5) && i <= 5) {
            load_new = true;
            from = times[0] - maxHours * 60 * 60;
            to = times[times.length - 1] + maxHours * 60 * 60;
          } else if (i > (times.length - 5)) {
            load_new = true;
            from = times[times.length - 1];
            to = times[times.length - 1] + maxHours * 60 * 60;
          } else if (i <= 5) {
            load_new = true;
            from = times[0] - maxHours * 60 * 60;
            to = times[0];
          }
          if (load_new && !not_load) {
            getEpgActions().fetch({channel_id: channel_id, from: from, to: to});
          }
          return programs[i];
        }
        // else {
        //   return;
        // }
      }
    }
  }
  if (!not_load) {
    getEpgActions().fetch({channel_id: channel_id});
  }
  return;
};

epgStore.getNext = function (epg_id, time, channel_id) {
  channel_id = channel_id || channelsStore.get('current_channel').get('id');
  if (!epgStore.get('epgs').get(epg_id)) return;
  var times = epgStore.get('epgs').get(epg_id).get('times');
  var programs = epgStore.get('epgs').get(epg_id).get('programs');
  for (var i = 0; i < times.length; i++) {
    if (times[i] > time) {
      if (i > (times.length - 5)) {
        getEpgActions().fetch({
          channel_id: channel_id,
          from: times[times.length - 1],
          to: times[times.length - 1] + 24 * 60 * 60
        });
      }
      return programs[i];
    }
  }
  return;
};

epgStore.getPrev = function (epg_id, time, channel_id) {
  channel_id = channel_id || channelsStore.get('current_channel').get('id');
  if (!epgStore.get('epgs').get(epg_id)) return;
  var times = epgStore.get('epgs').get(epg_id).get('times');
  var programs = epgStore.get('epgs').get(epg_id).get('programs');
  for (var i = times.length - 1; i >= 0; i--) {
    if (times[i] <= time && programs[i].end_timestamp <= time) {
      if (i <= 5) {
        getEpgActions().fetch({channel_id: channel_id, from: times[0] - 24 * 60 * 60, to: times[0]});
      }
      return programs[i];
    }
  }
};

epgStore.getByRange = function (epg_id, time_start, time_stop, channel_id, not_load) {
  if (!epgStore.get('epgs').get(epg_id)) return;
  var times = epgStore.get('epgs').get(epg_id).get('times');
  var programs = epgStore.get('epgs').get(epg_id).get('programs');
  if (times && times.length && programs && programs.length) {
    if (programs[0].start_timestamp <= time_start && programs[programs.length - 1].end_timestamp >= time_stop) {
      var range_programs = epgStore.sliceByRange(programs, time_start, time_stop);
      if (range_programs) {
        return range_programs;
      }
    }
  }
  if(!not_load) {
    getEpgActions().fetch({channel_id: channel_id, from: time_start, to: time_stop});
  }
  return;
};

epgStore.sliceByRange = function (programs, time_start, time_stop) {

  var start_index = null, stop_index = null, i;
  if (!programs) return;
  for (i = programs.length - 1; i >= 0; i--) {
    if (programs[i].start_timestamp <= time_stop) {
      stop_index = i + 1;
      break;
    }
  }
  for (i = 0; i < programs.length; i++) {
    if (programs[i].start_timestamp >= time_start) {
      start_index = i;
      break;
    }
  }
  if (stop_index !== null && start_index !== null) {
    var res_prog = programs.slice(start_index, stop_index);
    if (res_prog && res_prog.length) {
      return res_prog;
    }
  }
};
window.epgStore = epgStore;
module.exports = epgStore;

},{"core/collection":17,"core/lib/helpFunctions":34,"core/model":40,"state/channels_store":110,"state/epg_actions":111}],113:[function(require,module,exports){

'use strict';

var dom = require('core/dom');

function ActorItem($item, data, config) {
  config = config || {};
  $item.actorItem = dom.tag('div', {
      className: 'actor-item'
    },
    dom.tag('div', {
      className: 'actor-avatar__default'
    }),
    $item.actorItemImage = dom.tag('div', {
        className: 'avatar'
      }
    ),
    dom.tag('div', {className: 'info'},
      $item.actorItemTextTitle = dom.tag('div', {
        className: 'name'
      })
    )
  );

  if (config) {
    if (config.className) {
      $item.actorItem.classList.add(config.className);
    }
  }

  var avatar;
  if(data && data.avatar) {
    if (data.avatar['image_185x185'].length > 0) {
      avatar = data.avatar['image_185x185'];
    } else if (data.avatar['image_240x240'].length > 0) {
      avatar = data.avatar['image_240x240'];
    } else if (data.avatar['image_360x360'].length > 0) {
      avatar = data.avatar['image_360x360'];
    }
  }

  $item.actorItemTextTitle.textContent = data && data.name || '';

  if (avatar) {
    $item.actorItemImage.style.backgroundImage = 'url(' + avatar + '/pt/c172x172'+ ')';
  }
  $item.appendChild($item.actorItem);
}

// public
module.exports = ActorItem;

},{"core/dom":31}],114:[function(require,module,exports){

'use strict';

var dom = require('core/dom'),
  helpFunctions = require('core/lib/helpFunctions');

function ChannelItem($item, data, config) {
  config = config || {};
  $item.channelItem = dom.tag('div', {
      className: 'channel'
    },
    dom.tag('div', {
        className: 'channel__wrap'
      },
      $item.channelItemImage = dom.tag('div', {
        className: 'channel__img'
      }),
      $item.channelItemImageDefault = dom.tag('div', {
        className: 'channel__img-def'
      }),

      dom.tag('div', {
          className: 'channel__text'
        },
        $item.channelItemTextTitle = dom.tag('div', {
          className: 'channel__title'
        })
      )
    )
  );

  if(config) {
    if(config.className) {
      $item.channelItem.classList.add(config.className);
    }
  }
  if(data) {
    $item.channelItemTextTitle.textContent = data.title || '';
    if(data.image && data.image.big) {
      $item.channelItemImage.style.backgroundImage = 'url(' + data.image.big + ')';
    }
  }

  $item.appendChild($item.channelItem);
}

// public
module.exports = ChannelItem;

},{"core/dom":31,"core/lib/helpFunctions":34}],115:[function(require,module,exports){

'use strict';

var dom = require('core/dom');


function CollectionItem($item, data) {
  if (data) {
    $item.appendChild(
      dom.tag('div', {
          className: 'collectionItemWrapper'
        },

        $item.$imageDefault = dom.tag('div', {
          className: 'collectionItemImgBoxDefault'
        }),

        $item.$image = dom.tag('div', {
          className: 'collectionItemImgBox'
        }, dom.tag('div', {
            className: 'textWrappper'
          },
          dom.tag('div', {
              className: 'title'
            },
            $item.$title = dom.tag('div')
          ),
          dom.tag('div', {
              className: 'subTitle'
            },
            $item.$sub_title = dom.tag('div')
          )
        )),
        dom.tag('div', {
          className: 'doubleLine'
        })
      )
    );

    if (data.image) {
      if (data.image.image_original) {
        $item.$image.style.backgroundImage = 'url(' + data.image.image_original + '/pt/c176x100' + ')';
      }else if (data.image.image_horizontal) {
        //$item.$image.style.backgroundImage = 'url(' + data.image.image_horizontal + ')';
      } else if (data.image.image_vertical) {
        //$item.$image.style.backgroundImage = 'url(' + data.image.image_vertical + ')';
      }
    }

    $item.$title.textContent = data.title || '';
  }
}

// public
module.exports = CollectionItem;

},{"core/dom":31}],116:[function(require,module,exports){
'use strict';

var dom = require('core/dom'),
  helpFunctions = require('core/lib/helpFunctions');

function CoverImage(data) {

  this.container = dom.tag('div', {
      className: 'cover'
    },
    dom.tag('div', {
      className: 'coverDefault'
    }),
    this.imageTag = dom.tag('div', {
      className: 'hidden cover-img'
    }),
    this.watch_history = dom.tag('div', {className: 'watch-history'},
      this.watch_history_progress = dom.tag('div', {className: 'watch-history__bar'})
    ),

    this.delivery = dom.tag('div', {
        className: 'delivery'
      },
      this.paidLabel = dom.tag('div', {
        className: 'paid label hidden'
      }),
      this.svodLabel = dom.tag('div', {
        className: 'svod label hidden'
      })),

    this.footer = dom.tag('div', {
        className: 'cover-footer'
      },
      this.exclusive = dom.tag('div', {
          className: 'exclusive'
        },
        this.exclusiveText = dom.tag('div', {
          className: 'label'
        })),
      this.subsTime = dom.tag('div', {
        className: 'subsTime'
      }))
  );

  return this;
}

CoverImage.prototype.setData = function (movie) {
  this.imageTag.style.background = '';
  this.footer.classList.add('hidden');

  var imgSrc = '';
  var delivery_rules = movie.delivery_rules;
  var isExclusive = movie.is_exclusive;
  if (movie.image) {
    if(movie.image['original']){
      imgSrc = movie.image['original'] + '/pt/c370x520';
    }else{
      if (movie.image['big'] && movie.image['big'].length) {
        imgSrc = movie.image['big']
      } else if (movie.image['small'] && movie.image['small'].length) {
        imgSrc = movie.image['small']
      }
    }
  }

  if (delivery_rules.indexOf('svod') >= 0) {
    this.svodLabel.classList.remove('hidden');
    this.svodLabel.textContent = i18nMgg('subs_label');
  } else {
    this.svodLabel.classList.add('hidden');
  }

  if (delivery_rules.indexOf('tvod') >= 0 || delivery_rules.indexOf('dto') >= 0) {
    this.paidLabel.classList.remove('hidden');
    this.paidLabel.textContent = i18nMgg('buy_noun');
  } else {
    this.paidLabel.classList.add('hidden');
  }

  this.imageTag.classList.remove('hidden');
  if (imgSrc) {
    this.imageTag.style.background = 'url(' + imgSrc + ' )';
  }

  if (isExclusive) {
    this.footer.classList.remove('hidden');
    this.exclusive.classList.remove('hidden');
    this.exclusiveText.textContent = i18nMgg('exclusive');
  } else {
    this.exclusive.classList.add('hidden');
  }
};

CoverImage.prototype.setBoughtTextData = function (text) {
  if (text && text.length) {
    this.footer.classList.remove('hidden');
    this.subsTime.classList.remove('hidden');
    this.imageTag.classList.add('bot-shadow');
    this.subsTime.innerHTML = text;
  } else {
    this.subsTime.classList.add('hidden');
    this.imageTag.classList.remove('bot-shadow');
  }
};

CoverImage.prototype.setWatchedHistoryData = function(watched_history){
  if(watched_history){
    if (watched_history.percent > 3){
      this.watch_history_progress.style.width = watched_history.percent + '%';
    }else{
      this.watch_history_progress.style.width = '3%';
    }
    this.watch_history.style.display = 'block';
  }else{
    this.watch_history.style.display = 'none';
  }
};

// public
module.exports = CoverImage;

},{"core/dom":31,"core/lib/helpFunctions":34}],117:[function(require,module,exports){
'use strict';

var dom = require('core/dom'),
  helpFunctions = require('core/lib/helpFunctions');

function EpisodeItem($item, data) {

  if (!$item.rendered) {
    $item.classList.add('episode-item');
    $item.rendered = true;
    $item.itemImage = dom.tag('div', {
        className: 'episode-item__img'
      }
    );
    $item.watch_history = dom.tag('div', {className: 'watch-history'},
      $item.current_watch_label = dom.tag('div', {className: 'watch-history__current'}),
      $item.watch_history_progress = dom.tag('div', {className: 'watch-history__bar'})
    );
    $item.itemTitle = dom.tag('div', {
        className: 'episode-item__title'
      }
    );
    $item.itemDefault = dom.tag('div', {
        className: 'episode-item__default'
      }
    );
  }

  if (data) {
    if (data.images) {
      var image_url = data.images['image_162x100'] ? data.images['image_162x100'] : data.images['image_126x71'];

      if (image_url) {
        $item.itemImage.style.backgroundImage = "url(" + image_url + ")";
      }
    }

    $item.itemTitle.textContent = data.title || '';

    if (data.watched_history) {
      if(data.watched_history.percent > 3){
        $item.watch_history_progress.style.width = data.watched_history.percent + '%';
      }
      $item.watch_history.style.display = 'block';
    }
    if (data.isCurrentWatched) {
      $item.current_watch_label.style.display = 'block';
      $item.current_watch_label.innerHTML = i18nMgg('u_r_watching')
    }
  }

  $item.itemImage.appendChild($item.watch_history);
  $item.appendChild($item.itemImage);
  $item.appendChild($item.itemDefault);
  $item.appendChild($item.itemTitle);
}

// public
module.exports = EpisodeItem;

},{"core/dom":31,"core/lib/helpFunctions":34}],118:[function(require,module,exports){

'use strict';

var dom = require('core/dom'),
    helpFunctions = require('core/lib/helpFunctions'),
    newState, text_content, genre;

function FilmItemSmall($item, data, config) {

  config = config || {};

  if (!$item.$image) {
    $item.appendChild(
      dom.tag('div', {
          className: 'film-small'
        },
        $item.$image = dom.tag('div', {
          className: 'film-small__img-def'
        }),
        $item.$image = dom.tag('div', {
          className: 'film-small__img'
        }),
        $item.watch_history = dom.tag('div', {className: 'watch-history'},
          $item.watch_history_progress = dom.tag('div', {className: 'watch-history__bar'})
        ),

        dom.tag('div', {
            className: 'film-small__text'
          },
          $item.$title = dom.tag('div', {
            className: 'film-small__title'
          }),
          $item.$sub_title = dom.tag('div', {
            className: 'film-small__subtitle'
          })
        ),
        dom.tag('div', {
            className: 'film-small__buy-props'
          },
          $item.$sub = dom.tag('div', {
            className: 'subscription'
          }, i18nMgg('subs_label')),
          $item.$buy = dom.tag('div', {
            className: 'purchase'
          }, i18nMgg('buy_noun'))
          //$item.$rental = dom.tag('div', {
          //  className: 'rental'
          //}, i18nMgg('rental'))
        )
      )
    );
  }

  $item.$buy.style.display = 'none';
  $item.$sub.style.display = 'none';

  if (data) {
    if (data.delivery_rules && !config.hidePurchaseInfo) {
      newState = data.delivery_rules.indexOf('svod') !== -1 ? 'block' : 'none';
      $item.$sub.style.display = newState;
      newState = (data.delivery_rules.indexOf('tvod') !== -1 || data.delivery_rules.indexOf('dto') !== -1) ? 'block' : 'none';
      $item.$buy.style.display = newState;
    }


    if (data.image) {
      if (data.image['original']) { //TODO-INNA temporary for LG speed tests
        if(data.type && data.type == 'searchItem'){
          $item.$image.style.backgroundImage = 'url(' + (data.image['original']) + '/pt/c80x112' +')';
        } else{

          $item.$image.style.backgroundImage = 'url(' + (data.image['original']) + '/pt/c85x120' +')';
        }
      } else if (data.image['small']) {
        $item.$image.style.backgroundImage = 'url(' + (data.image['small']) + ')';
      }
    }
    $item.$title.textContent = data.title || '';

    if(data.watched_history){
      var watched_percent = data.watched_history.percent > 3 ? data.watched_history.percent : 3;
      $item.watch_history_progress.style.width = watched_percent + '%';
      $item.watch_history.style.display = 'block';
    } else {
      $item.watch_history.style.display = 'none';
    }

    text_content = [];
    if(data.series_last_watched){
      text_content.push(data.series_last_watched.season_title);
      text_content.push(data.series_last_watched.episode_title);
    }else{
      if(data.year) {
        text_content.push(data.year);
      }
      if(data.genres) {
        genre = helpFunctions.getGenreByIds(data.genres, 1);
        text_content.push(genre);
      }
      if(data.country) {
        text_content.push(data.country);
      }
    }

    $item.$sub_title.textContent = text_content.join(', ');
  }
}

// public
module.exports = FilmItemSmall;

},{"core/dom":31,"core/lib/helpFunctions":34}],119:[function(require,module,exports){
'use strict';

var dom = require('core/dom'),
  helpFunctions = require('core/lib/helpFunctions');

var FilmItem = function ($item, data, config) {
  config = config || {};
  var newState, text_content, genre; // this will make dom render faster

  if (!$item.$image) {
    $item.appendChild(
      $item.wrapper = dom.tag('div', {
          className: 'film'
        },
        dom.tag('div', {
            className: 'film__buy-info'
          },
          $item.$sub = dom.tag('div', {
            className: 'subscription'
          }, i18nMgg('subs_label')),
          $item.$buy = dom.tag('div', {
            className: 'purchase'
          }, i18nMgg('buy_noun'))
          //$item.$rental = dom.tag('div', {
          //  className: 'rental'
          //}, i18nMgg('rental'))
        ),
        dom.tag('div', {
            className: 'film__container'
          },
          dom.tag('div', {
            className: 'film__img-default'
          }),

          $item.$image = dom.tag('div', {
            className: 'film__img'
          },
            $item.watch_history = dom.tag('div', {className: 'watch-history'},
              $item.watch_history_progress = dom.tag('div', {className: 'watch-history__bar'})
            )
          ),
          dom.tag('div', {
              className: 'film__desc'
            },
            dom.tag('div', {
                className: 'title'
              },
              $item.$title = dom.tag('div')
            ),
            dom.tag('div', {
                className: 'sub-title'
              },
              $item.$sub_title = dom.tag('div')
            )
          )
        )
      )
    );
  }

  $item.$buy.style.display = 'none';
  $item.$sub.style.display = 'none';

  if (data) {
    if (data.image) {
      if (data.image['original']) { //TODO-INNA temporary for LG speed tests
        $item.$image.style.backgroundImage = 'url(' + (data.image['original']) + '/pt/c104x145' +')';
      } else if (data.image['small']) {
        $item.$image.style.backgroundImage = 'url(' + (data.image['small']) + ')';
      }
    }

    if(data.watched_history){
      var watched_percent = data.watched_history.percent > 3 ? data.watched_history.percent : 3;
      $item.watch_history_progress.style.width = watched_percent + '%';
      $item.watch_history.style.display = 'block';
    } else {
      $item.watch_history.style.display = 'none';
    }

    if (data.delivery_rules && !config.hidePurchaseInfo) {
    newState = data.delivery_rules.indexOf('svod') !== -1 ? 'block' : 'none';
    $item.$sub.style.display = newState;
    newState = (data.delivery_rules.indexOf('tvod') !== -1 || data.delivery_rules.indexOf('dto') !== -1) ? 'block' : 'none';
    $item.$buy.style.display = newState;
  }

  $item.$title.textContent = data.title || '';

  text_content = [];
  if (data.year) {
    text_content.push(data.year);
  }
  if (data.genres) {
    genre = helpFunctions.getGenreByIds(data.genres, 1);
    text_content.push(genre);
  }
  if (data.country) {
    text_content.push(data.country);
  }

  $item.$sub_title.textContent = text_content.join(', ');
}

if (config) {
  if (config.className) {
    $item.wrapper.classList.add(config.className);
  }
}

}
;

// public
module.exports = FilmItem;

},{"core/dom":31,"core/lib/helpFunctions":34}],120:[function(require,module,exports){
'use strict';

var Panel = require('core/components/panel'),
  dom = require('core/dom');

function Header(title) {

  var config = {
    className: 'header',
    focusable: false
  };

  Panel.call(this, config);

  this.$title = dom.tag('div', {className: 'block'});
  this.$title.textContent = title || '';
  this.$node.appendChild(this.$title);
  this._lastSetTitleClassName = null;

  return this;
}

// inheritance
Header.prototype = Object.create(Panel.prototype);
Header.prototype.constructor = Header;

Header.prototype.setTitle = function (title, className) {
  this.$title.textContent = title || '';
  //this.$title.appendChild(dom.tag('div', {className: 'header__title'}, title || ''));
  if(this._lastSetTitleClassName){
    this.$node.classList.remove(this._lastSetTitleClassName);
  }
  this._lastSetTitleClassName = className;
  if(this._lastSetTitleClassName){

    this.$title.appendChild(
      dom.tag('div', {className: this._lastSetTitleClassName + '_icon'})
    );

    this.$node.classList.add(this._lastSetTitleClassName);
  }
};

Header.prototype.setSubTitle = function (title) {
  var subTitle = dom.tag('div', {className: 'subHeader'});
  subTitle.innerHTML = title || '';
  this.$title.appendChild(subTitle);
};

Header.prototype.shadeOn = function () {
  this.$node.classList.add('shade');
};

Header.prototype.shadeOff = function () {
  this.$node.classList.remove('shade');
};

module.exports = Header;

},{"core/components/panel":26,"core/dom":31}],121:[function(require,module,exports){
'use strict';

var Panel = require('core/components/panel'),
  dom = require('core/dom');

function LoaderAnimationEl(type) {

  var config = {
    className: 'loader '+(type?type:''),
    focusable: false
  };

  Panel.call(this, config);
  this._type = type;
  this._loaderInterval=null;
  this._loaderTimeout=null;
  this._newPosition = 0;
  this._opacity = 0;
  this._started = false;
  return this;
}

LoaderAnimationEl.prototype = Object.create(Panel.prototype);
LoaderAnimationEl.prototype.constructor = LoaderAnimationEl;

LoaderAnimationEl.prototype.start = function (type) {
  if(this._started) return;
  this._started = true;
  if(type){
    this._type = type;
  }
  var self = this;
  clearInterval(this._loaderInterval);
  clearTimeout(this._loaderTimeout);
  this._newPosition = 0;
  this._opacity = 0;
  this.$node.style.opacity = 0;
  this._loaderTimeout = setTimeout(function () {
    self._loaderInterval = setInterval(function () {
      if (self._opacity < 1) {
        self._opacity += 0.2;
        self.$node.style.opacity = self._opacity;
      }
      if (self._type == 'small') {
        self._newPosition = self._newPosition <= -240 ? 0 : self._newPosition - 60;
      } else {
        self._newPosition = self._newPosition <= -480 ? 0 : self._newPosition - 120;
      }

      self.$node.style.backgroundPosition = self._newPosition + 'px 0';
    }, 120);
  }, 250);
};

LoaderAnimationEl.prototype.stop = function () {
  clearInterval(this._loaderInterval);
  clearTimeout(this._loaderTimeout);
  this._started = false;
  this._newPosition = 0;
  this._opacity = 0;
  this.$node.style.opacity = 0;
  this.$node.style.backgroundPosition = '0 px 0';
};


module.exports = LoaderAnimationEl;

},{"core/components/panel":26,"core/dom":31}],122:[function(require,module,exports){
/**
 * MovieInfo content.
 */
'use strict';

var dom = require('core/dom'),
  helpFunctions = require('core/lib/helpFunctions');

function MovieInfo(data, config) {
  this.container = dom.tag('div', {
      className: 'movie-item__container'
    },
    this.genres = dom.tag('div', {
      className: 'movie-item__genres'
    }),
      dom.tag('div', {
        className: 'movie-item__digital clearfix'
      },
      this.quality = dom.tag('div', {
        className: 'movie-item__quality label-quality'
      }),
      this.ageLimit = dom.tag('div', {
        className: 'movie-item__age-limit label-age'
      }),
      this.kinopoisk = dom.tag('div', {
        className: 'movie-item__kinopoisk label-rating'
      }),
      this.imdb = dom.tag('div', {
        className: 'movie-item__IMDB label-rating'
      }),
      this.duration = dom.tag('div', {
        className: 'movie-item__duration label-duration'
      })
    )
  );

  return this;
}

MovieInfo.prototype.setData = function (movie) {
  var genres_content = [];
  this.duration.textContent = '';
  if (movie.year) {
    genres_content.push(movie.year);
  }

  if (movie.genres && movie.genres.length) {
    genres_content.push(helpFunctions.getGenreByIds(movie.genres, 3));
  }

  if (movie.country) {
    genres_content.push(movie.country);
  }

  this.genres.textContent = genres_content.join(', ');

  if (movie.age_limit) {
    this.ageLimit.textContent = movie.age_limit + '+';
    this.ageLimit.classList.remove('hidden');
  } else {
    this.ageLimit.classList.add('hidden');
  }

  if (movie.quality && movie.quality.toLowerCase() == 'fullhd') {
    this.quality.textContent = 'HD';
    this.quality.classList.remove('hidden');
  } else {
    this.quality.classList.add('hidden');
  }

  if (parseInt(movie.rating_imdb * 100)) {
    this.imdb.textContent = (parseFloat(movie.rating_imdb).toFixed(1));
    this.imdb.classList.remove('hidden');
  } else {
    this.imdb.classList.add('hidden');
  }

  if (parseInt(movie.rating_kinopoisk * 100)) {
    this.kinopoisk.textContent = (parseFloat(movie.rating_kinopoisk).toFixed(1));
    this.kinopoisk.classList.remove('hidden');
  } else {
    this.kinopoisk.classList.add('hidden');
  }

  if (movie.duration) {
    var duration = helpFunctions.getCorrectTimeFromSeconds(movie.duration);
    if (duration.hours) {
      this.duration.textContent += duration.hours + ' ' + helpFunctions.getValueText(duration.hours, 'hour') + ' ';
    }

    if (duration.minutes) {
      this.duration.textContent += duration.minutes + ' ' + helpFunctions.getValueText(duration.minutes, 'minute');
    }

    this.duration.classList.remove('hidden');
  } else {
    this.duration.classList.add('hidden');
  }
};

// public
module.exports = MovieInfo;

},{"core/dom":31,"core/lib/helpFunctions":34}],123:[function(require,module,exports){
'use strict';

var dom = require('core/dom');

function PaymentChoiceItem($item, data) {
  $item.appendChild(
    dom.tag('div', {
        className: 'payment-choice__item'
      },
      this.imageDiv = dom.tag('div', {
        className: 'payment-choice__img'
      }),
      this.title = dom.tag('div', {
        className: 'payment-choice__desc'
      })
    ));

  if(data.imgClass) {
    this.imageDiv.classList.add(data.imgClass);
  }

  this.title.textContent = data.title || '';

}

// public
module.exports = PaymentChoiceItem;

},{"core/dom":31}],124:[function(require,module,exports){

'use strict';

var dom = require('core/dom');

function SettingsBlock($item, data) {
  $item.appendChild(
    dom.tag('div', {
        className: 'settings__item'
      },
      this.$icon = dom.tag('div', {
        className: 'settings-icon'
      }, this.$userAva = dom.tag('div', {
              className: 'settings-icon__' + data.img
          }

      )),
      dom.tag('div', {
        className: 'settings__title'
      }, this.$title = dom.tag('div', {
        className: 'title'
      }), this.$title_info = dom.tag('div', {
        className: 'title-info'
      })),
      dom.tag('div', {
        className: 'settings__subtitle'
      }, this.$subTitle = dom.tag('span', {
        className: 'title'
      }))
    )
  );

    if(data.imageSrc){
        this.$userAva.style.backgroundImage = 'url(' + data.imageSrc + ')';
    }

  this.$title_info.innerHTML = data.title_info || '';
  this.$title.innerHTML = data.title || '';
  this.$subTitle.innerHTML = data.subTitle || '';
}

// public
module.exports = SettingsBlock;

},{"core/dom":31}],125:[function(require,module,exports){
'use strict';

var dom = require('core/dom'),
  app = require('core/app');

var correctDateFormat = function (date) {
  if(date) {
    var date_arr = date.substr(0, 10).split("-");
    if(date_arr && date_arr.length) {
      date_arr = date_arr.reverse()
      return date_arr.join('.');
    }
  }

  return '21.08.2016';
};

var formatNickname = function (nickname) {
  if (!nickname) return '';

  var userNickNameInfo = {
    firstLetter: 'M',
    fullNickname: ''
  };
  var removeEmail = nickname.trim().split('@');
  userNickNameInfo.fullNickname = removeEmail[0];
  userNickNameInfo.firstLetter = removeEmail[0].charAt(0).toUpperCase();

  var lastName = nickname.trim().split(' ');
  if (lastName[1] !== undefined) {
    userNickNameInfo.firstLetter += lastName[1].charAt(0).toUpperCase();
  }

  if (userNickNameInfo.fullNickname.length > 23) {
    userNickNameInfo.fullNickname = userNickNameInfo.fullNickname.slice(0, 20) + '...';
  }
  return userNickNameInfo;
};

var formatedDescription = function (description, config) {

  var decriptionInfo = description;

  if (config == 'small' && description.length > 45) {
    decriptionInfo = description.slice(0, 42) + '...';
  }

  return decriptionInfo;
};

function ReviewItem($item, data, config) {
  config = config || {};

  $item.reviewImg = dom.tag('div', {
      className: 'comment__img'
    },
    $item.userAvatar = dom.tag('div', {
        className: 'avatar'
      }
    )
  );
  $item.reviewText = dom.tag('div', {
      className: 'comment__info'
    },
    $item.commentText = dom.tag('div', {
        className: 'comment__message'
      }
    ),
    $item.userName = dom.tag('div', {
        className: 'comment__name'
      }
    ),
    $item.commentData = dom.tag('div', {
        className: 'comment__date'
      }
    )
  );

  var formatedNickname = formatNickname(data.user_name);

  if (data.user_avatar) {
    $item.userAvatar.style.backgroundImage = 'url(' + data.user_avatar + ')';
  } else {
    if (formatedNickname) {
      $item.userAvatar.innerHTML = '<span>' + formatedNickname.firstLetter[0] + '</span>';
    }
  }

  $item.commentText.textContent = formatedDescription(data.text, config);
  $item.userName.textContent = formatedNickname.fullNickname;
  $item.commentData.textContent = correctDateFormat(data.date);

  $item.appendChild($item.reviewImg);
  $item.appendChild($item.reviewText);

  if (config != 'small' && data.sub_comments && data.sub_comments.length) {
    for (var i = 0; i < data.sub_comments.length; i++) {

      $item.subReview = dom.tag('div', {
          className: 'comment__sub'
        },
        $item.subReviewImg = dom.tag('div', {
            className: 'comment__img'
          },
          $item.subUserAvatar = dom.tag('div', {
              className: 'avatar'
            }
          )
        ),
        $item.subReviewText = dom.tag('div', {
            className: 'comment__info'
          },
          $item.subCommentText = dom.tag('div', {
              className: 'comment__message'
            }
          ),
          $item.subUserName = dom.tag('div', {
              className: 'comment__name'
            }
          ),
          $item.subCommentData = dom.tag('div', {
              className: 'comment__date'
            }
          )
        ));

      var formatedNickname = formatNickname(data.sub_comments[i].user_name);

      if (data.sub_comments[i].user_avatar) {
        $item.subUserAvatar.style.backgroundImage = 'url(' + data.sub_comments[i].user_avatar + ')';
      } else {
        $item.subUserAvatar.innerHTML = '<span>' + formatedNickname.firstLetter + '</span>';
      }

      $item.subCommentText.textContent = formatedDescription(data.sub_comments[i].text);
      $item.subUserName.textContent = formatedNickname.fullNickname;
      $item.subCommentData.textContent = correctDateFormat(data.sub_comments[i].date);

      $item.appendChild($item.subReview);
    }
  }
}

// public
module.exports = ReviewItem;

},{"core/app":16,"core/dom":31}],126:[function(require,module,exports){

'use strict';

var dom = require('core/dom');

function ShowMoreItem($item, data) {

  if (!$item.rendered) {
    $item.rendered = true;
    $item.appendChild(
      dom.tag('div', {
          className: 'showMoreItem'
        },
        $item.$title = dom.tag('div', {
            className: 'title'
          }
        )
      )
    );

    $item.$title.textContent = data.title || '';
  }
}

// public
module.exports = ShowMoreItem;

},{"core/dom":31}],127:[function(require,module,exports){

'use strict';

var app = require('core/app'),
  dom = require('core/dom'),
  helpFunctions = require('core/lib/helpFunctions');

function Slider($item, data) {

  $item.appendChild(
    this.sliderBlock = dom.tag('div', {
      className: 'slider__item'
    }, dom.tag('div', {
        className: 'info'
      },
      this.$title = dom.tag('div', {
        className: 'title'
      }),
      this.$description = dom.tag('div', {
        className: 'description'
      })
    ))
  );

  if (data.video && data.video.delivery_rules && (data.video.delivery_rules.indexOf('tvod') !== -1 || data.video.delivery_rules.indexOf('dto') !== -1)) {
    this.paymentInfo = dom.tag('div', {
      className: 'paymentInfo'
    });

    this.paymentInfo.appendChild(dom.tag('div', {
      className: 'deliveryRules purchase'
    }, i18nMgg('buy_noun')));
    this.sliderBlock.appendChild(this.paymentInfo);
  }

  if (data.video && data.video.delivery_rules && data.video.delivery_rules.indexOf('svod') !== -1 ) {
    this.paymentInfo = dom.tag('div', {
      className: 'paymentInfo'
    });

    this.paymentInfo.appendChild(dom.tag('div', {
      className: 'deliveryRules subs'
    }, i18nMgg('subs_label')));
    this.sliderBlock.appendChild(this.paymentInfo);
  }

  if(data.image_900x340) {
    this.sliderBlock.style.backgroundImage = 'url(' + data.image_900x340+ '/pt/c450x170' + ')';
  }

  if (data.slider_type === 'object') {
    if (data.video) {
      this.$title.innerHTML = data.video.title;
      this.$description.textContent = getVideoSliderDescription(data.video);
    } else {
      if (data.title) {
        this.$title.textContent = data.title || '';
      }
      if (data.description) {
        this.$description.textContent = data.description || '';
      }
    }
  }

  if (data.slider_type === 'feature') {
    if (data.title) {
      this.$title.textContent = data.title || '';
    }
    if (data.description) {
      this.$description.textContent = data.description || '';
    }
  }


  if (data.slider_type === 'url') {

    if (data.title) {
      this.$title.textContent = data.title || '';
    }
    if (data.description) {
      this.$description.textContent = data.description || '';
    }
  }


}

function getVideoSliderDescription(video_short) {
  var resultText = [];

  if (video_short.year) {
    resultText.push(video_short.year)
  }

  if (video_short.country) {
    resultText.push(video_short.country)
  }

  if (video_short.genres && video_short.genres.length) {

    var genres_config = app.dataStorage.configuration.genres;
    var genresIds = video_short.genres;

    for (var i = 0; i < genresIds.length; i++) {
      for (var j = 0; j < genres_config.length; j++) {
        if (genres_config[j].id == genresIds[i]) {
          resultText.push(genres_config[j].title);
          break;
        }
      }
    }
  }
  return resultText.join(', ');
}

// public
module.exports = Slider;

},{"core/app":16,"core/dom":31,"core/lib/helpFunctions":34}],128:[function(require,module,exports){

'use strict';

var dom = require('core/dom'),
  helpFunctions = require('core/lib/helpFunctions'),
  subscriptionService = require('core/tools/subscriptionService'),
  app = require('core/app'),
  Panel = require('core/components/panel');

function SubscriptionBlock(data) {
  Panel.call(this, {});
  var description = '',
      title = data.title,
      channels_movie_count =[],
      $subscriptionChannelsCountBlock,
      $subscriptionMoviesCountBlock,
      movies_count = 0;

  if(data.promo_phrase) {
    description = data.promo_phrase
  } else {
    if(data.paidSubscription) {
      description = data.paidSubscription.description || '';
    }
  }

  this.$subscriptionInfo = dom.tag('div', {
    className: 'subscription__info'
  });

  if (title) {
    this.$subscriptionTitle = dom.tag('div', {
        className: 'subscription__header'
      }, dom.tag('span', {
        className: 'title'
      }, title)
    );
    this.$subscriptionInfo.appendChild(this.$subscriptionTitle);
  }


  this.$subscriptionInfo.appendChild(dom.tag('div', {
    className: 'subscription__desc'
  }, description));

  this.$subscriptionItemInfo = dom.tag('div', {
    className: 'subscription__item-info'
  });

  this.$subscriptionInfo.appendChild(this.$subscriptionItemInfo);

  if (data.channels_num) {
    var channels_num = data.channels_num || '';
    $subscriptionChannelsCountBlock = dom.tag('div', {
        className: 'subscription-channels'
      },
      dom.tag('div', {
        className: 'subscription-channels__count'
      }, channels_num),
      dom.tag('div', {
        className: 'subscriptionChannelsCountText'
      }, helpFunctions.getValueText(channels_num, 'channel'))
    );
    channels_movie_count.push($subscriptionChannelsCountBlock);
  }

  if(data.videos_num) {
    movies_count = getMoviesCount(data.videos_num);
  } else {
    if(data.paidSubscription) {
      movies_count = getMoviesCount(data.paidSubscription.movies_count) || '';
    }
  }

  if (movies_count && movies_count > 0) {
    $subscriptionMoviesCountBlock = dom.tag('div', {
        className: 'subscription-movies'
      },
      dom.tag('div', {
        className: 'subscription-movies__count'
      }, movies_count + '+'),
      dom.tag('div', {
        className: 'subscription-movies__text'
      }, helpFunctions.getValueText(movies_count, 'text_movie'))
    );
    channels_movie_count.push($subscriptionMoviesCountBlock);
  }

  if(data.come_from && data.come_from == 'movie' && channels_movie_count.length) {
    channels_movie_count.reverse();
  }

  for(var i = 0, len = channels_movie_count.length; i < len; i++) {
    this.$subscriptionItemInfo.appendChild(channels_movie_count[i]);
  }



  if (data.paidSubscription) {

    var subscriptionTariff = subscriptionService.getFirstSubscriptionTariff(data.paidSubscription);
    if (subscriptionTariff) {
      var subscriptionPrice = subscriptionTariff.price || '';

      var periodCorrectText = (!subscriptionTariff.is_try_and_buy ? i18nMgg("short_per_month") : '');
      var priceBlock;
      var $subscriptionPriceBlock = dom.tag('div', {
          className: 'subscription-price'
        },
        dom.tag('div', {
          className: 'subscription-price__wrap'
        }, subscriptionPrice),
        dom.tag('div', {
          className: 'subscription-price__text'
        }, data.paidSubscription.currency + periodCorrectText)
      );



      if (subscriptionTariff.is_try_and_buy) {
        if(title){
          var salesLabel = dom.tag('span', {
            className: 'salesLabel'
          }, i18nMgg('sales_label'));
          this.$subscriptionTitle.appendChild(salesLabel);
        }
        //this.$subscriptionTitle.innerHTML = title + '<span>Акция</span>';
        //  priceBlock.innerHTML = subscriptionPrice + '<span>*</span>';
      }
      this.$subscriptionItemInfo.appendChild($subscriptionPriceBlock);

    }
  }

  this.$body.appendChild(this.$subscriptionInfo);

}

function getMoviesCount(subsMoviesCount){
  var moviesCount = 0;
  if (subsMoviesCount != undefined && subsMoviesCount > 0) {
    var divider = subsMoviesCount.toString().length > 3 ? 100 : 10;
    moviesCount = Math.floor(subsMoviesCount / divider) * divider;
  }
  return moviesCount;
}

// inheritance
SubscriptionBlock.prototype = Object.create(Panel.prototype);
SubscriptionBlock.prototype.constructor = SubscriptionBlock;

module.exports = SubscriptionBlock;

},{"core/app":16,"core/components/panel":26,"core/dom":31,"core/lib/helpFunctions":34,"core/tools/subscriptionService":54}],129:[function(require,module,exports){

'use strict';

var dom = require('core/dom'),
  app = require('core/app'),
  paymentModel = require('core/paymentModel'),
  helpFunctions = require('core/lib/helpFunctions'),
  subsService = require('core/tools/subscriptionService'),
  currency, currencyID;

var getCorrectPrice = function (tariff, isRegular) {
  if (isRegular) {
    return paymentModel.defaultEvents.getGeoPriceFromData(tariff.regular_price, currency, currencyID) + i18nMgg('short_per_month');
  }
  if (tariff.is_try_and_buy) {
    return paymentModel.defaultEvents.getGeoPriceFromData(tariff.price, currency, currencyID);
  } else {
    return paymentModel.defaultEvents.getGeoPriceFromData(tariff.price, currency, currencyID) + i18nMgg('short_per_month');
  }

};

var getCorrectTime = function (expirationDate) {
  var data = expirationDate.split('T');
  var YearMonthDay = data[0].split('-');
  return YearMonthDay[2] + '.' + YearMonthDay[1] + '.' + YearMonthDay[0];

};

function SubscriptionItem($item, data) {

  currency = data.currency;
  currencyID = data.currency_id;

  $item.subscriptionHead = dom.tag('div', {
      className: 'subscription-item__head'
    },
    $item.subscriptionImg = dom.tag('div', {
        className: 'subscription-item__img'
      }
    ),

    $item.subscriptionTitle = dom.tag('div', {
        className: 'subscription-item__title'
      }
    ),
    $item.isArhive = dom.tag('div', {
        className: 'subscription-item__label'
      }
    )
  );
  $item.description = dom.tag('div', {
    className: 'subscription-item__desc'
  });

  $item.footer = dom.tag('div', {
      className: 'subscription-item__footer'
    },
    $item.price = dom.tag('div', {
        className: 'subscription-item__price'
      }
    ),
    $item.expiration = dom.tag('div', {
        className: 'subscription-item__expiration'
      }
    ),
    $item.autopay = dom.tag('div', {
      className: 'subscription-item__autopay'
    })
  );

  $item.promoDescription = dom.tag('div', {
    className: 'subscription-item__promo'
  });

  $item.salesLabel = dom.tag('div', {
    className: 'subscription-item__salesLabel'
  });


  $item.isArhive.textContent = i18nMgg('archive_label');


  if (data.is_archive) {
    $item.subscriptionTitle.textContent = data.title;
  } else {
    $item.isArhive.style.display = "none";
    var subscription_image = subsService.getSubscriptionMetaImage(data);
    if(subscription_image) {
      $item.subscriptionImg.innerHTML = '<img class="img" src = ' + subscription_image + '>';
    }

    $item.subscriptionTitle.textContent = data.title || '';
  }

  if (data.products.length > 1) {
    $item.description.textContent = data.objects_count + ' ' + helpFunctions.getValueText(data.objects_count, 'channel') + ' ' + data.description;
  } else if (data.products.indexOf('tv') != -1) {
    $item.description.textContent = data.objects_count + ' ' + helpFunctions.getValueText(data.objects_count, 'channel') + ' ' + data.description;
  } else if (data.products.indexOf('main') != -1) {
    $item.description.textContent = data.description || '';
  } else {
    $item.description.textContent = data.description || '';
  }

  if (data.restriction != 'geo') {
    $item.price.textContent = getCorrectPrice(data.tariffs[0]);
  } else {
    $item.description.classList.add('white');
    $item.description.textContent = i18nMgg('geo_restriction_text');
  }

  if (data.expiration_date) {
    $item.expiration.textContent = i18nMgg('subs_till') + ' ' + getCorrectTime(data.expiration_date);
    $item.price.style.display = "none";

    //STV-1018
    /* if (data.is_renew) {
      $item.autopay.textContent = i18nMgg('auto_renew_on_2');
    }*/

  } else if (data.tariffs && data.tariffs.length && data.tariffs[0].is_try_and_buy) {
    $item.promoDescription.textContent = i18nMgg('first_month_price') + getCorrectPrice(data.tariffs[0]) + ', ' +
      i18nMgg('next_month_price') + getCorrectPrice(data.tariffs[0], true);
    $item.salesLabel.innerHTML = '<span>' + i18nMgg('sales_label') + '</span>';
    $item.salesLabel.style.display = 'block';
  }

  $item.appendChild($item.subscriptionHead);
  $item.appendChild($item.description);
  $item.appendChild($item.footer);
  $item.appendChild($item.promoDescription);
  $item.appendChild($item.salesLabel);

}

// public
module.exports = SubscriptionItem;

},{"core/app":16,"core/dom":31,"core/lib/helpFunctions":34,"core/paymentModel":41,"core/tools/subscriptionService":54}],130:[function(require,module,exports){
'use strict';

var dom = require('core/dom'),
  helpFunctions = require('core/lib/helpFunctions')
  ;

var UIGenerator = {
  IWatchButton: function ($item, data) {
    $item.appendChild(
      dom.tag('div', {
          className: 'watchBlockItem'
        },
        this.$icon = dom.tag('div', {
          className: 'blockIcon'
        }, dom.tag('div', {
          className: 'icon-' + data.type
        })),
        dom.tag('div', {
          className: 'blockTitle'
        }, data.title)
      )
    );
  },
  rightMenuItem: function($item, data) {
    $item.$filterItem = dom.tag('div', {

      },
      $item.$title = dom.tag('span', {
        className: 'title'
      })
    );
    $item.$subTitle = dom.tag('span', {
      className: 'subtitle'
    });

    $item.$filterItem.appendChild($item.$subTitle);
    $item.appendChild($item.$filterItem);

    $item.$title.textContent = data.title;
    $item.$subTitle.textContent = data.subTitle || '';
    if(data.data.type) {
      $item.classList.add('type_' + data.data.type);
    }

    $item.$filterItem.className = data.data.type;
  },
  epgProgram: function ($item, data, current_channel_data, time_stamp_now) {
    var program_date_start = new Date(data.start);
    var program_date_start_string = helpFunctions.pad(program_date_start.getHours()) + ':' + helpFunctions.pad(program_date_start.getMinutes());

    $item.programContainer = dom.tag('div', {
        className: 'programs-list__item'
      },
      dom.tag('div', {
        className: 'programs-list__time'
      }, program_date_start_string),
      $item.programmTitle = dom.tag('div', {
        className: 'programs-list__title'
      }, data.title)
    );

    var program_info = {can_play: false, is_live: false};
    if (time_stamp_now <= data.end_timestamp && time_stamp_now >= data.start_timestamp) {
      program_info.is_live = true;
      if (current_channel_data.get('is_dvr')) {
        program_info.can_play = true;
      }
    }
    if(data.object_id || (data.virtual_object_id && current_channel_data.get('is_dvr') && time_stamp_now >= data.start_timestamp)) {
      program_info.can_play = true;
    }

    data.can_play = program_info.can_play;
    data.is_live = program_info.is_live;
    if(program_info.is_live) {
      $item.programContainer.classList.add('live');
    }

    if(program_info.can_play) {
      $item.programContainer.appendChild(dom.tag('div', {
        className: 'mggMPlay'
      }));
    }

    if (time_stamp_now >= data.end_timestamp) {
      $item.programContainer.classList.add('past_program');
    }

    $item.appendChild($item.programContainer);
  },
  epgCategory: function ($item, data) {

    $item.classList.add('category-list__item');

    if (data.image) {
      $item.style.backgroundImage = 'url(' + data.image + ')';
    }
    if (data.id == 1) {
      $item.classList.add('favorite', 'category-list__item');
    }

    $item.appendChild(dom.tag('div', {},
      dom.tag('span', {
        className: 'category-list__title'
      }, data.title),
      dom.tag('span', {
        className: 'category-list__length'
      }, data.channels.length)
    ));
  },
  epgChannel: function ($item, data, current_channel_conf) {
    $item.$channelContainer = dom.tag('div', {
        className: 'category-channels__item'
      },
      $item.cover = dom.tag('div', {
        className: 'category-channels__cover'
      }),
      dom.tag('div', {
          className: 'category-channels__info'
        },
        dom.tag('div', {
          className: 'category-channels__title' + current_channel_conf.channel_mark
        }, data.get('title')),
        $item.programTitle = dom.tag('div', {
          className: 'category-channels__program'
        })
      )
    );

    $item.cover.style.backgroundImage = 'url(' + data.get('image').small + ')';


    if (current_channel_conf.current_program) {
      $item.programTitle.textContent = current_channel_conf.current_program.title;
    }

    $item.appendChild($item.$channelContainer);

  }
};

module.exports = UIGenerator;

},{"core/dom":31,"core/lib/helpFunctions":34}],131:[function(require,module,exports){
/**
 * Created by vape on 13.07.16.
 */

module.exports = {
  dune: {
    public_key: '_aura_j8',
    private_key: 'cc0d86eb4f'
  }
};

},{}],132:[function(require,module,exports){
'use strict';

var Vendor = require('mggp-player').Vendor;
var AddonError = require('mggp-player').AddonError;

var _native = null;

var PLAYBACK_STATE_END_OF_FILE = 1,
  PLAYBACK_STATE_CONTENT_ERROR = 5,
  PLAYBACK_STATE_INFO_GET = 7,
  PLAYBACK_STATE_BEGIN = 4,
  PLAYBACK_STATE_PAUSED = 111111,
  PLAYBACK_STATE_SEEKING =111111,
  PLAYBACK_STATE_BUFFERING = 111111,
  PLAYBACK_STATE_FINISHED = 111111,
  PLAYBACK_STATE_DEINITIALIZING =111111;
window.stbEvent = {};

/**
 * @class MggpVendorAura
 */
function MggpVendorAura(pPlayer, pConfig) {
  Vendor.apply(this, arguments);

  var self = this;

  var _src = null;
  var _videoInfo = null;
  var _startPosition = 0;
  var _started = false;
  var _seeked = false;
  var _paused = false;
  var _beforeCompleteFired = false;
  var _seekTriedCount = 0;
  var _changePositionTriedOnBuffering = 0;
  var _native = gSTB;

  // init gSTB player
  _native.InitPlayer();
  _native.SetAspect(0x10);
  _native.SetVideoControl(0);
  _native.SetVideoState(0);
  _native.SetMode(0);
  _native.SetWinAlphaLevel(0, 255);
  _native.SetWinAlphaLevel(1, 255);
  _native.SetPIG(1, 0, 0, 0);
  _native.Set3DConversionMode(0);
  _native.SetTopWin(0);

  this.dispose = function () {
    self.log('MggpVendorAura.dispose()');
    tooggleEvents(false);

    _src = null;
    _videoInfo = null;
    _native = null;

    self.player = null;
    self.namespase = null;
    self.config = null;
  };

  this.load = function (pSrc, pVideoInfo, pOptions) {
    _videoInfo = pVideoInfo || {};
    _src = pSrc || null;
    _seekTriedCount = 0;

    if (!_videoInfo && !_src) {
      self.emit('mediaError', {errorText: 'Src not found'});
      return;
    }

    self.set('position', 0);
    createPlayer(pOptions);

    if (pOptions.hasOwnProperty('startSeconds')) {
      _startPosition = pOptions['startSeconds'];
      delete pOptions['startSeconds'];
    }

  };

  var createPlayer = function (pOptions) {

    self.log('MggpVendorAura.createPlayer()');
    tooggleEvents(true);

    var src = _src && _src != '' ? _src : _videoInfo.src;

    var src_url = "auto "+src;
      _native.Play(src_url);
  };

  this.play = function () {
    if (_native) {
      setState(1);
      _native.Continue();
      _paused = false;
    }
  };

  this.pause = function () {
    self.log('MggpVendorAura.pause()');
    if (_native && !_paused) {
      setState(2);
      _paused = true;
      _native.Pause();
    }
  };

  this.stop = function () {
    // elem.innerHTML += 'STOP';
    self.log('MggpVendorAura.stop()');

    if (_native) {
      if (_native.Stop) _native.Stop();
    }

    self.dispose();
  };

  this.togglePlayPause = function () {
    self.log('MggpVendorAura.togglePlayPause()');
    !_paused ? this.pause() : this.play();
  };

  this.seekTo = function (seconds) {
    self.log('MggpVendorAura.seekTo(' + seconds + ')');
    if (!_native || !seconds) return;
    _seeked = true;

    var time = Math.min(Math.max(0, seconds), Math.min(self.get('duration') - 10, seconds));
    _native.SetPosTime(time);
  };

  this.setVolume = function (pVolume) {
    self.log('MggpVendorAura.seekTo(' + pVolume + ')');
  };

  this.mute = function () {
    self.log('MggpVendorAura.mute()');
  };

  this.unMute = function () {
    self.log('MggpVendorAura.unMute()');
  };

  var setState = function (pNewState) {
    self.log('MggpVendorAura.setState(' + pNewState + ')');
    self.set('state', pNewState);
    self.emit('stateChange', pNewState);
  };

  var tooggleEvents = function (pOn) {
    self.log('MggpVendorAura.tooggleEvents(' + pOn + ')');
    if (pOn) {
      if (_native) {
        window.stbEvent.onEvent = setPlaybackEventCallback;
      }

      if (self.player.on) {
        self.player.on("player:timeUpdate", onTimeUpdate);
      }
    } else {
      if (_native) {
        window.stbEvent.onEvent = null;
      }

      if (self.player.off) {
        self.player.off("player:timeUpdate", onTimeUpdate);
      }
    }
  };


  var onTimeUpdate = function () {
    var current_pos = _native.GetPosTime();
    if (self.get('position') < current_pos && self.get('state') == 3) {
      _changePositionTriedOnBuffering++;
      if (_changePositionTriedOnBuffering >= 3) {
        self.set('state', 1);
        _changePositionTriedOnBuffering = 0;
      }
    } else {
      _changePositionTriedOnBuffering = 0;
    }

    var duration = _native.GetMediaLen();

    if (duration === undefined) {
      duration = 1;
    }

    if (self.get('duration') != duration && duration > 0) {
      self.set('duration', duration);
    }

    if (current_pos != self.get('position')) {
      self.set('position', current_pos);
    }

    if (self.get('duration') - self.get('position') < 1 && !_beforeCompleteFired) {
      _beforeCompleteFired = true;
      self.emit("mediaBeforeComplete");
    }
  };

  var setPlaybackEventCallback = function (event, info) {
    switch (parseInt(event, 10)) {
      case PLAYBACK_STATE_CONTENT_ERROR:
        setState(5);
        self.emit('mediaError', {errorText: 'Video error.', errorCode: (e && e.errorCode)});
        break;
      case PLAYBACK_STATE_BUFFERING:
        setState(3);
        break;
      case PLAYBACK_STATE_INFO_GET:
      case  PLAYBACK_STATE_BEGIN:
        self.set('duration', _native.GetMediaLen());
        _started = true;

        if (_seeked) {
          _seeked = false;
          self.emit('mediaSeekEnd');
        }

        if (parseInt(self.get('position')) < 12 && _startPosition > 12 && _seekTriedCount < 5) {
          _seekTriedCount++;
          self.seekTo(_startPosition);
        } else {
          _seekTriedCount = 0;
          _startPosition = 0;
          setState(1);
        }
        break;
      case PLAYBACK_STATE_PAUSED:
        if (_paused) {
          setState(2);
        }
        break;
      case PLAYBACK_STATE_END_OF_FILE:
        setState(0);
        _started = false;
        break;
      case PLAYBACK_STATE_FINISHED:
        setState(0);
        // elem.innerHTML += 'FINISHED';
        break;
      case PLAYBACK_STATE_SEEKING:
        setState(4);
        break;
      case PLAYBACK_STATE_DEINITIALIZING:
        // elem.innerHTML += 'DEINITIALIZING';

        break;
      default:
        break;
    }
  };
  self.log('MggpVendorAura:Created!');
}

MggpVendorAura.prototype = Object.create(Vendor.prototype);
MggpVendorAura.prototype.constructor = MggpVendorAura;

MggpVendorAura.mimeTypes = ["mp4", "webm", "m3u8", "dash", "wvm", "mpd"];
MggpVendorAura.priority = 0;

MggpVendorAura.canPlay = function (pType, pConfig) {
  return true;
};

module.exports = MggpVendorAura;

},{"mggp-player":2}],133:[function(require,module,exports){
'use strict';
var keys = require('vendor/general/keys');
keys['VOLUME_UP'] = 107;
keys['VOLUME_DOWN'] = 109;
keys['MUTE'] = 192;
keys['CHANNEL_PREV_NEXT'] = 9;
keys['EXIT'] = 27;
module.exports = keys;

},{"vendor/general/keys":137}],134:[function(require,module,exports){
var vendor = require('./aura-vendor'),
    dom = require('core/dom'),
    app = require('core/app'),
    keys = require('vendor/aura/keys'),
    Widget = require('core/components/widget'),
    PopUpChangeRes = require('./popup-change-res'),
    PopUpExit = require('widgets/popup/popup-exit'),
    router = require('core/router'),
    changeValue   = 10,
    currentVolume = 50,
    $current, $bot, $top, displayTimeout;

var volumeWidget  = new Widget({
  $node: dom.tag('div', {id: 'volumeWidget'},
    $top = dom.tag('div', {id: 'volumeTopValue'}),
    $current = dom.tag('div', {id: 'volumeCurrentValue'}),
    $bot = dom.tag('div', {id: 'volumeBotValue'})
  ),
  visible: false,
  append_to_body: true,
  focusable: false
});

initVolume();

app.addListener('loaded', function (event) {
  var mode = gSTB.RDir('gmode');
  var body_tag = document.getElementsByTagName('body')[0];

  if(mode == 1280) return;

  if(mode == 720) {
    body_tag.style.webkitTransform = 'scale(0.5625,0.8) translate(-497px, -90px)';
  } else if(mode == 1920) {
    body_tag.style.webkitTransform = 'scale(1.5) translate(213px, 120px)';
  }
  PopUpChangeRes.show({});
});

app.addListener('keydown', function (event) {
  if (event.keyCode === keys.VOLUME_UP) {
    volumeUp();
  } else if(event.keyCode === keys.VOLUME_DOWN) {
    volumeDown();
  } else if(event.keyCode === keys.MUTE) {
    mute();
  } else if(event.keyCode === keys.CHANNEL_PREV_NEXT) {
    if(router.current && router.current.activeComponent && router.current.activeComponent.emit) {
      if(event.shiftKey || (event.event && event.event.shiftKey)) {
        router.current.emit('keydown',{
          keyCode: keys.PAGE_DOWN,
          event: {}
        });
      } else {
        router.current.emit('keydown',{
          keyCode: keys.PAGE_UP,
          event: {}
        });
      }
    }
  } else if(event.keyCode === keys.EXIT) {
    var active_component = router.current.activeComponent;
    PopUpExit.show({componentToFocus: active_component});
  } else {
    return;
  }
});

volumeWidget.display = function ( sec ) {
  if ( volumeWidget.visible ) { clearTimeout(displayTimeout); }
  if ( sec !== undefined ) {
    displayTimeout = setTimeout(function () { volumeWidget.hide(); }, sec * 1000);
  }
  this.show();
};

volumeWidget.setValue = function ( value ) {
  if ( value < 0 || value > 100 ) {
    return;
  }
  currentVolume = value;
  $current.innerText = currentVolume.toString();
  if ( currentVolume !== 0 && currentVolume - changeValue > 0 ) {
    $bot.innerText = (currentVolume - changeValue).toString();
  } else {
    $bot.innerText = '';
  }
  if ( currentVolume !== 100 ) {
    $top.innerText = (currentVolume + changeValue).toString();
  } else {
    $top.innerText = '';
  }
};

function volumeDown () {
  if ( volumeWidget.isMuted ) {
    gSTB.SetMute(0);
    volumeWidget.isMuted = false;
    $current.classList.remove('muted');
  }
  if ( currentVolume >= changeValue ) {
    currentVolume -= changeValue;
    $current.innerText = currentVolume.toString();

    if ( currentVolume !== 0 && currentVolume - changeValue > 0 ) {
      $bot.innerText = (currentVolume - changeValue).toString();
    } else {
      $bot.innerText = '';
    }
    $top.innerText = (currentVolume + changeValue).toString();
    gSTB.SetVolume(currentVolume);
  }
  volumeWidget.display(2)
}

function volumeUp () {
  if ( volumeWidget.isMuted ) {
    gSTB.SetMute(0);
    volumeWidget.isMuted = false;
    $current.classList.remove('muted');
  }
  if ( currentVolume + changeValue <= 100 ) {
    currentVolume += changeValue;
    $current.innerText = currentVolume.toString();
    if ( currentVolume !== 100 ) {
      $top.innerText = (currentVolume + changeValue).toString();
    } else {
      $top.innerText = '';
    }
    gSTB.SetVolume(currentVolume);
    $bot.innerText = (currentVolume - changeValue).toString();
  }
  volumeWidget.display(2)
}

function mute () {
  if (!volumeWidget.isMuted ) {
    gSTB.SetMute(1);
    volumeWidget.isMuted = true;
    $current.classList.add('muted');
  } else {
    gSTB.SetMute(0);
    volumeWidget.isMuted = false;
    $current.classList.remove('muted');
  }
  volumeWidget.display(2)
}


function initVolume() {

  gSTB.SetVolume(currentVolume);

  $current.innerText = currentVolume.toString();
  if ( currentVolume <= 100 - changeValue ) { $top.innerText = (currentVolume + changeValue).toString(); }

  if ( currentVolume >= changeValue ) {
    $bot.innerText = (currentVolume - changeValue).toString();
  } else {
    $bot.innerText = '0';
  }
  volumeWidget.isMuted = Boolean(gSTB.GetMute());
  volumeWidget.$node.classList.remove('invisible');
}
module.exports = function() {
  return vendor;
};

},{"./aura-vendor":132,"./popup-change-res":136,"core/app":16,"core/components/widget":30,"core/dom":31,"core/router":45,"vendor/aura/keys":133,"widgets/popup/popup-exit":154}],135:[function(require,module,exports){
module.exports = {
  name: 'aura'
};

},{}],136:[function(require,module,exports){
'use strict';

var Widget = require('core/components/widget'),
    dom = require('core/dom'),
    Button = require('core/components/button'),
    helpFunctions = require('core/lib/helpFunctions'),
    Panel = require('core/components/panel'),
    PopUpChangeRes;

PopUpChangeRes = new Widget({
    $node: dom.tag('div', {id: 'widgetPopUpChangeRes'}),
    visible: false,
    focusable: true,
    append_to_body: true,
    events: {
        'show': function () {
            PopUpChangeRes.$btnChange.focus()
        },
        'focus': function(){
        }
    }
});

PopUpChangeRes.$container = new Panel({
    $node: dom.tag('div', {className: 'popup-exit'}),
    visible: true,
    focusable: true
});

PopUpChangeRes.$text = new Panel({
    $node: dom.tag('div', {className: 'popup-exit__txt'}),
    visible: true,
    focusable: true,
    text: 'dasdasd'
});

PopUpChangeRes.$row = new Panel({
    $node: dom.tag('div', {className: 'popup-exit__row'}),
    visible: true,
    focusable: true
});

PopUpChangeRes.$icon = new Panel({
    $node: dom.tag('div', {className: 'icon icon_exit'}),
    visible: true,
    focusable: true
});

PopUpChangeRes.$user = new Panel({
    $node: dom.tag('div', {className: 'popup-exit-nickname'}),
    visible: false,
    focusable: false
});

PopUpChangeRes.$btnExit = new Button({
    $node: dom.tag('div', {className: 'popup-exit__btn'}),
    visible: true,
    focusable: true,
    events: {
        'click': function (event) {
          if(PopUpChangeRes.callback){
            PopUpChangeRes.hide();
            PopUpChangeRes.callback();
          } else {
            helpFunctions.deviceExit(PopUpChangeRes);
          }
        },
        mouseover: function (event) {
          this.focus();
        }
    },
    keys: {
        LEFT: function () {
            PopUpChangeRes.$btnChange.focus();
        },
        RETURN: function () {
          PopUpChangeRes.$btnChange.emit('click');
        }
    }
});

PopUpChangeRes.$btnChange = new Button({
    $node: dom.tag('div', {className: 'popup-exit__btn'}),
    visible: true,
    focusable: true,
    events: {
        'click': function () {
          gSTB.ExecAction('graphicres 1280');
          gSTB.ExecAction('reboot');
        },
        mouseover: function (event) {
          this.focus();
        }
    },
    keys: {
        RIGHT: function () {
            PopUpChangeRes.$btnExit.focus();
        },
        RETURN: function () {
          PopUpChangeRes.$btnChange.emit('click');
        }
    }
});


PopUpChangeRes.add(PopUpChangeRes.$container);
PopUpChangeRes.$container.add(PopUpChangeRes.$icon);
PopUpChangeRes.$container.add(PopUpChangeRes.$user);
PopUpChangeRes.$container.add(PopUpChangeRes.$text);
PopUpChangeRes.$container.add(PopUpChangeRes.$row);
PopUpChangeRes.$row.add(PopUpChangeRes.$btnChange);
PopUpChangeRes.$row.add(PopUpChangeRes.$btnExit);



PopUpChangeRes.addListener('show', function (data) {
  PopUpChangeRes.$btnChange.setValue('Переключить на 1280');
  PopUpChangeRes.$btnExit.setValue(i18nMgg('exit_button'));
  PopUpChangeRes.$icon.$node.className = 'icon icon_exit';
  PopUpChangeRes.$icon.$node.style.background = null;
  PopUpChangeRes.$user.$node.style.display = "none";
  PopUpChangeRes.$text.$node.innerHTML = 'Для корректного отображения MEGOGO необходимо переключить разрешение приставки на 1280';
});

PopUpChangeRes.addListener('hide', function (data) {
     PopUpChangeRes.componentToFocus.focus();
});

module.exports = PopUpChangeRes;

},{"core/components/button":19,"core/components/panel":26,"core/components/widget":30,"core/dom":31,"core/lib/helpFunctions":34}],137:[function(require,module,exports){
/**
 * Created by vape on 13.07.16.
 */

'use strict';

module.exports = {
  "SPACE": 32,
  "LEFT": 37,
  "RIGHT": 39,
  "UP": 38,
  "DOWN": 40,
  "ENTER": 13,
  "RETURN": 8,
  "ZERO": 48,
  "ONE": 49,
  "TWO": 50,
  "THREE": 51,
  "FOUR": 52,
  "FIVE": 53,
  "SIX": 54,
  "SEVEN": 55,
  "EIGHT": 56,
  "NINE": 57,
  "NUMERIC_ZERO": 96,
  "NUMERIC_ONE": 97,
  "NUMERIC_TWO": 98,
  "NUMERIC_THREE": 99,
  "NUMERIC_FOUR": 100,
  "NUMERIC_FIVE": 101,
  "NUMERIC_SIX": 102,
  "NUMERIC_SEVEN": 103,
  "NUMERIC_EIGHT": 104,
  "NUMERIC_NINE": 105,
  "RED": 403,
  "GREEN": 404,
  "YELLOW": 405,
  "BLUE": 406,
  "PLAY": 415,
  "PAUSE": 19,
  "STOP": 413,
  "REC": 416,
  "FF": 417,
  "RW": 412,
  "EXIT": 27,
  "INFO": 457,
  "PAGE_UP": 33,
  "PAGE_DOWN": 34
};

},{}],138:[function(require,module,exports){
'use strict';

var Widget = require('core/components/widget'),
  request = require('core/request'),
  Button = require('core/components/button'),
  dom = require('core/dom'),
  animate = require('core/animate'),
  Header = require('ui/header'),
  progress = require('./progress'),
  LeftMenu = require('widgets/menu-left'),
  keys = require('vendor/aura/keys'),
  router = require('core/router'),
  menuNavigateService = require('core/tools/menuNavigateService'),
  helpFunctions = require('core/lib/helpFunctions'),
  api = require('core/api'),
  BackLabel = require('widgets/back-lable'),
  position = 0,
  widget,
  player,
  vastData,
  showed,
  linear,
  linkUrl;

var $advertContent = dom.tag('div', {id: 'advertContent'});

widget = new Widget({
  $node: dom.tag('div', {id: 'widgetAdvertContainer'}),
  visible: false
});

widget.advertContent = new Widget({
  $node: $advertContent,
  visible: true
});

widget.controls = new Widget({
  $node: dom.tag('div'),
  className: 'controls',
  visible: true,
  focusable: true
});

widget.controls.advertSkipButton = new Button({
  $node: dom.tag('div', {id: 'advertSkipButton'}),
  className: 'ad-btn skip disable',
  visible: true,
  focusable: false
});

widget.controls.advertActionButton = new Button({
  $node: dom.tag('div', {id: 'advertActionButton'}),
  className: 'ad-btn out',
  visible: true,
  focusable: true
});

widget.backLable = new BackLabel({
  componentToFocus: widget.controls
});

widget.controls.add(widget.controls.advertSkipButton);
widget.controls.add(widget.controls.advertActionButton);
widget.controls.add(progress);
widget.header = new Header('');
widget.isLinear = false;
widget.height = 0;
//widget.header.shadeOn();
widget.add(widget.header);
widget.add(widget.advertContent);
widget.add(widget.controls);
widget.add(widget.backLable);

widget.shade = new Widget({
  className: 'shade',
  focusable: false,
  visible: true
});
widget.shade.$body.appendChild(dom.tag('div', {
  className: 'top-shade'
}));
widget.shade.$body.appendChild(dom.tag('div', {
  className: 'bottom-shade'
}));
widget.add(widget.shade);

document.getElementsByTagName('body')[0].appendChild(widget.$node);

widget.setVastData = function (data) {
  vastData = data;
  position = 0;
  if (vastData.vastData.controls && parseInt(vastData.vastData.controls[0]) === 0) {
    widget.controls.hide();
    widget.shade.hide();
    widget.header.hide();
  } else {
    widget.controls.show();
    widget.shade.show();
    widget.header.show();
  }
  widget.isLinear = data.linear;
  var value = (vastData.vastData.linkTxt && vastData.vastData.linkTxt[0]) || i18nMgg('advert_button_text');
  widget.controls.advertActionButton.setValue(value);

  if (vastData.linear == true) {
    removeClass(widget.$node, 'nonLinear');
    addClass(widget.$node, 'linear');
    widget.height = 0;
    if (vastData.vastData.titleVisible == 0) {
      widget.header.hide();
    } else {
      if (vastData.vastData.titleTxt) {
        widget.header.setTitle(vastData.vastData.titleTxt)
      } else if (vastData.count > 1) {
        widget.header.setTitle(i18nMgg('commercial_counter').replace('[n]', vastData.number).replace('[total]', vastData.count));
      } else {
        widget.header.setTitle(i18nMgg('commercial'))
      }
      widget.header.show();
    }

    if (vastData.vastData.progressVisible == 0) {
      progress.hide();
    } else {
      progress.show();
    }

    if (data.vastData.isClickable && data.vastData.isClickable[0] && data.vastData.dstUrl) {
      var url;
      for (var i = 0; i < data.vastData.dstUrl.length; i++) {
        url = data.vastData.dstUrl[i].match(/^megogo:\/\/(.+)$/);
        if (url)
          break;
      }
      if (url && url[1] && menuNavigateService.checkAdLink(url[1])) {
        linkUrl = url[1];
        widget.controls.advertActionButton.focusable = true;
        widget.controls.advertActionButton.show();
      } else {
        linkUrl = null;
        widget.controls.advertActionButton.focusable = false;
        widget.controls.advertActionButton.hide();
      }
    } else {
      linkUrl = null;
      widget.controls.advertActionButton.focusable = false;
      widget.controls.advertActionButton.hide();
    }
  } else {
    removeClass(widget.$node, 'linear');
    addClass(widget.$node, 'nonLinear');
    if (data.vastData.mediaFile && data.vastData.mediaFile[0]) {
      widget.height = data.vastData.mediaFile[0].height;
    }
  }
  if (widget.visible)
    checkAdControls();
};
widget.backLable.addListener('click', function () {
  widget.emit('goBack');
});

widget.controls.advertActionButton.addListener('click', function (event) {
  if (!vastData.vastData.dstUrl || parseInt(vastData.vastData.isClickable) === 0) return;
  if (vastData.vastData.clickthrough && vastData.vastData.clickthrough[0] && vastData.vastData.clickthrough[0].indexOf('allroll.biz') >= 0)
    request.ajax(vastData.vastData.clickthrough[0]);
  player.emit('ad:skin:clickOnMessage');
  menuNavigateService.navigateAdLink('navigate', linkUrl);
});

widget.controls.advertActionButton.addListener('keydown', function (event) {
  switch (event.keyCode) {
    case keys.LEFT:
      if (widget.controls.advertSkipButton.focusable)
        widget.controls.advertSkipButton.focus();
      else
        backLableFocus();
      break;
    case keys.UP:
      backLableFocus();
      break;
  }
});

widget.controls.advertSkipButton.addListener('click', function () {
  if (widget.controls.advertSkipButton.focusable)
    player.emit('ad:skin:skipMessage');
});

function backLableFocus() {
  if (widget.backLable.visible)
    widget.backLable.focus();
}

widget.controls.advertSkipButton.addListener('keydown', function (event) {
  switch (event.keyCode) {
    case keys.LEFT:
      backLableFocus();
      break;
    case keys.RIGHT:
      if (widget.controls.advertActionButton.focusable)
        widget.controls.advertActionButton.focus();
      break;
    case keys.UP:
      backLableFocus();
      break;
  }
});

widget.controls.addListener('focus', function () {
  if (widget.controls.advertSkipButton.focusable)
    widget.controls.advertSkipButton.focus();
  else if (widget.controls.advertActionButton.focusable)
    widget.controls.advertActionButton.focus();
  else
    backLableFocus();
});

widget.addListener('show', function (pOptions, pPlayer) {
  widget.controls.advertSkipButton.setValue(i18nMgg('skip_commercial'));
  widget.controls.advertSkipButton.focusable = false;
  widget.controls.advertSkipButton.addClass('disable');
  checkAdControls();

  widget.backLable.hide();
  var adEl = $advertContent.firstChild;
  widget.$node.style.height = null;
  widget.removeClass('startscreen');
  if (widget.isLinear) {
    LeftMenu.hide();
    if (adEl && adEl.nodeName.toLowerCase() == 'iframe' && vastData.vastData.controls && parseInt(vastData.vastData.controls[0]) === 0) {
      adEl.focus();
    } else {
      if (vastData.type != 'startscreen')
        widget.backLable.show();
      else
        widget.addClass('startscreen');
      if (widget.controls.visible)
        widget.controls.focus();
    }
  } else {
    widget.$node.style.height = adEl.offsetHeight + 'px';
  }
  showed = true;
  player.addEventListener('property:ad:vendor:position', positionChange, false);
});

widget.addListener('hide', function () {
  $advertContent.innerHTML = '';
  showed = false;
  player.removeEventListener('property:ad:vendor:position', positionChange);
  if (widget.isLinear) {
    LeftMenu.show();
  }
});

widget.controlsShowed = function () {
  if (!widget.isLinear)
    widget.addClass('controls-visible');
};


widget.controlsHided = function () {
  widget.removeClass('controls-visible');
};

widget.init = function (pPlayer) {
  player = pPlayer;
};

function positionChange() {
  position = player.get('ad:vendor:position');
  checkAdControls();
}

var checkAdControls = function () {
  if (vastData.linear) {
    var skipTime = vastData.vastData && vastData.vastData.skipTime && vastData.vastData.skipTime[0] || 0;
    var duration = vastData.vastData.duration && vastData.vastData.duration[0] || player.get('ad:vendor:duration');
    progress.setProgress(position / duration);
    if (skipTime >= duration) {
      if (widget.controls.advertSkipButton.focusable || widget.controls.advertSkipButton.visible) {
        widget.controls.advertSkipButton.focusable = false;
        widget.controls.advertSkipButton.hide();
        if (widget.controls.advertActionButton.focusable) {
          widget.controls.advertActionButton.focus();
        } else {
          backLableFocus();
        }
      }
    } else {
      if (!widget.controls.advertSkipButton.visible)
        widget.controls.advertSkipButton.show();
      if (!widget.controls.advertSkipButton.focusable) {
        if (position >= skipTime) {
          widget.controls.advertSkipButton.focusable = true;
          widget.controls.advertSkipButton.removeClass('disable');
          widget.controls.advertSkipButton.setValue(i18nMgg('skip_commercial'));
        } else {
          widget.controls.advertSkipButton.setValue(i18nMgg('commercial_skip_seconds').replace('[n]', Math.ceil(skipTime - position)));
        }
      } else {
        if (position < skipTime) {
          if (widget.controls.advertActionButton.focusable) {
            widget.controls.advertActionButton.focus();
          } else {
            backLableFocus();
          }
          widget.controls.advertSkipButton.setValue(i18nMgg('commercial_skip_seconds').replace('[n]', Math.ceil(skipTime - position)));
          widget.controls.advertSkipButton.focusable = false;
          widget.controls.advertSkipButton.addClass('disable');
        }
      }
    }
  }
};

function addClass(o, c) {
  var re = new RegExp("(^|\\s)" + c + "(\\s|$)", "g");
  if (re.test(o.className))
    return;
  o.className = (o.className + " " + c).replace(/\s+/g, " ").replace(/(^ | $)/g, "")
}

function removeClass(o, c) {
  var re = new RegExp("(^|\\s)" + c + "(\\s|$)", "g");
  o.className = o.className.replace(re, "$1").replace(/\s+/g, " ").replace(/(^ | $)/g, "")
}

function convertASCIItoString(pASCII) {

  if (pASCII.indexOf('%i')) {
    pASCII = pASCII.replace(/%i/g, '#%i');
  }

  pASCII = pASCII.replace(/&amp;/g, '');
  pASCII = pASCII.replace(/&/g, '');
  var spaces = pASCII.split(' ', 10);
  var result = '';

  for (var space = 0; space < spaces.length; space++) {
    var chars = spaces[space].split('#', 100);
    for (var charCount = 0; charCount < chars.length; charCount++) {
      if (chars[charCount] == '') {
        continue;
      }
      if (chars[charCount] == '%i') {
        result += chars[charCount];
      } else {
        if (charCount == 1 && space == 0) {
          result += String.fromCharCode(parseInt(chars[charCount])).toUpperCase();
        } else {
          result += String.fromCharCode(parseInt(chars[charCount]));
        }
      }
    }

    if (space < spaces.length - 1)
      result += ' ';
  }

  return result;
}

// public
module.exports = widget;

},{"./progress":139,"core/animate":14,"core/api":15,"core/components/button":19,"core/components/widget":30,"core/dom":31,"core/lib/helpFunctions":34,"core/request":44,"core/router":45,"core/tools/menuNavigateService":49,"ui/header":120,"vendor/aura/keys":133,"widgets/back-lable":140,"widgets/menu-left":150}],139:[function(require,module,exports){
'use strict';

var Widget = require('core/components/widget'),
  dom = require('core/dom'),
  widget, progressInterval, newPosition;
var circ = Math.PI * 2;
var quart = Math.PI / 2;

var progress = dom.tag('canvas', {
  className: 'progress'
});
widget = new Widget({
  $node: progress,
  visible: true
});
var progressPosition = 0;

var ctx = progress.getContext('2d');
progress.width = 44;
progress.height = 44;

function draw() {
  ctx.clearRect(0, 0, progress.width, progress.height);
  ctx.beginPath();
  ctx.strokeStyle = 'rgba(255, 255, 255, 0.5)';
  ctx.lineWidth = 4;
  ctx.arc(progress.width / 2, progress.height / 2, (progress.width - 5) / 2, -(quart), circ - quart);
  ctx.stroke();
  ctx.closePath();
  ctx.restore();
  ctx.save();
  ctx.beginPath();
  ctx.strokeStyle = '#00b0eb';
  ctx.lineWidth = 4;
  ctx.arc(progress.width / 2, progress.height / 2, (progress.width - 5) / 2, -(quart), ((circ) * progressPosition) - quart);
  ctx.stroke();
  ctx.closePath();
  ctx.restore();
}

widget.addListener('show', function () {
});

widget.addListener('hide', function () {
});

widget.setProgress = function (progress) {
  progressPosition = progress;
  draw();
};

module.exports = widget;

},{"core/components/widget":30,"core/dom":31}],140:[function(require,module,exports){
'use strict';
var Panel = require('core/components/panel'),
  router = require('core/router'),
  dom = require('core/dom');


function BackLable(data) {
  data = data || {};
  var componentToFocus = data.componentToFocus;
  var backLableComponent = new Panel({
    $node: dom.tag('div', {className: 'backLabelBlock'}, dom.tag('div', {className: 'leftBackArrowContainer'}, dom.tag('div', {className: 'leftBackArrow'}))),
    visible: data.hasOwnProperty('visible') ? data.visible : true,
    focusable: true,
    events: {
      'mouseover': function () {
        if(!componentToFocus && router.current && router.current.activeComponent) {
          componentToFocus = router.current.activeComponent;
        }
        this.focus();
      },
      'mouseout': function () {
        componentToFocus && componentToFocus.focus();
        componentToFocus = null;
      },
      'click': function () {
        if(data.clickCallBack && typeof data.clickCallBack === 'function') {
          data.clickCallBack();
        }
      }
    },
    keys: {
      RIGHT: function () {
        componentToFocus && componentToFocus.focus();
      },
      DOWN: function () {
        componentToFocus && componentToFocus.focus();
      },
      RED: function () {
        backLableComponent.emit('click');
      },
      RETURN: function (e) {
        backLableComponent.emit('click');
        e.event.stop = true;
      },
      ENTER: function () {
        backLableComponent.emit('click');
      }
    }
  });

  backLableComponent.setComponentToFocus = function (component) {
    componentToFocus = component;
  };

  backLableComponent.focusButton = function (component) {
    this.focus();
    backLableComponent.setComponentToFocus(component);
  };

  return backLableComponent;
}


module.exports = BackLable;

},{"core/components/panel":26,"core/dom":31,"core/router":45}],141:[function(require,module,exports){
'use strict';

var Widget = require('core/components/widget'),
  dom = require('core/dom'),
  animate = require('core/animate'),
  ToggleBg = require('core/lib/toggleBg'),
  widget, self;

widget = new Widget({
  $node: dom.tag('div', {id: 'widgetBackground'}),
  visible: true,
  append_to_body: true
});

widget.shade = new Widget({
  $node: dom.tag('div', {id: 'background-shade'}),
  visible: true
});

widget.shadeFull = new Widget({
  $node: dom.tag('div', {id: 'background-shade-full'}),
  visible: true
});

widget.image = new Widget({
  $node: dom.tag('div', {id: 'background-image'}),
  visible: true
});

widget.image.active = dom.tag('div', {
  className: 'bg-image'
});

widget.image.notActive = dom.tag('div', {
  className: 'bg-image'
});

//MAYBE NEED REFACTOR
widget.add(widget.shade);
widget.add(widget.shadeFull);
widget.add(widget.image);
widget.image.$node.appendChild(widget.image.active);
widget.image.$node.appendChild(widget.image.notActive);

var toggleBg = new ToggleBg(widget.image.active, widget.image.notActive);

widget.showBg = function() {
  this.show();
  this.shadeOn();
  return this;
};

widget.hideBg = function() {
  this.hide();
  this.shadeOff();
  return this;
};

widget.shadeOn = function() {
  this.shade.show();
  return this;
};

widget.shadeOff = function() {
  this.shade.hide();
  return this;
};

widget.shadeFullOn = function() {
  widget.shadeFull.show();
  return this;
};

widget.shadeFullOff = function() {
  this.shadeFull.hide();
  return this;
};


widget.setImage = function(src, config) {
  toggleBg.start(src);
  return this;
};

// public
module.exports = widget;

},{"core/animate":14,"core/components/widget":30,"core/dom":31,"core/lib/toggleBg":38}],142:[function(require,module,exports){
'use strict';

var dom = require('core/dom');
var Widget = require('core/components/widget');
var timeout;

var bubble = new Widget({
  visible: false,
  className: 'bubble bubble-bad-connection',
  focusable: false,
  append_to_body: true
});

var $bubbleIcon = dom.tag('div', {className: 'bubble-icon icon-bad-connection'});
var $bubbleText = dom.tag('div', {className: 'bubble-text'});

bubble.$node.appendChild($bubbleIcon);
bubble.$node.appendChild($bubbleText);

bubble.addListener('show', function () {
  if (!$bubbleText.innerHTML) {
    $bubbleText.innerHTML = i18nMgg('bad_connection');
  }
  clearTimeout(timeout);
});

bubble.stopHideTimeout = function () {
  if (!bubble.visible) return;
  clearTimeout(timeout);
};

bubble.startHideTimeout = function (ms) {
  if (!bubble.visible) return;
  clearTimeout(timeout);
  timeout = setTimeout(function () {
    bubble.hide();
  }, ms || 3000);
};

module.exports = bubble;

},{"core/components/widget":30,"core/dom":31}],143:[function(require,module,exports){
'use strict';

var dom = require('core/dom'),
  Panel = require('core/components/panel'),
  Widget = require('core/components/widget'),
  router = require('core/router'),
  keys = require('vendor/aura/keys'),
  helpFunctions = require('core/lib/helpFunctions'),
  hideBubbleTimeout, leftDaysBubbleInterval, $bubble_title, $bubble_subtitle, $bubbleIcon,
  subscription_current_index, subscriptions_last_index, all_subscriptions, current_subscription;

var bubble = new Widget({
  $node:  dom.tag('div',{className:'bubble-subs', id:'bubbleSubscription'},
    dom.tag('div', {className: 'bubble-subs__item'},
      dom.tag('div',{className:'bubble-subs-text'},
        $bubble_title = dom.tag('div',{className:'bubble-subs-text__title'}),
        $bubble_subtitle = dom.tag('div',{className:'bubble-subs-text__subtitle'})
      ),
      $bubbleIcon = dom.tag('div',{className:'bubble-icon icon-subscription'})
    )

  ),
  visible: false,
  focusable: true,
  events: {
    click: function () {
      if(current_subscription) {
        clearTimeout(hideBubbleTimeout);
        clearInterval(leftDaysBubbleInterval);
        if(!current_subscription.is_archive) {
          router.navigate('pageSubscriptionDetailed', [current_subscription.subscription_id, 'tariffs']);
        } else {
          router.navigate('pagePaymentSetting', [current_subscription.subscription_id]);
        }

        this.hide();
      }
    },
    mouseover: function() {
      this.focus();
    },
    focus: function() {
      clearTimeout(hideBubbleTimeout);
      clearInterval(leftDaysBubbleInterval);
    },
    blur: function () {
      updateTimer();
      updateInterval();
    },
    mousewheel: function (event) {
      this.emit('keydown', {
        'keyCode': event.deltaY < 0 ? keys.UP : keys.DOWN
      });
    },
    keydown: function(data) {
      if(data.keyCode === keys.UP) {
        this.emit('leave:focus', {direction: 'up'});
      } else if(data.keyCode === keys.ENTER) {
        this.emit('click');
      } else if(data.keyCode === keys.DOWN) {
        this.emit('leave:focus', {direction: 'down'});
      } else if(data.keyCode === keys.LEFT) {
        this.emit('leave:focus', {direction: 'left'});
      }
    }
  },
  append_to_body: true
});

bubble.disabled = false;

bubble.disable = function() {
  clearInterval(leftDaysBubbleInterval);
  this.remove();
  this.disabled = true;
};


bubble.addListener('show',function(data){
  if(data && data.length) {
    subscriptions_last_index = data.length - 1;
    subscription_current_index = 0;
    all_subscriptions = data;
    showBubble();
    updateInterval();
  }
});

function updateInterval() {
  clearInterval(leftDaysBubbleInterval);
  if(subscription_current_index > subscriptions_last_index) {
    return;
  }
  leftDaysBubbleInterval = setInterval(function () {
    showBubble();
  }, 6000);
}

function getCorrectTextForBubble(title, leftDays){
  if(leftDays == 0){
    return i18nMgg('bubble_expires_today').replace('[name]', title);
  } else {
    return i18nMgg('bubble_expires_days').replace('[name]', title) + ' ' + leftDays + ' ' + helpFunctions.getValueText(leftDays, 'day');
  }
}

function showBubble() {
  var current_subscription_info, main_text;
  current_subscription_info = all_subscriptions[subscription_current_index];
  subscription_current_index++;
  if(current_subscription_info) {
    main_text = getCorrectTextForBubble(current_subscription_info.subscription.title, current_subscription_info.days_left);
    if(current_subscription_info.icon) {
      $bubbleIcon.style.backgroundImage = 'url('+current_subscription_info.icon+')';
    } else {
      $bubbleIcon.style.backgroundImage = 'none';
    }

    $bubble_title.innerHTML = main_text;
    $bubble_subtitle.innerHTML = i18nMgg('renew_subscription');
    current_subscription = current_subscription_info && current_subscription_info.subscription;

    updateTimer();
  }

  if(subscription_current_index > subscriptions_last_index) {
    clearInterval(leftDaysBubbleInterval);
  }
}

function updateTimer() {
  clearTimeout(hideBubbleTimeout);
  bubble.show();
  bubble.$node.style.opacity = 1;
  hideBubbleTimeout = setTimeout(function(){
    bubble.$node.style.opacity = 0;
    bubble.hide();
  }, 5000);
}

module.exports = bubble;

},{"core/components/panel":26,"core/components/widget":30,"core/dom":31,"core/lib/helpFunctions":34,"core/router":45,"vendor/aura/keys":133}],144:[function(require,module,exports){
'use strict';

var dom = require('core/dom');
var Panel = require('core/components/panel');
var Widget = require('core/components/widget');
var timeout;

var bubble = new Widget({
  visible: false,
  className: 'bubble',
  focusable: false,
  append_to_body: true
});

var $bubbleIcon = dom.tag('div',{className:'bubble-icon'});
var $bubbleText = dom.tag('div',{className:'bubble-text'});

bubble.$node.appendChild($bubbleIcon);
bubble.$node.appendChild($bubbleText);
// channelLoader.add(miniLoader);
bubble.addListener('show',function(data){
  clearTimeout(timeout);
  bubble.$node.style.opacity = 1;
  $bubbleIcon.className='bubble-icon ' + data.icon;
  $bubbleText.innerText=data.text;
  // $bubbleText.innerText='border-radius border-radius border-radius';
  timeout = setTimeout(function(){

    bubble.$node.style.opacity = 0;
    bubble.hide();
  }, 1500);
});

module.exports = bubble;

},{"core/components/panel":26,"core/components/widget":30,"core/dom":31}],145:[function(require,module,exports){
'use strict';

var Widget = require('core/components/widget'),
  animate = require('core/animate'),
  dom = require('core/dom'),
  List = require('core/components/list'),
  app = require('core/app'),
  keys = require('vendor/aura/keys'),
  router = require('core/router'),
  helpFunctions = require('core/lib/helpFunctions'),
  SelectBox = require('core/components/select.box'),
  Loader = require('widgets/loader'),
  Header = require('ui/header'),
  arrowsWidget = require('widgets/mouse-arrows'),
  channelsStore = require('state/channels_store'),
  channelActions = require('state/channel_actions'),
  epgStore = require('state/epg_store'),
  epgActions = require('state/epg_actions'),
  playerState = require('pages/player/state'),
  UI = require('ui/ui_generator'),
  transform_element = require('core/tools/transform.element'),
  WhatchChannelsSchedule
  ;

var channelsList = {}, genreList = {}, categoryGenreList = {}, genresList,
  SelectBoxCategoryList, SelectBoxChannelsList, SelectBoxProgramsList,
  loadChannelsTimeout, loadProgramsTimeout,
  blockNavigateChannels, blockNavigatePrograms,
  current_date, tomorrow_date, yesterday_date,
  program_month, program_date, program_date_string,
  program_next_day_item, program_prev_day_item, programs_resp,
  epg_from_time, epg_to_time,
  channel_top_margin, category_top_margin, program_top_margin,
  category_genre_id, current_channel_model,
  program_list_focus_item, channel_list_focus_item, category_list_focus_item, current_channel_item, player_actions,
  epg_load_conf, current_channel_data, left_menu_visible,
  playing_epg, playing_channel, time_stamp_now,
  channel_focus_timeout;

WhatchChannelsSchedule = new Widget({
  $node: document.getElementById('widgetWhatchChannelsSchedule'),
  visible: false,
  back_button: {
    'clickCallBack': function () {
      WhatchChannelsSchedule.hide();
    }
  }
});

channelsStore.addListener('change', updateContent);

WhatchChannelsSchedule.header = new Header('EPG');
WhatchChannelsSchedule.header.shadeOn();
WhatchChannelsSchedule.add(WhatchChannelsSchedule.header);

WhatchChannelsSchedule.$focusItem = null;
WhatchChannelsSchedule.player = null;

WhatchChannelsSchedule.container = new Widget({
  $node: document.getElementById('scheduleListContainer'),
  visible: true
});

SelectBoxCategoryList = new SelectBox({
  className: 'big',
  visible: false,
  content: dom.tag('div', {
    className: 'arrow arrow-right'
  })
});
SelectBoxChannelsList = new SelectBox({
  className: 'big',
  visible: false,
  content: dom.tag('div', {
    className: 'arrow arrow-right'
  })
});
SelectBoxProgramsList = new SelectBox({
  className: 'small',
  visible: false,
  content: dom.tag('div', {
    className: 'arrow arrow-left'
  })
});

//need refactor
document.getElementById('categoriesListContainer').appendChild(SelectBoxCategoryList.$node);
document.getElementById('channelsListContainer').appendChild(SelectBoxChannelsList.$node);
document.getElementById('programsListContainer').appendChild(SelectBoxProgramsList.$node);


WhatchChannelsSchedule.additionalHeader = dom.tag('div', {
  className: 'additionalHeader'
});
WhatchChannelsSchedule.$node.appendChild(WhatchChannelsSchedule.additionalHeader);

WhatchChannelsSchedule.categoryList = new List({
  $node: 'scheduleListCategories',
  type: List.prototype.TYPE_VERTICAL,
  className: 'category-list',
  cycle: false,
  keys: {
    LEFT: function () {
      WhatchChannelsSchedule.backButton.focusButton(this);
    },
    RIGHT: function () {
      scrollToChannelsList();
    },
    ENTER: function () {
      scrollToChannelsList();
    },
    RETURN: function (e) {
      WhatchChannelsSchedule.backButton.emit('click');
      e.event.stop = true;
    }
  },
  events: {
    'mouseover': function () {
      this.focus();
      showHideArrows();
    },
    'focus': function () {
      animate(WhatchChannelsSchedule.container.$node, 0, {
        left: 0
      });
      setLastFocusItem(this);
      updateView('category');
    },
    'focus:item': function (data) {
      category_top_margin = data.$curr.index * data.$curr.offsetHeight * (-1);

      transform_element(WhatchChannelsSchedule.categoryList.$node, 'translateY', category_top_margin);

      if (data.$config && data.$config.no_scroll_channels) return;

      blockNavigateChannels = true;

      clearTimeout(loadChannelsTimeout);
      loadChannelsTimeout = setTimeout(function () {
        blockNavigateChannels = false;
        focusChannelsList(data.$curr.index);
        WhatchChannelsSchedule.categoryList.focus();
      }, 500);
    },
    'click:item': function (data) {
      if (data.$item.index == WhatchChannelsSchedule.channelsList.$focusItem.index) {
        scrollToChannelsList();
        return;
      }

      if (blockNavigateChannels) {
        clearTimeout(loadChannelsTimeout);
        blockNavigateChannels = false;
        focusChannelsList(data.$item.index);
        WhatchChannelsSchedule.categoryList.focus();
      }
    }
  },
  render: function ($item, data) {
    categoryGenreList[data.id] = $item;
    UI.epgCategory($item, data);
  }
});


WhatchChannelsSchedule.channelsList = new List({
  $node: 'scheduleListChannels',
  type: List.prototype.TYPE_VERTICAL,
  className: 'category-channels',
  focusIndex: 0,
  cycle: false,
  events: {
    'mouseover': function () {
      showHideArrows();
    },
    'focus': function (data) {
      channel_list_focus_item = WhatchChannelsSchedule.channelsList.$focusItem;
      setLastFocusItem(this);
      if (channel_list_focus_item) {
        channel_list_focus_item.list.focus();
        // the height of block was changed, because genreTitle appeared
        //and position of active item must be recalculated
        if (!data || !data.no_emit) {
          channel_list_focus_item.list.emit('focus:item', {
            $curr: channel_list_focus_item.list.$focusItem,
            $config: {
              no_animate: true
            }
          });
        }
      }

      animate(WhatchChannelsSchedule.container.$node, 0, {
        left: -590
      });
      animate(WhatchChannelsSchedule.channelsList.$node.parentElement, 0, {
        width: 480
      });

      updateView('channels');
    },
    'focus:item': function (data) {
      WhatchChannelsSchedule.categoryList.focusItem(categoryGenreList[data.$curr.data.id], {
        no_scroll_channels: true
      });
      data.$curr.list.focus();
    }
  },
  render: function ($item, data) {
    $item.genreTitle = dom.tag('div', {
      className: 'genre-title'
    }, data.title);
    genreList[data.id] = $item;

    $item.list = new List({
      type: List.prototype.TYPE_VERTICAL,
      data: data.channels,
      cycle: false,
      scrollList: {
        scrollSize: 4,
        overflow: true
      },
      events: {
        'keydown': function (data) {
          if (data.keyCode == keys.UP || data.keyCode == keys.DOWN) {
            this.move(data.keyCode);
          } else if (data.keyCode == keys.PAGE_UP) {
            this.emit('overflow', {direction: keys.UP, page_up_down: true});
          } else if (data.keyCode == keys.PAGE_DOWN) {
            this.emit('overflow', {direction: keys.DOWN, page_up_down: true});
          } else if (data.keyCode == keys.LEFT) {
            WhatchChannelsSchedule.categoryList.focus();
            SelectBoxChannelsList.hide();
          } else if (data.keyCode == keys.RIGHT) {
            if (!blockNavigatePrograms && WhatchChannelsSchedule.programsList.size) {
              WhatchChannelsSchedule.programsList.focus();
            }
          } else if (data.keyCode == keys.RETURN) {
            WhatchChannelsSchedule.backButton.emit('click');
            data.event.stop = true;
          } else if (data.keyCode == keys.ENTER) {
            this.emit('click:item', {
              $item: this.$focusItem
            });
          }
        },
        'focus:item': function (data) {
          WhatchChannelsSchedule.programsList.clear();
          current_channel_item = data.$curr;
          channel_top_margin = -1 * ((current_channel_item.getBoundingClientRect().top) - parseInt(channel_top_margin || 0));
          if (channel_top_margin) {
            channel_top_margin += 310; //hardcoded
          }
          transform_element(WhatchChannelsSchedule.channelsList.$node, 'translateY', channel_top_margin);
          blockNavigatePrograms = true;
          current_channel_data = channelsStore.get('channels').get(current_channel_item.data.value);
          clearTimeout(channel_focus_timeout);
          channel_focus_timeout = setTimeout(function () {
            focusChannel(data);
          }, 500);
        },
        'overflow': function (data) {
          if (data.direction === keys.DOWN) {
            if (WhatchChannelsSchedule.channelsList.$focusItem.index < (WhatchChannelsSchedule.channelsList.size - 1)) {
              WhatchChannelsSchedule.channelsList.move(keys.DOWN);
              WhatchChannelsSchedule.channelsList.$focusItem.list.focusIndex(0);
            }
          } else if (data.direction === keys.UP) {
            if (WhatchChannelsSchedule.channelsList.$focusItem.index) {
              WhatchChannelsSchedule.channelsList.move(keys.UP);
              var focus_index_overflow = data.page_up_down ? 0 : WhatchChannelsSchedule.channelsList.$focusItem.list.size - 1;
              WhatchChannelsSchedule.channelsList.$focusItem.list.focusIndex(focus_index_overflow);
            }
          }

          WhatchChannelsSchedule.channelsList.$focusItem.list.emit('focus:item', {
            $curr: WhatchChannelsSchedule.channelsList.$focusItem.list.$focusItem
          });

        },
        'click:item': function (data) {
          WhatchChannelsSchedule.hide();
          var ch = channelsStore.get('channels').get(data.$item.data.value);
          if (ch.get('id') != playing_channel.get('id')) {
            channelActions.setCurrentChannel(ch);
            player_actions.startChannel(ch);
          }
        }
      },
      render: function ($channelItem, channelData) {
        var channel_obj = channelsStore.get('channels').get(channelData.value);
        var channel_mark = channel_obj.get('vod_channel') || channel_obj.get('is_dvr') ? ' icon_play' : '';
        var current_program = epgStore.getCurrent(channel_obj.get('epg_id'), time_stamp_now, channel_obj.get('id'), 1);
        channelsList[channel_obj.get('id')] = $channelItem;
        UI.epgChannel($channelItem, channel_obj, {channel_mark: channel_mark, current_program: current_program});
      }
    });
    $item.appendChild($item.genreTitle);
    $item.appendChild($item.list.$node);

  }
});


WhatchChannelsSchedule.programsList = new List({
  $node: 'scheduleListPrograms',
  type: List.prototype.TYPE_VERTICAL,
  className: 'programs-list',
  cycle: false,
  keys: {
    LEFT: function () {
      WhatchChannelsSchedule.channelsList.focus();
    },
    RETURN: function (e) {
      WhatchChannelsSchedule.backButton.emit('click');
      e.event.stop = true;
    }
  },
  events: {
    'mouseover': function () {
      showHideArrows();
    },
    'focus': function () {
      animate(WhatchChannelsSchedule.channelsList.$node.parentElement, 0, {});
      setLastFocusItem(this, false);

      if (this.$focusItem && this.$focusItem.currentPrograms) {
        this.$focusItem.currentPrograms.focus();
      }

      updateView('programs');
    },
    'focus:item': function (data) {
      program_list_focus_item = WhatchChannelsSchedule.programsList.$focusItem;
      WhatchChannelsSchedule.programLastFocusDayIndex = data.$curr.index;
      if (WhatchChannelsSchedule.$lastFocusItem == this && program_list_focus_item &&
        program_list_focus_item.currentPrograms) {
        program_list_focus_item.currentPrograms.focus();
      }
    }
  },
  render: function ($item, data) {
    program_month = i18nMgg('month_' + (data.date.getMonth() + 1) + '_rp');
    program_date = data.date.getDate();
    program_date_string = program_date + ' ' + program_month;
    $item.dayTitle = dom.tag('div', {
      className: 'date-wrapper'
    }, program_date_string);

    $item.currentPrograms = new List({
      type: List.prototype.TYPE_VERTICAL,
      className: 'programs-list__day',
      data: data.programs,
      cycle: false,
      scrollList: {
        scrollSize: 4,
        overflow: true
      },
      events: {
        'keydown': function (data) {
          if (data.keyCode == keys.UP || data.keyCode == keys.DOWN) {
            this.move(data.keyCode);
          } else if (data.keyCode == keys.PAGE_UP) {
            if (!WhatchChannelsSchedule.programsList.$node.children[program_list_focus_item.index - 1]) {
              program_list_focus_item.currentPrograms.focusIndex(0);
            } else {
              this.emit('overflow', {direction: keys.UP, page_up_down: true});
            }
          } else if (data.keyCode == keys.PAGE_DOWN) {
            if (!WhatchChannelsSchedule.programsList.$node.children[program_list_focus_item.index + 1]) {
              program_list_focus_item.currentPrograms.focusIndex(program_list_focus_item.currentPrograms.size - 1);
            } else {
              this.emit('overflow', {direction: keys.DOWN, page_up_down: true});
            }
          } else if (data.keyCode == keys.LEFT) {
            WhatchChannelsSchedule.channelsList.focus({no_emit: true});
          } else if (data.keyCode == keys.RETURN) {
            WhatchChannelsSchedule.backButton.emit('click');
            data.event.stop = true;
          } else if (data.keyCode == keys.ENTER) {
            this.emit('click:item', {
              $item: this.$focusItem
            });
          }
        },
        'focus:item': function (data) {
          var current_program_item = data.$curr;
          if (!current_program_item) return;
          if (current_program_item.data.can_play) {
            SelectBoxProgramsList.addClass('js-has_movie');
          } else {
            SelectBoxProgramsList.removeClass('js-has_movie');
          }

          WhatchChannelsSchedule.programLastFocusProgramIndex = current_program_item.index;
          program_top_margin = -1 * ((current_program_item.getBoundingClientRect().top) - parseInt(WhatchChannelsSchedule.programsList.$node.style.marginTop || 0)) + 321;

          if (data.$config && data.$config.no_animate) {
            WhatchChannelsSchedule.programsList.$node.style.marginTop = program_top_margin + 'px';
          } else {
            animate(WhatchChannelsSchedule.programsList.$node, 0, {
              marginTop: program_top_margin
            });
          }
          loadNextPrevDayProgram(current_program_item.index);
        },
        overflow: function (data) {
          if (data.direction === keys.DOWN) {
            if (program_list_focus_item.index < WhatchChannelsSchedule.programsList.size - 1) {
              WhatchChannelsSchedule.programsList.move(keys.DOWN);
              program_list_focus_item.currentPrograms.focusIndex(0);
              program_list_focus_item.currentPrograms.emit('focus:item', {
                $curr: program_list_focus_item.currentPrograms.$focusItem
              });
            }
          } else if (data.direction === keys.UP) {
            if (program_list_focus_item.index) {
              WhatchChannelsSchedule.programsList.move(keys.UP);
              var focus_index_overflow = data.page_up_down ? 0 : program_list_focus_item.currentPrograms.size - 1;
              program_list_focus_item.currentPrograms.focusIndex(focus_index_overflow);
              program_list_focus_item.currentPrograms.emit('focus:item', {
                $curr: program_list_focus_item.currentPrograms.$focusItem
              });
            }
          }
        },
        'click:item': function (data) {
          var program_data = data.$item.data;
          if (!program_data.can_play && !program_data.is_live) return;
          WhatchChannelsSchedule.hide();
          var ch = channelsStore.get('channels').get(current_channel_item.data.value);

          channelActions.setCurrentChannel(ch);
          if (program_data.is_live) {
            /*if(program_data.object_id || program_data.virtual_object_id) {
             player_actions.playEpg(program_data);
             } else {
             if(ch.get('id') != playing_channel.get('id') || (playing_epg && playing_epg.start_timestamp != program_data.start_timestamp)) {
             player_actions.startChannel(ch);
             }
             }*/

            if (ch.get('id') != playing_channel.get('id') || (playing_epg && playing_epg.start_timestamp != program_data.start_timestamp)) {
              player_actions.startChannel(ch);
            }
          } else if (program_data.can_play) {
            player_actions.playEpg(program_data);
          }
        }
      },
      render: function ($program_item, program_data) {
        UI.epgProgram($program_item, program_data, current_channel_data, time_stamp_now);
        if (current_channel_data.get('epg_id') == playing_channel.get('epg_id') &&
          (playing_epg && program_data.start_timestamp == playing_epg.start_timestamp)) {
          if (WhatchChannelsSchedule.current_program && WhatchChannelsSchedule.current_program.programContainer) {
            WhatchChannelsSchedule.current_program.programContainer.classList.remove('current');
          }
          WhatchChannelsSchedule.current_program = $program_item;
        } else if (program_data.is_live) {
          if (!WhatchChannelsSchedule.current_program) {
            WhatchChannelsSchedule.current_program = $program_item;
          }
        }

        if (WhatchChannelsSchedule.current_program) {
          WhatchChannelsSchedule.current_program.programContainer.classList.add('current');
          WhatchChannelsSchedule.currnet_day = $item
        }
      }
    });
    $item.appendChild($item.dayTitle);
    $item.appendChild($item.currentPrograms.$node);
  }
});

WhatchChannelsSchedule.container.add(WhatchChannelsSchedule.categoryList);
WhatchChannelsSchedule.container.add(WhatchChannelsSchedule.channelsList);
WhatchChannelsSchedule.container.add(WhatchChannelsSchedule.programsList);


function setLastFocusItem(data, no_active) {
  if (WhatchChannelsSchedule.$lastFocusItem && !no_active) {
    WhatchChannelsSchedule.$lastFocusItem.$node.classList.remove('active');
  }
  WhatchChannelsSchedule.$lastFocusItem = data;
  WhatchChannelsSchedule.$lastFocusItem.$node.classList.add('active');
}


function updateContent(data) {
  if (data.name === 'genres_channels' && data.curr && data.curr.length) {
    time_stamp_now = helpFunctions.getTimestampNow();
    channelsList = {};
    categoryGenreList = {};

    genresList = data.curr;

    SelectBoxChannelsList.show();

    WhatchChannelsSchedule.categoryList.clear();
    WhatchChannelsSchedule.channelsList.clear();

    WhatchChannelsSchedule.categoryList.init({
      data: genresList
    });

    WhatchChannelsSchedule.channelsList.init({
      data: genresList
    });
    //when updateContent start later then event show
    if (WhatchChannelsSchedule.visible) {
      WhatchChannelsSchedule.emit('show');
    }
  }


};

WhatchChannelsSchedule.addListener('show', function (data) {
  player_actions = data && data.actions;
  player_actions.pause();
  playing_epg = playerState.get('epg');
  activateArrows();
  Loader.addClass('epg_loader');
  hideLeftMenu();

  current_channel_model = channelsStore.get('channels').get(channelsStore.get('current_channel').get('id'));

  category_genre_id = current_channel_model.get('is_favorite') ? 1 : current_channel_model.get('genres')[0];

  WhatchChannelsSchedule.categoryList.focusItem(categoryGenreList[category_genre_id], {
    no_scroll_channels: true
  });


  WhatchChannelsSchedule.channelsList.focus();
  WhatchChannelsSchedule.channelsList.focusItem(genreList[category_genre_id]);
  channel_list_focus_item = WhatchChannelsSchedule.channelsList.$focusItem;
  if (channel_list_focus_item && channel_list_focus_item.list) {
    channel_list_focus_item.list.focus();
    channel_list_focus_item.list.focusItem(channelsList[current_channel_model.get('id')]);
    if (channel_list_focus_item.list.$focusItem == channelsList[current_channel_model.get('id')]) {
      channel_list_focus_item.list.emit('focus:item', {
        $curr: channelsList[current_channel_model.get('id')]
      });
    }
  }
  if (playerState.get('type') == 'catchup') {
    animate(WhatchChannelsSchedule.container.$node, 0, {
      left: -590
    });
    WhatchChannelsSchedule.programsList.focus();
  }
});

WhatchChannelsSchedule.addListener('hide', function () {
  deActivateArrows();
  showLeftMenu();
  Loader.removeClass('epg_loader');
  Loader.hide();
  if (epgStore.get('epgs').get(current_channel_data.get('epg_id'))) {
    epgStore.get('epgs').get(current_channel_data.get('epg_id')).removeListener('change', changeEpgCallback);
  }
  player_actions.play();
});


function focusChannel(data) {

  time_stamp_now = helpFunctions.getTimestampNow();
  epgActions.clearLastQueryKeys();
  if (data.$prev) {
    var prev_channel_data = channelsStore.get('channels').get(data.$prev.data.value);
    if (prev_channel_data) {
      var prev_channel_epg = epgStore.get('epgs').get(prev_channel_data.get('epg_id'));
      if (prev_channel_epg) {
        prev_channel_epg.removeListener('change', changeEpgCallback);
      }
    }
  }

  WhatchChannelsSchedule.epg_id = current_channel_data.get('epg_id');


  if (data.$config && data.$config.no_animate) {

  } else {
    playing_channel = channelsStore.get('current_channel');

    if (WhatchChannelsSchedule.epg_id) {
      Loader.show('small');

        playing_epg = playerState.get('epg');
        if (playing_epg && current_channel_data.get('epg_id') == playing_channel.get('epg_id')) {
          current_date = new Date(playing_epg.start_timestamp * 1000);
        } else {
          var curr_epg = epgStore.getCurrent(current_channel_data.get('epg_id'), helpFunctions.getTimestampNow(), current_channel_data.get('id'), true);
          if (curr_epg) {
            current_date = new Date(curr_epg.start_timestamp * 1000);
          } else {
            current_date = new Date(time_stamp_now * 1000);
          }
        }

        loadEpg({
          epg_id: WhatchChannelsSchedule.epg_id,
          day: current_date
        });

    }
    if (epgStore.get('epgs') && epgStore.get('epgs').get(current_channel_data.get('epg_id'))) {
      epgStore.get('epgs').get(current_channel_data.get('epg_id')).removeListener('change', changeEpgCallback);
      epgStore.get('epgs').get(current_channel_data.get('epg_id')).addListener('change', changeEpgCallback);
    } else {
      showNoData();
    }
  }
}

function loadEpg(data) {

  if (data && data.day) {

    if (WhatchChannelsSchedule.lastEpgId == data.epg_id && WhatchChannelsSchedule.lastDate &&
      WhatchChannelsSchedule.lastDate.getTime() == data.day.getTime()) { //disable load epg for the same date
      Loader.hide();
      return;
    }

    program_list_focus_item = WhatchChannelsSchedule.programsList.$focusItem;
    epg_from_time = Math.floor(data.day.setHours(0, 0, 0, 0) / 1000);
    epg_to_time = Math.floor(data.day.setHours(23, 59, 59, 999) / 1000);

    WhatchChannelsSchedule.lastEpgId = data.epg_id;
    WhatchChannelsSchedule.lastDate = data.day;

    epg_load_conf = {
      lazy_load: data.lazy_load,
      day: data.day,
      prepend_data: data.prepend_data,
      epg_id: data.epg_id,
      epg_from_time: epg_from_time,
      epg_to_time: epg_to_time
    };

    var loaded_programs = epgStore.getByRange(epg_load_conf.epg_id, epg_from_time, epg_to_time, current_channel_data.get('id'), 'not_load');

    if (loaded_programs && loaded_programs.length) {
      updateEpg(loaded_programs);
    } else {
      clearTimeout(loadProgramsTimeout);
      loadProgramsTimeout = setTimeout(function () {
        epgStore.getByRange(epg_load_conf.epg_id, epg_from_time, epg_to_time, current_channel_data.get('id'));
      }, 100);
    }
  }
}

function updateEpg(resp_data) {

  if (!WhatchChannelsSchedule.visible) return;

  programs_resp = resp_data || [];

  if (programs_resp && programs_resp.length) {
    if (!epg_load_conf.lazy_load) {
      WhatchChannelsSchedule.current_program = false;
      WhatchChannelsSchedule.programsList.$node.style.marginTop = '0px';
      WhatchChannelsSchedule.programsList.clear();
      WhatchChannelsSchedule.programsList.init({
        data: [{
          programs: programs_resp,
          date: epg_load_conf.day
        }],
        focusIndex: 0
      });
      focusCurrentProgram();
    } else if (epg_load_conf.prepend_data) {
      WhatchChannelsSchedule.current_program = false;
      var prepend_data_programs = [{
        programs: programs_resp,
        date: epg_load_conf.day,
        lazy_load: true
      }];
      var result_programs = prepend_data_programs.concat(WhatchChannelsSchedule.programsList.data);

      WhatchChannelsSchedule.programsList.clear();
      WhatchChannelsSchedule.programsList.init({
        data: result_programs
      });
      focusCurrentProgram();

    } else {
      WhatchChannelsSchedule.programsList.addData(
        [{
          programs: programs_resp,
          date: epg_load_conf.day,
          lazy_load: true
        }]
      );
    }
  }

  blockNavigatePrograms = false;
  if (!programs_resp.length && !epg_load_conf.lazy_load) {
    // INNA-test for ticket STV-1188. Need check
    if (!WhatchChannelsSchedule.current_program.$focusItem) {
      WhatchChannelsSchedule.channelsList.focus();
    }
    showNoData();
  }
  else {
    SelectBoxChannelsList.removeClass('no-program-arr');
  }
  Loader.hide();
}

function focusCurrentProgram() {
  if (epg_load_conf.prepend_data && WhatchChannelsSchedule.$lastFocusItem == WhatchChannelsSchedule.programsList) {
    WhatchChannelsSchedule.programsList.focusIndex(WhatchChannelsSchedule.programLastFocusDayIndex + 1);
    program_list_focus_item.currentPrograms.focusIndex(WhatchChannelsSchedule.programLastFocusProgramIndex);
  } else {
    if (WhatchChannelsSchedule.current_program && WhatchChannelsSchedule.currnet_day) {
      WhatchChannelsSchedule.programsList.focusItem(WhatchChannelsSchedule.currnet_day);
      WhatchChannelsSchedule.programsList.$focusItem.currentPrograms.focusItem(WhatchChannelsSchedule.current_program);
      if (WhatchChannelsSchedule.current_program.data) {
        current_channel_item.programTitle.textContent = WhatchChannelsSchedule.current_program.data.title || '';
      }
    } else {
      if(WhatchChannelsSchedule.currnet_day) {
        WhatchChannelsSchedule.programsList.focusItem(WhatchChannelsSchedule.currnet_day);
      } else {
        WhatchChannelsSchedule.programsList.focusIndex(0);
      }
      if(WhatchChannelsSchedule.programsList.$focusItem.currentPrograms) {
        WhatchChannelsSchedule.programsList.$focusItem.currentPrograms.focusIndex(WhatchChannelsSchedule.programsList.$focusItem.currentPrograms.size - 1);
      }
    }
  }
}

function showNoData() {
  SelectBoxChannelsList.addClass('no-program-arr');
  WhatchChannelsSchedule.programsList.$node.style.marginTop = '0px';
  WhatchChannelsSchedule.programsList.$node.classList.add('no-program');
  WhatchChannelsSchedule.programsList.$node.innerHTML = '';
  WhatchChannelsSchedule.programsList.$node.appendChild(
    dom.tag('div', {
        className: 'no-program-container'
      },
      dom.tag('div', {
        className: 'no-program-icon'
      }),
      dom.tag('div', {
        className: 'no-program-text'
      }, i18nMgg('no_program'))
    )
  );
  blockNavigatePrograms = true;
  Loader.hide();
}

function loadNextPrevDayProgram(index) {
  program_list_focus_item = WhatchChannelsSchedule.programsList.$focusItem;
  if (WhatchChannelsSchedule.programsList.$node.children && program_list_focus_item
    && program_list_focus_item.data && program_list_focus_item.data.date) {
    current_date = new Date(program_list_focus_item.data.date.getTime());
    //var range_val = program_list_focus_item.currentPrograms.size > 10 ? 5 : 1;
    var range_val = 5;
    if (index >= program_list_focus_item.currentPrograms.size - range_val) {
      program_next_day_item = WhatchChannelsSchedule.programsList.$node.children[program_list_focus_item.index + 1];
      if (!program_next_day_item) {
        tomorrow_date = new Date(current_date.getTime());//clone date
        tomorrow_date = new Date(tomorrow_date.setDate(tomorrow_date.getDate() + 1));
        loadEpg({
          epg_id: WhatchChannelsSchedule.epg_id,
          day: tomorrow_date,
          lazy_load: true
        });
      }
    }
    if (index < range_val) {
      yesterday_date = new Date(current_date.getTime());//clone date
      yesterday_date = new Date(yesterday_date.setDate(yesterday_date.getDate() - 1));
      program_prev_day_item = WhatchChannelsSchedule.programsList.$node.children[program_list_focus_item.index - 1];
      if (!program_prev_day_item) {
        loadEpg({
          epg_id: WhatchChannelsSchedule.epg_id,
          day: yesterday_date,
          lazy_load: true,
          prepend_data: true
        });
      }
    }
  }
}

function showLeftMenu() {
  if (left_menu_visible) {
    getLeftMenu().show();
  }
}

function hideLeftMenu() {
  if (getLeftMenu().visible) {
    left_menu_visible = true;
    getLeftMenu().hide();
  } else {
    left_menu_visible = false;
  }

}

function getLeftMenu() {
  return require('widgets/menu-left');
}

function focusChannelsList(id) {
  WhatchChannelsSchedule.channelsList.focusIndex(id);
  if (WhatchChannelsSchedule.channelsList.$focusItem) {
    WhatchChannelsSchedule.channelsList.$focusItem.list.focusIndex(0, {no_animate: true, force_focus: true});
  }
}

function scrollToChannelsList() {
  channel_list_focus_item = WhatchChannelsSchedule.channelsList.$focusItem;
  if (!blockNavigateChannels) {
    WhatchChannelsSchedule.channelsList.focus();
    channel_list_focus_item.list.emit('focus:item', {
      $curr: channel_list_focus_item.list.$focusItem
    });
  }
}

function activateArrows() {
  arrowsWidget.updateConfig();
  arrowsWidget.addClass('page-back-button');
  arrowsWidget.addClass('js-high-layer');
  arrowsWidget.forceShow = true;
  arrowsWidget.widgetArrowsUpdate = showHideArrows;
  arrowsWidget.up.hide();
  arrowsWidget.down.show();
  arrowsWidget.left.show();
  arrowsWidget.right.show();
  arrowsWidget.addListener('show', showArrowsCallback);
  arrowsWidget.addListener('hide', hideArrowsCallback);

  WhatchChannelsSchedule.backButton.addClass('short');

  arrowsWidget.setArrowProperty('left', {
    left: 0
  });
  arrowsWidget.setArrowProperty('right', {
    width: 660,
    left: 620
  });
  arrowsWidget.setArrowProperty('down', {
    paddingTop: 35,
    top: 615
  });
}

function deActivateArrows() {
  arrowsWidget.updateConfig();
  arrowsWidget.removeClass('page-back-button');
  arrowsWidget.removeClass('js-high-layer');
  arrowsWidget.removeClass('js-channels-epg');
  arrowsWidget.removeClass('js-programs-epg');

  WhatchChannelsSchedule.backButton.removeClass('short');
  arrowsWidget.forceShow = false;
  arrowsWidget.widgetArrowsUpdate = null;
  arrowsWidget.hideArrows();
  arrowsWidget.removeListener('show', showArrowsCallback);
  arrowsWidget.removeListener('hide', hideArrowsCallback);
  arrowsWidget.setArrowProperty('down', {
    paddingTop: 0,
    top: 650
  });
  arrowsWidget.setArrowProperty('left', {
    left: 70
  });
}

function showHideArrows() {
  program_list_focus_item = WhatchChannelsSchedule.programsList.$focusItem;
  channel_list_focus_item = WhatchChannelsSchedule.channelsList.$focusItem;
  category_list_focus_item = WhatchChannelsSchedule.categoryList.$focusItem;
  if (channel_list_focus_item && router.current.activeComponent == channel_list_focus_item.list) {
    if (channel_list_focus_item) {
      if (channel_list_focus_item && !channel_list_focus_item.index && !channel_list_focus_item.list.$focusItem.index) {
        arrowsWidget.up.hide();
      } else {
        arrowsWidget.up.show();
      }
      if (channel_list_focus_item && channel_list_focus_item.index == WhatchChannelsSchedule.channelsList.size - 1 &&
        channel_list_focus_item.list.$focusItem.index == channel_list_focus_item.list.size - 1) {
        arrowsWidget.down.hide();
      } else {
        arrowsWidget.down.show();
      }

      if (WhatchChannelsSchedule.programsList.size) {
        arrowsWidget.right.show();
      } else {
        arrowsWidget.right.hide();
      }
    }
  } else if (router.current.activeComponent == WhatchChannelsSchedule.categoryList) {
    if (category_list_focus_item) {
      if (!category_list_focus_item.index) {
        arrowsWidget.up.hide();
      } else {
        arrowsWidget.up.show();
      }
      if (category_list_focus_item && category_list_focus_item.index == WhatchChannelsSchedule.categoryList.size - 1) {
        arrowsWidget.down.hide();
      } else {
        arrowsWidget.down.show();
      }
      if (WhatchChannelsSchedule.channelsList.size) {
        arrowsWidget.right.show();
      }
    }
  } else if (program_list_focus_item && router.current.activeComponent == program_list_focus_item.currentPrograms) {
    if (!program_list_focus_item.index && !program_list_focus_item.currentPrograms.$focusItem.index) {
      arrowsWidget.up.hide();
    } else {
      arrowsWidget.up.show();
    }

    if (program_list_focus_item && program_list_focus_item.index == WhatchChannelsSchedule.programsList.size - 1
      && program_list_focus_item.currentPrograms.$focusItem.index == program_list_focus_item.currentPrograms.size - 1) {
      arrowsWidget.down.hide();
    } else {
      arrowsWidget.down.show();
    }
  }
}

function updateView(type) {
  channel_list_focus_item = WhatchChannelsSchedule.channelsList.$focusItem;
  SelectBoxCategoryList.hide();
  SelectBoxProgramsList.hide();
  SelectBoxChannelsList.hide();
  if (type == 'category') {
    arrowsWidget.left.hide();
    arrowsWidget.addClass('js-channels-epg');
    arrowsWidget.removeClass('js-programs-epg');

    WhatchChannelsSchedule.additionalHeader.textContent = i18nMgg('channels_noun');
    WhatchChannelsSchedule.header.setTitle(i18nMgg('genres_noun'));


    WhatchChannelsSchedule.backButton.removeClass('short');

    SelectBoxCategoryList.show();
    Loader.hide();
  } else if (type == 'channels') {
    arrowsWidget.left.show();
    arrowsWidget.left.emit('mouseout', {no_update: true});
    arrowsWidget.right.show();
    arrowsWidget.setArrowProperty('left', {
      width: 100,
      left: 0
    });
    arrowsWidget.addClass('js-channels-epg');
    arrowsWidget.removeClass('js-programs-epg');

    WhatchChannelsSchedule.additionalHeader.textContent = i18nMgg('epg_title');
    //WhatchChannelsSchedule.additionalHeader.classList.remove('active');
    WhatchChannelsSchedule.header.setTitle(i18nMgg('channels_noun'));


    //todo: take channel name
    //WhatchChannelsSchedule.header.removeClass('disabled');
    WhatchChannelsSchedule.backButton.addClass('short');

    SelectBoxChannelsList.show();
  } else if (type == 'programs') {
    arrowsWidget.right.hide();
    arrowsWidget.setArrowProperty('left', {
      width: 660
    });
    arrowsWidget.removeClass('js-channels-epg');
    arrowsWidget.addClass('js-programs-epg');

    //WhatchChannelsSchedule.header.addClass('disabled');
    //WhatchChannelsSchedule.additionalHeader.classList.add('active');

    WhatchChannelsSchedule.additionalHeader.textContent = current_channel_data && current_channel_data.get('title') || '';

    WhatchChannelsSchedule.backButton.addClass('short');

    SelectBoxProgramsList.show();
  }
  showHideArrows();
}

function showArrowsCallback() {
  SelectBoxChannelsList.addClass('no-arrow');
}

function hideArrowsCallback() {
  SelectBoxChannelsList.removeClass('no-arrow');
}

function changeEpgCallback(data) {
  if (data.name === 'programs' && current_channel_data.get('epg_id') === data.parent_id && epg_load_conf) {
    programs_resp = epgStore.sliceByRange(data.curr, epg_load_conf.epg_from_time, epg_load_conf.epg_to_time, true);
    updateEpg(programs_resp);
  }
}

// public
module.exports = WhatchChannelsSchedule;

},{"core/animate":14,"core/app":16,"core/components/list":23,"core/components/select.box":29,"core/components/widget":30,"core/dom":31,"core/lib/helpFunctions":34,"core/router":45,"core/tools/transform.element":55,"pages/player/state":92,"state/channel_actions":109,"state/channels_store":110,"state/epg_actions":111,"state/epg_store":112,"ui/header":120,"ui/ui_generator":130,"vendor/aura/keys":133,"widgets/loader":149,"widgets/menu-left":150,"widgets/mouse-arrows":152}],146:[function(require,module,exports){
'use strict';

var Widget = require('core/components/widget'),
  dom = require('core/dom'),
  helpFunctions = require('core/lib/helpFunctions'),
  keys = require('vendor/aura/keys'),
  app = require('core/app'),
  Emitter = require('core/emitter'),
  Grid = require('core/components/grid'),
  LeftMenu = require('widgets/menu-left'),
  KeyboardNumWidget, leftPosition, topPosition;

KeyboardNumWidget = new Widget({
  $node: dom.tag('div', {id: 'widgetKeyboardNum'}),
  visible: false,
  focusable: true,
  append_to_body: true,
  events: {}
});

var numKeys = [
  [
    {title: '1'},
    {title: '2'},
    {title: '3'}
  ],
  [
    {title: '4'},
    {title: '5'},
    {title: '6'}
  ],
  [
    {title: '7'},
    {title: '8'},
    {title: '9'}
  ],
  [
    {title: 'remove'},
    {title: '0'},
    {title: 'close'}
  ]
];

KeyboardNumWidget.keyboard = new Grid({
  cycleX: false,
  cycleY: false,
  data: numKeys,
  events: {
    'click:item': function(data) {
      if(data.$item.data.title == 'remove') {
        this.emit('type:remove');
      } else if(data.$item.data.title == 'close') {
        this.emit('close');
      } else {
        this.emit('type:char', {text: data.$item.data.title});
      }
    },
    'mouseover': function(data) {
      this.focus();
      this.focusItem(data.$item);
    }
  },
  keys: {
    RETURN: function() {
      this.emit('close');
    }
  },
  render: function($item, data) {
    if(data.title == 'remove') {
      $item.classList.add('del');
    } else if(data.title == 'close') {
      $item.classList.add('hide');
    } else {
      $item.textContent = data.title;
    }
  }
});

KeyboardNumWidget.add(KeyboardNumWidget.keyboard);

KeyboardNumWidget.setPosition = function(data){
  if(data && data.top && data.left) {
    leftPosition = data.left + 15;
    topPosition = data.top - this.$node.offsetHeight / 2;
    KeyboardNumWidget.$node.style.top = topPosition + 'px';
    KeyboardNumWidget.$node.style.left = leftPosition + 'px';
  }
};

KeyboardNumWidget.addListener('show', function() {
  KeyboardNumWidget.keyboard.focus();
});

KeyboardNumWidget.addListener('hide', function() {
  //KeyboardNumWidget.KeyboardView.updateSearchField('');
});

// public
module.exports = KeyboardNumWidget;

},{"core/app":16,"core/components/grid":21,"core/components/widget":30,"core/dom":31,"core/emitter":32,"core/lib/helpFunctions":34,"vendor/aura/keys":133,"widgets/menu-left":150}],147:[function(require,module,exports){
'use strict';

var Widget = require('core/components/widget'),
  dom = require('core/dom'),
  Languages = require('./languages'),
  helpFunctions = require('core/lib/helpFunctions'),
  keys = require('vendor/aura/keys'),
  app = require('core/app'),
  PopUpList = require('widgets/popup/popup-list'),
  Emitter = require('core/emitter'),
  router = require('core/router'),
  KeyboardWidget, keyboardElement;

KeyboardWidget = new Widget({
  $node: dom.tag('div', {id: 'widgetKeyboard'},
    keyboardElement = dom.tag('div', {id: 'large-keyboard'})),
  visible: false,
  focusable: true,
  append_to_body: true,
  events: {
    keydown: function(event) {
      KeyboardWidget.KeyboardView.keyPressed(event);
    },
    focus: function() {
      KeyboardWidget.KeyboardView.currentSelected.focus();
    },
    mouseover: function() {
      this.focus();
    }
  },
  keys: {
    RETURN: function() {
      router.back();
    }
  }
});

function KeyboardView() {
  Emitter.call(this);

  this.currentSelected = null;

  this.shiftOn = false,

    this.miniPopupTimer = null,

    this.miniPopupContainer = null,

    this.enableInputInPopup = true,

    this.enableLangSwitch = true,

    this.langCode = null,

    this.cursorPosition = 0,

    this.maxInputLength = 40,

    //very bad idea =((
    this.commonTemplate = '<div class="keyboard-row">' +
    '<a href="javascript:void(0)" id="leftShift" class="largeKey">&nbsp;</a>' +

    '<div class="charRow"></div>' +
    '<a href="javascript:void(0)" id="rightShift" class="largeKey">&nbsp;</a>' +
    '</div>' +
    '<div class="keyboard-row">' +
    '<div class="charRow"></div>' +
    '</div>' +
    '<div class="keyboard-row">' +
    '<div class="charRow"></div>' +
    '</div>' +
    '<div class="keyboard-row">' +
    '<a href="javascript:void(0)" id="space" class="space">&nbsp;</a>' +
    '</div>',

    this.certificateTemplate = '<div class="keyboard-row">' +
    '<input id="searchField" type="text" placeholder=""/>' +

    '<div id="inputEmulation" class="certificateViewInput">&nbsp;' +
    '<div id="mock-cursor">&nbsp;</div>' +
    '</div>' +
    '</div>' +
    '<div class="keyboard-row">' +
    '<a href="javascript:void(0)" id="submitCertificate"></a>' +
    '</div>' +
    '<div class="keyboard-row">' +
    '<a href="javascript:void(0)" id="moveLeft" class="arrow">&nbsp;</a>' +
    '<a href="javascript:void(0)" id="moveRight" class="arrow">&nbsp;</a>' +

    '<div class="charRow"></div>' +
    '<a href="javascript:void(0)" id="backspace" class="largeKey">&nbsp;</a>' +
    '</div>',

    this.searchTemplate = '<div class="keyboard-row">' +
    '<a href="javascript:void(0)" id="moveLeft" class="arrow">&nbsp;</a>' +
    '<a href="javascript:void(0)" id="moveRight" class="arrow">&nbsp;</a>' +
    '<input id="searchField" type="text" placeholder="" />' +
    '<div id="inputEmulation" class="searchViewInput">&nbsp;' +
    '<div id="mock-cursor">&nbsp;</div>' +
    '</div>' +
    '<a href="javascript:void(0)" id="backspace" class="largeKey">&nbsp;</a>' +
    '</div>' +
    '<div class="keyboard-row">' +
    '<a href="javascript:void(0)" class=" langSwitch largeKey"></a>' +

    '<div class="charRow"></div>' +
    '<a href="javascript:void(0)" class="langSwitch largeKey"></a>' +
    '</div>',

    this.viewType = 'certificate',
    this.$el = keyboardElement;

    document.getElementById('large-keyboard'),
    this.input = null,

    this.initialize = function(options) {

      this.viewType = options && options.viewType ? options.viewType : "search";

      if (this.viewType == 'certificate') {
        this.$el.classList.add('certificate-keyboard');
        this.$el.innerHTML = this.certificateTemplate + this.commonTemplate;
        document.getElementById('submitCertificate').textContent = i18nMgg('promocode_button');
      } else {
        this.$el.classList.remove('certificate-keyboard');
        this.$el.innerHTML = this.searchTemplate + this.commonTemplate;
      }
      this.input = document.getElementById('searchField');

      this.setLanguage(options);
      this.updateSearchField('');
      if(options.code && options.code.length) {
        for(var i = 0; i < options.code.length; i++) {
          this.typeChar(options.code[i]); //@TODO anyway need to create new keyboard))
        }
      }
    };
  /*
    events = {
      'click' = 'clickNotActive',
      'click #backspace' = 'removeCharacter',
      'keydown' = 'keyPressed',
      'keyup' = 'handleKeyUp',
      'mousedown' = 'clickNotActive',
      'mousedown .keyboard-row a' = 'handleButtonAction',
      'mouseup' = 'handleKeyUp',
      'mouseover' = 'handleMouseOver',
      'mouseleave #miniPopup' = 'discardPopup',
      'focus .key' = 'showPopup',
      'blur.key' = 'discardPopup',
      'keydown #backspace' = 'startCharRemoval',
      'keyup #backspace' = 'stopCharRemoval',
      'mousedown #backspace' = 'startCharRemoval'
    },
  */
  this.startCharRemoval = function(e) {
      return;
      /*
            if (e.type === "mousedown" || e.keyCode === keys.ENTER) {
              var input_val = document.getElementById('searchField').value;
              if (!this.removeCharInterval && input_val.length) {
                this.removeCharInterval = setInterval(this.removeCharacter.bind(this), 550);
              }
            }*/
    },

    this.stopCharRemoval = function(e) {
      clearInterval(this.removeCharInterval);
      this.removeCharInterval = null;
      if (e !== undefined) {
        if (this.viewType === "search" && e.type === "keyup" && e.keyCode === keys.ENTER) {
          if (strInInput.length >= 2) {
            this.emit('type:char', {
              text: this.input.value
            });
          }
        }
      }
    },

    this.showPopup = function(e) {
      var $el = e,
        delay = 1000;
      if (this.isInPopup($el)) return;


      this.discardPopup();

      if (e.type === 'mousedown') {
        this.resetCurrentSelectedElement($el);
        this.enableInputInPopup = false;
      } else if (e.type === 'focusin') {
        delay = 1000;
      } else if (e.type === 'keydown') {
        $el = this.currentSelected;
        this.enableInputInPopup = false;
      }

      var popupButton = document.getElementsByClassName('popupButton');
      if (popupButton.length) {
        popupButton[0].classList.remove('popupButton');
      }

      var hasAdditionalChars = $el.getAttribute("additional"),
        upperCase = this.shiftOn;
      if (hasAdditionalChars) {
        var popupVals = $el.getAttribute("additional").split(",");
        popupVals.unshift($el.innerHTML);
        var KBView = this;
        this.miniPopupTimer = setTimeout(function(e) {

          if (!document.getElementById("miniPopup")) {
            $el.classList.add("popupButton");
            KBView.$el.innerHTML += "<div id = 'miniPopup' class='keyboard-row'></div>";
            var miniPopup = document.getElementById("miniPopup");
            for (var i = 0; i < popupVals.length; i++) {
              miniPopup.innerHTML += "<a href='#'  data-index ='" + i + "' class='key'>" + popupVals[i] + "</a>";
            }

            if (upperCase) {
              var links = miniPopup.getElementsByTagName('a');
              for (var i = 0; i < links.length; i++) {
                links[i].textContent = links[i].textContent.toUpperCase();
              }
            }
            miniPopup.style.display = 'block';

            var leftPos = document.getElementsByClassName("popupButton")[0].getBoundingClientRect().left - miniPopup.clientWidth / 2 + 40;
            miniPopup.style.top = document.getElementsByClassName("popupButton")[0].getBoundingClientRect().top - 391 + 'px';
            miniPopup.style.left = leftPos - 45 + 'px';

            KBView.resetCurrentSelectedElement(miniPopup.getElementsByTagName('a')[0]);
            clearTimeout(KBView.miniPopupTimer);
            KBView.resetKeyListeners();
          }
        }, delay);
      }
    },
    /*
        this.handleKeyUp = function(e) {
          e.preventDefault();
          this.stopCharRemoval();
          this.enableInputInPopup = true;

          //lang switch  happens on  keyup to  prevent premature closing of languages  filter view  while holding key down
          if ($(e.target).is($('.langSwitch')) && (e.keyCode == keys.ENTER || e.type == "mouseup")) {
            this.switchLanguage();
          }
        },
    */
    this.clickNotActive = function(e) {
      e.preventDefault();
    },

    this.handleMouseOver = function(e) {
      var miniPopupDom = document.getElementsByClassName("popupButton")[0];

      if (miniPopupDom && !this.isInPopup(e.target) && !(e.target == miniPopupDom)) {
        this.resetCurrentSelectedElement(miniPopupDom);
        this.discardPopup();
      }

      this.resetCurrentSelectedElement(e.target);
    },

    //handles  key action for different types of keyboard keys - chars,  shift, backspace...
    this.handleButtonAction = function(e) {
      var $el = this.currentSelected;
      if ($el.classList.contains("key")) {
        if (this.isInPopup($el)) {
          this.typeFromPopup();
        } else {
          this.typeFromMainKb(e);
        }
      } else if ($el.classList.contains("langSwitch")) {
        this.enableLangSwitch = true;
        this.switchLanguage();
      } else {
        switch ($el.getAttribute("id")) {
          case "space":
            this.typeFromMainKb();
            break;

          case "rightShift":
          case "leftShift":
            this.setRegister();
            break;

          case "moveLeft":
            this.moveLeft();
            break;

          case "moveRight":
            this.moveRight();
            break;

          case "backspace":
            this.removeCharacter();
            break;
          case "submitCertificate":
            this.emit('submit:certificate', {
              data: this.input.value
            });
            break;
        }
      }
    },

    this.keyPressed = function(e) {
      switch (e.keyCode) {
        case keys.ENTER:
          this.handleButtonAction();
          break;
        case keys.RIGHT:
          this.buttonRight();
          break;
        case keys.LEFT:
          this.buttonLeft();
          break;
        case keys.DOWN:
          this.buttonDown();
          break;
        case keys.UP:
          this.buttonUp();
          break;
        case keys.YELLOW:
          this.removeCharacter();
          break;
        default:
          this.typeFromKeyboard(e.keyCode);
          break;
      }
    },

    this.typeFromKeyboard = function(keycode) {
      if(mainConfigMgg.deviceInfo.vendor == 'browser') {
        var char = Languages.codeCharMapping[this.lang][keycode];
        if (char) {
          this.typeChar(this.shiftOn ? char.toUpperCase() : char);
        }
      }
    },
    //calculating and setting next active key while moving to the right of keyboard
    this.buttonRight = function() {
      var $el = this.currentSelected,
        $el_attr = parseInt($el.getAttribute("data-index"), 10);

      var $parentRow = $el.parentElement;
      if ($el.classList.contains('key') && $el.parentElement.getAttribute('id') != 'miniPopup') {
        $parentRow = $el.parentElement.parentElement;
      }

      var parentRowChildren = $parentRow.getElementsByTagName('a');

      if ($el_attr < (parentRowChildren.length - 1)) {
        var nextIndex = $el_attr + 1;
        this.resetCurrentSelectedElement(parentRowChildren[nextIndex]);
      } else {
        this.resetCurrentSelectedElement(parentRowChildren[0]);
      }
    },

    //calculating and setting next active key while moving to the left of keyboard
    this.buttonLeft = function() {
      var $el = this.currentSelected,
        $el_attr = parseInt($el.getAttribute("data-index"), 10);

      var $parentRow = $el.parentElement;
      if ($el.classList.contains('key') && $el.parentElement.getAttribute('id') != 'miniPopup') {
        $parentRow = $el.parentElement.parentElement;
      }

      var parentRowChildren = $parentRow.getElementsByTagName('a');

      if ($el_attr > 0) {
        var nextIndex = $el_attr - 1;
        this.resetCurrentSelectedElement(parentRowChildren[nextIndex]);
      } else {
        this.resetCurrentSelectedElement(parentRowChildren[parentRowChildren.length - 1]);
      }
    },

    //calculating and setting next active key while moving down the keyboard
    this.buttonDown = function() {
      var $el = this.currentSelected;

      this.discardPopup();

      if (this.isInPopup($el)) {
        this.resetCurrentSelectedElement(document.getElementsByClassName("popupButton")[0]);
        this.resetKeyListeners();
        return;
      }

      if ($el.getAttribute("id") == "submitCertificate") {
        this.resetCurrentSelectedElement(this.$el.getElementsByClassName('keyboard-row')[2].getElementsByClassName('key')[5]);
        return;
      }

      var $parentRow = $el.parentElement;
      var $parentRow = $el.parentElement;
      if ($el.classList.contains('key') && $el.parentElement.getAttribute('id') != 'miniPopup') {
        $parentRow = $el.parentElement.parentElement;
      }
      var currentBtnIndex = parseInt($el.getAttribute("data-index"), 10),
        lastIndexInRow = parseInt($parentRow.getElementsByTagName('a')[$parentRow.getElementsByTagName('a').length - 1].getAttribute("data-index"), 10),
        elPos = $el.getBoundingClientRect(),
        paddingGap = 16,
        nextXPos = 0,
        nextYPos = 0;


      if (currentBtnIndex <= lastIndexInRow / 2) {
        nextXPos = elPos.left + elPos.width / 2 + paddingGap;
        nextYPos = elPos.top + elPos.height + paddingGap;
      } else {
        nextXPos = elPos.left + elPos.width / 2 - paddingGap;
        nextYPos = elPos.top + elPos.height + paddingGap;
      }

      var nextElement = document.elementFromPoint(nextXPos, nextYPos);
      if (!this.isKeyboardElement(nextElement)) {
        var $nextParentRow = $parentRow.nextElementSibling;
        if (!$nextParentRow) return;
        if (currentBtnIndex <= lastIndexInRow / 2) {
          nextElement = $nextParentRow.getElementsByTagName('a')[0];
        } else {
          nextElement = $nextParentRow.getElementsByTagName('a')[$nextParentRow.getElementsByTagName('a').length - 1];
        }
      }

      this.resetCurrentSelectedElement(nextElement);
    },

    //calculating and setting next focused key while moving up the keyboard
    this.buttonUp = function() {
      var $el = this.currentSelected;

      this.discardPopup();

      if (this.isInPopup($el)) {
        this.resetCurrentSelectedElement(document.getElementsByClassName("popupButton")[0]);
        this.resetKeyListeners();
        return;
      }

      var $topCharRow = document.getElementsByClassName('charRow')[0].parentElement,
        $topKbRow = document.getElementsByClassName('keyboard-row')[0],
        $topKbRowCertificate = document.getElementsByClassName('keyboard-row')[2];

        if (this.viewType == "certificate") {
          if ($el.parentElement == $topKbRowCertificate) {
            this.resetCurrentSelectedElement(document.getElementById('submitCertificate'));
            return;
          }
        }
      if ($el.parentElement.parentElement == $topCharRow) {
        if (this.viewType == "certificate") {

          this.resetCurrentSelectedElement(document.getElementById('submitCertificate'));
        } else {
          this.resetCurrentSelectedElement(document.getElementById('backspace'));
        }
      }

      if ($el.parentElement == $topKbRow) {
        this.emit('overflow:top', {
          data: this.currentSelected
        });
        return;
      }

      if ($el.getAttribute("id") == "submitCertificate") {
        this.emit('overflow:top', {
          data: this.currentSelected
        });
        return;
      }

      var $parentRow = $el.parentElement,
        currentBtnIndex = parseInt($el.getAttribute("data-index"), 10),
        lastIndexInRow = parseInt($parentRow.getElementsByTagName('a')[$parentRow.getElementsByTagName('a').length - 1].getAttribute("data-index"), 10),
        elPos = $el.getBoundingClientRect(),
        paddingGap = 16,
        nextXPos = 0,
        nextYPos = 0;

      if (currentBtnIndex <= lastIndexInRow / 2) {
        nextXPos = elPos.left + elPos.width / 2 - paddingGap;
        nextYPos = elPos.top - paddingGap;
      } else {
        nextXPos = elPos.left + elPos.width / 2 + paddingGap;
        nextYPos = elPos.top - paddingGap;
      }

      var nextElement = document.elementFromPoint(nextXPos, nextYPos);
      this.resetCurrentSelectedElement(nextElement);
    },

    //hiding little popup  window with additional chars
    this.discardPopup = function() {
      clearTimeout(this.miniPopupTimer);
      this.miniPopupTimer = null;
      if (document.getElementById('miniPopup')) {
        document.getElementById('miniPopup').parentElement.removeChild(document.getElementById('miniPopup'));
        //document.getElementById('miniPopup').innerHTML = '';
      }
    },

    //adding  character after cursor position  in input
    this.typeChar = function(char) {

      var cursorPosition = this.getCursorPosition(),
        strInInput = this.input.value;

      if (strInInput.length >= this.maxInputLength) {
        return;
      }

      if (strInInput.length == cursorPosition) {
        this.input.value += char;
      } else if (strInInput.length > cursorPosition) {
        strInInput = strInInput.substr(0, cursorPosition) + char + strInInput.substr(cursorPosition, strInInput.length);
        this.input.value = strInInput;
      }

      this.setCursorPosition(cursorPosition + 1);
      this.emulateChangesInFakeInput();
      if (this.viewType == "search") {
        if (strInInput.length >= 2) {
          this.emit('type:char', {
            text: this.input.value
          });
        }
      }
    },

    this.emulateChangesInFakeInput = function() {
      var charsArray = this.input.value.split(""); //$("#searchField").val().split("");
      document.getElementById('inputEmulation').innerHTML = '';
      var self = this;

      charsArray.forEach(function(char) {
        document.getElementById('inputEmulation').innerHTML += "<span>" + char + "</span>";
      });

      var cursorPosition = this.getCursorPosition();
      this.setFakeCursorPosition(cursorPosition);
    },

    this.setFakeCursorPosition = function(pos) {
      var inputVal = document.getElementById('inputEmulation').getElementsByTagName('span');

      var strLength = inputVal.length,
        cursor = document.createElement('div'); // $("<div id='mock-cursor'></div>");
      cursor.id = 'mock-cursor';
      pos = pos - 1;
      if (document.getElementById('mock-cursor')) {
        document.getElementById('mock-cursor').parentElement.removeChild(document.getElementById('mock-cursor'));
      }

      if (pos < 0 && strLength > 0) {
        inputVal[0].parentElement.insertBefore(cursor, inputVal[0]);
        return;
      }
      if (strLength == 0) {
        document.getElementById('inputEmulation').innerHTML = "<span>&nbsp</span><div id='mock-cursor'></div>";
        return;
      }

      if (pos > strLength) {
        pos = strLength;
      }

      if (inputVal[pos]) {
        insertAfter(cursor, inputVal[pos]);
      }

      function insertAfter(elem, refElem) {
        var parent = refElem.parentNode;
        var next = refElem.nextElementSibling;

        if (next) {
          return parent.insertBefore(elem, next);
        } else {
          return parent.appendChild(elem);
        }
      }
    },

    //character input from main keyboard layout
    this.typeFromMainKb = function(e) {
      var $el = this.currentSelected;

      this.resetCurrentSelectedElement($el);

      var char = $el.getAttribute("id") != 'space' ? $el.innerHTML : " ";
      this.typeChar(char);
    },

    //character  input from little popup window
    this.typeFromPopup = function() {
      if (!this.enableInputInPopup) {
        this.enableInputInPopup = true;
        return;
      }

      this.typeChar(this.currentSelected.textContent);
      this.discardPopup();
      this.resetCurrentSelectedElement(document.getElementsByClassName('popupButton')[0]);
      this.resetKeyListeners();
    },

    //removing character  from  search input
    this.removeCharacter = function() {
      var cursorPosition = this.getCursorPosition(),
        strInInput = this.input.value;

      if (strInInput.length) {
        strInInput = strInInput.substr(0, cursorPosition - 1) + strInInput.substr(cursorPosition, strInInput.length - cursorPosition);
        this.input.value = strInInput;

        this.setCursorPosition(cursorPosition - 1);
        this.emulateChangesInFakeInput();

        //perform  movie search  on  search  string  change
        if (this.viewType === "search" && !this.removeCharInterval) {
          if (strInInput.length >= 3) {
            this.emit('type:char', {
              text: this.input.value
            });
          }
        }
      }
    },

    this.updateSearchField = function(str) {
      this.input.value = str;
      this.setCursorPosition(str.length);
      this.emulateChangesInFakeInput();
    },

    //changing chars  register on  left and right  shift
    this.setRegister = function() {
      var keys = document.getElementsByClassName('key');

      if (this.shiftOn) {
        this.shiftOn = false;
        for (var i = 0; i < keys.length; i++) {
          keys[i].textContent = keys[i].textContent.toLowerCase();
        }
      } else {
        this.shiftOn = true;
        for (var i = 0; i < keys.length; i++) {
          keys[i].textContent = keys[i].textContent.toUpperCase();
        }
      }

    },

    //moving left in input with keyboard  arrow
    this.moveLeft = function() {
      var pos = this.getCursorPosition();
      this.setCursorPosition(pos - 1);
    },

    //moving right in input with keyboard  arrow
    this.moveRight = function() {
      var pos = this.getCursorPosition();
      this.setCursorPosition(pos + 1);
    },

    this.getCursorPosition = function() {
      return this.cursorPosition;
    },

    this.setCursorPosition = function(pos) {
      var inputField = this.input;
      if (pos < 0) {
        pos = 0;
      }
      if (pos > inputField.value.length) {
        pos = inputField.value.length;
      }

      if (inputField.setSelectionRange) {
        inputField.setSelectionRange(pos, pos);
      }
      this.cursorPosition = pos;
      this.setFakeCursorPosition(pos);
    },

    //setting  keyboard  language  (available language values  are  set in  config.keyboard_lang object)
    this.setLanguage = function(options) {
      var lang,
        langCode;
      if (options != undefined && options.lang != undefined) {
        lang = options.lang.toUpperCase();
        langCode = helpFunctions.getKeyByValue(mainConfigMgg.keyboard_lang, lang);
      } else {
        langCode = helpFunctions.getAppLanguage();
        lang = mainConfigMgg.keyboard_lang[langCode].id;
      }

      this.langCode = langCode;
      this.lang = lang;

      this.resetModel({
        "lang": this.lang,
        "langCode": this.langCode
      });
    },
    //Language selection  view rendering
    this.switchLanguage = function() {
      if (!this.enableLangSwitch) {
        this.enableLangSwitch = true;
        return;
      }
      PopUpList.show({
        header_title: i18nMgg('language'),
        type: 'language_switcher',
        mark: this.lang,
        content: [{id: "RUS", title: 'Русский', altID: 'ru'},
        {id: "UKR", title: 'Українська', altID: 'ua'},
        {id: "ENG", title: 'English', altID: 'en'},
        {id: "LAT", title: 'Latviešu', altID: 'lv'},
        {id: "LIT", title: 'Lietuvių', altID: 'lt'},
        {id: "BYX", title: 'Беларуская', altID: 'by'},
        {id: "EST", title: 'Eesti', altID: 'ee'},
        {id: "CZE", title: 'Česky', altID: 'cz'},
        {id: "SLO", title: 'Slovenčina', altID: 'sk'}]
      });
    },

    //setting Search  and Space key caption
    this.setLocalizedCaptions = function() {
      if (this.viewType != 'certificate') {
        document.getElementsByClassName('langSwitch')[0].innerHTML = this.lang;
        document.getElementsByClassName('langSwitch')[0].setAttribute('lang-code', this.langCode);
        document.getElementsByClassName('langSwitch')[1].innerHTML = this.lang;
        document.getElementsByClassName('langSwitch')[1].setAttribute('lang-code', this.langCode);
      }

      document.getElementById('space').innerHTML = this.model["space"];

      if (["ENG", "LAT", "LIT", "EST", "CZE", "SLO"].indexOf(this.lang) != -1) {
        document.getElementById('rightShift').style.width = 145 + 'px';
        document.getElementById('leftShift').style.width = 145 + 'px';
      } else {
        document.getElementById('rightShift').style.width = 100 + 'px';
        document.getElementById('leftShift').style.width = 100 + 'px';
      }
    },

    //method is used to  set  key  index in  row to use it later while moving horizontally
    this.setIndex = function() {
      var keyboardRowArray = document.getElementsByClassName('keyboard-row');
      for (var i = 0; i < keyboardRowArray.length; i++) {
        var keys = keyboardRowArray[i].getElementsByTagName('a');
        for (var j = 0; j < keys.length; j++) {
          keys[j].setAttribute('data-index', j);
        }
      }
    },

    //this check is done  to  prevent setting element in layout not belonging to keyboard as current selected
    this.isKeyboardElement = function(el) {
      return el.classList.contains("key") || el.classList.contains("largeKey") || el.classList.contains("arrow") || el.classList.contains("space") || el.getAttribute("id") == "submitCertificate";
    },

    this.resetCurrentSelectedElement = function(el) {
      if (!this.isKeyboardElement(el)) {
        return;
      }

      this.currentSelected = el;
      el.focus();
    },

    this.isInPopup = function(el) {
      if (el.parentElement) {
        return el.parentElement.getAttribute('id') == 'miniPopup';
      }
      return;
    },

    //removing  keyboard  from layout
    this.hide = function() {

    },

    //setting  view limitations
    this.setView = function(view) {
      if (view == "certificate") {
        this.maxInputLength = 12;
        this.setRegister();
      } else {
        this.maxInputLength = 40;
      }
    },

    this.resetModel = function() {
      var lang_keyboard = this.lang + '_Keyboard';
      var model_object = Languages[lang_keyboard];
      model_object['row0'] = Languages.NUM_Keyboard['row0'];
      this.model = model_object;
      this.render();
      this.setLocalizedCaptions();
    },

    // set focus on 'P' for non-latin fonts and 'G' for latin
    this.setFirstFocus = function(lang) {
      var curElement = this.$el.getElementsByClassName('keyboard-row')[3].getElementsByClassName('key')[5];
      if (["ENG", "LAT", "LIT", "EST", "CZE", "SLO"].indexOf(this.lang) != -1) {
        curElement = this.$el.getElementsByClassName('keyboard-row')[3].getElementsByClassName('key')[4];
      }
      this.resetCurrentSelectedElement(curElement);
    },

    this.render = function() {

      var model = this.model;

      var charRows = document.getElementsByClassName('charRow');

      for (var i = 0; i < charRows.length; i++) {
        var row = charRows[i];
        row.innerHTML = '';
        var charsRow = model["row" + i];
        if (!charsRow) return;
        charsRow.forEach(function(char) {
          var additional = char.additional ? "additional =" + char.additional : '';
          row.innerHTML += '<a href="javascript:void(0)" class="key" ' + additional + '>' + char.value + '</a>';
        });
      }

      this.setIndex();
      this.shiftOn = false;
      this.updateSearchField('');
      this.setView(this.viewType);
      this.resetKeyListeners();

    },
    this.resetKeyListeners = function() {
      var i;
      var keys = document.getElementsByClassName('key');
      var large_keys = document.getElementsByClassName('largeKey');
      var arrows = document.getElementsByClassName('arrow');
      var space = document.getElementById('space');
      var submit = document.getElementById('submitCertificate');

      if(submit) {
        setEvents(submit);
      }

      setEvents(space);
      for (i = 0; i < keys.length; i++) {
        setEvents(keys[i]);
      }

      for (i = 0; i < large_keys.length; i++) {
        setEvents(large_keys[i]);
      }

      for (i = 0; i < arrows.length; i++) {
        setEvents(arrows[i]);
      }
    }
    var self = this;

    function focusCallback(event) {
      self.showPopup(event.target);
    }

    function mouseoverCallback(e) {
      self.handleMouseOver(e);
    }

    function handleButtonActionCallback(e) {
      self.handleButtonAction(e);
    }

    function setEvents(item) {
      if(!item) return
      item.removeEventListener('focus', focusCallback);
      item.addEventListener('focus', focusCallback, false);
      item.removeEventListener('mouseover', mouseoverCallback);
      item.addEventListener('mouseover', mouseoverCallback, false);
      item.removeEventListener('click', handleButtonActionCallback);
      item.addEventListener('click', handleButtonActionCallback, false);
    }

}

KeyboardView.prototype = Object.create(Emitter.prototype);
KeyboardView.prototype.constructor = KeyboardView;

KeyboardWidget.KeyboardView = new KeyboardView();

KeyboardWidget.addListener('show', function() {

  PopUpList.addListener('change', popUpListChange);
  PopUpList.addListener('hide', popUpListHide);
});

KeyboardWidget.addListener('hide', function() {
  PopUpList.removeListener('change', popUpListChange);
  PopUpList.removeListener('hide', popUpListHide);
});

function popUpListHide() {
  KeyboardWidget.focus();
}
function popUpListChange(data) {
  KeyboardWidget.KeyboardView.setLanguage({
    lang: data.data.id
  });
  helpFunctions.setKeyboardLanguage(data.data.id);
  KeyboardWidget.focus();
}

// public
module.exports = KeyboardWidget;

},{"./languages":148,"core/app":16,"core/components/widget":30,"core/dom":31,"core/emitter":32,"core/lib/helpFunctions":34,"core/router":45,"vendor/aura/keys":133,"widgets/popup/popup-list":155}],148:[function(require,module,exports){
module.exports = {
  codeCharMapping : {
    UKR: {
        32: " ",
        48: "0",
        49: "1",
        50: "2",
        51: "3",
        52: "4",
        53: "5",
        54: "6",
        55: "7",
        56: "8",
        57: "9",
        70: "а",
        188: "б",
        68: "в",
        85: "г",
        226: "ґ",
        76: "д",
        84: "е",
        222: "є",
        186: "ж",
        80: "з",
        66: "и",
        83: "і",
        221: "ї",
        81: "й",
        82: "к",
        75: "л",
        86: "м",
        89: "н",
        74: "о",
        71: "п",
        72: "р",
        67: "с",
        78: "т",
        69: "у",
        65: "ф",
        219: "х",
        87: "ц",
        88: "ч",
        73: "ш",
        79: "щ",
        77: "ь",
        190: "ю",
        90: "я",
        189: "_"
    },
    RUS: {
        32: " ",
        48: "0",
        49: "1",
        50: "2",
        51: "3",
        52: "4",
        53: "5",
        54: "6",
        55: "7",
        56: "8",
        57: "9",
        70: "а",
        188: "б",
        68: "в",
        85: "г",
        76: "д",
        84: "е",
        186: "ж",
        80: "з",
        66: "и",
        81: "й",
        82: "к",
        75: "л",
        86: "м",
        89: "н",
        74: "о",
        71: "п",
        72: "р",
        67: "с",
        78: "т",
        69: "у",
        65: "ф",
        219: "х",
        87: "ц",
        88: "ч",
        73: "ш",
        79: "щ",
        221: "ъ",
        83: "ы",
        77: "ь",
        192: "ё",
        222: "э",
        190: "ю",
        90: "я",
        189: "_"
    },
    ENG: {
        32: " ",
        48: "0",
        49: "1",
        50: "2",
        51: "3",
        52: "4",
        53: "5",
        54: "6",
        55: "7",
        56: "8",
        57: "9",
        65: "a",
        66: "b",
        67: "c",
        68: "d",
        69: "e",
        70: "f",
        71: "g",
        72: "h",
        73: "i",
        74: "j",
        75: "k",
        76: "l",
        77: "m",
        78: "n",
        79: "o",
        80: "p",
        81: "q",
        82: "r",
        83: "s",
        84: "t",
        85: "u",
        86: "v",
        87: "w",
        88: "x",
        89: "y",
        90: "z",
        189: "_"
    },
    BYX: {
        32: " ",
        48: "0",
        49: "1",
        50: "2",
        51: "3",
        52: "4",
        53: "5",
        54: "6",
        55: "7",
        56: "8",
        57: "9",
        70: "а",
        188: "б",
        68: "в",
        85: "г",
        76: "д",
        84: "е",
        222: "э",
        186: "ж",
        80: "з",
        83: "ы",
        66: "і",
        81: "й",
        82: "к",
        75: "л",
        86: "м",
        89: "н",
        74: "о",
        71: "п",
        72: "р",
        67: "с",
        78: "т",
        69: "у",
        65: "ф",
        219: "х",
        87: "ц",
        88: "ч",
        73: "ш",
        79: "ў",
        77: "ь",
        190: "ю",
        90: "я",
        189: "_"
    },
    LAT: {
        32: " ",
        48: "0",
        49: "1",
        50: "2",
        51: "3",
        52: "4",
        53: "5",
        54: "6",
        55: "7",
        56: "8",
        57: "9",
        65: "a",
        66: "b",
        67: "c",
        68: "d",
        69: "e",
        70: "f",
        71: "g",
        72: "h",
        73: "i",
        74: "j",
        75: "k",
        76: "l",
        77: "m",
        78: "n",
        79: "o",
        80: "p",
        81: "q",
        82: "r",
        83: "s",
        84: "t",
        85: "u",
        86: "v",
        87: "w",
        88: "x",
        89: "y",
        90: "z",
        189: "_"
    },
    LIT: {
        32: " ",
        48: "0",
        49: "1",
        50: "2",
        51: "3",
        52: "4",
        53: "5",
        54: "6",
        55: "7",
        56: "8",
        57: "9",
        65: "a",
        66: "b",
        67: "c",
        68: "d",
        69: "e",
        70: "f",
        71: "g",
        72: "h",
        73: "i",
        74: "j",
        75: "k",
        76: "l",
        77: "m",
        78: "n",
        79: "o",
        80: "p",
        81: "q",
        82: "r",
        83: "s",
        84: "t",
        85: "u",
        86: "v",
        87: "w",
        88: "x",
        89: "y",
        90: "z",
        189: "_"
    },
    EST: {
        32: " ",
        48: "0",
        49: "1",
        50: "2",
        51: "3",
        52: "4",
        53: "5",
        54: "6",
        55: "7",
        56: "8",
        57: "9",
        65: "a",
        66: "b",
        67: "c",
        68: "d",
        69: "e",
        70: "f",
        71: "g",
        72: "h",
        73: "i",
        74: "j",
        75: "k",
        76: "l",
        77: "m",
        78: "n",
        79: "o",
        80: "p",
        81: "q",
        82: "r",
        83: "s",
        84: "t",
        85: "u",
        86: "v",
        87: "w",
        88: "x",
        89: "y",
        90: "z",
        189: "_"
    },
    CZE: {
        32: " ",
        48: "0",
        49: "1",
        50: "2",
        51: "3",
        52: "4",
        53: "5",
        54: "6",
        55: "7",
        56: "8",
        57: "9",
        65: "a",
        66: "b",
        67: "c",
        68: "d",
        69: "e",
        70: "f",
        71: "g",
        72: "h",
        73: "i",
        74: "j",
        75: "k",
        76: "l",
        77: "m",
        78: "n",
        79: "o",
        80: "p",
        81: "q",
        82: "r",
        83: "s",
        84: "t",
        85: "u",
        86: "v",
        87: "w",
        88: "x",
        89: "y",
        90: "z",
        189: "_"
    },
    SLO: {
        32: " ",
        48: "0",
        49: "1",
        50: "2",
        51: "3",
        52: "4",
        53: "5",
        54: "6",
        55: "7",
        56: "8",
        57: "9",
        65: "a",
        66: "b",
        67: "c",
        68: "d",
        69: "e",
        70: "f",
        71: "g",
        72: "h",
        73: "i",
        74: "j",
        75: "k",
        76: "l",
        77: "m",
        78: "n",
        79: "o",
        80: "p",
        81: "q",
        82: "r",
        83: "s",
        84: "t",
        85: "u",
        86: "v",
        87: "w",
        88: "x",
        89: "z",
        90: "y",
        189: "_"
    }
},

 NUM_Keyboard : {
    row0: [{value: "1"}, {value: "2"}, {value: "3"}, {value: "4"}, {value: "5"}, {value: "6"}, {value: "7"}, {value: "8"}, {value: "9"}, {value: "0"}, {value: "_"}]
},

UKR_Keyboard : {
    row1: [{ value: "й"},{ value: "ц"}, { value: "у"}, { value: "к"}, {value: "е"}, {value: "н" }, {value: "г"}, { value: "ш"}, { value: "щ"}, { value: "з"}, { value: "х"} ],
    row2: [ { value: "ф" },{ value: "і", additional: ["ї"]}, { value: "в"}, { value: "а"}, { value: "п"}, {value: "р" }, { value: "о" }, {value: "л"}, {value: "д"}, {value: "ж" }, {value: "є"}],
    row3: [  { value: "ґ"}, { value: "я"}, { value: "ч"}, {value: "с"}, {value: "м"}, {value: "и"}, {value: "т"}, {value: "ь"}, {value: "б"}, { value: "ю"}],
    enter: "Пошук",
    space : "Пробіл"
},

 RUS_Keyboard : {
    row1: [{ value: "й"},{ value: "ц"}, { value: "у"}, { value: "к"}, {value: "е", additional: ["ё"]}, {value: "н" }, {value: "г"}, { value: "ш"}, { value: "щ"}, { value: "з"}, { value: "х"} ],
    row2: [ { value: "ф" },{ value: "ы"}, { value: "в"}, { value: "а"}, { value: "п"}, {value: "р" }, { value: "о" }, {value: "л"}, {value: "д"}, {value: "ж" }, {value: "э"}],
    row3: [ { value: "я"}, { value: "ч"}, {value: "с"}, {value: "м"}, {value: "и"}, {value: "т"}, {value: "ь",additional: ["ъ"]}, {value: "б"}, { value: "ю"}],
    enter: "Поиск",
    space : "Пробел"
},

 ENG_Keyboard : {
    row1: [{ value: "q"},{ value: "w"}, { value: "e"}, { value: "r"}, {value: "t"}, {value: "y"}, { value: "u"}, { value: "i"}, { value: "o"}, { value: "p"} ],
    row2: [ { value: "a" },{ value: "s"}, { value: "d"}, { value: "f"}, { value: "g"}, {value: "h" }, { value: "j" }, {value: "k"}, {value: "l"}],
    row3: [ { value: "z"}, { value: "x"}, {value: "c"}, {value: "v"}, {value: "b"}, {value: "n"}, {value: "m"}],
    enter: "Search",
    space : "Space"
},

 LAT_Keyboard : {
    row1: [{ value: "q"},{ value: "w"}, { value: "e", additional: ["ē"]}, { value: "r",additional :["ŗ"]}, {value: "t"},  {value: "y"}, { value: "u", additional :["ū"]}, { value: "i", additional:["ī"]}, { value: "o", additional:["ō"]}, { value: "p"} ],
    row2: [ { value: "a",additional :["ā"] },{ value: "s", additional :["š"] }, { value: "d"}, { value: "f"}, { value: "g", additional :["ģ"]}, {value: "h" }, { value: "j" }, {value: "k",additional :["ķ"] }, {value: "l",additional :["ļ"] }],
    row3: [ { value: "z", additional : ["ž"]}, { value: "x"}, {value: "c", additional :["č"]}, {value: "v"}, {value: "b"}, {value: "n", additional: ["ņ"]}, {value: "m"}],
    enter: "Search",
    space : "Space"
},

 LIT_Keyboard : {
    row1: [{ value: "q"},{ value: "w"}, { value: "e", additional: ["ę","ė"]}, { value: "r"}, {value: "t"},  {value: "y"}, { value: "u", additional :["ų","ū"]}, { value: "i", additional:"į"}, { value: "o"}, { value: "p"} ],
    row2: [ { value: "a",additional :["ą"] },{ value: "s", additional :["š"] }, { value: "d"}, { value: "f"}, { value: "g"}, {value: "h" }, { value: "j" }, {value: "k"}, {value: "l" }],
    row3: [ { value: "z", additional : ["ž"]}, { value: "x"}, {value: "c", additional :["č"]}, {value: "v"}, {value: "b"}, {value: "n"}, {value: "m"}],
    enter: "Search",
    space : "Space"
},

 EST_Keyboard : {
    row1: [{ value: "q"},{ value: "w"}, { value: "e"}, { value: "r"}, {value: "t"},  {value: "y"}, { value: "u", additional :["ü"]}, { value: "i", additional:["į"]}, { value: "o", additional:["õ","ö"]}, { value: "p"} ],
    row2: [ { value: "a",additional :["ä"] },{ value: "s", additional :["š"] }, { value: "d"}, { value: "f"}, { value: "g"}, {value: "h" }, { value: "j" }, {value: "k"}, {value: "l" }],
    row3: [ { value: "z", additional : ["ž"]}, { value: "x"}, {value: "c"}, {value: "v"}, {value: "b"}, {value: "n"}, {value: "m"}],
    enter: "Search",
    space : "Space"
},

 CZE_Keyboard : {
    row1: [{ value: "q"},{ value: "w"}, { value: "e", additional : [ "é", "ě"]}, { value: "r", additional: ["ř"]}, {value: "t", additional: ["ť"]},  {value: "y", additional : ["ý"]}, { value: "u", additional :["ú", "ů"]}, { value: "i", additional:["í"]}, { value: "o", additional:["ó"]}, { value: "p"} ],
    row2: [ { value: "a",additional :["á"] },{ value: "s", additional :["š"]}, { value: "d", additional :["ď"]}, { value: "f"}, { value: "g"}, {value: "h" }, { value: "j" }, {value: "k"}, {value: "l" }],
    row3: [ { value: "z", additional : ["ž"]}, { value: "x"}, {value: "c", additional : ["č"]}, {value: "v"}, {value: "b"}, {value: "n", additional : ["ň"]}, {value: "m"}],
    enter: "Search",
    space : "Space"
},

 SLO_Keyboard : {
    row1: [{ value: "q"},{ value: "w"}, { value: "e", additional : [ "é"]}, { value: "r"}, {value: "t", additional: ["ť"]},  {value: "y"}, { value: "u", additional :["ú"]}, { value: "i", additional:["í"]}, { value: "o", additional:["ó","ô"]}, { value: "p"} ],
    row2: [ { value: "a",additional :["á","ä"] },{ value: "s", additional :["š"]}, { value: "d", additional:["ď"] }, { value: "f"}, { value: "g"}, {value: "h" }, { value: "j" }, {value: "k"}, {value: "l", additional:["ľ"]}],
    row3: [ { value: "z", additional : ["ž"]}, { value: "x"}, {value: "c", additional : ["č"]}, {value: "v"}, {value: "b"}, {value: "n", additional : ["ň"]}, {value: "m"}],
    enter: "Search",
    space : "Presledek"
},

 BYX_Keyboard : {
    row1: [{ value: "й"},{ value: "ц"}, { value: "у"}, { value: "к"}, {value: "е", additional: ["ё"]}, {value: "н" }, {value: "г"}, { value: "ш"}, { value: "ў"}, { value: "з"}, { value: "х"} ],
    row2: [ { value: "ф" },{ value: "ы"}, { value: "в"}, { value: "а"}, { value: "п"}, {value: "р" }, { value: "о" }, {value: "л"}, {value: "д"}, {value: "ж" }, {value: "э"}],
    row3: [ { value: "я"}, { value: "ч"}, {value: "с"}, {value: "м"}, {value: "і"}, {value: "т"}, {value: "ь"}, {value: "б"}, { value: "ю"}],
    enter: "Поиск",
    space : "Пробел"
}
};

},{}],149:[function(require,module,exports){
/**
 *
 */

'use strict';

var Widget = require('core/components/widget'),
  ModalMessage = require('core/components/modal.box'),
  dom = require('core/dom'),
  LoaderAnimationEl = require('ui/loader-animation-el'),
  widget;

widget = new Widget({
  $node: dom.tag('div', {id: 'widgetLoading'},
    dom.tag('div', {id: 'widgetLoadingPreloader'})
  ),
  visible: false,
  append_to_body: true
});

widget.loading = new ModalMessage({
  visible: true,
  focusable: true
});

var loader = new LoaderAnimationEl();

widget.loading.add(loader);

widget.addListener('show', function (type) {
  loader.start(type || 'mid');
});

widget.addListener('hide', function () {
  loader.stop();
  widget.loading.blur();
});

widget.add(widget.loading);

module.exports = widget;

},{"core/components/modal.box":24,"core/components/widget":30,"core/dom":31,"ui/loader-animation-el":121}],150:[function(require,module,exports){
/**
 * Left Menu
 *
 */

'use strict';

var app = require('core/app'),
  arrowsWidget = require('widgets/mouse-arrows'),
  Button = require('core/components/button'),
  router = require('core/router'),
  keys = require('vendor/aura/keys'),
  helpFunctions = require('core/lib/helpFunctions'),
  Widget = require('core/components/widget'),
  List = require('core/components/list'),
  Panel = require('core/components/panel'),
  dom = require('core/dom'),
  Background = require('widgets/background'),
  animate = require('core/animate'),
  api = require('core/api'),
  subscriptionService = require('core/tools/subscriptionService'),
  menuNavigateService = require('core/tools/menuNavigateService'),
  Loader = require('widgets/loader'),
  widget, shadeTimeout, hideMenuAnimation, user_profile;


//HAS BUG WITH SCROLL CONTAINER ON page load from url
widget = new Widget({
  focusable: true,
  $node: 'widgetLeftMenu',
  visible: false,
  events: {
    keydown: function () {
    }
  }
});

widget.menuCatalog = {};
widget.selectedItem = null;
widget.hoverMenu = false;
widget.hoverBackLable = false;
widget.scrollVal = 0;
/**
 * Update profile data in leftMenu
 * @param {title, image}
 */
widget.updateProfile = function (data) {

  if (!widget.profile) return;


  if (data) {
    widget.profile.menuItem.textContent = data.title ? data.title : i18nMgg('profile');
    if (data.image) {
      if (!data.is_autouser) {
        widget.profile.user_profile = dom.tag('div', {id: 'userAvatar'});
        widget.profile.user_profile.style.backgroundImage = 'url(' + data.image + ')';
        widget.profile.appendChild(widget.profile.user_profile);
        widget.profile.menuWraper.style.backgroundImage = 'none';

      } else {
        widget.profile.menuWraper.style.backgroundImage = 'url(' + data.image + ')';
      }
    } else {
      if (widget.profile.user_profile && widget.profile.user_profile.parentElement) {
        widget.profile.user_profile.parentElement.removeChild(widget.profile.user_profile);
      }
    }
  } else {
    if (widget.profile.user_profile && widget.profile.user_profile.parentElement) {
      widget.profile.user_profile.parentElement.removeChild(widget.profile.user_profile);
    }
    widget.profile.menuWraper.removeAttribute('style');
    widget.profile.menuItem.textContent = i18nMgg('profile');
  }
}

/**
 * @TODO need to write comments
 * @param item
 */
widget.scrollTo = function (item) {
  scroll_top_value = 0;
  if (item) {
    var cat_list_height = widget.leftMenu.catList.$node.offsetHeight;
    var left_menu_height = widget.leftMenu.$node.offsetHeight ? widget.leftMenu.$node.offsetHeight - 15 : 0;
    if (cat_list_height > left_menu_height) {
      var item_bottom_position = item.getBoundingClientRect().bottom;
      var middle_page_height = left_menu_height / 2 + item.offsetHeight / 2;
      var scroll_top_value = widget.scrollVal ? parseInt(widget.scrollVal) : 0;
      var diff = cat_list_height - (-1 * scroll_top_value + left_menu_height);
      var full_possible_scroll = -1 * (cat_list_height - left_menu_height);
      if (item_bottom_position > middle_page_height && diff > 0) {
        scroll_top_value -= item_bottom_position - middle_page_height;
        if (scroll_top_value < full_possible_scroll) {
          scroll_top_value = full_possible_scroll - 15;// 15 - is top margin of widget.leftMenu.$node
        }
      }
      if (item_bottom_position < middle_page_height && scroll_top_value) {
        scroll_top_value += middle_page_height - item_bottom_position;
        if (scroll_top_value > 0) {
          scroll_top_value = 0;
        }
      }
    }
  }
  widget.scrollVal = scroll_top_value;
  var value = widget.scrollVal+'px';
  widget.leftMenu.catList.$node.style.webkitTransform = 'translateY(' + value + ')';
  widget.leftMenu.catList.$node.style.MozTransform = 'translateY(' + value + ')';
  widget.leftMenu.catList.$node.style.msTransform = 'translateY(' + value + ')';
  widget.leftMenu.catList.$node.style.OTransform = 'translateY(' + value + ')';
  widget.leftMenu.catList.$node.style.transform = 'translateY(' + value + ')';

  /*
  animate(widget.leftMenu.catList.$node, mainConfigMgg.animation.duration.speed2, {
    top: scroll_top_value
  });*/
};

widget.container = new Panel({
  $node: 'wlmContainer',
  focusable: true,
  visible: false,
  keys: {
    RIGHT: function () {
      if (widget.container.componentToFocus) {
        widget.container.componentToFocus.focus();
      }
    }
  },
  events: {
    click: function () {
      widget.showMenu();
    },
    focus: function () {

    },
    mouseover: function () {
      if (!this.visible) {
        this.emit('hover');
        if (router.current.activeComponent) {
          router.current.activeComponent.removeClass('focus');
          router.current.activeComponent.emit('blur');
        }
        this.addClass('hover');
        widget.hoverMenu = true;
      }
    },
    mouseout: function () {
      this.removeClass('hover');
      widget.hoverMenu = false;
      this.emit('unhover');
      if (router.current.activeComponent) {
        router.current.activeComponent.addClass('focus');
        router.current.activeComponent.emit('focus');
      }
    }
  }
});

widget.icons = new Panel({
  $node: 'wlmIcons',
  focusable: false,
  visible: true,
  events: {
    click: function () {
      widget.showMenu();
    }
  }
});

widget.icons.$node.appendChild(
  widget.icon = dom.tag('div', {
    className: 'icon'
  })
);

widget.leftMenuShade = new Widget({
  $node: 'wlmShade',
  focusable: false,
  visible: false,
  events: {
    click: function () {
      widget.hideMenu();
    }
  }
});

widget.leftMenu = new Widget({
  focusable: true,
  $node: 'wlmCatList',
  visible: true,
  events: {
    keydown: function () {
    }
  }
});

/**
 * Use for opening subMenu when navigate diferent pages
 */
widget.menuItems = [];

/// NEED TOTAL REFACTOR
widget.leftMenu.catList = new List({
  $node: 'wlmCategories',
  focusIndex: 0,
  cycle: false,
  visible: true,
  keys: {},
  events: {
    keydown: function (event) {
      switch (event.keyCode) {
        case keys.RETURN:
        case keys.RIGHT:
          if (widget.componentToFocus) {
            widget.hideMenu();
            event.event.stop = true;
          }
          break;
        case keys.UP:
          this.move(event.keyCode);
          if (this.$focusItem.data.children && this.$focusItem.data.children.length && this.$focusItem.subMenu.visible) {
            this.$focusItem.subMenu.focus();
            this.$focusItem.subMenu.focusIndex(this.$focusItem.subMenu.size);
            this.$focusItem.subMenu.emit('focus:item', {$curr: this.$focusItem.subMenu.$focusItem});
          }
          break;
        case keys.DOWN:
          if (this.$focusItem.data.children && this.$focusItem.data.children.length && this.$focusItem.subMenu.visible) {
            this.$focusItem.subMenu.focus();
            this.$focusItem.subMenu.focusIndex(0);
            this.$focusItem.subMenu.emit('focus:item', {$curr: this.$focusItem.subMenu.$focusItem});
          } else {
            this.move(event.keyCode);
          }

          break;
        case keys.ENTER:
          if (this.events['click:item'] !== undefined) {
            this.emit('click:item', {
              $item: this.$focusItem,
              event: event
            });
          }
          break;
      }
    },
    'mousewheel': function (event) {
      this.emit('keydown', {
        'keyCode': event.deltaY < 0 ? keys.UP : keys.DOWN
      });
    },
    'mouseover': function (data) {
      this.focus();
      this.focusItem(data.$item, {no_emit: true});
      showHideArrows();
    },
    'focus': function (data) {
      widget.leftMenu.$lastFocus = this;
    },
    'focus:item': function (data) {
      widget.scrollTo(data.$curr.menuWraper);
    },
    'click:item': function (data) {
      widget.componentToFocus = null;
      if (widget.activeElement) {
        widget.activeElement.deActivate();
      }
      widget.addSelectedClass(data.$item.data.id);
      menuNavigateService.navigateMenuItem(data.$item.data);
    }
  },
  render: function ($item, data) {
    var unique_id = data.path || data.meta[0].value; //@TODO need total refactor of select active item in left menu.

    if (unique_id) {
      widget.menuItems[unique_id] = $item;
    }

    if (data.id) {
      widget.menuCatalog[data.id] = $item;
    }


    if (data.type == 'profile') {
      widget.profile = $item;
    }

    $item.menuWraper = dom.tag('div', {
        className: 'menuWraper'
      },
      $item.menuItem = dom.tag('div', {
        className: 'menuItem'
      })
    );


    if (data['class'] && data['class'].length) {
      $item.classList.add(data['class']);
    }

    if (data.subClass) {
      $item.menuWraper.classList.add(data.subClass);
    }

    $item.menuItem.textContent = data.title;
    $item.appendChild($item.menuWraper);

    if (data.children && data.children.length) {
      $item.activate = function () {
        if (widget.activeElement) {
          widget.activeElement.deActivate();
        }
        widget.activeElement = $item;
        $item.classList.add('active');
        $item.subMenu.active = true;
        $item.subMenu.show();
        $item.subMenu.focusIndex(0);
        //var rect = $item.subMenu.$focusItem.getBoundingClientRect().bottom;
        //widget.move(rect);
      }

      $item.deActivate = function () {
        widget.leftMenu.catList.$node.style.top = '0px';
        widget.activeElement.subMenu.hide();
        $item.subMenu.active = false;
        widget.activeElement = null;
        $item.classList.remove('active');
      }

      var $subMenuDiv = dom.tag('div', {
        className: 'subMenu'
      });

      $item.appendChild($subMenuDiv);

      $item.subMenu = new List({
        $node: $subMenuDiv,
        data: data.children,
        visible: false,
        focusIndex: 0,
        cycle: false,
        keys: {},
        events: {
          keydown: function (event) {
            switch (event.keyCode) {
              case keys.RETURN:
              case keys.RIGHT:
                if (widget.componentToFocus) {
                  widget.hideMenu();
                  event.event.stop = true;
                }
                break;
              case keys.UP:
                $item.subMenu.move(keys.UP);
                break;
              case keys.DOWN:
                $item.subMenu.move(keys.DOWN);
                break;
              case keys.ENTER:
                $item.subMenu.emit('click:item', {
                  $item: $item.subMenu.$focusItem,
                  event: event
                });
                break;
            }
          },
          'click:item': function (data) {
            widget.componentToFocus = null;
            widget.addSelectedClass(data.$item.data.id);
            menuNavigateService.navigateMenuItem(data.$item.data);
          },
          'mouseover': function (data) {
            data.event.stopPropagation();
            this.focus();
            this.focusItem(data.$item, {no_emit: true});
            showHideArrows();
          },
          'mousewheel': function (event) {
            this.emit('keydown', {
              'keyCode': event.deltaY < 0 ? keys.UP : keys.DOWN
            });
          },
          'focus': function () {
            widget.leftMenu.$lastFocus = this;
          },
          'focus:item': function (data) {
            widget.scrollTo(data.$curr);
          },
          overflow: function (direction) {
            if (direction.direction === keys.UP) {
              widget.leftMenu.catList.focus();
              widget.leftMenu.catList.emit('focus:item', {$curr: widget.leftMenu.catList.$focusItem, set_top: true});
            }
            if (direction.direction === keys.DOWN) {
              if (widget.leftMenu.catList.$focusItem.nextSibling) {
                widget.leftMenu.catList.focus();
                widget.leftMenu.catList.move(keys.DOWN);
                //widget.leftMenu.catList.focusItem(widget.leftMenu.catList.$focusItem.nextSibling);
              }
            }
          }
        },

        render: function ($item, data) {
          if (data.id) {
            widget.menuCatalog[data.id] = $item;
          }
          $item.textContent = data.title;
        }
      });
    }
  }
});

widget.showShade = function () {
  widget.leftMenuShade.show();
  return this;
};

widget.hideShade = function () {
  widget.leftMenuShade.hide();
  return this;
};

widget.showContainer = function () {
  animate(widget.container.$node, mainConfigMgg.animation.duration.speed1, {
    left: '-370'
  });
};

widget.hideContainer = function () {
  animate(widget.container.$node, mainConfigMgg.animation.duration.speed1, {
    left: '-440'
  });
};

widget.showMenu = function (data) {
  widget.componentToFocus = null;

  if (data) {
    if (data.componentToFocus) {
      widget.componentToFocus = data.componentToFocus;
    }
  } else if (router.current.activeComponent) {
    widget.componentToFocus = router.current.activeComponent;
  }

  widget.container.show();
  widget.showShade();

  widget.icons.$node.style.display = 'none';

  animate(widget.container.$node, mainConfigMgg.animation.duration.speed2, {
    left: '0'
  });

  widget.leftMenu.$lastFocus.focus();

  if (this.leftMenu.catList.$focusItem &&
    (!this.leftMenu.catList.$focusItem.subMenu || !this.leftMenu.catList.$focusItem.subMenu.active)) {
    this.leftMenu.catList.focus();
  }

  arrowsWidget.addClass('js-menu');
  arrowsWidget.updateConfig();
  showHideArrows();
  arrowsWidget.forceShow = true;
  arrowsWidget.widgetArrowsUpdate = showHideArrows;
  arrowsWidget.clickDownCallback = clickDownCallback;
  arrowsWidget.clickUpCallback = clickUpCallback;
};

widget.hideMenu = function (no_animate) {
  arrowsWidget.removeClass('js-menu');
  arrowsWidget.updateConfig(router.current.arrows);
  arrowsWidget.forceShow = false;
  arrowsWidget.widgetArrowsUpdate = null;
  arrowsWidget.clickDownCallback = null;
  arrowsWidget.clickUpCallback = null;
  if (widget.componentToFocus) {
    widget.componentToFocus.focus();
  }

  widget.container.hide();
  widget.hideShade();

  var animate_speed = no_animate ? 0 : mainConfigMgg.animation.duration.speed2;

  widget.icons.$node.style.display = 'block';

  hideMenuAnimation = animate(widget.container.$node, animate_speed, {
    left: -370
  });
};

widget.openSubMenu = function (id) {
  if (widget.activeElement) {
    widget.activeElement.deActivate();
  }
  if (this.menuItems && this.menuItems[id]) {
    if (this.menuItems[id].subMenu) {
      this.menuItems[id].activate();
    }
    this.addSelectedClass(this.menuItems[id].data.id);
    this.leftMenu.catList.focusItem(this.menuItems[id], {force_focus: true});
    widget.leftMenu.$lastFocus = this.leftMenu.catList;
  }
};

widget.isVisible = function () {
  return widget.container.visible;
};

widget.addSelectedClass = function (id) {

  widget.removeSelectedClass();
  if (widget.menuCatalog[id]) {
    widget.menuCatalog[id].classList.add('selected');
    widget.selectedItem = widget.menuCatalog[id];
  }
};

widget.removeSelectedClass = function () {
  if (widget.selectedItem) {
    widget.selectedItem.classList.remove('selected');
  }
};

//@TODO hardcoded
//need refactor
function showHideArrows() {
  arrowsWidget.down.show();
  arrowsWidget.up.show();
  var top = parseInt(widget.leftMenu.catList.$node.style.top) ? parseInt(widget.leftMenu.catList.$node.style.top) : 0;
  var diff = widget.leftMenu.catList.$node.offsetHeight - (widget.leftMenu.$node.offsetHeight - 15);

  if (diff < 0 || top <= -1 * (diff)) {
    arrowsWidget.down.hide();
  } else {
    arrowsWidget.down.show();
  }

  if (diff < 0 || !top) {
    arrowsWidget.up.hide();
  } else {
    arrowsWidget.up.show();
  }
}

function clickDownCallback() {
  var diff = -1 * (widget.leftMenu.catList.$node.offsetHeight - widget.leftMenu.$node.offsetHeight + 30);
  animate(widget.leftMenu.catList.$node, mainConfigMgg.animation.duration.speed2, {
    top: diff
  });
  widget.leftMenu.catList.focusIndex(widget.leftMenu.catList.size - 1);
}

function clickUpCallback() {
  animate(widget.leftMenu.catList.$node, mainConfigMgg.animation.duration.speed2, {
    top: 0
  });
  widget.leftMenu.catList.focusIndex(0);
}

widget.leftMenu.$lastFocus = widget.leftMenu.catList;
// public
module.exports = widget;

},{"core/animate":14,"core/api":15,"core/app":16,"core/components/button":19,"core/components/list":23,"core/components/panel":26,"core/components/widget":30,"core/dom":31,"core/lib/helpFunctions":34,"core/router":45,"core/tools/menuNavigateService":49,"core/tools/subscriptionService":54,"vendor/aura/keys":133,"widgets/background":141,"widgets/loader":149,"widgets/mouse-arrows":152}],151:[function(require,module,exports){
/**
 *
 */

'use strict';

var app = require('core/app'),
  keys = require('vendor/aura/keys'),
  Panel = require('core/components/panel'),
  List = require('core/components/list'),
  dom = require('core/dom'),
  animate = require('core/animate'),
  rightMenuItemRender = require('ui/ui_generator').rightMenuItem
  ;

function RightMenu(config) {
  var self = this;
  // sanitize
  config = config || {};
  var default_events = {
    'mouseover': function () {
      self.activate();
    },
    'mouseout': function () {
      self.deActivate();
    }
  };

  // set default className if classList property empty or undefined
  config.className = 'right-menu ' + (config.className || '');
  config.events = config.events || default_events;
  config.visible = config.visible || false;

  // parent constructor call
  Panel.call(this, config);

  this.active = false;

  this.list = new List({
    $node: dom.tag('div', {className: 'right-menu__categories'}),
    cycle: false,
    focusIndex: 0,
    keys: {
      LEFT: function () {
        this.emit('key:left');
      },
      RETURN: function (e) {
        e.event.stop = true;
        this.emit('key:left');
      },
      BLUE: function (e) {
        this.emit('key:left');
      }
    },
    events: {
      'mouseover': function (data) {
        self.activate();
        this.focus();
        this.focusItem(data.$item);
      }
    },
    render: rightMenuItemRender
  });

  this.add(this.list);
}

// inheritance
RightMenu.prototype = Object.create(Panel.prototype);
RightMenu.prototype.constructor = RightMenu;

RightMenu.prototype.activate = function () {
  this.active = true;

  this.list.focus();
  if (!this.list.$focusItem) {
    this.list.focusIndex(0);
  }

  this.list.addClass('active');
  animate(this.$node, mainConfigMgg.animation.duration.speed1, {
    right: '-30'
  });
};

RightMenu.prototype.deActivate = function () {
  this.active = false;
  this.list.removeClass('active');
  animate(this.$node, mainConfigMgg.animation.duration.speed1, {
    right: '-230'
  });
  this.emit('deActivate');
};

RightMenu.prototype.init = function (data, item_index) {
  item_index = item_index || 0;
  this.list.clear();

  this.list.init({
    data: data,
    focusIndex: item_index
  });
};

module.exports = RightMenu;

},{"core/animate":14,"core/app":16,"core/components/list":23,"core/components/panel":26,"core/dom":31,"ui/ui_generator":130,"vendor/aura/keys":133}],152:[function(require,module,exports){
'use strict';

var Widget = require('core/components/widget'),
  dom = require('core/dom'),
  keys = require('vendor/aura/keys'),
  router = require('core/router'),
  Panel = require('core/components/panel'),
  arrowsWidget, arrowsTimeout, arrowUp, arrowDown, arrowLeft, arrowRight;

arrowsWidget = new Widget({
  $node: dom.tag('div', {
    id: 'widgetArrows'
  }),
  visible: false,
  events: {
    mousover: function() {},
    click: function() {}
  }
});

arrowsWidget.activeArrow = null;
arrowsWidget.activated = false;
arrowsWidget.disabled = false; //@TODO check maybe don't need
arrowsWidget.forceShow = false;
arrowsWidget.widgetArrowsUpdate = null;
arrowsWidget.clickUpCallback = null;
arrowsWidget.clickDownCallback = null;
arrowsWidget.clickRightCallback = null;
arrowsWidget.clickDownCallback = null;
arrowsWidget.focusCallback = null;
arrowsWidget.mouse_used = false;


arrowsWidget.showArrows = function() {
  if(router.current && (router.current.arrows || arrowsWidget.forceShow)) {
    if(!this.activated) {
      if(arrowsWidget.widgetArrowsUpdate) {
        arrowsWidget.widgetArrowsUpdate();
      }
      else if(router.current.arrowsUpdate) {
        router.current.arrowsUpdate();
      }
    }
    arrowsWidget.activated = true;
    arrowsWidget.show();
    clearTimeout(arrowsTimeout);
    arrowsTimeout = setTimeout(function(){
      arrowsWidget.hideArrows();
    }, 5000);
  } else {
    arrowsWidget.hideArrows();
  }
};

arrowsWidget.hideArrows = function() {
  clearTimeout(arrowsTimeout);
  arrowsWidget.activated = false;
  arrowsWidget.hide();
};

arrowsWidget.up = new Panel({
  $node: dom.tag('div', {
      className: 'w-container w-container-arrow_up'
    },
    arrowUp = dom.tag('div', {
      className: 'w-arrow w-arrow_up'
    })
  ),
  focusable: true,
  events: {
    mouseover: function() {
      if(arrowsWidget.focusCallback) {
        arrowsWidget.focusCallback();
      }
      router.current.activeComponent.removeClass('focus');
      this.addClass('hover');
      arrowsWidget.activeArrow = this;
      clearTimeout(arrowsTimeout);
    },
    mouseout: function(data) {
      router.current.activeComponent.addClass('focus');
      this.removeClass('hover');
      arrowsWidget.activeArrow = null;
      if(!data || !data.no_update) {
        arrowsWidget.showArrows();
      }
    },
    click: function() {
      if (router.current && router.current.activeComponent) {
        arrowsWidget.showArrows();
        if(arrowsWidget.clickUpCallback) {
          arrowsWidget.clickUpCallback();
        } else {
          router.current.activeComponent.emit('keydown', {
            keyCode: keys.UP,
            event: {}
          });
        }

        router.current.activeComponent.removeClass('focus');

        if(arrowsWidget.widgetArrowsUpdate) {
          arrowsWidget.widgetArrowsUpdate();
        } else if(router.current.arrowsUpdate) {
          router.current.arrowsUpdate();
        }
      }
    }
  }
});
arrowsWidget.up.arrow = arrowUp;

arrowsWidget.down = new Panel({
  $node: dom.tag('div', {
      className: 'w-container w-container-arrow_down'
    },
    arrowDown = dom.tag('div', {
      className: 'w-arrow w-arrow_down'
    })
  ),
  focusable: true,
  events: {
    mouseover: function() {
      if(arrowsWidget.focusCallback) {
        arrowsWidget.focusCallback();
      }

      router.current.activeComponent.removeClass('focus');
      this.addClass('hover');
      arrowsWidget.activeArrow = this;
      clearTimeout(arrowsTimeout);
    },
    mouseout: function(data) {
      router.current.activeComponent.addClass('focus');
      this.removeClass('hover');
      arrowsWidget.activeArrow = null;
      if(!data || !data.no_update) {
        arrowsWidget.showArrows();
      }
    },
    click: function() {
      arrowsWidget.showArrows();
      if (router.current && router.current.activeComponent) {
        if(arrowsWidget.clickDownCallback) {
          arrowsWidget.clickDownCallback();
        } else {
          router.current.activeComponent.emit('keydown', {
            keyCode: keys.DOWN,
            event: {}
          });
        }

        router.current.activeComponent.removeClass('focus');

        if(arrowsWidget.widgetArrowsUpdate) {
          arrowsWidget.widgetArrowsUpdate();
        } else if(router.current.arrowsUpdate) {
          router.current.arrowsUpdate();
        }
      }
    }
  }
});
arrowsWidget.down.arrow = arrowDown;

arrowsWidget.left = new Panel({
  $node: dom.tag('div', {
      className: 'w-container w-container-arrow_left v-middle'
    },
    arrowLeft = dom.tag('div', {
      className: 'w-arrow w-arrow_left'
    })
  ),
  focusable: true,
  events: {
    mouseover: function() {
      if(arrowsWidget.focusCallback) {
        arrowsWidget.focusCallback();
      }

      router.current.activeComponent.removeClass('focus');
      this.addClass('hover');
      arrowsWidget.activeArrow = this;
      clearTimeout(arrowsTimeout);
    },
    mouseout: function(data) {
      router.current.activeComponent.addClass('focus');
      this.removeClass('hover');
      arrowsWidget.activeArrow = null;
      if(!data || !data.no_update) {
        arrowsWidget.showArrows();
      }
    },
    click: function() {
      arrowsWidget.showArrows();
      if (router.current && router.current.activeComponent) {
        if(arrowsWidget.clickLeftCallback) {

        } else {
          if (router.current.id == 'pagePlayer') {
            router.current.activeComponent.emit('keydown', {
              keyCode: keys.LEFT,
              event: {}
            });
          } else {
            router.current.activeComponent.removeClass('focus');
            router.current.activeComponent.emit('keydown', {
              keyCode: keys.PAGE_UP,
              event: {}
            });
          }
        }

        router.current.activeComponent.removeClass('focus');

        if(arrowsWidget.widgetArrowsUpdate) {
          arrowsWidget.widgetArrowsUpdate();
        } else if(router.current.arrowsUpdate) {
          router.current.arrowsUpdate();
        }
      }
    }
  }
});
arrowsWidget.left.arrow = arrowLeft;

arrowsWidget.right = new Panel({
  $node: dom.tag('div', {
      className: 'w-container w-container-arrow_right v-middle'
    },
    arrowRight = dom.tag('div', {
      className: 'w-arrow w-arrow_right'
    })
  ),
  focusable: true,
  events: {
    mouseover: function() {
      if(arrowsWidget.focusCallback) {
        arrowsWidget.focusCallback();
      }

      router.current.activeComponent.removeClass('focus');
      this.addClass('hover');
      arrowsWidget.activeArrow = this;
      clearTimeout(arrowsTimeout);
    },
    mouseout: function(data) {
      router.current.activeComponent.addClass('focus');
      this.removeClass('hover');
      arrowsWidget.activeArrow = null;
      if(!data || !data.no_update) {
        arrowsWidget.showArrows();
      }
    },
    click: function() {
      arrowsWidget.showArrows();
      if (router.current && router.current.activeComponent) {
        if(arrowsWidget.clickRightCallback) {

        } else {
          if (router.current.id == 'pagePlayer') {
            router.current.activeComponent.emit('keydown', {
              keyCode: keys.RIGHT,
              event: {}
            });
          } else {
            router.current.activeComponent.removeClass('focus');
            router.current.activeComponent.emit('keydown', {
              keyCode: keys.PAGE_DOWN,
              event: {}
            });
          }
        }

        router.current.activeComponent.removeClass('focus');

        if(arrowsWidget.widgetArrowsUpdate) {
          arrowsWidget.widgetArrowsUpdate();
        } else if(router.current.arrowsUpdate) {
          router.current.arrowsUpdate();
        }
      }
    }
  }
});
arrowsWidget.right.arrow = arrowRight;

arrowsWidget.add(arrowsWidget.up, arrowsWidget.down, arrowsWidget.left, arrowsWidget.right);
document.getElementsByTagName('body')[0].appendChild(arrowsWidget.$node);

//Methods
arrowsWidget.updateConfig = function(arrows) {
  this.up.hide();
  this.down.hide();
  this.right.hide();
  this.left.hide();
  this.up.$node.removeAttribute("style");
  this.down.$node.removeAttribute("style");
  this.left.$node.removeAttribute("style");
  this.right.$node.removeAttribute("style");

  if(arrows) {
    for(var key in arrows) {
      if(arrows[key].config) {
        for(var conf in arrows[key].config) {
          this[key].$node.style[conf] = arrows[key].config[conf] + 'px';
        }
      }
    }
  }
}
arrowsWidget.setArrowProperty = function(arrow, params) {
  if (arrowsWidget[arrow]) {
    for (var key in params) {
      arrowsWidget[arrow].$node.style[key] = params[key] + 'px';
    }
  }
}

// public
module.exports = arrowsWidget;

},{"core/components/panel":26,"core/components/widget":30,"core/dom":31,"core/router":45,"vendor/aura/keys":133}],153:[function(require,module,exports){
'use strict';

var id = 'widgetErrorBlock',
  Widget = require('core/components/widget'),
  dom = require('core/dom'),
  LeftMenu = require('widgets/menu-left'),
  BackLabel = require('widgets/back-lable'),
  Header = require('ui/header'),
  Loader = require('widgets/loader'),
  List = require('core/components/list'),
  Label = require('core/components/label'),
  keys = require('vendor/aura/keys'),
  router = require('core/router'),
  ErrorBlock,
  backLableCallback;

ErrorBlock = new Widget({
  $node: document.getElementById(id),
  //  className: 'language-switcher',
  visible: false,
  events: {
    'show': function () {
    },
    'keydown': function (event) {
      console.info('event', event);
    }
  }
});

ErrorBlock.header = new Header('');
ErrorBlock.header.shadeOn();
ErrorBlock.backLable = new BackLabel();
ErrorBlock.add(ErrorBlock.header);
ErrorBlock.add(ErrorBlock.backLable);

ErrorBlock.resultButtonsList = new List({
  type: List.prototype.TYPE_VERTICAL,
  // className: 'result-buttons-list',
  $node: 'error-block-results-buttons-list',
  cycleX: false,
  events: {
    'mouseover': function (data) {
      this.focus();
      this.focusItem(data.$item, {no_emit: true});
    },
    'click:item': function (data) {
      ErrorBlock.hide();
      if (data.$item && data.$item.data && data.$item.data.callback) {
        data.$item.data.callback(data.$item.data);
      } else {
        router.back();
      }
    },
    'overflow': function (event) {
      if (event.direction === keys.UP && ErrorBlock.backLable.visible)
        ErrorBlock.backLable.focus();
    }
  },
  keys: {
    LEFT: function () {
      if (ErrorBlock.backLable.visible)
        ErrorBlock.backLable.focus();
    },
    RED: function () {
      if (ErrorBlock.backLable.visible)
        ErrorBlock.backLable.emit('click');
    },
    RETURN: function (e) {
      if (ErrorBlock.backLable.visible)
        ErrorBlock.backLable.emit('click');
      e.event.stop = true;
    }
  },
  render: function ($item, data) {
    $item.innerText = data.text;
    $item.className = 'notification__btn btn btn_blue';
  }
});

ErrorBlock.resultImage = document.getElementById('error-block-results-img');
ErrorBlock.wrapper = document.getElementById('error-block-wrap');


ErrorBlock.resultText = new Label({
  $node: 'error-block-results-text'
});

ErrorBlock.backLable.addListener('click', function () {
  ErrorBlock.hide();
  backLableCallback && backLableCallback();
});

ErrorBlock.addListener('show', function (data) {
  try {

    router.showApp();
    Loader.hide();

    data = data || {};
    ErrorBlock.header.setTitle(data.title || '');
    ErrorBlock.header.setSubTitle(data.subTitle);

    ErrorBlock.resultText.text('');
    ErrorBlock.resultImage.classList.remove('icon_success');
    ErrorBlock.resultImage.classList.remove('icon_error');
    ErrorBlock.resultImage.classList.remove('icon_update');
    ErrorBlock.wrapper.classList.remove('update');

    ErrorBlock.componentToFocus = data.componentToFocus;
    backLableCallback = null;

    if (data.hasOwnProperty('backLable') && data.backLable === false) {
      ErrorBlock.backLable.hide();
    } else {
      ErrorBlock.backLable.show();
      if (typeof data.backLable === 'function')
        backLableCallback = data.backLable;
    }

    if (data.type == 'update') {
      ErrorBlock.resultImage.classList.add('icon_update');
      ErrorBlock.wrapper.classList.add('update');

    } else if(data.type == 'success'){
      ErrorBlock.resultImage.classList.add('icon_success')
    }else{
      ErrorBlock.resultImage.classList.add('icon_error')
    }

    ErrorBlock.resultButtonsList.hide();
    ErrorBlock.resultText.text(data.text);

    var componentToFocus;
    if (data.buttons) {
      componentToFocus = ErrorBlock.resultButtonsList;
      ErrorBlock.resultButtonsList.init({
        focusIndex: 0,
        size: data.buttons.length,
        data: data.buttons
      });
      ErrorBlock.resultButtonsList.show();
      ErrorBlock.resultButtonsList.focus();
    } else {
      ErrorBlock.backLable.focus();
    }
    ErrorBlock.backLable.setComponentToFocus(componentToFocus);
    LeftMenu.hide();
  } catch (e) {
    console.error(e);
  }
});

ErrorBlock.addListener('hide', function () {
  ErrorBlock.resultButtonsList.clear();
  LeftMenu.show();
  ErrorBlock.componentToFocus && ErrorBlock.componentToFocus.focus();
});

module.exports = ErrorBlock;

},{"core/components/label":22,"core/components/list":23,"core/components/widget":30,"core/dom":31,"core/router":45,"ui/header":120,"vendor/aura/keys":133,"widgets/back-lable":140,"widgets/loader":149,"widgets/menu-left":150}],154:[function(require,module,exports){
'use strict';

var Widget = require('core/components/widget'),
    dom = require('core/dom'),
    app = require('core/app'),
    Button = require('core/components/button'),
    helpFunctions = require('core/lib/helpFunctions'),
    Panel = require('core/components/panel'),
    PopUpExit;

PopUpExit = new Widget({
    $node: dom.tag('div', {id: 'widgetPopupExit'}),
    visible: false,
    focusable: true,
    append_to_body: true,
    events: {
        'show': function () {
            PopUpExit.$btnCancel.focus()
        },
        'focus': function(){
        }
    }
});

PopUpExit.$container = new Panel({
    $node: dom.tag('div', {className: 'popup-exit'}),
    visible: true,
    focusable: true
});

PopUpExit.$text = new Panel({
    $node: dom.tag('div', {className: 'popup-exit__txt'}),
    visible: true,
    focusable: true,
    text: 'dasdasd'
});

PopUpExit.$row = new Panel({
    $node: dom.tag('div', {className: 'popup-exit__row'}),
    visible: true,
    focusable: true
});

PopUpExit.$icon = new Panel({
    $node: dom.tag('div', {className: 'icon icon_exit'}),
    visible: true,
    focusable: true
});

PopUpExit.$user = new Panel({
    $node: dom.tag('div', {className: 'popup-exit-nickname'}),
    visible: false,
    focusable: false
});

PopUpExit.$btnExit = new Button({
    $node: dom.tag('div', {className: 'popup-exit__btn'}),
    visible: true,
    focusable: true,
    events: {
        'click': function (event) {
          if(PopUpExit.callback){
            PopUpExit.hide();
            PopUpExit.callback();
          } else {
            helpFunctions.deviceExit(PopUpExit);
          }
        },
        mouseover: function (event) {
          this.focus();
        }
    },
    keys: {
        RIGHT: function () {
            PopUpExit.$btnCancel.focus();
        },
        RETURN: function () {
          PopUpExit.$btnCancel.emit('click');
        }
    }
});

PopUpExit.$btnCancel = new Button({
    $node: dom.tag('div', {className: 'popup-exit__btn'}),
    visible: true,
    focusable: true,
    events: {
        'click': function () {
            PopUpExit.hide();
        },
        mouseover: function (event) {
          this.focus();
        }
    },
    keys: {
        LEFT: function () {
            PopUpExit.$btnExit.focus();
        },
        RETURN: function () {
          PopUpExit.$btnCancel.emit('click');
        }
    }
});


PopUpExit.add(PopUpExit.$container);
PopUpExit.$container.add(PopUpExit.$icon);
PopUpExit.$container.add(PopUpExit.$user);
PopUpExit.$container.add(PopUpExit.$text);
PopUpExit.$container.add(PopUpExit.$row);
PopUpExit.$row.add(PopUpExit.$btnExit);
PopUpExit.$row.add(PopUpExit.$btnCancel);


PopUpExit.addListener('show', function (data) {
  PopUpExit.$btnCancel.setValue(i18nMgg('cancel_button'));
  PopUpExit.callback = data.callback;
  if(data.type=='logout'){
    PopUpExit.$btnExit.setValue(i18nMgg('logout_button'));
    PopUpExit.$user.$node.innerText = data.user.nickname;
    PopUpExit.$icon.$node.className = 'icon icon_logout';
    PopUpExit.$icon.$node.style.background = data.user.avatars.user_pic_big?'url("'+data.user.avatars.user_pic_big+'")':null;
    PopUpExit.$user.show();
    PopUpExit.$text.$node.innerHTML = i18nMgg('logout_confirm_text');
  } else {
    PopUpExit.$btnExit.setValue(i18nMgg('exit_button'));
    PopUpExit.$icon.$node.className = 'icon icon_exit';
    PopUpExit.$icon.$node.style.background = null;
    PopUpExit.$user.$node.style.display = "none";
    PopUpExit.$text.$node.innerHTML = i18nMgg('exit_confirm_text');
  }
  PopUpExit.componentToFocus = data.componentToFocus;
});

PopUpExit.addListener('hide', function (data) {
     PopUpExit.componentToFocus.focus();
});

module.exports = PopUpExit;

},{"core/app":16,"core/components/button":19,"core/components/panel":26,"core/components/widget":30,"core/dom":31,"core/lib/helpFunctions":34}],155:[function(require,module,exports){
'use strict';

var app = require('core/app'),
    arrowsWidget = require('widgets/mouse-arrows'),
    dom = require('core/dom'),
    List = require('core/components/list'),
    keys = require('vendor/aura/keys'),
    helpFunctions = require('core/lib/helpFunctions'),
    Header = require('ui/header'),
    Widget = require('core/components/widget'),
    router = require('core/router'),
    PopUpList;


PopUpList = new Widget({
    $node: dom.tag('div', {id: 'widgetPopUpList'}),
    visible: false,
    append_to_body: true,
    back_button: {
      'clickCallBack': function() {
        PopUpList.hide();
      }
    }
});


PopUpList.header = new Header();
PopUpList.header.shadeOn();
PopUpList.type = null;

PopUpList.add(PopUpList.header);

PopUpList.list = new List({
    $node: dom.tag('div', {id: 'widgetPopUpListContainer'}),
    type: List.prototype.TYPE_VERTICAL,
    focusIndex: 0,
    visible: true,
    scrollList: {
      startIndex: 3,
      stopIndex: 4,
      speed: mainConfigMgg.animation.duration.speed2,
    },
    keys: {
      LEFT: function () {
        PopUpList.backButton.focusButton(this);
      },
      RETURN: function(e){
        PopUpList.hide();
        e.event.stop = true;
      }
    },
    events: {
        'mousewheel': function (event) {
          if (event.deltaY < 0) {
            this.emit('keydown', {
              'keyCode': keys.UP
            });
          }
          if (event.deltaY > 0) {
            this.emit('keydown', {
              'keyCode': keys.DOWN
            });
          }
          showHideArrows();
        },
        'mouseover': function (data) {
            this.focus();
            this.focusItem(data.$item, {no_emit: true});
            showHideArrows();
        },
        'focus': function (data) {
          if(this.$focusItem) {
            var last_el_before_scroll = this.size - this.scrollList.stopIndex;
            if((this.scrollList.startIndex + this.scrollList.stopIndex) < this.size && last_el_before_scroll > 0
              && this.$focusItem.index >= last_el_before_scroll) {
              var margin = parseInt(window.getComputedStyle(this.$focusItem).marginBottom) || 0;
              var value = -1*(last_el_before_scroll - this.scrollList.startIndex)  * (this.$focusItem.clientHeight + margin);
              this.$body.style.top = value + 'px';
            }
          }
        },
        'focus:item': function (data) {
        },
        'click:item': function (data) {
            PopUpList.emit('change', {data: data.$item.data, type: PopUpList.type});
            PopUpList.hide();
        }
    },
    render: function ($item, data) {
        $item.classList.add('popup__list');
        if (data.title){
            $item.textContent = data.title;
        }
        else if(data.name){
          $item.textContent = data.name;
        }
        else if(data.display_name){
          $item.textContent = data.display_name;
        }
        else if(data.lang_original){
            $item.textContent = data.lang_original;
        }
    }
});

PopUpList.add(PopUpList.list);

PopUpList.addListener('show', function (data) {
    arrowsWidget.forceShow = true;
    arrowsWidget.widgetArrowsUpdate = showHideArrows;

    var marker = data.marker || 'id';

    PopUpList.header.setTitle(data.header_title);

    PopUpList.type = data.type || null;
    var itemFocusIndex = 0;

    if(data.mark !== undefined) {
      for(var i = 0, len = data.content.length; i < len; i++) {
        data.content[i].mark = false;
        if(data.content[i][marker] == data.mark) {
          data.content[i].mark = true;
          itemFocusIndex = i;
        }
      }
    }

    PopUpList.list.clear();
    PopUpList.list.$node.style.top = '0px';

    PopUpList.list.init({
        data: data.content,
        focusIndex: itemFocusIndex
    });

    if(data.content.length > 7) {
      arrowsWidget.updateConfig();
      showHideArrows();
      arrowsWidget.addClass('js-high-layer');
      PopUpList.list.addClass('js-full-size')
    } else {
      PopUpList.list.removeClass('js-full-size')
    }

    PopUpList.list.focus();
});

PopUpList.addListener('hide', function () {
    arrowsWidget.removeClass('js-high-layer');
    arrowsWidget.forceShow = false;
    arrowsWidget.hideArrows();

    if(router.current && router.current.arrows) {
      arrowsWidget.updateConfig(router.current.arrows);
    }

    arrowsWidget.widgetArrowsUpdate = null;
});

function showHideArrows() {
  if(PopUpList.list.size <= 7) {
    return;
  }
  setTimeout(function(){
    var focusItem = PopUpList.list ? PopUpList.list.$focusItem : null;

    if(focusItem) {
      var top_offset = PopUpList.list.$node.style.top ? -1*parseInt(PopUpList.list.$node.style.top) : 0;
      var total_offset = (focusItem.offsetHeight+12) * (PopUpList.list.size - 8);

      if(top_offset >= total_offset) {
        arrowsWidget.down.hide();
      } else {
        arrowsWidget.down.show();
      }
      if(!top_offset) {
        arrowsWidget.up.hide();
      } else {
        arrowsWidget.up.show();
      }
    }
  }, 0);
}
module.exports = PopUpList;

},{"core/app":16,"core/components/list":23,"core/components/widget":30,"core/dom":31,"core/lib/helpFunctions":34,"core/router":45,"ui/header":120,"vendor/aura/keys":133,"widgets/mouse-arrows":152}],156:[function(require,module,exports){
'use strict';

var id = 'widgetPopUpParentalControlReset',
  Widget = require('core/components/widget'),
  dom = require('core/dom'),
  app = require('core/app'),
  Button = require('core/components/button'),
  Header = require('ui/header'),
  Label = require('core/components/label'),
  router = require('core/router'),
  PopUpParentalControlReset;

PopUpParentalControlReset = new Widget({
  $node: document.getElementById(id),
  visible: false,
  events: {},
  back_button: {
    'clickCallBack': function() {
      PopUpParentalControlReset.hide();
    }
  }
});


PopUpParentalControlReset.header = new Header('');
PopUpParentalControlReset.header.shadeOn();
PopUpParentalControlReset.add(PopUpParentalControlReset.header);


PopUpParentalControlReset.resultButton = new Button({
  $node: "reset-button",
  visible: true,
  focusable: true,
  events: {
    'click': function(data) {
      PopUpParentalControlReset.hide('no_emit');
      if (app.dataStorage.user.is_autouser) {
        router.navigate('pageLogin');
      } else {
        hidePopUpParentalControlReset()
      }
    },
    mousewheel: function(event) {
      if(event.deltaY > 0) {
        this.emit('keydown', {
          'keyCode': keys.DOWN
        });
      }
    }
  },
  keys: {
    UP: function() {
      PopUpParentalControlReset.backButton.focusButton(this);
    },
    LEFT: function() {
      PopUpParentalControlReset.backButton.focusButton(this);
    },
    RETURN: function() {
      PopUpParentalControlReset.backButton.emit('click');
    }
  }
});

PopUpParentalControlReset.resultImage = document.getElementById('reset-img');

PopUpParentalControlReset.resultText = new Label({
  $node: 'reset-text'
});

PopUpParentalControlReset.addListener('show', function(data) {

  PopUpParentalControlReset.header.setTitle(i18nMgg('parental_control'));

  if (app.dataStorage.user.is_autouser) {
    PopUpParentalControlReset.resultText.text(i18nMgg('pc_set_autouser'));
    PopUpParentalControlReset.resultButton.setValue(i18nMgg('pc_connect_tv'));
  } else {
    PopUpParentalControlReset.resultText.text(i18nMgg('pc_set_reguser'));
    PopUpParentalControlReset.resultButton.setValue(i18nMgg('next'));
  }

  PopUpParentalControlReset.resultButton.focus();
});

PopUpParentalControlReset.addListener('hide', function() {
  hidePopUpParentalControlReset();
});

function getPopUpPincode() {
  return require('widgets/popup/popup-pincode');
}

function hidePopUpParentalControlReset() {
  var popupPincode = getPopUpPincode();
  popupPincode.show({
    pinCode: app.dataStorage.pc_info.code,
    type: 'profile',
    text: i18nMgg('pc_profile_enter'),
    buttonText: i18nMgg('ok_confirm')
  });
}

module.exports = PopUpParentalControlReset;

},{"core/app":16,"core/components/button":19,"core/components/label":22,"core/components/widget":30,"core/dom":31,"core/router":45,"ui/header":120,"widgets/popup/popup-pincode":158}],157:[function(require,module,exports){
'use strict';

var id = 'widgetParentalControlSet',
  Widget = require('core/components/widget'),
  dom = require('core/dom'),
  app = require('core/app'),
  Button = require('core/components/button'),
  helpFunctions = require('core/lib/helpFunctions'),
  Header = require('ui/header'),
  router = require('core/router'),
  Label = require('core/components/label'),
  wParentalControlSet;

wParentalControlSet = new Widget({
  $node: document.getElementById(id),
  visible: false,
  back_button: {
    'clickCallBack': function () {
      wParentalControlSet.hide();
    }
  }
});


wParentalControlSet.header = new Header('');
wParentalControlSet.header.shadeOn();
wParentalControlSet.add(wParentalControlSet.header);


wParentalControlSet.yesButton = new Button({
  $node: "yes-button",
  visible: true,
  focusable: true,
  events: {
    'click': function (data) {
      wParentalControlSet.hide('no_emit');
      router.navigate('pageProfilePC');
    },
    mousewheel: function(event) {
      if(event.deltaY > 0) {
        this.emit('keydown', {
          'keyCode': keys.DOWN
        });
      }
    }
  },
  keys: {
    UP: function () {
      wParentalControlSet.backButton.focusButton(this);
    },
    LEFT: function () {
      wParentalControlSet.backButton.focusButton(this);
    },
    RIGHT: function () {
      wParentalControlSet.noButton.focus();
    },
    RETURN: function () {
      wParentalControlSet.backButton.emit('click');
    }
  }
});

wParentalControlSet.noButton = new Button({
  $node: "no-button",
  visible: true,
  focusable: true,
  events: {
    'click': function (data) {
      if (wParentalControlSet.isLG) {
        wParentalControlSet.hide();
      } else {
        wParentalControlSet.hide('no_emit');
        if (wParentalControlSet.isTrailer) {
          router.navigate('pagePlayer', [
            wParentalControlSet.trailerID, wParentalControlSet.playerObject
          ]);
        } else {
          router.navigate('pagePlayer', [
            wParentalControlSet.page.movieRespond.id
          ]);
        }

      }
    },
    mousewheel: function(event) {
      this.emit('keydown', {
        'keyCode': event.deltaY < 0 ? keys.UP : keys.DOWN
      });
    }
  },
  keys: {
    UP: function () {
      wParentalControlSet.backButton.focusButton(this);
    },
    LEFT: function () {
      wParentalControlSet.yesButton.focus();
    },
    RETURN: function () {
      wParentalControlSet.backButton.emit('click');
    }
  }
});

wParentalControlSet.resultImage = document.getElementById('results-img');

wParentalControlSet.resultText = new Label({
  $node: 'pc-text'
});

wParentalControlSet.addListener('show', function (data) {
  wParentalControlSet.page = data.page;

  wParentalControlSet.header.setTitle(data.title);
  wParentalControlSet.isTrailer = data.isTrailer;
  wParentalControlSet.playerObject = data.playerObject;
  wParentalControlSet.trailerID = data.trailerID;
  wParentalControlSet.isLG = (data.type == 'lg-user');

  if (wParentalControlSet.isLG) {
    wParentalControlSet.resultText.text(i18nMgg('pc_lg_set_restriction'));
    wParentalControlSet.yesButton.setValue(i18nMgg('pc_activate_button'));
    wParentalControlSet.noButton.setValue(i18nMgg('cancel_button'));
  } else {
    wParentalControlSet.resultText.text(i18nMgg('pc_set_ask'));
    wParentalControlSet.yesButton.setValue(i18nMgg('yes_text'));
    wParentalControlSet.noButton.setValue(i18nMgg('no_text'));
  }

  wParentalControlSet.yesButton.focus();
});

wParentalControlSet.addListener('hide', function () {
  wParentalControlSet.resultText.text('');
  wParentalControlSet.yesButton.setValue('');
  wParentalControlSet.noButton.setValue('');
  wParentalControlSet.page.$$lastFocus.focus();

});

module.exports = wParentalControlSet;

},{"core/app":16,"core/components/button":19,"core/components/label":22,"core/components/widget":30,"core/dom":31,"core/lib/helpFunctions":34,"core/router":45,"ui/header":120}],158:[function(require,module,exports){
'use strict';

var id = 'widgetPopUpPincode',
  Widget = require('core/components/widget'),
  dom = require('core/dom'),
  app = require('core/app'),
  keys = require('vendor/aura/keys'),
  Button = require('core/components/button'),
  helpFunctions = require('core/lib/helpFunctions'),
  Header = require('ui/header'),
  Label = require('core/components/label'),
  List = require('core/components/list'),
  KeyboardNum = require('widgets/keyboard-num'),
  PopUpParentalControlReset = require('widgets/popup/popup-parental-control-reset'),
  subsService = require('core/tools/subscriptionService'),
  PopUpPincode;

//@TODO has duplication with parental_pass page
PopUpPincode = new Widget({
  $node: document.getElementById(id),
  visible: false,
  back_button: {
    'clickCallBack': function() {
      PopUpPincode.hide();
    }
  }
});

var inputData = [
  {value: '', 'className': 'clear'},
  {value: '', 'className': 'clear'},
  {value: '', 'className': 'clear'},
  {value: '', 'className': 'clear'}
];


PopUpPincode.header = new Header();
PopUpPincode.add(PopUpPincode.header);


PopUpPincode.resultButton = new Button({
  $node: "pincode-button",
  visible: true,
  focusable: true,
  events: {
    'click': function (data) {

      var pinCode = '';
      var inputCode = PopUpPincode.pinCodeInput;
      for (var i = 0; i < inputCode.data.length; i++) {
        pinCode += inputCode.data[i].value;
      }

      if (pinCode.replace(/\s+/g, '').length < 4 || pinCode != PopUpPincode.code) {
        inputCode.$node.classList.add('error');
        PopUpPincode.errorText.show();
      } else {
        KeyboardNum.hide();
        clearNumKeyboardListeners();
        var lifeTime = Math.floor(new Date().getTime() / 1000);

        if (PopUpPincode.type == 'profile') {
          PopUpPincode.emit('correctPin');
        }

        if (PopUpPincode.type == 'video-pin') {
          mainConfigMgg.parentalControlTimer = lifeTime;
          PopUpPincode.emit('correctPinVideoAge');
        }

        if (PopUpPincode.type == 'payment-pin') {
          mainConfigMgg.parentalControlTimer = lifeTime;
          PopUpPincode.emit('correctPinPayment');
        }
        PopUpPincode.hide('no_emit');
      }
    },
    mousewheel: function(event) {
      this.emit('keydown', {
        'keyCode': event.deltaY < 0 ? keys.UP : keys.DOWN
      });
    }
  },
  keys: {
    UP: function () {
      PopUpPincode.pinCodeInput.focus();
    },
    DOWN: function () {
      if (PopUpPincode.remindButton.visible) {
        PopUpPincode.remindButton.focus();
      }
    },
    LEFT: function () {
      PopUpPincode.backButton.focusButton(this);
    },
    RETURN: function () {
      PopUpPincode.backButton.emit('click');
    }
  }
});

PopUpPincode.remindButton = new Button({
  $node: "pincode-remind-button",
  visible: true,
  focusable: true,
  events: {
    'click': function () {
      PopUpPincode.hide('no_emit');
      PopUpParentalControlReset.show();
      clearNumKeyboardListeners();
    },
    mousewheel: function(event) {
      this.emit('keydown', {
        'keyCode': event.deltaY < 0 ? keys.UP : keys.DOWN
      });
    }
  },
  keys: {
    UP: function () {
      PopUpPincode.resultButton.focus();
    },
    LEFT: function () {
      PopUpPincode.backButton.focusButton(this);
    },
    RETURN: function () {
      PopUpPincode.backButton.emit('click');
    }
  }
});

PopUpPincode.pinCodeInput = new List({
  $node: 'pinCodeInputPinPopUp',
  type: List.prototype.TYPE_HORIZONTAL,
  cycle: false,
  visible: true,
  focusIndex: 0,
  keys: {
    UP: function () {
      PopUpPincode.backButton.focusButton(this);
    },
    DOWN: function () {
      PopUpPincode.resultButton.focus();
    },
    ZERO: function () {
      handleNumberInput(this, 0)
    },
    ONE: function () {
      handleNumberInput(this, 1)
    },
    TWO: function () {
      handleNumberInput(this, 2)
    },
    THREE: function () {
      handleNumberInput(this, 3)
    },
    FOUR: function () {
      handleNumberInput(this, 4)
    },
    FIVE: function () {
      handleNumberInput(this, 5)
    },
    SIX: function () {
      handleNumberInput(this, 6)
    },
    SEVEN: function () {
      handleNumberInput(this, 7)
    },
    EIGHT: function () {
      handleNumberInput(this, 8)
    },
    NINE: function () {
      handleNumberInput(this, 9)
    },
    RETURN: function () {
      PopUpPincode.backButton.emit('click');
    }
  },
  events: {
    'focus': function (data) {
      this.$node.classList.remove('error');
      if(PopUpPincode.errorText.visible){
        PopUpPincode.errorText.hide();
      }
      this.focusIndex(0);
    },
    mouseover: function (data) {
      if (!KeyboardNum.visible) {
        this.focus();
        this.focusItem(data.$item, {no_emit: true});
      }
    },
    'mousewheel': function (event) {
      if(event.deltaY > 0) {
        this.emit('keydown', {
          'keyCode': keys.DOWN
        });
      }
    },
    'click:item': function (data) {
      this.$node.classList.add('active');
      KeyboardNum.show();
      var coordinates = this.$node.getBoundingClientRect();
      var top = coordinates.top + this.$node.offsetHeight / 2;
      KeyboardNum.setPosition({left: coordinates.right, top: top});
    },
    overflow: function (direction) {
      if (direction.direction === keys.RIGHT) {
        if (KeyboardNum.visible) {
          KeyboardNum.hide();
          this.$node.classList.remove('active');
        }
        PopUpPincode.resultButton.focus();
      }

      if (direction.direction === keys.LEFT) {
        PopUpPincode.backButton.focusButton(this);
      }
    }
  },
  render: function ($item, data) {
    if (data.className && data.className == 'clear') {
      $item.textContent = '';
      $item.classList.add(data.className);
    }
    if (data.value) {
      $item.textContent = data.value;
      $item.classList.remove('clear');
    }

    // PopUpPincode.pinCodeInput.appendChild($item);
  }
});


PopUpPincode.resultText = new Label({
  $node: 'pincode-text'
});

PopUpPincode.errorText = new Label({
  $node: 'pincode-error-text',
  visible: false
});


PopUpPincode.addListener('show', function (data) {

  PopUpPincode.header.setTitle(i18nMgg('parental_control'));
  PopUpPincode.errorText.text(i18nMgg('pc_pin_code_error'));

  if (data.title) {
    PopUpPincode.header.setTitle(data.title);
  } else {
    PopUpPincode.header.setTitle(i18nMgg('parental_control'));
  }

  if (data.subTitle) {
    PopUpPincode.header.setSubTitle(data.subTitle);
  } else {
    PopUpPincode.header.setSubTitle('');
  }

  clearPCInitData();

  PopUpPincode.pinCodeInput.$node.innerHTML = '';
  PopUpPincode.pinCodeInput.$body.innerHTML = '';

  PopUpPincode.pinCodeInput.init({
    size: inputData.length,
    data: inputData,
    focusIndex: 0
  });
  PopUpPincode.code = data.pinCode;

  PopUpPincode.resultText.text(data.text);
  PopUpPincode.resultButton.setValue(data.buttonText);

  PopUpPincode.type = data.type;

  setCorrectHeadIcon(data);

  PopUpPincode.pinCodeInput.focus();
  KeyboardNum.keyboard.addListener('type:char', typeCharCallback);
  KeyboardNum.keyboard.addListener('type:remove', removeCharCallback);
  KeyboardNum.keyboard.addListener('close', closeKeyboardCallback);
});


PopUpPincode.addListener('hide', function () {
  clearNumKeyboardListeners();
  PopUpPincode.errorText.hide();
  PopUpPincode.backButton.blur();
  KeyboardNum.hide();
});

var handleNumberInput = function (env, number) {
  var curr_focus_item = env.$focusItem;
  curr_focus_item.classList.remove('hidden');
  curr_focus_item.classList.remove('clear');
  setTimeout(function () {
    curr_focus_item.classList.add('hidden');
  }, 300);
  curr_focus_item.data.value = number;
  curr_focus_item.innerHTML = number;
  env.move(keys.RIGHT);
};


var clearPCInitData = function () {
  for (var n in inputData) {
    inputData[n].value = '';
    inputData[n].className = 'clear';
  }
};

function clearNumKeyboardListeners() {
  KeyboardNum.keyboard.removeListener('type:char', typeCharCallback);
  KeyboardNum.keyboard.removeListener('close', closeKeyboardCallback);
  KeyboardNum.keyboard.removeListener('type:remove', removeCharCallback);
}

function setCorrectHeadIcon(data) {

  var $headIcon = document.getElementById('pincode-img');
  $headIcon.innerHTML = '';
  if (data.type == 'profile') {
    PopUpPincode.remindButton.show();
    $headIcon.className = '';
    $headIcon.classList.add('notification__icon');
    $headIcon.innerHTML = '<div>18<span>+</span></div>';
    PopUpPincode.remindButton.setValue(i18nMgg('pc_forgot_pin_button'));
  } else {
    PopUpPincode.remindButton.hide();
  }

  if (data.type == 'video-pin') {
    $headIcon.className = '';
    $headIcon.classList.add('notification__icon');
    $headIcon.innerHTML = '<div>' + data.ageLimit + '<span>+</span>' + '</div>';
  }

  if (data.type == 'payment-pin') {
    $headIcon.className = '';
    if (data.subscription) {
      var subscription_image = subsService.getSubscriptionMetaImage(data.subscription);
      if (subscription_image) {
        $headIcon.classList.add('notification__img');
        $headIcon.innerHTML = '<img src ="' + subscription_image + '" />';
      } else {
        $headIcon.classList.add('notification__title');
        $headIcon.innerHTML = data.subscription.title;
      }
    } else {
      $headIcon.classList.add('notification__icon_payment');
    }

  }
}


function typeCharCallback(data) {
  handleNumberInput(PopUpPincode.pinCodeInput, data.text);
}

function removeCharCallback(data) {
  PopUpPincode.pinCodeInput.$focusItem.innerHTML = '';
  PopUpPincode.pinCodeInput.$focusItem.classList.add('clear');
  if (PopUpPincode.pinCodeInput.$focusItem.index) {
    PopUpPincode.pinCodeInput.move(keys.LEFT);
  }
}

function closeKeyboardCallback(data) {
  PopUpPincode.pinCodeInput.$node.classList.remove('active');
  KeyboardNum.hide();
  PopUpPincode.pinCodeInput.focus();
}

module.exports = PopUpPincode;

},{"core/app":16,"core/components/button":19,"core/components/label":22,"core/components/list":23,"core/components/widget":30,"core/dom":31,"core/lib/helpFunctions":34,"core/tools/subscriptionService":54,"ui/header":120,"vendor/aura/keys":133,"widgets/keyboard-num":146,"widgets/popup/popup-parental-control-reset":156}],159:[function(require,module,exports){
'use strict';

var id = 'widgetPopUpResults',
  Widget = require('core/components/widget'),
  dom = require('core/dom'),
  app = require('core/app'),
  Button = require('core/components/button'),
  helpFunctions = require('core/lib/helpFunctions'),
  Header = require('ui/header'),
  Label = require('core/components/label'),
  PopUpResults;

PopUpResults = new Widget({
  $node: document.getElementById(id),
  //  className: 'language-switcher',
  visible: false,
  events: {
    'show': function () {
    }
  },
  back_button: {
    'clickCallBack': function() {
      PopUpResults.hide();
    }
  }
});


PopUpResults.header = new Header('');
PopUpResults.header.shadeOn();
PopUpResults.add(PopUpResults.header);


PopUpResults.resultButton = new Button({
  $node: "results-button",
  visible: true,
  focusable: true,
  events: {
    'click': function (data) {
      PopUpResults.hide();
    }
  },
  keys: {
    UP: function () {
      PopUpResults.backButton.focusButton(this);
    },
    LEFT: function () {
      PopUpResults.backButton.focusButton(this);
    },
    RETURN: function () {
      PopUpResults.backButton.emit('click');
    }
  }
});

PopUpResults.resultImage = document.getElementById('results-img');

PopUpResults.resultText = new Label({
  $node: 'results-text'
});

PopUpResults.addListener('show', function (data) {


  PopUpResults.header.setTitle(data.title);
  PopUpResults.header.setSubTitle(data.subTitle);

  PopUpResults.resultText.text('');
  PopUpResults.resultButton.setValue('');
  PopUpResults.resultImage.classList.remove('icon_success');
  PopUpResults.resultImage.classList.remove('icon_error');


  if (data.type == 'success') {
    PopUpResults.resultImage.classList.add('icon_success')
  } else {
    PopUpResults.resultImage.classList.add('icon_error')
  }

  PopUpResults.resultText.text(data.text);
  PopUpResults.resultButton.setValue(data.buttonText);

  PopUpResults.backButton.blur();
  PopUpResults.resultButton.focus();

});

module.exports = PopUpResults;

},{"core/app":16,"core/components/button":19,"core/components/label":22,"core/components/widget":30,"core/dom":31,"core/lib/helpFunctions":34,"ui/header":120}],160:[function(require,module,exports){
'use strict';

var Widget = require('core/components/widget'),
  animate = require('core/animate'),
  dom = require('core/dom'),
  Label = require('core/components/label'),
  List = require('core/components/list'),
  app = require('core/app'),
  paymentModel = require('core/paymentModel'),
  api = require('core/api'),
  router = require('core/router'),
  keys = require('vendor/aura/keys'),
  helpFunctions = require('core/lib/helpFunctions'),
  Background = require('widgets/background/background'),
  LeftMenu = require('widgets/menu-left'),
  Loader = require('widgets/loader'),
  Header = require('ui/header'),
  SupportInfo = require('widgets/support-info'),
  subscriptionService = require('core/tools/subscriptionService'),
  wTariffsSubscription;


wTariffsSubscription = new Widget({
  $node: dom.tag('div', {id: 'widgetSubsTariffs'}),
  visible: false,
  append_to_body: true,
  back_button: {
    'clickCallBack': function() {
      wTariffsSubscription.hide();
    }
  }
});

wTariffsSubscription.$focusItem = null;

wTariffsSubscription.chooseTariffText = new Label({
  $node: dom.tag('div', {id: 'chooseTariffText'}),
  text: '',
  focusable: false
});

wTariffsSubscription.add(wTariffsSubscription.chooseTariffText);

wTariffsSubscription.header = new Header('');
wTariffsSubscription.header.shadeOn();
wTariffsSubscription.add(wTariffsSubscription.header);


wTariffsSubscription.tariffsList = new List({
  $node: dom.tag('div', {id: 'subsTariffsContainer'}),
  type: List.prototype.TYPE_HORIZONTAL,
  focusIndex: 0,
  cycle: false,
  visible: true,
  className: 'tariffSection',
  keys: {
    RETURN: function () {
      wTariffsSubscription.backButton.emit('click');
    },
    UP: function () {
      wTariffsSubscription.backButton.focusButton(this);
    }
  },
  events: {
    'focus': function (data) {

    },
    mouseover: function (data) {
      this.focus();
      this.focusItem(data.$item, {no_emit: true});
    },
    'overflow': function (data) {
      if (data.direction === keys.LEFT) {
        wTariffsSubscription.backButton.focusButton(this);
      }
    },
    'click:item': function (data) {
      paymentModel.set('tariffID', data.$item.data.tariff_id);
      paymentModel.set('tariffTitle', data.$item.data.title);
      paymentModel.set('price', data.$item.data.price);
      paymentModel.set('period', data.$item.data.period);
      paymentModel.set('isPromoCode', data.$item.data.is_promocode);
      paymentModel.defaultEvents.setSubtitleText();

      var renderData = {
        title: paymentModel.get('title'),
        tariffInfo: data.$item.data,
        subTitle: paymentModel.get('subTitle')
      };

      wTariffsSubscription.hide();

      router.navigate('pagePaymentChoice', [
        renderData
      ]);
    }
  },
  render: function ($item, data) {

    $item.classList.add('tariffItem');

    $item.qualityName = dom.tag('div', {
      className: 'quality-name'
    });
    $item.period = dom.tag('div', {
      className: 'period'
    });
    $item.price = dom.tag('div', {
        className: 'price-info'
      },
      $item.value = dom.tag('span', {
        className: 'value'
      }),
      $item.currency = dom.tag('span', {
        className: 'currency'
      })
    );
    /*$item.description = dom.tag('div', {className: 'description-info'},
      $item.qualityText = dom.tag('span', {}),
      $item.vodDescription = dom.tag('span', {}),
      $item.tariffPeriodText = dom.tag('span', {
        className: 'image-period'
      })
    );*/

    $item.promoDescription = dom.tag('div', {
      className: 'item__promo'
    });

    var periodInfo = subscriptionService.getPeriodInMonth(data.period);

    $item.qualityName.textContent = periodInfo.period; //data.quality.group;
    $item.period.textContent = periodInfo.name;

    $item.value.textContent = data.price;
    $item.currency.textContent = paymentModel.get('currency');

    if(data.is_try_and_buy){
      $item.promoDescription.innerHTML = i18nMgg('first_month_price') + getCorrectPrice(data) + ', ' +
        i18nMgg('next_month_price') + getCorrectPrice(data, true);
    }

    /*  $item.qualityText.innerHTML = descriptionData.qualityText;
     $item.vodDescription.innerHTML = descriptionData.vodDescription;
     $item.tariffPeriodText.innerHTML = descriptionData.tariffPeriodText;*/


    $item.appendChild($item.qualityName);
    $item.appendChild($item.period);
    $item.appendChild($item.price);
    $item.appendChild($item.promoDescription);

  }

});

wTariffsSubscription.add(wTariffsSubscription.chooseTariffText);
wTariffsSubscription.add(wTariffsSubscription.tariffsList);

var getCorrectPrice = function (tariff, isRegular) {
  if (isRegular) {
    return paymentModel.defaultEvents.getGeoPriceFromData(tariff.regular_price) + i18nMgg('short_per_month');
  }
  if (tariff.is_try_and_buy) {
    return paymentModel.defaultEvents.getGeoPriceFromData(tariff.price);
  } else {
    return paymentModel.defaultEvents.getGeoPriceFromData(tariff.price) + i18nMgg('short_per_month');
  }

};


wTariffsSubscription.add(wTariffsSubscription.tariffsList);


wTariffsSubscription.updateContent = function (paymentInfo) {
  wTariffsSubscription.tariffsList.$node.innerHTML = '';
  wTariffsSubscription.tariffsList.init({
    data: paymentInfo,
    size: paymentInfo.length,
    focusIndex: 0
  });
};

wTariffsSubscription.addListener('show', function (data) {
  //wTariffsSubscription.title = data.title;

  SupportInfo.show({type: 'payment'});

  wTariffsSubscription.page = data.page;
  wTariffsSubscription.componentToFocus = data.componentToFocus;
  var subscription = data.subscriptionInfo;

  wTariffsSubscription.header.setTitle(data.title);
  wTariffsSubscription.chooseTariffText.text(i18nMgg('choose_rate') + ': ');

  wTariffsSubscription.updateContent(subscription.tariffs);
  wTariffsSubscription.tariffsList.focus();

});

wTariffsSubscription.addListener('hide', function () {
  SupportInfo.hide();
  wTariffsSubscription.componentToFocus.focus();
});

module.exports = wTariffsSubscription;

},{"core/animate":14,"core/api":15,"core/app":16,"core/components/label":22,"core/components/list":23,"core/components/widget":30,"core/dom":31,"core/lib/helpFunctions":34,"core/paymentModel":41,"core/router":45,"core/tools/subscriptionService":54,"ui/header":120,"vendor/aura/keys":133,"widgets/background/background":141,"widgets/loader":149,"widgets/menu-left":150,"widgets/support-info":163}],161:[function(require,module,exports){
'use strict';

var Widget = require('core/components/widget'),
  animate = require('core/animate'),
  dom = require('core/dom'),
  Panel = require('core/components/panel'),
  List = require('core/components/list'),
  Loader = require('widgets/loader'),
  app = require('core/app'),
  paymentModel = require('core/paymentModel'),
  api = require('core/api'),
  router = require('core/router'),
  keys = require('vendor/aura/keys'),
  helpFunctions = require('core/lib/helpFunctions'),
  Header = require('ui/header'),
  SupportInfo = require('widgets/support-info'),
  PopUpPincode = require('widgets/popup/popup-pincode'),
  arrowsWidget = require('widgets/mouse-arrows'),
  TvodDtoTariffs;


TvodDtoTariffs = new Widget({
  $node: dom.tag('div', {id: 'widgetPaidTariffs'}),
  visible: false,
  append_to_body: true,
  events: {
    show: function() {
      arrowsWidget.hideArrows();
      arrowsWidget.disabled = true;
    },
    hide: function() {
      arrowsWidget.disabled = false;
    }
  },
  back_button: {
    'clickCallBack': function() {
      TvodDtoTariffs.hide();
    }
  }
});

TvodDtoTariffs.$focusItem = null;

TvodDtoTariffs.header = new Header('');
TvodDtoTariffs.header.shadeOn();
TvodDtoTariffs.add(TvodDtoTariffs.header);


var defaultTariffText = new Panel({
  $node: dom.add(dom.tag('div', {
    id: 'defaultTariffText'
  })),
  focusable: false
});

TvodDtoTariffs.paidTariffsList = new List({
  $node: dom.tag('div', {id: 'paidTariffsContainer'}),
  type: List.prototype.TYPE_HORIZONTAL,
  focusIndex: 0,
  cycle: false,
  visible: true,
  events: {
    'mousewheel': function (event) {
    },
    'mouseover': function (data) {
      this.focus();
      this.focusItem(data.$item, {no_emit: true});
    },
    'focus': function (data) {
      this.$focusItem.list.focus();
    },
    'blur': function (data) {
    },
    'focus:item': function (data) {
      defaultTariffText.hide();
      data.$curr.list.focus();
    },
    'click:item': function (data) {
    }
  },
  render: function ($item, data) {
    var sectionTitle = data.vodRule == 'dto' ? i18nMgg('buy_noun') : i18nMgg('rent_noun');


    $item.classList.add('tariffList');
    $item.tariffTitle = dom.tag('div', {
      className: 'tariffTitle'
    }, sectionTitle);

    var tariffs = data.tariffs;
    for (var i = 0; i < tariffs.length; i++) {
      tariffs[i].currency = data.currency;
      tariffs[i].vodRule = data.vodRule;
      tariffs[i].isPromoCode = data.isPromoCode;

    }

    var focusIndex = 0;
    tariffs.some(function (item, index) {
      if (item.tariff_id == TvodDtoTariffs.chosenTariffID) {
        focusIndex = index;
      }
    });

    $item.list = new List({
      type: List.prototype.TYPE_HORIZONTAL,
      data: tariffs,
      size: tariffs.length,
      className: 'tariffSection',
      focusIndex: focusIndex,
      cycle: false,
      visible: true,
      keys: {
        RETURN: function () {
          TvodDtoTariffs.backButton.emit('click');
        },
        UP: function () {
          if (!TvodDtoTariffs.paidTariffsList.isOneTariff) {
            defaultTariffText.show();
          }
          TvodDtoTariffs.backButton.focusButton(this);
        }
      },
      events: {
        'focus': function () {
          defaultTariffText.hide();

        },
        'mouseover': function (data) {
          this.focus();
          this.focusItem(data.$item, {no_emit: true});
        },
        'overflow': function (data) {
          if (data.direction === keys.RIGHT) {
            if (TvodDtoTariffs.paidTariffsList.$focusItem.index < (TvodDtoTariffs.paidTariffsList.size - 1)) {
              TvodDtoTariffs.paidTariffsList.move(keys.RIGHT);

              TvodDtoTariffs.paidTariffsList.$focusItem.list.focusIndex(0);
            }
          } else if (data.direction === keys.LEFT) {
            if (TvodDtoTariffs.paidTariffsList.$focusItem.index > 0) {
              TvodDtoTariffs.paidTariffsList.move(keys.LEFT);
              TvodDtoTariffs.paidTariffsList.$focusItem.list.focusIndex(TvodDtoTariffs.paidTariffsList.$focusItem.list.size);
            } else {
              TvodDtoTariffs.paidTariffsList.blur();
              if (!TvodDtoTariffs.paidTariffsList.isOneTariff) {
                defaultTariffText.show();
              }
              TvodDtoTariffs.backButton.focusButton(this);
            }
          }

          TvodDtoTariffs.paidTariffsList.$focusItem.list.emit('focus:item', {
            $curr: TvodDtoTariffs.paidTariffsList.$focusItem.list.$focusItem
          });

        },
        'click:item': function (data) {

          paymentModel.set('title', TvodDtoTariffs.movieTitle);
          paymentModel.set('tariffTitle', data.$item.tariffTitle);
          paymentModel.set('vodRules', data.$item.data.vodRule);
          paymentModel.set('tariffID', data.$item.data.tariff_id);
          paymentModel.set('price', data.$item.data.price);
          paymentModel.set('period', data.$item.data.period);
          paymentModel.set('qualityName', data.$item.data.quality.group);
          paymentModel.set('isPromoCode', data.$item.data.is_promocode);
          paymentModel.defaultEvents.setSubtitleText();

          TvodDtoTariffs.nextRenderData = {
            title: paymentModel.get('title'),
            tariffInfo: data.$item.data,
            subTitle: paymentModel.get('subTitle')
          };

          api.PC_Check().then(function (data) {
            var pcInfo = app.dataStorage.pc_info;
            var nowTime = Math.floor(new Date().getTime() / 1000);
            var pcCookieTime = nowTime - mainConfigMgg.parentalControlTimer;
            var pcLifetime = app.dataStorage.configuration.parental_controls_lifetime;

            if(pcInfo.status &&
              (mainConfigMgg.parentalControlTimer == -1 || pcCookieTime > pcLifetime) &&
              pcInfo.purchase_restriction) {
              PopUpPincode.show({
                title: paymentModel.get('title'),
                subTitle: paymentModel.get('subTitle'),
                pinCode: pcInfo.code,
                type: 'payment-pin',
                text: i18nMgg('pc_payment_pin'),
                buttonText: i18nMgg('next')
              });
            }else{

              TvodDtoTariffs.hide();
              router.navigate('pagePaymentChoice', [
                TvodDtoTariffs.nextRenderData
              ]);
            }
          });


        }
      },
      render: function ($item, data) {
        $item.classList.add('tariffItem');

        $item.qualityName = dom.tag('div', {
          className: 'quality-name'
        });
        $item.period = dom.tag('div', {
          className: 'period'
        });
        $item.price = dom.tag('div', {
            className: 'price-info'
          },
          $item.value = dom.tag('span', {
            className: 'value'
          }),
          $item.currency = dom.tag('span', {
            className: 'currency'
          })
        );
        $item.description = dom.tag('div', {className: 'description-info'},
          $item.qualityText = dom.tag('span', {}),
          $item.vodDescription = dom.tag('span', {}),
          $item.tariffPeriodText = dom.tag('span', {
            className: 'image-period'
          })
        );

        var descriptionData = getDescriptionNodeText(data);

        $item.qualityName.textContent = data.quality.group;
        $item.period.textContent = descriptionData.tariffPeriodTextFor;
        $item.tariffTitle = descriptionData.tariffPeriodTextFor;
        $item.value.textContent = data.price;
        $item.currency.textContent = data.currency;

        $item.qualityText.innerHTML = descriptionData.qualityText;
        $item.vodDescription.innerHTML = descriptionData.vodDescription;
        $item.tariffPeriodText.innerHTML = descriptionData.tariffPeriodText;


        $item.appendChild($item.qualityName);
        $item.appendChild($item.period);
        $item.appendChild($item.price);
        $item.appendChild($item.description);

      }
    });
    $item.appendChild($item.tariffTitle);
    $item.appendChild($item.list.$node);
  }

});

var getDescriptionNodeText = function (data) {

  var quality = data.quality.group.toLowerCase();
  var vodRule = data.vodRule;
  var period = data.period;
  var qualityDescription, vodDescription, tariffPeriodText;

  if (quality == 'sd') {
    qualityDescription = i18nMgg('qulity_' + quality + '_text_1') + ' <br/> ' + i18nMgg('qulity_' + quality + '_text_2');
  } else {
    qualityDescription = i18nMgg('qulity_' + quality + '_text_1');
  }

  if (vodRule == 'tvod') {
    tariffPeriodText = period + ' ' + helpFunctions.getValueText(period, 'day');
    vodDescription = i18nMgg('qulity_start_text_1') + ' ' + tariffPeriodText + '<br/>' + ' ' + i18nMgg('qulity_start_text_2');
  } else {
    vodDescription = i18nMgg('qulity_dto_text_1') + ' <br/> ' + i18nMgg('qulity_dto_text_2');
    tariffPeriodText = i18nMgg('forever');
  }

  return {
    qualityText: qualityDescription,
    vodDescription: vodDescription,
    tariffPeriodText: tariffPeriodText,
    tariffPeriodTextFor: vodRule == 'tvod' ? i18nMgg('na_for') + ' ' + tariffPeriodText : tariffPeriodText
  };
};


TvodDtoTariffs.add(TvodDtoTariffs.paidTariffsList, defaultTariffText);


TvodDtoTariffs.updateContent = function (paymentInfo) {
  var focusIndex = 0;

  if(TvodDtoTariffs.chosenTariffID){
    paymentInfo.some(function (item, index) {
      item.tariffs.some(function(itemInner, innerIndex){
          if(itemInner.tariff_id == TvodDtoTariffs.chosenTariffID){
            focusIndex = index;
          }
      });
    });
  }

  TvodDtoTariffs.paidTariffsList.$node.innerHTML = '';
  TvodDtoTariffs.paidTariffsList.init({
    data: paymentInfo,
    size: paymentInfo.length,
    focusIndex: focusIndex
  });
};

TvodDtoTariffs.addListener('show', function (data) {
 // Loader.show();
  TvodDtoTariffs.movieTitle = data.movieData.title;
  var paymentInfo = data.movieData.purchase_info;
  var tariffInfo = {};
  var paymentList = [];
  TvodDtoTariffs.page = data.page;
  TvodDtoTariffs.chosenTariffID = data.tariffID;

  for (var n in paymentInfo) {
    var subscription = paymentInfo[n].subscriptions[0];
    tariffInfo = {
      vodRule: n,
      subscriptionID: subscription.subscription_id,
      tariffs: subscription.tariffs,
      currency: subscription.currency,
      currencyID: subscription.currency_id //TODO-Inna remove before deploy
    };
    paymentList.push(tariffInfo);
  }


  paymentModel.set('vodRulesType', 'paid');
  paymentModel.set('title', TvodDtoTariffs.movieTitle);
  paymentModel.set('currency', paymentList[0].currency);
  paymentModel.set('currencyID', paymentList[0].currencyID);


  TvodDtoTariffs.header.setTitle(TvodDtoTariffs.movieTitle);

  if (paymentList.length == 1 && paymentList[0].tariffs.length == 1) {
    TvodDtoTariffs.paidTariffsList.$node.classList.add('one_tariff');
    TvodDtoTariffs.paidTariffsList.isOneTariff = true;
  } else {
    TvodDtoTariffs.paidTariffsList.$node.classList.remove('one_tariff');
    TvodDtoTariffs.paidTariffsList.isOneTariff = false;
  }

  defaultTariffText.$node.innerHTML = i18nMgg('qulity_choose_text_1') + '<br/>' + i18nMgg('qulity_choose_text_2');
  TvodDtoTariffs.updateContent(paymentList);
  TvodDtoTariffs.paidTariffsList.focus();
  SupportInfo.show({type: 'payment'});

  if(TvodDtoTariffs.chosenTariffID){
    TvodDtoTariffs.paidTariffsList.$focusItem.list.emit('click:item',
      {$item:TvodDtoTariffs.paidTariffsList.$focusItem.list.$focusItem }
    );
   // Loader.hide();
  }else{
    Loader.hide();
  }

  PopUpPincode.addListener('hide', hidePinPopUpCallback);
  PopUpPincode.addListener('correctPinPayment', correctPinCallback);
});

TvodDtoTariffs.addListener('hide', function () {
  SupportInfo.hide();
  TvodDtoTariffs.page.$$lastFocus.focus();
  TvodDtoTariffs.page.show({data:[{navigateBack: true}]});
  PopUpPincode.removeListener('hide', hidePinPopUpCallback);
  PopUpPincode.removeListener('correctPinPayment', correctPinCallback);
});

function hidePinPopUpCallback() {
  TvodDtoTariffs.paidTariffsList.focus();
}

function correctPinCallback() {
  TvodDtoTariffs.hide();
  router.navigate('pagePaymentChoice', [
    TvodDtoTariffs.nextRenderData
  ]);
}


module.exports = TvodDtoTariffs;

},{"core/animate":14,"core/api":15,"core/app":16,"core/components/list":23,"core/components/panel":26,"core/components/widget":30,"core/dom":31,"core/lib/helpFunctions":34,"core/paymentModel":41,"core/router":45,"ui/header":120,"vendor/aura/keys":133,"widgets/loader":149,"widgets/mouse-arrows":152,"widgets/popup/popup-pincode":158,"widgets/support-info":163}],162:[function(require,module,exports){
'use strict';

var id = 'widgetVideoRestrictions',
    Widget = require('core/components/widget'),
    dom = require('core/dom'),
    app = require('core/app'),
    Button = require('core/components/button'),
    helpFunctions = require('core/lib/helpFunctions'),
    Header = require('ui/header'),
    router = require('core/router'),
    Label = require('core/components/label'),
    SupportInfo = require('widgets/support-info'),
    wVideoRestrictions;

wVideoRestrictions = new Widget({
    $node: document.getElementById(id),
    //  className: 'language-switcher',
    visible: false,
    back_button: {
        'clickCallBack': function() {
            TvodDtoTariffs.hide();
        }
    }
});


wVideoRestrictions.header = new Header('');
wVideoRestrictions.header.shadeOn();
wVideoRestrictions.add(wVideoRestrictions.header);


wVideoRestrictions.restrictionButton = new Button({
    $node: "restriction-invalid-button",
    visible: true,
    focusable: true,
    events: {
        'click': function (data) {
            wVideoRestrictions.hide();

        }
    },
    keys: {
        UP: function () {
            wVideoRestrictions.backButton.focusButton(this);
        },
        LEFT: function () {
            wVideoRestrictions.backButton.focusButton(this);
        },
        RIGHT: function () {
            wVideoRestrictions.noButton.focus();
        }
    }
});

wVideoRestrictions.restrictionText = new Label({
    $node: 'restriction-invalid-text'
});

wVideoRestrictions.restrictionTitle = new Label({
    $node: 'restriction-invalid-title'
});

wVideoRestrictions.addListener('show', function (data) {

    wVideoRestrictions.header.setTitle(data.title);

    wVideoRestrictions.restrictionTitle.text(i18nMgg('error_invalid_title'));
    wVideoRestrictions.restrictionText.text(i18nMgg('error_invalid_text'));
    wVideoRestrictions.restrictionButton.setValue(i18nMgg('back_confirm'));

    wVideoRestrictions.restrictionButton.focus();
    SupportInfo.show({type: 'payment'});
});

wVideoRestrictions.addListener('hide', function () {
    SupportInfo.hide();
    router.back();
});

module.exports = wVideoRestrictions;

},{"core/app":16,"core/components/button":19,"core/components/label":22,"core/components/widget":30,"core/dom":31,"core/lib/helpFunctions":34,"core/router":45,"ui/header":120,"widgets/support-info":163}],163:[function(require,module,exports){
'use strict';

var Widget = require('core/components/widget'),
  dom = require('core/dom'),
  Panel = require('core/components/panel'),
  app = require('core/app'),
  api = require('core/api'),
  SupportInfo;


SupportInfo = new Widget({
  $node: dom.tag('div', {id: 'widgetSupportInfo'}),
  visible: false,
  append_to_body: true
});


SupportInfo.userID = new Panel({
  $node: dom.add(dom.tag('div', {
    className: 'user-id'
  })),
  focusable: false
});

SupportInfo.supportNumber = new Panel({
  $node: dom.add(dom.tag('div', {
    className: 'support-number'
  })),
  focusable: false
});

SupportInfo.supportVersion = new Panel({
  $node: dom.add(dom.tag('div', {
    className: 'support-version'
  })),
  focusable: false
});

SupportInfo.supportEmail = new Panel({
  $node: dom.add(dom.tag('div', {
    className: 'support-email'
  })),
  focusable: false
});


SupportInfo.add(SupportInfo.userID);
SupportInfo.add(SupportInfo.supportVersion);
SupportInfo.add(SupportInfo.supportNumber);
SupportInfo.add(SupportInfo.supportEmail);

SupportInfo.addListener('show', function (options) {
  var version = mainConfigMgg.app.version;
  var data = app.dataStorage;
  var support_phones = '';
  var support_email = '';
  var user_id = '';
  if(data.configuration && data.configuration.support_info) {
    if(data.configuration.support_info.phones && data.configuration.support_info.phones.length) {
      support_phones = data.configuration.support_info.phones[0];
    }
    if(data.configuration.support_info.email) {
      support_email = data.configuration.support_info.email;
    }
  }
  if(data.user && data.user.user_id) {
    user_id = data.user.user_id.toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1 ");
  }

  if (options && options.type == 'profile') {
    SupportInfo.supportVersion.$node.textContent = 'v ' + version;
    SupportInfo.userID.$node.textContent = i18nMgg('your_tv_id') + ': ' + user_id;
    if (support_phones) {
      SupportInfo.supportNumber.$node.textContent = support_phones;
    }
    SupportInfo.supportEmail.$node.textContent = support_email;
  }
  if (options && options.type == 'payment') {
    if (options.mobilePayment) {
      SupportInfo.userID.$node.classList.add('mobile');
    } else {
      SupportInfo.userID.$node.classList.remove('mobile');
    }
    SupportInfo.supportVersion.$node.textContent = 'v ' + version;
    SupportInfo.userID.$node.textContent = i18nMgg('your_tv_id') + ': ' + user_id;
    if (support_phones) {
      SupportInfo.supportEmail.$node.textContent = support_phones;
      SupportInfo.supportNumber.$node.textContent = i18nMgg('support_number');
    }else{
      SupportInfo.supportEmail.$node.textContent = support_email;
    }
  }
});

module.exports = SupportInfo;

},{"core/api":15,"core/app":16,"core/components/panel":26,"core/components/widget":30,"core/dom":31}]},{},[56]);
