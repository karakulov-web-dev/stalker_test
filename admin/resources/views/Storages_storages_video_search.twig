{% extends 'layout.twig' %}
{% import '/macro/iptw_macro2.twig' as main_macro %}
{% import '/macro/iptw_macro.twig' as main_macros %}
{% set title = ('Storage'|trans ~ ': ' ~ 'video search'|trans) | trans %}

{% block content %}
    <div id="iptv_list">
        <div class="row">
            <form class="form-horizontal" role="form" id="video_search_form" action="{{ app.request.baseUrl }}/{{ app.controller_alias }}/storages-video-search-json" method="POST" target="_blank">
                <div class="col-sm-12 col-xs-12 col-md-12">
                    <div class="col-sm-2">
                        {% if attribute(app, 'dropdownStorages') is defined %}
                            {{ main_macro.get_dropdown_attribute(app['dropdownStorages'], 'on_storages', 'Available on the serves'|trans, 6, 1, 'true') }}
                        {% endif %}
                    </div>
					<div class="col-sm-2 col-xs-2">
                        {% if attribute(app, 'dropdownStorages') is defined %}
                           {{ main_macro.get_dropdown_attribute(app['dropdownStorages'], 'not_on_storages', 'Not available on the servers'|trans, 6, 1, 'true') }}
                        {% endif %} 
                    </div>
					
					 <div class="col-sm-2">
                        <label class="col-xs-8 col-sm-8 col-md-5">{{ 'Quantity of the storages'|trans }}</label>
                        <div class="col-xs-4 col-sm-4 col-md-3 col-lg-3  no-padding">
                            <input type="hidden" name="textview" value="0">
                            <input class="form-control" type="text" name="total_storages" id="total_storages">
                        </div>
                        <br><br>
                    </div>

					<div class="col-sm-2 ">
                        {{ main_macro.get_dropdown_attribute(app['dropdownQuality'], 'quality', 'Video quality'|trans, 4, 0, 'true') }}
                       
                    </div>
					<div class="col-sm-1 ">
                     {{ main_macro.get_dropdown_attribute(app['dropdownStatus'], 'status', 'Status'|trans, 4, 0, 'true') }}
					</div>
					
				<div class="col-sm-3  pull-right">
                   
					 <a class="btn btn-default pull-right" id="video_search_submit">{{ 'Search'|trans }}</a>
                        <button class="btn btn-default pull-right" id="textshow" type="submit" form="video_search_form">{{ 'In text format'|trans }}</button>
                 
                </div>
                </div>
      
            </form>
        </div>
        
        <div class="row">
            <div class="col-xs-12 col-sm-12 col-md-12 col-lg-12">
                <div class="box">
                    {% if attribute(app, 'dropdownAttribute') is defined %}
                    {{ main_macros.get_dropdown_attribute(app['dropdownAttribute']) }}
                    {% endif %}
                    <div class="box-content">
                        <div class="box-content no-padding">
                            <div class="row">
                                <div class="dataTables_processing"></div>
                                <table class="table  table-hover table-datatable" id="datatable-1">
                                    {% if attribute(app, 'dropdownAttribute') is defined %}
                                        {{ main_macros.get_datatable_head(app['dropdownAttribute']) }}
                                    {% endif %}
                                    <tbody>
                                    {% if attribute(app, 'allData') is defined %}
                                        <!-- Start: list_row -->
                                        {% for item in app.allData %}
                                            <tr>
                                                <td>{{ item.id }}</td>
                                                <td>{{ item.path }}</td>
                                                <td>{{ item.name }}</td>
                                                <td>{{ item.hd }}</td>
                                                <td>{{ item.on_storages }}</td>
                                                <td>{{ item.count }}</td>
                                                <td>{{ item.month_counter }}</td>
                                                <td>{{ item.last_played|date('M d, Y H:i') }}</td>
                                                <td>{% if item.accessed %}<span class="">{{ 'Published'|trans }}</span>{% elseif attribute(item, 'tasks') is defined and item.tasks > 0 %} <span class="">{{ 'Scheduled'|trans }}</span>{% else %}{{ 'Unpublished'|trans }}{% endif %} </td>
                                            </tr>
                                        {% endfor %}
                                        <!-- End: list_row -->
                                    {% endif %}
                                    </tbody>
                                </table>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script type="text/javascript" defer>

        function TestTable1() {
            $('#datatable-1').on('xhr.dt', function (e, settings, json) {
                if (typeof (json.data) == 'object' && json.data.length >0) {
                    var date;
                    for (var i in json.data) {
                        var id = json.data[i].id;
                        if (json.data[i].accessed == 1) {
                            json.data[i].accessed = '<span class="">{{ 'Published'|trans }}</span>';
                        } else if (typeof(json.data[i].tasks) != 'undefined' && json.data[i].tasks.toString() != 0){
                            json.data[i].accessed = '<span class="">{{ 'Scheduled'|trans }}</span>';
                        } else {
                            json.data[i].accessed = '{{ 'Unpublished'|trans }}';
                        }
                        date = json.data[i]['last_played'];
                        if (date > 0) {
                            date = new Date(date * 1000);
                            json.data[i]['last_played'] = date.toLocaleFormat("%b %d, %Y %H:%M");
                        }
                    }
                }
            }).dataTable({
                "processing": true,
                "serverSide": true,
                "ajax": {
                    "url": "{{ app.request.baseUrl }}/{{ app.controller_alias }}/storages-video-search-json",
                    "data": function (d) {
                        var params = $.parseParams(window.location.href.split('?')[1] || ''); //window.location.href.split('?')[1] || '' 
                        for (var i in params) {
                            d[i] = params[i];
                        }
                        $('#video_search_form input').each(function(){
                            if (typeof(d['filters']) == 'undefined') {
                                d["filters"] = {};
                            }
                            var name = this.name.replace('[', '').replace(']', '');
                            if (this.type.toLowerCase() == 'checkbox') {
                                 if ($(this).is(":checked")){
                                    if (typeof(d["filters"][name]) == 'undefined') {
                                        d["filters"][name] = [];     
                                    }
                                    d["filters"][name].push(this.value);         
                                 }
                            }else if (this.value) {
                                d["filters"][this.name] = this.value;         
                            }
                        });
                    }
                },
                "deferLoading": [ {{ app.recordsFiltered }}, {{ app.totalRecords }} ],
                "language": {
                    "url": "{{ app.datatable_lang_file }}"
                },
                "columns": [
                {% if attribute(app, 'dropdownAttribute') is defined%}
                    {% for item in app.dropdownAttribute %}    
                    {"data": "{{ item.name }}"},
                    {% endfor %}
                {% endif %}
                ],
                "bFilter": true,
                "bPaginate": true,
				"fnDrawCallback": function() {  
					var paginateRow = $(this).parent().prev().children('div.dataTables_paginate');
					var pageCount = Math.ceil((this.fnSettings().fnRecordsDisplay()) / this.fnSettings()._iDisplayLength);
					if (pageCount > 1)  {$("#datatable-1_paginate").css("display", "block");} else { $("#datatable-1_paginate").css("display", "none");  }
				},
                "bInfo": true,
                "columnDefs": [
               
                ]
            }).prev('.dataTables_processing').hide('');
            $("#attribute_set input[type='checkbox']").each(function(index){
                $("#datatable-1").dataTable().fnSetColumnVis( index - 1, $(this).prop('checked') );
            });
        }

        function yelp() {
            $(document).ready(function () {
                
                $(document).on('change', "#not_on_storages :checkbox, #on_storages :checkbox, #not_on_storages li:first-of-type label, #on_storages li:first-of-type label", function(e){
                    var prefix = ($(this).closest('div.attribute_set').attr('id') == "on_storages"? "not_": "" );
                    if (($(this).val() != 'all')) {
                        var filter = ($(this).val() != 'all') ? "[value='" + $(this).val() +"']": '';
                        var oponent = "#" + prefix + "on_storages :checkbox";
                        if ($(this).is(':checked') && $(oponent + filter).is(':checked')) {
                            $(oponent + filter).prop('checked', false).removeAttr('checked');
                            $(oponent + "[value='all']").prop('checked', false).removeAttr('checked');
                        }
                    } else {
                        $("#" + prefix +'on_storages ul li:first-of-type label').click();
                    }
                });
                
                $(document).on('click  mousedown mouseup', "#not_on_storages ul li:first-of-type label, #on_storages ul li:first-of-type label", function(e){
                    if ($(this).find(":checkbox").is(":checked")) {
                        var prefix = ($(this).closest('div.attribute_set').attr('id') == "on_storages"? "not_": "" );
                        $("#"+prefix+"on_storages :checkbox").prop('checked', false).removeAttr('checked');
                    }
                });
                
                $(document).on('click', '#video_search_submit', function(){manageList();});
                $(document).on('submit', '#video_search_form', function(e){
                    $("#video_search_form").find('input[name="textview"]').val(1);
                    setTimeout(function(){$("#video_search_form").find('input[name="textview"]').val(0);}, 1000);
                });
                
                $(document).on('click', "a.main_ajax[disabled!='disabled']", function (e) {
                    e.stopPropagation();
                    e.preventDefault();
                    $("#modalbox").data('complete', 0);
                    showModalBox();
                    var sendData = $(this).data();
                    ajaxPostSend($(this).attr('href'), sendData, false, false, true);
                    $(this).closest('div.open').removeClass('open');
                    return false;
                });
                
                        
                $(document).on('click', "#modalbox, #modalbox a.close-link, #modalbox a.close-link *", function(e){
                    if (e.currentTarget != e.target) {
                        return;
                    }
                    e.stopPropagation();
                    e.preventDefault();
                    if ($("#modalbox").data('complete') && $("#modalbox").data('complete') == 1) {
                        closeModalBox();
                    } else {
                        for(i=0;i<3;i++) {
                            $('#modalbox > div').fadeTo('slow', 0.5).fadeTo('slow', 1.0);
                        }
                    }
                    return false;
                });

                LoadDataTablesScripts(TestTable1);
            });
        }

        document.addEventListener("DOMContentLoaded", yelp, false);
              
        var manageList = function (obj) {
            $('#datatable-1').DataTable().ajax.reload();
            $("#modalbox").data('complete', 1);
            $('#modalbox').find('.devoops-modal-inner').html('<span>{{ 'Finished'|trans }}!</span>');
        }
        
        var listMsg = function(data){
            if (typeof(data.msg) != 'undefined' && data.msg) {
                alert(data.msg);
            }
            manageList(data);
        }
        
        var listMsgError = function(data){
            if (typeof(data.msg) != 'undefined' && data.msg) {
                alert(data.msg);
            }
            errAction();
        }
        
        function closeModalBox(){
            $("#modalbox").hide();
            $('#modalbox').find('.modal-header-name span').empty();
            $('#modalbox').find('.devoops-modal-inner').empty();
            $('#modalbox').find('.devoops-modal-bottom').empty();
        }
        
        function showModalBox(){
            $('#modalbox').find('.modal-header-name span').text('{{ 'Wait'|trans }}...');
            $('#modalbox').find('.devoops-modal-inner').html('<span>{{ 'Request is being processed'|trans }}...</span>');
            $("#modalbox").show();
        }
               
        var errAction = function(){
            $('#modalbox').find('.devoops-modal-inner').html('<span>{{ 'Failed'|trans }}!</span>');
            $("#modalbox").data('complete', 1);
        }

    </script>
{% endblock %}